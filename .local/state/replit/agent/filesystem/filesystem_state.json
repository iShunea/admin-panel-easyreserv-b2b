{"file_contents":{"src/sections/components-overview/tree-view/RichObjectTreeView.jsx":{"content":"// material-ui\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2 } from 'iconsax-react';\n\nconst data = {\n  id: 'root',\n  name: 'Parent',\n  children: [\n    {\n      id: '1',\n      name: 'Child - 1'\n    },\n    {\n      id: '3',\n      name: 'Child - 3',\n      children: [\n        {\n          id: '4',\n          name: 'Child - 4'\n        }\n      ]\n    }\n  ]\n};\n\n// ==============================|| TREE VIEW - RICH OBJECT ||============================== //\n\nexport default function RichObjectTreeView() {\n  const renderTree = (nodes) => (\n    <TreeItem key={nodes.id} itemId={nodes.id} label={nodes.name}>\n      {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n    </TreeItem>\n  );\n\n  const richTreeviewCodeString = `// RichObjectTreeView.tsx\n<SimpleTreeView\n  aria-label=\"rich object\"\n  slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n  defaultExpandedItems={['root']}\n  sx={{ height: 180, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n>\n  {renderTree(data)}\n</SimpleTreeView>`;\n\n  return (\n    <MainCard title=\"Rich Object\" codeString={richTreeviewCodeString}>\n      <SimpleTreeView\n        aria-label=\"rich object\"\n        slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n        defaultExpandedItems={['root']}\n        sx={{ height: 180, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n      >\n        {renderTree(data)}\n      </SimpleTreeView>\n    </MainCard>\n  );\n}\n","size_bytes":1556},"src/components/cards/statistics/HoverSocialCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// ===========================|| STATISTICS - HOVER SOCIAL CARD ||=========================== //\n\nexport default function HoverSocialCard({ primary, secondary, iconPrimary, color }) {\n  const IconPrimary = iconPrimary;\n  const primaryIcon = iconPrimary ? <IconPrimary variant=\"Bold\" size={52} /> : null;\n\n  return (\n    <Card\n      elevation={0}\n      sx={{\n        background: color,\n        position: 'relative',\n        color: '#fff',\n        '&:hover svg': {\n          opacity: 1,\n          transform: 'scale(1.1)'\n        }\n      }}\n    >\n      <CardContent>\n        <Box\n          sx={{\n            position: 'absolute',\n            right: 15,\n            top: 25,\n            color: '#fff',\n            '& svg': {\n              opacity: 0.4,\n              transition: 'all .3s ease-in-out'\n            }\n          }}\n        >\n          {primaryIcon}\n        </Box>\n        <Grid container spacing={0}>\n          <Grid item xs={12}>\n            <Typography variant=\"h3\" color=\"inherit\">\n              {secondary}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"inherit\">{primary}</Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n}\n\nHoverSocialCard.propTypes = { primary: PropTypes.any, secondary: PropTypes.any, iconPrimary: PropTypes.any, color: PropTypes.any };\n","size_bytes":1635},"src/pages/apps/customer/card.jsx":{"content":"import { useState, useEffect } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Slide from '@mui/material/Slide';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport Pagination from '@mui/material/Pagination';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport EmptyUserCard from 'components/cards/skeleton/EmptyUserCard';\nimport { DebouncedInput } from 'components/third-party/react-table';\nimport CustomerCard from 'sections/apps/customer/CustomerCard';\nimport CustomerModal from 'sections/apps/customer/CustomerModal';\n\nimport usePagination from 'hooks/usePagination';\nimport { useGetCustomer } from 'api/customer';\n\n// assets\nimport { Add, SearchNormal1 } from 'iconsax-react';\n\n// constant\nconst allColumns = [\n  {\n    id: 1,\n    header: 'Default'\n  },\n  {\n    id: 2,\n    header: 'Customer Name'\n  },\n  {\n    id: 3,\n    header: 'Email'\n  },\n  {\n    id: 4,\n    header: 'Contact'\n  },\n  {\n    id: 5,\n    header: 'Age'\n  },\n  {\n    id: 6,\n    header: 'Country'\n  },\n  {\n    id: 7,\n    header: 'Status'\n  }\n];\n\nfunction dataSort(data, sortBy) {\n  return data.sort(function (a, b) {\n    if (sortBy === 'Customer Name') return a.name.localeCompare(b.name);\n    if (sortBy === 'Email') return a.email.localeCompare(b.email);\n    if (sortBy === 'Contact') return a.contact.localeCompare(b.contact);\n    if (sortBy === 'Age') return b.age < a.age ? 1 : -1;\n    if (sortBy === 'Country') return a.country.localeCompare(b.country);\n    if (sortBy === 'Status') return a.status.localeCompare(b.status);\n    return a;\n  });\n}\n\n// ==============================|| CUSTOMER - CARD ||============================== //\n\nexport default function CustomerCardPage() {\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const { customers: lists } = useGetCustomer();\n\n  const [sortBy, setSortBy] = useState('Default');\n  const [globalFilter, setGlobalFilter] = useState('');\n  const [userCard, setUserCard] = useState([]);\n  const [page, setPage] = useState(1);\n  const [customerLoading, setCustomerLoading] = useState(true);\n  const [customerModal, setCustomerModal] = useState(false);\n\n  const handleChange = (event) => {\n    setSortBy(event.target.value);\n  };\n\n  // search\n  useEffect(() => {\n    setCustomerLoading(true);\n    if (lists && lists.length > 0) {\n      const newData = lists.filter((value) => {\n        if (globalFilter) {\n          return value.name.toLowerCase().includes(globalFilter.toLowerCase());\n        } else {\n          return value;\n        }\n      });\n      setUserCard(dataSort(newData, sortBy).reverse());\n      setCustomerLoading(false);\n    }\n    // eslint-disable-next-line\n  }, [globalFilter, lists, sortBy]);\n\n  const PER_PAGE = 6;\n\n  const count = Math.ceil(userCard.length / PER_PAGE);\n  const _DATA = usePagination(userCard, PER_PAGE);\n\n  const handleChangePage = (e, p) => {\n    setPage(p);\n    _DATA.jump(p);\n  };\n\n  return (\n    <>\n      <Box sx={{ position: 'relative', marginBottom: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\">\n          <Stack\n            direction={matchDownSM ? 'column' : 'row'}\n            sx={{ width: '100%' }}\n            spacing={1}\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <DebouncedInput\n              value={globalFilter ?? ''}\n              onFilterChange={(value) => setGlobalFilter(String(value))}\n              placeholder={`Search ${userCard.length} records...`}\n              startAdornment={<SearchNormal1 size={18} />}\n            />\n            <Stack direction={matchDownSM ? 'column' : 'row'} alignItems=\"center\" spacing={1}>\n              <FormControl sx={{ m: '8px !important', minWidth: 120 }}>\n                <Select\n                  value={sortBy}\n                  onChange={handleChange}\n                  displayEmpty\n                  inputProps={{ 'aria-label': 'Without label' }}\n                  renderValue={(selected) => {\n                    if (!selected) {\n                      return <Typography variant=\"subtitle1\">Sort By</Typography>;\n                    }\n\n                    return <Typography variant=\"subtitle2\">Sort by ({sortBy})</Typography>;\n                  }}\n                >\n                  {allColumns.map((column) => {\n                    return (\n                      <MenuItem key={column.id} value={column.header}>\n                        {column.header}\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n              <Button variant=\"contained\" onClick={() => setCustomerModal(true)} size=\"large\" startIcon={<Add />}>\n                Add Customer\n              </Button>\n            </Stack>\n          </Stack>\n        </Stack>\n      </Box>\n      <Grid container spacing={3}>\n        {!customerLoading && userCard.length > 0 ? (\n          _DATA.currentData().map((user, index) => (\n            <Slide key={index} direction=\"up\" in={true} timeout={50}>\n              <Grid item xs={12} sm={6} lg={4}>\n                <CustomerCard customer={user} />\n              </Grid>\n            </Slide>\n          ))\n        ) : (\n          <EmptyUserCard title={customerLoading ? 'Loading...' : 'You have not created any customer yet.'} />\n        )}\n      </Grid>\n      <Stack spacing={2} sx={{ p: 2.5 }} alignItems=\"flex-end\">\n        <Pagination\n          sx={{ '& .MuiPaginationItem-root': { my: 0.5 } }}\n          count={count}\n          size=\"medium\"\n          page={page}\n          showFirstButton\n          showLastButton\n          variant=\"combined\"\n          color=\"primary\"\n          onChange={handleChangePage}\n        />\n      </Stack>\n      <CustomerModal open={customerModal} modalToggler={setCustomerModal} />\n    </>\n  );\n}\n","size_bytes":6047},"src/sections/apps/kanban/Board/Items.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme, alpha } from '@mui/material/styles';\nimport Menu from '@mui/material/Menu';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { Draggable } from '@hello-pangea/dnd';\n\n// project-imports\nimport EditStory from '../Backlogs/EditStory';\nimport AlertItemDelete from './AlertItemDelete';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { openSnackbar } from 'api/snackbar';\nimport { deleteItem, handlerKanbanDialog, useGetBacklogs } from 'api/kanban';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Hierarchy } from 'iconsax-react';\n\n// item drag wrapper\nfunction getDragWrapper(isDragging, draggableStyle, theme, radius) {\n  const bgcolor = alpha(theme.palette.background.paper, 0.99);\n  return {\n    userSelect: 'none',\n    margin: `0 0 ${8}px 0`,\n    padding: 16,\n    border: '1px solid',\n    borderColor: theme.palette.divider,\n    backgroundColor: isDragging ? bgcolor : theme.palette.background.paper,\n    borderRadius: radius,\n    ...draggableStyle\n  };\n}\n\n// ==============================|| KANBAN BOARD - ITEMS ||============================== //\n\nexport default function Items({ item, index }) {\n  const theme = useTheme();\n  const { backlogs } = useGetBacklogs();\n\n  const backProfile = !!item.image;\n  const itemStory = backlogs?.userStory.filter((story) => story?.itemIds?.filter((itemId) => itemId === item.id)[0])[0];\n\n  const handlerDetails = (id) => {\n    handlerKanbanDialog(id);\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handleClick = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [open, setOpen] = useState(false);\n  const handleModalClose = (status) => {\n    setOpen(false);\n    if (status) {\n      deleteItem(item.id);\n      openSnackbar({\n        open: true,\n        message: 'Task Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n    }\n  };\n\n  const [openStoryDrawer, setOpenStoryDrawer] = useState(false);\n  const handleStoryDrawerOpen = () => {\n    setOpenStoryDrawer((prevState) => !prevState);\n  };\n\n  const editStory = () => {\n    setOpenStoryDrawer((prevState) => !prevState);\n  };\n\n  return (\n    <Draggable key={item.id} draggableId={item.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          style={getDragWrapper(snapshot.isDragging, provided.draggableProps.style, theme, `12px`)}\n        >\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: itemStory ? -0.75 : 0 }}>\n            <Typography\n              onClick={() => handlerDetails(item.id)}\n              variant=\"subtitle1\"\n              sx={{\n                display: 'inline-block',\n                width: 'calc(100% - 34px)',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                verticalAlign: 'middle',\n                cursor: 'pointer',\n                '&:hover': {\n                  textDecoration: 'underline'\n                }\n              }}\n            >\n              {item.title}\n            </Typography>\n\n            <IconButton size=\"small\" color=\"secondary\" onClick={handleClick} aria-controls=\"menu-comment\" aria-haspopup=\"true\">\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-comment\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n              variant=\"selectedMenu\"\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right'\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n            >\n              <MenuItem\n                onClick={() => {\n                  handleClose();\n                  handlerDetails(item.id);\n                }}\n              >\n                Edit\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  handleClose();\n                  setOpen(true);\n                }}\n              >\n                Delete\n              </MenuItem>\n            </Menu>\n            <AlertItemDelete title={item.title} open={open} handleClose={handleModalClose} />\n          </Stack>\n          {itemStory && (\n            <>\n              <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                <Tooltip title=\"User Story\">\n                  <Hierarchy size={16} style={{ color: theme.palette.primary.dark }} />\n                </Tooltip>\n                <Tooltip title={itemStory.title}>\n                  <Link variant=\"caption\" color=\"primary.dark\" underline=\"hover\" onClick={editStory} sx={{ cursor: 'pointer', pt: 0.5 }}>\n                    User Story #{itemStory.id}\n                  </Link>\n                </Tooltip>\n              </Stack>\n              <EditStory story={itemStory} open={openStoryDrawer} handleDrawerOpen={handleStoryDrawerOpen} />\n            </>\n          )}\n          {backProfile && (\n            <CardMedia\n              component=\"img\"\n              image={getImageUrl(`${item.image}`, ImagePath.PROFILE)}\n              sx={{ width: '100%', borderRadius: 1, mt: 1.5 }}\n              title=\"Slider5 image\"\n            />\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nItems.propTypes = { item: PropTypes.any, index: PropTypes.number };\n","size_bytes":6074},"src/sections/forms/validation/InstantFeedback.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n/**\n * 'Enter your email'\n * yup.string Expected 0 arguments, but got 1 */\nconst validationSchema = yup.object({\n  emailInstant: yup.string().email('Enter a valid email').required('Email is required'),\n  passwordInstant: yup.string().min(8, 'Password should be of minimum 8 characters length').required('Password is required')\n});\n\n// ==============================|| FORM VALIDATION - INSTANT FEEDBACK  ||============================== //\n\nexport default function InstantFeedback() {\n  const formik = useFormik({\n    initialValues: {\n      emailInstant: '',\n      passwordInstant: ''\n    },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'On Leave - Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  });\n\n  return (\n    <MainCard title=\"On Leave\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel htmlFor=\"email\">Email Address</InputLabel>\n              <TextField\n                fullWidth\n                id=\"emailInstant\"\n                name=\"emailInstant\"\n                placeholder=\"Enter email address\"\n                value={formik.values.emailInstant}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.emailInstant && Boolean(formik.errors.emailInstant)}\n                helperText={formik.touched.emailInstant && formik.errors.emailInstant}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel htmlFor=\"email\">Password</InputLabel>\n              <TextField\n                fullWidth\n                id=\"passwordInstant\"\n                name=\"passwordInstant\"\n                placeholder=\"Enter your password\"\n                type=\"password\"\n                value={formik.values.passwordInstant}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.passwordInstant && Boolean(formik.errors.passwordInstant)}\n                helperText={formik.touched.passwordInstant && formik.errors.passwordInstant}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":3181},"src/components/Loadable.jsx":{"content":"import { Suspense } from 'react';\n\n// project-imports\nimport Loader from './Loader';\n\n// ==============================|| LOADABLE - LAZY LOADING ||============================== //\n\nconst Loadable = (Component) => (props) => (\n  <Suspense fallback={<Loader />}>\n    <Component {...props} />\n  </Suspense>\n);\n\nexport default Loadable;\n","size_bytes":335},"src/reportWebVitals.js":{"content":"const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","size_bytes":364},"src/components/cards/AuthFooter.jsx":{"content":"import useMediaQuery from '@mui/material/useMediaQuery';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\n\n// ==============================|| FOOTER - AUTHENTICATION ||============================== //\n\nexport default function AuthFooter() {\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Stack\n        direction={matchDownSM ? 'column' : 'row'}\n        justifyContent={matchDownSM ? 'center' : 'space-between'}\n        spacing={2}\n        textAlign={matchDownSM ? 'center' : 'inherit'}\n      >\n        <Stack direction={matchDownSM ? 'column' : 'row'} spacing={matchDownSM ? 1 : 3} textAlign={matchDownSM ? 'center' : 'inherit'}>\n          <Typography\n            variant=\"subtitle2\"\n            color=\"secondary\"\n            component={Link}\n            href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/\"\n            target=\"_blank\"\n            underline=\"hover\"\n          >\n            Documentation\n          </Typography>\n        </Stack>\n      </Stack>\n    </Container>\n  );\n}\n","size_bytes":1201},"src/layout/Dashboard/Drawer/MiniDrawerStyled.js":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Drawer from '@mui/material/Drawer';\n\n// project-imports\nimport { DRAWER_WIDTH, MINI_DRAWER_WIDTH, ThemeMode } from 'config';\n\nconst openedMixin = (theme) => ({\n  backgroundColor: theme.palette.background.default,\n  width: DRAWER_WIDTH,\n  borderRight: `1px dashed ${theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary[400]}`,\n\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen\n  }),\n\n  overflowX: 'hidden',\n  boxShadow: theme.palette.mode === ThemeMode.DARK ? theme.customShadows.z1 : 'none'\n});\n\nconst closedMixin = (theme) => ({\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.default,\n\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen\n  }),\n\n  overflowX: 'hidden',\n  width: MINI_DRAWER_WIDTH,\n  borderRight: 'none',\n  boxShadow: theme.customShadows.z1\n});\n\n// ==============================|| DRAWER - MINI STYLED ||============================== //\n\nconst MiniDrawerStyled = styled(Drawer, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  width: DRAWER_WIDTH,\n  flexShrink: 0,\n  whiteSpace: 'nowrap',\n  boxSizing: 'border-box',\n  ...(open && {\n    ...openedMixin(theme),\n    '& .MuiDrawer-paper': openedMixin(theme)\n  }),\n  ...(!open && {\n    ...closedMixin(theme),\n    '& .MuiDrawer-paper': closedMixin(theme)\n  })\n}));\n\nexport default MiniDrawerStyled;\n","size_bytes":1615},"src/sections/tables/react-table/EditableCell.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\n\n// project-imports\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport { CSVExport, CellEditable } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data, setData }) {\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      cell: CellEditable\n    },\n    getCoreRowModel: getCoreRowModel(),\n    meta: {\n      updateData: (rowIndex, columnId, value) => {\n        setData((old) =>\n          old.map((row, index) => {\n            if (index === rowIndex) {\n              return {\n                ...old[rowIndex],\n                [columnId]: value\n              };\n            }\n            return row;\n          })\n        );\n      }\n    },\n    debugTable: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map(\n    (columns) =>\n      // @ts-ignore\n      columns.columnDef.accessorKey &&\n      headers.push({\n        label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n        // @ts-ignore\n        key: columns.columnDef.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      content={false}\n      title=\"Editable Cell\"\n      secondary={\n        <CSVExport {...{ data: table.getRowModel().flatRows.map((row) => row.original), headers, filename: 'editable-cell.csv' }} />\n      }\n    >\n      <ScrollX>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - EDITABLE CELL ||============================== //\n\nexport default function EditableCell() {\n  const [data, setData] = useState(() => makeData(10));\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        dataType: 'text'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        dataType: 'text'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email',\n        dataType: 'text'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        dataType: 'text',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        dataType: 'text',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        dataType: 'select'\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        dataType: 'progress'\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ data, columns, setData }} />;\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array, setData: PropTypes.any };\n","size_bytes":4312},"src/sections/widget/data/TrafficSources.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ===========================|| DATA WIDGET - TRAFFIC SOURCES ||=========================== //\n\nexport default function TrafficSources() {\n  return (\n    <MainCard\n      title=\"Traffic Sources\"\n      subheader={\n        <Typography variant=\"caption\" color=\"secondary\">\n          You’re getting more and more sources, keep it up!\n        </Typography>\n      }\n    >\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Grid container alignItems=\"center\" spacing={1}>\n            <Grid item sm zeroMinWidth>\n              <Typography variant=\"body2\">Referral</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"body2\" align=\"right\">\n                20%\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <LinearProgress variant=\"determinate\" value={20} color=\"primary\" />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container alignItems=\"center\" spacing={1}>\n            <Grid item sm zeroMinWidth>\n              <Typography variant=\"body2\">Bounce</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"body2\" align=\"right\">\n                58%\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <LinearProgress variant=\"determinate\" value={60} color=\"secondary\" />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container alignItems=\"center\" spacing={1}>\n            <Grid item sm zeroMinWidth>\n              <Typography variant=\"body2\">Internet</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"body2\" align=\"right\">\n                40%\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <LinearProgress variant=\"determinate\" value={40} color=\"primary\" />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container alignItems=\"center\" spacing={1}>\n            <Grid item sm zeroMinWidth>\n              <Typography variant=\"body2\">Social</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"body2\" align=\"right\">\n                90%\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <LinearProgress variant=\"determinate\" value={90} color=\"primary\" />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2779},"src/sections/forms/edit-forms/jobs/index.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Review Page'];\n\nconst getStepContent = (step, handleNext, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function EditJobsPage() {\n  const idPage = useLocation().pathname.split('/').splice(-1).toString();\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.put('admin/edit/jobs/' + idPage, data);\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveArticles = await axiosInstance.get('admin/edit/jobs/' + idPage);\n        if (retrieveArticles.status === 200) {\n          console.log(retrieveArticles.data);\n          setData(retrieveArticles.data);\n        } else {\n          console.error('Failed to retrieve job page');\n        }\n      } catch (error) {\n        console.error('Error fetching job page:', error);\n      }\n    };\n\n    fetchData();\n  }, [idPage]);\n\n  return (\n    <MainCard title=\"Edit a job page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      {/* <InputLabel>{isAdding ? 'Add new member' : 'Edit the member'}</InputLabel>\n      <Switch checked={isAdding} onChange={() => setIsAdding((prevState) => !prevState)} /> */}\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully edited a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6490},"src/components/@extended/Tooltip.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport MuiTooltip, { tooltipClasses } from '@mui/material/Tooltip';\n\n// project-imports\nimport getColors from 'utils/getColors';\n\nfunction getVariantStyle({ color, theme, labelColor }) {\n  const colors = getColors(theme, color);\n  const { main, contrastText } = colors;\n  let colorValue = color ? color : '';\n\n  if (['primary', 'secondary', 'info', 'success', 'warning', 'error'].includes(colorValue)) {\n    return {\n      [`& .${tooltipClasses.tooltip}`]: {\n        backgroundColor: main,\n        color: labelColor ? labelColor : contrastText\n      },\n      [`& .${tooltipClasses.arrow}`]: {\n        color: main\n      }\n    };\n  } else {\n    return {\n      [`& .${tooltipClasses.tooltip}`]: {\n        backgroundColor: colorValue,\n        color: labelColor ? labelColor : contrastText,\n        boxShadow: theme.shadows[1]\n      },\n      [`& .${tooltipClasses.arrow}`]: {\n        color: colorValue\n      }\n    };\n  }\n}\n\nconst TooltipStyle = styled(({ className, ...props }) => <MuiTooltip {...props} classes={{ popper: className }} />, {\n  shouldForwardProp: (prop) => prop !== 'color' && prop !== 'labelColor'\n})(({ theme, color, labelColor }) => ({\n  ...(color && getVariantStyle({ color, theme, labelColor }))\n}));\n\nexport default function CustomTooltip({ children, arrow, labelColor = '', ...rest }) {\n  const theme = useTheme();\n  return (\n    <Box display=\"flex\">\n      <TooltipStyle arrow={arrow} {...rest} theme={theme} labelColor={labelColor}>\n        {children}\n      </TooltipStyle>\n    </Box>\n  );\n}\n\ngetVariantStyle.propTypes = {\n  color: PropTypes.oneOfType([PropTypes.string, PropTypes.any]),\n  theme: PropTypes.any,\n  labelColor: PropTypes.oneOfType([PropTypes.string, PropTypes.any])\n};\n\nCustomTooltip.propTypes = {\n  children: PropTypes.any,\n  arrow: PropTypes.any,\n  labelColor: PropTypes.oneOfType([PropTypes.string, PropTypes.any]),\n  rest: PropTypes.any\n};\n","size_bytes":2023},"src/sections/apps/profiles/account/TabProfile.jsx":{"content":"import useMediaQuery from '@mui/material/useMediaQuery';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Typography from '@mui/material/Typography';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\nimport defaultImages from 'assets/images/users/default.png';\n\n// assets\nimport { CallCalling, Gps, Link1, Sms } from 'iconsax-react';\n\n// ==============================|| ACCOUNT PROFILE - BASIC ||============================== //\n\nexport default function TabProfile() {\n  const matchDownMD = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} sm={5} md={4} xl={3}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" justifyContent=\"flex-end\">\n                    <Chip label=\"Pro\" size=\"small\" color=\"primary\" />\n                  </Stack>\n                  <Stack spacing={2.5} alignItems=\"center\">\n                    <Avatar alt=\"Avatar 1\" size=\"xl\" src={defaultImages} />\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Typography variant=\"h5\">Anshan H.</Typography>\n                      <Typography color=\"secondary\">Project Manager</Typography>\n                    </Stack>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" justifyContent=\"space-around\" alignItems=\"center\">\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Typography variant=\"h5\">86</Typography>\n                      <Typography color=\"secondary\">Post</Typography>\n                    </Stack>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Typography variant=\"h5\">40</Typography>\n                      <Typography color=\"secondary\">Project</Typography>\n                    </Stack>\n                    <Divider orientation=\"vertical\" flexItem />\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Typography variant=\"h5\">4.5K</Typography>\n                      <Typography color=\"secondary\">Members</Typography>\n                    </Stack>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12}>\n                  <List component=\"nav\" aria-label=\"main mailbox folders\" sx={{ py: 0, '& .MuiListItem-root': { p: 0, py: 1 } }}>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Sms size={18} />\n                      </ListItemIcon>\n                      <ListItemSecondaryAction>\n                        <Typography align=\"right\">anshan.dh81@gmail.com</Typography>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <CallCalling size={18} />\n                      </ListItemIcon>\n                      <ListItemSecondaryAction>\n                        <Typography align=\"right\">(+1-876) 8654 239 581</Typography>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Gps size={18} />\n                      </ListItemIcon>\n                      <ListItemSecondaryAction>\n                        <Typography align=\"right\">New York</Typography>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Link1 size={18} />\n                      </ListItemIcon>\n                      <ListItemSecondaryAction>\n                        <Link align=\"right\" href=\"https://google.com\" target=\"_blank\">\n                          https://anshan.dh.url\n                        </Link>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  </List>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Skills\">\n              <Grid container spacing={1.25}>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">Junior</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={30} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">UX Reseacher</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={80} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">Wordpress</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={90} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">HTML</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={30} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">Graphic Design</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={95} />\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"secondary\">Code Style</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <LinearWithLabel value={75} />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={7} md={8} xl={9}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"About me\">\n              <Typography color=\"secondary\">\n                Hello, I’m Anshan Handgun Creative Graphic Designer & User Experience Designer based in Website, I create digital Products a\n                more Beautiful and usable place. Morbid accusant ipsum. Nam nec tellus at.\n              </Typography>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Personal Details\">\n              <List sx={{ py: 0 }}>\n                <ListItem divider={!matchDownMD}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Full Name</Typography>\n                        <Typography>Anshan Handgun</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Father Name</Typography>\n                        <Typography>Mr. Deepen Handgun</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem divider={!matchDownMD}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Phone</Typography>\n                        <Typography>\n                          (+1-876) <PatternFormat value={8654239581} displayType=\"text\" type=\"text\" format=\"#### ### ###\" />\n                        </Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Country</Typography>\n                        <Typography>New York</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem divider={!matchDownMD}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Email</Typography>\n                        <Typography>anshan.dh81@gmail.com</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Zip Code</Typography>\n                        <Typography>956 754</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Stack spacing={0.5}>\n                    <Typography color=\"secondary\">Address</Typography>\n                    <Typography>Street 110-B Kalians Bag, Dewan, M.P. New York</Typography>\n                  </Stack>\n                </ListItem>\n              </List>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Education\">\n              <List sx={{ py: 0 }}>\n                <ListItem divider>\n                  <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Master Degree (Year)</Typography>\n                        <Typography>2014-2017</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Institute</Typography>\n                        <Typography>-</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem divider>\n                  <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Bachelor (Year)</Typography>\n                        <Typography>2011-2013</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Institute</Typography>\n                        <Typography>Imperial College London</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">School (Year)</Typography>\n                        <Typography>2009-2011</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Institute</Typography>\n                        <Typography>School of London, England</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n              </List>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Emplyment\">\n              <List sx={{ py: 0 }}>\n                <ListItem divider>\n                  <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Senior UI/UX designer (Year)</Typography>\n                        <Typography>2019-Current</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Job Responsibility</Typography>\n                        <Typography>\n                          Perform task related to project manager with the 100+ team under my observation. Team management is key role in\n                          this company.\n                        </Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Trainee cum Project Manager (Year)</Typography>\n                        <Typography>2017-2019</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Job Responsibility</Typography>\n                        <Typography>Team management is key role in this company.</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n              </List>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":14247},"src/pages/components-overview/chips.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { EmojiHappy, Heart, MinusSquare, PlayCircle, Trash } from 'iconsax-react';\n\nimport avatar from 'assets/images/users/avatar-1.png';\nimport avatarDark from 'assets/images/users/avatar-6.png';\n\nconst ListItem = styled('li')(({ theme }) => ({\n  margin: theme.spacing(0.5)\n}));\n\nListItem.displayName = 'ListItem';\n\n// ==============================|| COMPONENTS - CHIPS ||============================== //\n\nexport default function ComponentChip() {\n  const theme = useTheme();\n\n  const [chipData, setChipData] = useState([\n    { key: 0, label: 'Angular' },\n    { key: 1, label: 'jQuery' },\n    { key: 2, label: 'Polymer' },\n    { key: 3, label: 'React' },\n    { key: 4, label: 'Vue.js' }\n  ]);\n  const handleDelete = (chipToDelete) => () => {\n    setChipData((chips) => chips.filter((chip) => chip.key !== chipToDelete.key));\n  };\n\n  const basicChipCodeString = `<Chip label=\"Default\" />\n<Chip label=\"Color\" color=\"primary\" />\n<Chip label=\"Disabled\" color=\"primary\" disabled />\n<Chip label=\"Clickable\" color=\"primary\" onClick={() => {}} />\n<Chip label=\"Deletable\" color=\"primary\" onDelete={() => {}} />\n<Chip avatar={<Avatar alt=\"Natacha\" src={avatar} />} label=\"Avatar\" color=\"primary\" />`;\n\n  const outlinedChipCodeString = `<Chip label=\"Default\" variant=\"outlined\" />\n<Chip label=\"Color\" variant=\"outlined\" color=\"primary\" />\n<Chip label=\"Disabled\" variant=\"outlined\" color=\"primary\" disabled />\n<Chip label=\"Clickable\" variant=\"outlined\" color=\"primary\" onClick={() => {}} />\n<Chip label=\"Deletable\" variant=\"outlined\" color=\"primary\" onDelete={() => {}} />\n<Chip\n  variant=\"outlined\"\n  avatar={<Avatar alt=\"Natacha\" src={avatarDark} />}\n  label=\"Avatar\"\n  color=\"primary\"\n/>`;\n\n  const lighterChipCodeString = `<Chip label=\"Default\" variant=\"light\" />\n<Chip label=\"Color\" variant=\"light\" color=\"primary\" />\n<Chip label=\"Disabled\" variant=\"light\" color=\"primary\" disabled />\n<Chip label=\"Clickable\" variant=\"light\" color=\"primary\" onClick={() => {}} />\n<Chip label=\"Deletable\" variant=\"light\" color=\"primary\" onDelete={() => {}} />\n<Chip\n  variant=\"light\"\n  avatar={<Avatar alt=\"Natacha\" src={avatarDark} />}\n  label=\"Avatar\"\n  color=\"primary\"\n/>`;\n\n  const combineChipCodeString = `<Chip label=\"Default\" variant=\"combined\" />\n<Chip label=\"Color\" variant=\"combined\" color=\"primary\" />\n<Chip label=\"Disabled\" variant=\"combined\" color=\"primary\" disabled />\n<Chip label=\"Clickable\" variant=\"combined\" color=\"primary\" onClick={() => {}} />\n<Chip label=\"Deletable\" variant=\"combined\" color=\"primary\" onDelete={() => {}} />\n<Chip\n  variant=\"combined\"\n  avatar={<Avatar alt=\"Natacha\" src={avatarDark} />}\n  label=\"Avatar\"\n  color=\"primary\"\n/>`;\n\n  const deleteChipCodeString = `<Chip label=\"Default\" onDelete={() => {}} color=\"error\" />\n<Chip\n  label=\"Custom Icon\"\n  onDelete={() => {}}\n  color=\"error\"\n  deleteIcon={<MinusSquare style={{ fontSize: '1.15rem' }} />}\n/>\n<Chip\n  variant=\"outlined\"\n  label=\"Custom Icon\"\n  onDelete={() => {}}\n  color=\"error\"\n  deleteIcon={<Trash style={{ fontSize: '1.15rem' }} />}\n/>`;\n\n  const avatarChipCodeString = `<Chip color=\"secondary\" variant=\"light\" icon={<PlayCircle />} label=\"Play\" />\n<Chip\n  variant=\"combined\"\n  color=\"primary\"\n  avatar={<Avatar alt=\"Natacha\" src={avatarDark} />}\n  label=\"Avatar\"\n/>\n<Chip color=\"warning\" variant=\"outlined\" icon={<EmojiHappy variant=\"Bold\" />} label=\"Smile\" />\n<Chip icon={<Heart variant=\"Bold\" />} color=\"error\" label=\"Like\" />`;\n\n  const sizeChipCodeString = `<Chip color=\"primary\" label=\"Small\" size=\"small\" />\n<Chip color=\"primary\" label=\"Default\" />\n<Chip color=\"primary\" label=\"Large\" size=\"large\" />`;\n\n  const arrayChipCodeString = `<Box\n  sx={{\n    display: 'flex',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    border: '1px solid',\n    borderColor: theme.palette.secondary.light,\n    borderRadius: 1,\n    p: 0.5,\n    m: 0\n  }}\n  component=\"ul\"\n>\n  {chipData.map((data) => (\n    <ListItem key={data.key}>\n      <Chip\n        size=\"small\"\n        variant=\"combined\"\n        label={data.label}\n        onDelete={data.label === 'React' ? undefined : handleDelete(data)}\n      />\n    </ListItem>\n  ))}\n</Box>`;\n\n  const colorChipCodeString = `<Chip label=\"Primary\" color=\"primary\" />\n<Chip label=\"Secondary\" color=\"secondary\" />\n<Chip label=\"Success\" color=\"success\" />\n<Chip label=\"Warning\" color=\"warning\" />\n<Chip label=\"Info\" color=\"info\" />\n<Chip label=\"Error\" color=\"error\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Chips\"\n        caption=\"Chips are compact elements that represent an input, attribute, or action.\"\n        directory=\"src/pages/components-overview/chips\"\n        link=\"https://mui.com/material-ui/react-chip/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeHighlight codeString={basicChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Default\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Color\" color=\"primary\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Disabled\" color=\"primary\" disabled />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Clickable\" color=\"primary\" onClick={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Deletable\" color=\"primary\" onDelete={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip avatar={<Avatar alt=\"Natacha\" src={avatar} />} label=\"Avatar\" color=\"primary\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Outlined\" codeString={outlinedChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Default\" variant=\"outlined\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Color\" variant=\"outlined\" color=\"primary\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Disabled\" variant=\"outlined\" color=\"primary\" disabled />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Clickable\" variant=\"outlined\" color=\"primary\" onClick={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Deletable\" variant=\"outlined\" color=\"primary\" onDelete={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip variant=\"outlined\" avatar={<Avatar alt=\"Natacha\" src={avatarDark} />} label=\"Avatar\" color=\"primary\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Lighter\" codeString={lighterChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Default\" variant=\"light\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Color\" variant=\"light\" color=\"primary\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Disabled\" variant=\"light\" color=\"primary\" disabled />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Clickable\" variant=\"light\" color=\"primary\" onClick={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Deletable\" variant=\"light\" color=\"primary\" onDelete={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip variant=\"light\" avatar={<Avatar alt=\"Natacha\" src={avatarDark} />} label=\"Avatar\" color=\"primary\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Combined\" codeString={combineChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Default\" variant=\"combined\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Color\" variant=\"combined\" color=\"primary\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Disabled\" variant=\"combined\" color=\"primary\" disabled />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Clickable\" variant=\"combined\" color=\"primary\" onClick={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Deletable\" variant=\"combined\" color=\"primary\" onDelete={() => {}} />\n                </Grid>\n                <Grid item>\n                  <Chip variant=\"combined\" avatar={<Avatar alt=\"Natacha\" src={avatarDark} />} label=\"Avatar\" color=\"primary\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Deletable Icon\" codeString={deleteChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Default\" onDelete={() => {}} color=\"error\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Custom Icon\" onDelete={() => {}} color=\"error\" deleteIcon={<MinusSquare />} />\n                </Grid>\n                <Grid item>\n                  <Chip variant=\"outlined\" label=\"Custom Icon\" onDelete={() => {}} color=\"error\" deleteIcon={<Trash variant=\"Bold\" />} />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Avatar & Icon\" codeString={avatarChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip color=\"secondary\" variant=\"light\" icon={<PlayCircle />} label=\"Play\" />\n                </Grid>\n                <Grid item>\n                  <Chip variant=\"combined\" color=\"primary\" avatar={<Avatar alt=\"Natacha\" src={avatarDark} />} label=\"Avatar\" />\n                </Grid>\n                <Grid item>\n                  <Chip color=\"warning\" variant=\"outlined\" icon={<EmojiHappy variant=\"Bold\" />} label=\"Smile\" />\n                </Grid>\n                <Grid item>\n                  <Chip icon={<Heart variant=\"Bold\" />} color=\"error\" label=\"Like\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Size\" codeString={sizeChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip color=\"primary\" label=\"Small\" size=\"small\" />\n                </Grid>\n                <Grid item>\n                  <Chip color=\"primary\" label=\"Default\" />\n                </Grid>\n                <Grid item>\n                  <Chip color=\"primary\" label=\"Large\" size=\"large\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Array\" codeString={arrayChipCodeString}>\n              <Box\n                sx={{\n                  display: 'flex',\n                  flexWrap: 'wrap',\n                  listStyle: 'none',\n                  border: '1px solid',\n                  borderColor: theme.palette.secondary.light,\n                  borderRadius: 1,\n                  p: 0.5,\n                  m: 0\n                }}\n                component=\"ul\"\n              >\n                {chipData.map((data) => (\n                  <ListItem key={data.key}>\n                    <Chip\n                      size=\"small\"\n                      variant=\"combined\"\n                      label={data.label}\n                      onDelete={data.label === 'React' ? undefined : handleDelete(data)}\n                    />\n                  </ListItem>\n                ))}\n              </Box>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Color\" codeString={colorChipCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Chip label=\"Primary\" color=\"primary\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Secondary\" color=\"secondary\" sx={{ color: 'secondary.lighter' }} />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Success\" color=\"success\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Warning\" color=\"warning\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Info\" color=\"info\" />\n                </Grid>\n                <Grid item>\n                  <Chip label=\"Error\" color=\"error\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":13565},"src/components/third-party/map/MapControl.jsx":{"content":"import PropTypes from 'prop-types';\n// third-party\nimport { NavigationControl, FullscreenControl, ScaleControl, GeolocateControl } from 'react-map-gl';\n\n// project-import\nimport MapControlsStyled from './MapControlsStyled';\n\n// ==============================|| MAP BOX - CONTROL ||============================== //\n\nexport default function MapControl({ hideScale, hideGeolocate, hideFullscreen, hideNavigationn }) {\n  return (\n    <>\n      <MapControlsStyled />\n      {!hideGeolocate && <GeolocateControl position=\"top-left\" positionOptions={{ enableHighAccuracy: true }} />}\n      {!hideFullscreen && <FullscreenControl position=\"top-left\" />}\n      {!hideScale && <ScaleControl position=\"bottom-left\" />}\n      {!hideNavigationn && <NavigationControl position=\"bottom-left\" />}\n    </>\n  );\n}\n\nMapControl.propTypes = {\n  hideScale: PropTypes.bool,\n  hideGeolocate: PropTypes.bool,\n  hideFullscreen: PropTypes.bool,\n  hideNavigationn: PropTypes.bool\n};\n","size_bytes":954},"src/components/third-party/react-table/index.js":{"content":"export { default as CSVExport } from './CSVExport';\nexport { default as HeaderSort } from './HeaderSort';\nexport { default as EmptyTable } from './EmptyTable';\nexport { default as RowEditable } from './RowEditable';\nexport { default as DraggableRow } from './DraggableRow';\nexport { default as CellEditable } from './CellEditable';\nexport { default as RowSelection } from './RowSelection';\nexport { default as DebouncedInput } from './DebouncedInput';\nexport { default as TablePagination } from './TablePagination';\nexport { default as DraggableColumnHeader } from './DraggableColumnHeader';\nexport { default as IndeterminateCheckbox } from './IndeterminateCheckbox';\nexport { default as SelectColumnVisibility } from './SelectColumnVisibility';\nexport { default as SelectColumnSorting } from './SelectColumnSorting';\n\nexport { default as Filter } from './Filter';\n","size_bytes":865},"src/themes/theme/theme2.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME2 ||============================== //\n\nexport default function Theme2(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#EEEDFC', '#D5D1F8', '#B9B2F3', '#9C93EE', '#877CEA', '#7265E6', '#6A5DE3', '#5F53DF', '#5549DB', '#4237D5'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#222130', '#2b2946', '#37335a', '#443e78', '#554ca0', '#655ac8', '#9186dd', '#5F53DF', '#c3baf4', '#efecfb'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2912},"src/sections/apps/kanban/Board/ItemDetails.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Drawer from '@mui/material/Drawer';\nimport Divider from '@mui/material/Divider';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ItemComment from './ItemComment';\nimport EditItem from './EditItem';\nimport AddItemComment from './AddItemComment';\nimport AlertItemDelete from './AlertItemDelete';\n\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\nimport { deleteItem, handlerKanbanDialog, useGetBacklogs, useGetKanbanMaster } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, Trash } from 'iconsax-react';\n\n// ==============================|| KANBAN BOARD - ITEM DETAILS ||============================== //\n\nexport default function ItemDetails() {\n  let selectedData;\n  let commentList = <></>;\n\n  const { backlogs } = useGetBacklogs();\n  const { kanbanMaster } = useGetKanbanMaster();\n\n  const selectedItem = kanbanMaster?.selectedItem ? kanbanMaster.selectedItem : false;\n  // drawer\n  const [open, setOpen] = useState(selectedItem !== false);\n  const handleDrawerOpen = () => {\n    setOpen((prevState) => !prevState);\n    handlerKanbanDialog(false);\n  };\n\n  useEffect(() => {\n    selectedItem !== false && setOpen(true);\n  }, [selectedItem]);\n\n  if (selectedItem !== false) {\n    selectedData = backlogs?.items.filter((item) => item.id === selectedItem)[0];\n    if (selectedData?.commentIds) {\n      commentList = [...selectedData.commentIds].reverse().map((commentId, index) => {\n        const commentData = backlogs?.comments.filter((comment) => comment.id === commentId)[0];\n        const profile = backlogs?.profiles.filter((item) => item.id === commentData.profileId)[0];\n        return <ItemComment key={index} comment={commentData} profile={profile} />;\n      });\n    }\n  }\n\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleModalClose = (status) => {\n    setOpenModal(false);\n    if (status) {\n      handleDrawerOpen();\n      deleteItem(selectedData.id);\n      openSnackbar({\n        open: true,\n        message: 'Task Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  return (\n    <Drawer\n      sx={{\n        ml: open ? 3 : 0,\n        flexShrink: 0,\n        zIndex: 1200,\n        overflowX: 'hidden',\n        width: { xs: 320, md: 450 },\n        '& .MuiDrawer-paper': {\n          width: { xs: 320, md: 450 },\n          border: 'none',\n          borderRadius: '0px'\n        }\n      }}\n      variant=\"temporary\"\n      anchor=\"right\"\n      open={open}\n      ModalProps={{ keepMounted: true }}\n      onClose={handleDrawerOpen}\n    >\n      {open && (\n        <SimpleBar sx={{ overflowX: 'hidden', height: '100vh' }}>\n          {selectedData && (\n            <>\n              <Box sx={{ p: 3 }}>\n                <Grid container alignItems=\"center\" spacing={0.5} justifyContent=\"space-between\">\n                  <Grid item sx={{ width: 'calc(100% - 64px)' }}>\n                    <Stack direction=\"row\" spacing={0.5} alignItems=\"center\" justifyContent=\"space-between\">\n                      <Typography\n                        variant=\"h4\"\n                        sx={{\n                          display: 'inline-block',\n                          width: 'calc(100% - 34px)',\n                          textOverflow: 'ellipsis',\n                          whiteSpace: 'nowrap',\n                          overflow: 'hidden',\n                          verticalAlign: 'middle'\n                        }}\n                      >\n                        {selectedData.title}\n                      </Typography>\n                    </Stack>\n                  </Grid>\n\n                  <Grid item>\n                    <Stack direction=\"row\" alignItems=\"center\">\n                      <Tooltip title=\"Delete Task\">\n                        <IconButton color=\"error\" onClick={() => setOpenModal(true)} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                          <Trash variant=\"Bold\" />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Close\">\n                        <IconButton color=\"secondary\" onClick={handleDrawerOpen} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </IconButton>\n                      </Tooltip>\n                    </Stack>\n                    <AlertItemDelete title={selectedData.title} open={openModal} handleClose={handleModalClose} />\n                  </Grid>\n                </Grid>\n              </Box>\n              <Divider />\n              <Box sx={{ p: 3 }}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <EditItem\n                      item={selectedData}\n                      profiles={backlogs?.profiles}\n                      userStory={backlogs?.userStory}\n                      columns={backlogs?.columns}\n                      handleDrawerOpen={handleDrawerOpen}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    {commentList}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <AddItemComment itemId={selectedItem} />\n                  </Grid>\n                </Grid>\n              </Box>\n            </>\n          )}\n          {!selectedData && (\n            <Stack justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh' }}>\n              <Typography variant=\"h5\" color=\"error\">\n                No item found\n              </Typography>\n            </Stack>\n          )}\n        </SimpleBar>\n      )}\n    </Drawer>\n  );\n}\n","size_bytes":5988},"src/sections/components-overview/modal/TransitionsModal.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Fade from '@mui/material/Fade';\nimport Modal from '@mui/material/Modal';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Backdrop from '@mui/material/Backdrop';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| MODAL - TRANSITIONS ||============================== //\n\nexport default function TransitionsModal() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <MainCard title=\"Transitions Modal\">\n      <Button onClick={handleOpen} variant=\"contained\">\n        Open modal\n      </Button>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500\n          }\n        }}\n      >\n        <Fade in={open}>\n          <MainCard title=\"Transitions Modal\" modal darkTitle content={false}>\n            <CardContent>\n              <Typography id=\"modal-modal-description\">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</Typography>\n            </CardContent>\n            <Divider />\n            <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ px: 2.5, py: 2 }}>\n              <Button color=\"error\" size=\"small\" onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button variant=\"contained\" size=\"small\">\n                Submit\n              </Button>\n            </Stack>\n          </MainCard>\n        </Fade>\n      </Modal>\n    </MainCard>\n  );\n}\n","size_bytes":1952},"src/pages/components-overview/textfield.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport InputLabel from '@mui/material/InputLabel';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormControl from '@mui/material/FormControl';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { Eye, EyeSlash, Sms } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - TEXT FEILD ||============================== //\n\nexport default function ComponentTextField() {\n  const [values, setValues] = useState({\n    password: '',\n    showPassword: false\n  });\n\n  const handleChange = (prop) => (event) => {\n    setValues({ ...values, [prop]: event.target.value });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword\n    });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const basicTextfeildCodeString = `<TextField id=\"outlined-basic\" label=\"Outlined\" />\n<TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n<TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" />`;\n\n  const propsTextfeildCodeString = `<TextField required id=\"outlined-required\" placeholder=\"Required *\" defaultValue=\"Hello World\" />\n<TextField id=\"helper-text-basic\" placeholder=\"Helper text\" helperText=\"Helper text\" />\n<TextField id=\"outlined-number-\" label=\"Number\" type=\"number\" />\n<TextField\n  id=\"outlined-number-read-only\"\n  defaultValue=\"Read Only\"\n  InputProps={{\n    readOnly: true\n  }}\n/>\n<OutlinedInput\n  id=\"outlined-adornment-password\"\n  type={values.showPassword ? 'text' : 'password'}\n  value={values.password}\n  onChange={handleChange('password')}\n  endAdornment={\n    <InputAdornment position=\"end\">\n      <IconButton\n        aria-label=\"toggle password visibility\"\n        onClick={handleClickShowPassword}\n        onMouseDown={handleMouseDownPassword}\n        edge=\"end\"\n        color=\"secondary\"\n      >\n        {values.showPassword ? <Eye /> : <EyeSlash />}\n      </IconButton>\n    </InputAdornment>\n  }\n/>\n<FormControl variant=\"standard\">\n  <Stack spacing={3}>\n    <InputLabel shrink htmlFor=\"with-label-input\">\n      With Label\n    </InputLabel>\n    <TextField id=\"with-label-input\" placeholder=\"With Label\" />\n  </Stack>\n</FormControl>\n<TextField id=\"disabled-basic\" label=\"Disabled\" disabled />\n<TextField id=\"filled-search\" placeholder=\"Search\" type=\"search\" />`;\n\n  const iconTextfeildCodeString = `<OutlinedInput id=\"start-adornment-email\" placeholder=\"Email / UserId\" startAdornment={<Sms />} />\n<OutlinedInput\n  id=\"end-adornment-password\"\n  type=\"password\"\n  placeholder=\"Password\"\n  endAdornment={\n    <InputAdornment position=\"end\">\n      <IconButton aria-label=\"toggle password visibility\" edge=\"end\" color=\"secondary\">\n        <EyeSlash />\n      </IconButton>\n    </InputAdornment>\n  }\n/>`;\n\n  const sizeTextfeildCodeString = `<TextField id=\"outlined-basic-small\" label=\"Small\" size=\"small\" />\n<TextField id=\"outlined-basic-default\" label=\"Medium\" />\n<TextField\n  id=\"outlined-basic-custom\"\n  label=\"Custom\"\n  sx={{\n    '& .MuiInputLabel-root': { fontSize: '1rem' },\n    '& .MuiOutlinedInput-root': { fontSize: '1rem' }\n  }}\n/>`;\n\n  const eventTextfeildCodeString = `<TextField id=\"outlined-basic-auto\" label=\"Auto Focus\" autoFocus />`;\n\n  const validationTextfeildCodeString = `<TextField error id=\"outlined-error\" label=\"Error\" defaultValue=\"Hello World\" />\n<TextField\n  error\n  id=\"outlined-error-helper-text\"\n  label=\"Error\"\n  defaultValue=\"Hello World\"\n  helperText=\"Incorrect entry.\"\n/>`;\n\n  const multilineTextfeildCodeString = `<TextField\n  id=\"outlined-multiline-static\"\n  fullWidth\n  label=\"Multiline\"\n  multiline\n  rows={5}\n  defaultValue=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text\"\n/>`;\n\n  const adornmentTextfeildCodeString = `<TextField\n  placeholder=\"Website URL\"\n  id=\"url-start-adornment\"\n  InputProps={{\n    startAdornment: 'https://'\n  }}\n/>\n<TextField\n  placeholder=\"Website URL\"\n  id=\"outlined-end-adornment\"\n  InputProps={{\n    endAdornment: '.com'\n  }}\n/>\n<OutlinedInput\n  id=\"text-adornment-password\"\n  type=\"password\"\n  placeholder=\"Password\"\n  endAdornment={\n    <InputAdornment position=\"end\">\n      <IconButton aria-label=\"toggle password visibility\" edge=\"end\" color=\"secondary\">\n        <EyeSlash />\n      </IconButton>\n    </InputAdornment>\n  }\n/>\n<TextField\n  placeholder=\"0.00\"\n  id=\"outlined-start-adornment\"\n  InputProps={{\n    startAdornment: '$'\n  }}\n/>`;\n\n  const widthTextfeildCodeString = `<TextField fullWidth id=\"outlined-basic-fullwidth\" label=\"Fullwidth\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Text Field\"\n        caption=\"Text fields let users enter and edit text.\"\n        directory=\"src/pages/components-overview/textfield\"\n        link=\"https://mui.com/material-ui/react-text-field/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicTextfeildCodeString}>\n                <Stack spacing={2}>\n                  <TextField id=\"outlined-basic\" placeholder=\"Outlined\" />\n                  <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n                  <TextField id=\"standard-basic\" label=\"Standard\" variant=\"standard\" />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Form Props\" codeString={propsTextfeildCodeString}>\n                <form id=\"form-props\">\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={2}>\n                        <TextField required id=\"outlined-required\" placeholder=\"Required *\" defaultValue=\"Hello World\" />\n                        <TextField id=\"helper-text-basic\" placeholder=\"Helper text\" helperText=\"Helper text\" />\n                        <TextField id=\"outlined-number\" placeholder=\"Number\" type=\"number\" />\n                        <TextField\n                          id=\"outlined-number-readonly\"\n                          defaultValue=\"Read Only\"\n                          InputProps={{\n                            readOnly: true\n                          }}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={2}>\n                        <OutlinedInput\n                          id=\"outlined-adornment-password\"\n                          type={values.showPassword ? 'text' : 'password'}\n                          value={values.password}\n                          onChange={handleChange('password')}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                aria-label=\"toggle password visibility\"\n                                onClick={handleClickShowPassword}\n                                onMouseDown={handleMouseDownPassword}\n                                edge=\"end\"\n                                color=\"secondary\"\n                              >\n                                {values.showPassword ? <Eye /> : <EyeSlash />}\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          autoComplete=\"outlined-adornment-password\"\n                        />\n                        <Stack>\n                          <InputLabel shrink htmlFor=\"with-label-input\">\n                            With Label\n                          </InputLabel>\n                          <FormControl variant=\"standard\">\n                            <TextField id=\"with-label-input\" placeholder=\"With Label\" />\n                          </FormControl>\n                        </Stack>\n                        <TextField id=\"disabled-basic\" placeholder=\"Disabled\" disabled />\n                        <TextField id=\"filled-search\" placeholder=\"Search\" type=\"search\" />\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </form>\n              </MainCard>\n              <MainCard title=\"With Icon\" codeString={iconTextfeildCodeString}>\n                <form id=\"with-icon\">\n                  <Stack spacing={2}>\n                    <OutlinedInput id=\"start-adornment-email\" placeholder=\"Email / UserId\" startAdornment={<Sms />} />\n                    <OutlinedInput\n                      id=\"end-adornment-password\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton aria-label=\"toggle password visibility\" edge=\"end\" color=\"secondary\">\n                            <EyeSlash />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"end-adornment-password\"\n                    />\n                  </Stack>\n                </form>\n              </MainCard>\n              <MainCard title=\"Sizes\" codeString={sizeTextfeildCodeString}>\n                <Stack spacing={2}>\n                  <TextField id=\"outlined-basic-small\" placeholder=\"Small\" size=\"small\" />\n                  <TextField id=\"outlined-basic-default\" placeholder=\"Medium\" />\n                  <TextField\n                    id=\"outlined-basic-custom\"\n                    placeholder=\"Custom\"\n                    sx={{\n                      '& .MuiInputLabel-root': { fontSize: '1rem' },\n                      '& .MuiOutlinedInput-root': { fontSize: '1rem' }\n                    }}\n                  />\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Event\" codeString={eventTextfeildCodeString}>\n                <TextField id=\"outlined-basic-auto\" placeholder=\"Auto Focus\" autoFocus />\n              </MainCard>\n              <MainCard title=\"Validation\" codeString={validationTextfeildCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={6}>\n                    <TextField error id=\"outlined-error\" placeholder=\"Error\" defaultValue=\"Hello World\" />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      error\n                      id=\"outlined-error-helper-text\"\n                      placeholder=\"Error\"\n                      defaultValue=\"Hello World\"\n                      helperText=\"Incorrect entry.\"\n                    />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Multiline\" codeString={multilineTextfeildCodeString}>\n                <TextField\n                  id=\"outlined-multiline-static\"\n                  fullWidth\n                  placeholder=\"Multiline\"\n                  multiline\n                  rows={5}\n                  defaultValue=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text\"\n                />\n              </MainCard>\n              <MainCard title=\"Input Adornments\" codeString={adornmentTextfeildCodeString}>\n                <form id=\"input-adornments\">\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={2}>\n                        <TextField\n                          placeholder=\"Website URL\"\n                          id=\"url-start-adornment\"\n                          InputProps={{\n                            startAdornment: 'https://'\n                          }}\n                        />\n                        <TextField\n                          placeholder=\"Website URL\"\n                          id=\"outlined-end-adornment\"\n                          InputProps={{\n                            endAdornment: '.com'\n                          }}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={2}>\n                        <OutlinedInput\n                          id=\"text-adornment-password\"\n                          type=\"password\"\n                          placeholder=\"Password\"\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton aria-label=\"toggle password visibility\" edge=\"end\" color=\"secondary\">\n                                <EyeSlash />\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          autoComplete=\"text-adornment-password\"\n                        />\n                        <TextField\n                          placeholder=\"0.00\"\n                          id=\"outlined-start-adornment\"\n                          InputProps={{\n                            startAdornment: '$'\n                          }}\n                        />\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </form>\n              </MainCard>\n              <MainCard title=\"Full Width\" codeString={widthTextfeildCodeString}>\n                <TextField fullWidth id=\"outlined-basic-fullwidth\" placeholder=\"Fullwidth\" />\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":14236},"src/pages/forms/layouts/sticky-bar.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CardContent from '@mui/material/CardContent';\nimport CardActions from '@mui/material/CardActions';\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Divider from '@mui/material/Divider';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { HEADER_HEIGHT } from 'config';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Personalcard } from 'iconsax-react';\n\n// ==============================|| LAYOUTS - STICKY ACTION BAR ||============================== //\n\nexport default function StickyActionBar() {\n  const theme = useTheme();\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard content={false} sx={{ overflow: 'visible' }}>\n          <CardActions\n            sx={{\n              position: 'sticky',\n              top: HEADER_HEIGHT,\n              bgcolor: 'background.default',\n              zIndex: 1,\n              borderBottom: '1px solid',\n              borderBottomColor: theme.palette.divider\n            }}\n          >\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ width: 1 }}>\n              <Typography variant=\"h5\" sx={{ m: 0, pl: 1.5 }}>\n                Sticky Action Bar:\n              </Typography>\n              <Stack direction=\"row\" spacing={1} sx={{ px: 1.5, py: 0.75 }}>\n                <Button color=\"error\" size=\"small\">\n                  Cancel\n                </Button>\n                <Button variant=\"contained\" size=\"small\">\n                  Submit\n                </Button>\n              </Stack>\n            </Stack>\n          </CardActions>\n          <CardContent>\n            <Grid container spacing={3} alignItems=\"center\">\n              <Grid item xs={12}>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <Avatar variant=\"rounded\" color=\"inherit\" sx={{ bgcolor: 'secondary.main', ml: 'auto' }}>\n                      <Personalcard />\n                    </Avatar>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <Typography variant=\"h3\" sx={{ mb: 0 }}>\n                      Personal Information\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ mb: 2 }}>\n                      Sticky Action Bar Lorem Ipsum is simply\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12} sm={3} lg={4} />\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                      A. Personal Info:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter full name\" />\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter email\" />\n                    <FormHelperText>Please enter your Email</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Password :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter Password\" />\n                    <FormHelperText>Please enter your Password</FormHelperText>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12} sm={3} lg={4} />\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                      B. Educational Info:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Degree Name :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter Degree name\" />\n                    <FormHelperText>Please enter your Degree name</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Passing Year :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter Passing Year\" />\n                    <FormHelperText>Please enter Passing Year</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>College Name :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter College name\" />\n                    <FormHelperText>Please enter your College name</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Work Experience :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <TextField fullWidth placeholder=\"Enter Work Experience\" />\n                    <FormHelperText>Please enter your Work Experience</FormHelperText>\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '1 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Language :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                    <FormControlLabel control={<Checkbox />} label=\"French\" />\n                    <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                  </Grid>\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '1 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Hobby :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={6}>\n                    <FormControlLabel control={<Checkbox />} label=\"Reading\" />\n                    <FormControlLabel control={<Checkbox />} label=\"Dancing\" />\n                    <FormControlLabel control={<Checkbox />} label=\"Swimming\" />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardActions>\n            <Stack direction=\"row\" spacing={1} justifyContent=\"center\" sx={{ width: 1, px: 1.5, py: 0.75 }}>\n              <Button color=\"error\" size=\"small\">\n                Cancel\n              </Button>\n              <Button variant=\"contained\" size=\"small\">\n                Submit\n              </Button>\n            </Stack>\n          </CardActions>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":8788},"src/sections/apps/e-commerce/products/ProductFilter.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Rating from '@mui/material/Rating';\nimport Slider from '@mui/material/Slider';\nimport Checkbox from '@mui/material/Checkbox';\nimport Skeleton from '@mui/material/Skeleton';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport Colors from './Colors';\n\n// ==============================|| PRODUCT - GENDER FILTER ||============================== //\n\nfunction Gender({ gender, handelFilter }) {\n  const [isGenderLoading, setGenderLoading] = useState(true);\n  useEffect(() => {\n    setGenderLoading(false);\n  }, []);\n\n  return (\n    <Stack>\n      {isGenderLoading ? (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={42} />\n      ) : (\n        <>\n          <Typography variant=\"h5\">Gender</Typography>\n          <Box sx={{ pl: 0.5 }}>\n            <Stack>\n              <FormControlLabel\n                control={<Checkbox checked={gender.some((item) => item === 'male')} />}\n                onChange={() => handelFilter('gender', 'male')}\n                label=\"Male\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={gender.some((item) => item === 'female')}\n                    onChange={() => handelFilter('gender', 'female')}\n                    color=\"secondary\"\n                  />\n                }\n                label=\"Female\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={gender.some((item) => item === 'kids')}\n                    onChange={() => handelFilter('gender', 'kids')}\n                    color=\"error\"\n                  />\n                }\n                label=\"Kids\"\n              />\n            </Stack>\n          </Box>\n        </>\n      )}\n    </Stack>\n  );\n}\n\n// ==============================|| PRODUCT GRID - CATEGORIES FILTER ||============================== //\n\nfunction Categories({ categories, handelFilter }) {\n  const [isCategoriesLoading, setCategoriesLoading] = useState(true);\n  useEffect(() => {\n    setCategoriesLoading(false);\n  }, []);\n\n  return (\n    <Stack>\n      {isCategoriesLoading ? (\n        <Grid item xs={12}>\n          <Skeleton variant=\"rectangular\" width=\"100%\" height={96} />\n        </Grid>\n      ) : (\n        <>\n          <Typography variant=\"h5\">Categories</Typography>\n          <Box sx={{ pl: 0.5 }}>\n            <Stack>\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'all')} />}\n                onChange={() => handelFilter('categories', 'all')}\n                label=\"All\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'electronics')} />}\n                onChange={() => handelFilter('categories', 'electronics')}\n                label=\"Electronics\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'fashion')} />}\n                onChange={() => handelFilter('categories', 'fashion')}\n                label=\"Fashion\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'books')} />}\n                onChange={() => handelFilter('categories', 'books')}\n                label=\"Book\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'toys')} />}\n                onChange={() => handelFilter('categories', 'toys')}\n                label=\"Toys\"\n              />\n              <FormControlLabel\n                control={<Checkbox checked={categories.some((item) => item === 'kitchen')} />}\n                onChange={() => handelFilter('categories', 'kitchen')}\n                label=\"Home & Kitchen\"\n              />\n            </Stack>\n          </Box>\n        </>\n      )}\n    </Stack>\n  );\n}\n\n// ==============================|| PRODUCT GRID - PRICE FILTER ||============================== //\n\nfunction Price({ handelFilter }) {\n  const [isPriceLoading, setPriceLoading] = useState(true);\n  useEffect(() => {\n    setPriceLoading(false);\n  }, []);\n\n  const valuetext = (value) => `${value}`;\n\n  const [value, setValue] = useState([0, 300]);\n  const handleSlider = (event, newValue) => {\n    setValue(newValue);\n    const data = `${newValue[0]}-${newValue[1]}`;\n    handelFilter('price', data);\n  };\n\n  return (\n    <>\n      {isPriceLoading ? (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={172} />\n      ) : (\n        <Stack spacing={1}>\n          <Typography variant=\"h5\">Price</Typography>\n          <Stack direction=\"row\" spacing={2}>\n            <Stack spacing={1}>\n              <Typography color=\"text.secondary\">Min</Typography>\n              <TextField\n                value={value[0]}\n                InputProps={{\n                  readOnly: true\n                }}\n              />\n            </Stack>\n            <Stack spacing={1}>\n              <Typography color=\"text.secondary\">Max</Typography>\n              <TextField\n                value={value[1]}\n                InputProps={{\n                  readOnly: true\n                }}\n              />\n            </Stack>\n          </Stack>\n          <Box sx={{ px: 0.75 }}>\n            <Slider min={0} max={1000} value={value} onChange={handleSlider} valueLabelDisplay=\"auto\" getAriaValueText={valuetext} />\n          </Box>\n        </Stack>\n      )}\n    </>\n  );\n}\n\n// ==============================|| PRODUCT GRID - RATING FILTER ||============================== //\n\nfunction RatingSection({ rating, handelFilter }) {\n  const [isRatingLoading, setRatingLoading] = useState(true);\n  useEffect(() => {\n    setRatingLoading(false);\n  }, []);\n\n  return (\n    <>\n      {isRatingLoading ? (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={172} />\n      ) : (\n        <Stack spacing={1}>\n          <Typography variant=\"h5\">Rating</Typography>\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            <Rating\n              precision={0.5}\n              name=\"simple-controlled\"\n              value={rating}\n              onChange={(event, newValue) => handelFilter('rating', '', newValue)}\n            />\n            <Typography component=\"legend\">({rating})</Typography>\n          </Stack>\n        </Stack>\n      )}\n    </>\n  );\n}\n\n// ==============================|| PRODUCT GRID - FILTER ||============================== //\n\nconst ProductFilter = ({ filter, handelFilter }) => (\n  <Grid container direction=\"column\" rowSpacing={3}>\n    <Grid item>\n      <Gender gender={filter.gender} handelFilter={handelFilter} />\n    </Grid>\n    <Grid item>\n      <Categories categories={filter.categories} handelFilter={handelFilter} />\n    </Grid>\n    <Grid item>\n      <Colors colors={filter.colors} handelFilter={handelFilter} />\n    </Grid>\n    <Grid item>\n      <Price handelFilter={handelFilter} />\n    </Grid>\n    <Grid item>\n      <RatingSection rating={filter.rating} handelFilter={handelFilter} />\n    </Grid>\n  </Grid>\n);\n\nexport default ProductFilter;\n\nGender.propTypes = { gender: PropTypes.array, handelFilter: PropTypes.func };\n\nCategories.propTypes = { categories: PropTypes.array, handelFilter: PropTypes.func };\n\nPrice.propTypes = { handelFilter: PropTypes.func, params: PropTypes.string };\n\nRatingSection.propTypes = { rating: PropTypes.number, handelFilter: PropTypes.func };\n\nProductFilter.propTypes = { filter: PropTypes.any, handelFilter: PropTypes.func };\n","size_bytes":7861},"src/sections/widget/chart/RepeatCustomerChart.jsx":{"content":"import { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst areaChartOptions = {\n  chart: {\n    type: 'area',\n    toolbar: {\n      show: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: 1\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shadeIntensity: 1,\n      type: 'vertical',\n      inverseColors: false,\n      opacityFrom: 0.5,\n      opacityTo: 0\n    }\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '45%',\n      borderRadius: 4\n    }\n  },\n  grid: {\n    strokeDashArray: 4\n  }\n};\n\n// ==============================|| CHART - REPEAT CUSTOMER CHART ||============================== //\n\nexport default function RepeatCustomerChart() {\n  const theme = useTheme();\n\n  const mode = theme.palette.mode;\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary.main, theme.palette.primary[700]],\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        labels: {\n          style: {\n            colors: [\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary\n            ]\n          }\n        },\n        axisBorder: {\n          show: false,\n          color: line\n        },\n        axisTicks: {\n          show: false\n        },\n        tickAmount: 11\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      name: 'Page Views',\n      data: [30, 60, 40, 70, 50, 90, 50, 55, 45, 60, 50, 65]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={260} />;\n}\n","size_bytes":2444},"src/sections/maps/side-by-side/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\n// ==============================|| SIDE BY SIDE - CONTROL ||============================== //\n\nfunction ControlPanel({ mode, onModeChange }) {\n  return (\n    <ControlPanelStyled>\n      <ToggleButtonGroup value={mode} exclusive onChange={onModeChange}>\n        <ToggleButton value=\"side-by-side\">Side by side</ToggleButton>\n        <ToggleButton value=\"split-screen\">Split screen</ToggleButton>\n      </ToggleButtonGroup>\n    </ControlPanelStyled>\n  );\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = { mode: PropTypes.any, onModeChange: PropTypes.any };\n","size_bytes":873},"src/components/cards/statistics/AnalyticsDataCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { TrendDown, TrendUp } from 'iconsax-react';\n\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\n\nexport default function AnalyticsDataCard({ color = 'primary', title, count, percentage, isLoss, children }) {\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 2.25 }}>\n        <Stack spacing={0.5}>\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            {title}\n          </Typography>\n          <Stack direction=\"row\" alignItems=\"center\">\n            <Typography variant=\"h4\" color=\"inherit\">\n              {count}\n            </Typography>\n            {percentage && (\n              <Chip\n                variant=\"combined\"\n                color={color}\n                icon={\n                  <>\n                    {!isLoss && <TrendUp variant=\"Bold\" />}\n                    {isLoss && <TrendDown variant=\"Bold\" />}\n                  </>\n                }\n                label={`${percentage}%`}\n                sx={{ ml: 1.25, pl: 0.5, borderRadius: 1 }}\n                size=\"small\"\n              />\n            )}\n          </Stack>\n        </Stack>\n      </Box>\n      {children}\n    </MainCard>\n  );\n}\n\nAnalyticsDataCard.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.number,\n  isLoss: PropTypes.bool,\n  children: PropTypes.any\n};\n","size_bytes":1691},"src/sections/components-overview/speeddial/SimpleSpeedDials.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Radio from '@mui/material/Radio';\nimport Switch from '@mui/material/Switch';\nimport FormLabel from '@mui/material/FormLabel';\nimport SpeedDial from '@mui/material/SpeedDial';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Heart, Printer, Save2, Share } from 'iconsax-react';\n\nexport default function SimpleSpeedDials() {\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  // fab action options\n  const actions = [\n    { icon: <Save2 />, name: 'Save' },\n    { icon: <Printer />, name: 'Print' },\n    { icon: <Share />, name: 'Share' },\n    { icon: <Heart />, name: 'Like' }\n  ];\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const [direction, setDirection] = useState('up');\n  const handleDirectionChange = (event) => {\n    setDirection(event.target.value);\n  };\n\n  const [hidden, setHidden] = useState(false);\n  const handleHiddenChange = (event) => {\n    setHidden(event.target.checked);\n  };\n\n  const basicSpeeddialCodeString = `<FormControlLabel control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"primary\" />} label=\"Hidden\" />\n<FormLabel component=\"legend\">Direction</FormLabel>\n<RadioGroup sx={{ mt: 1 }} aria-label=\"direction\" name=\"direction\" value={direction} onChange={handleDirectionChange} row>\n  <FormControlLabel value=\"up\" control={<Radio />} label=\"Up\" />\n  <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\n    <FormControlLabel value=\"right\" control={<Radio />} label=\"Right\" />\n  </Box>\n  <FormControlLabel value=\"down\" control={<Radio />} label=\"Down\" />\n  <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\n    <FormControlLabel value=\"left\" control={<Radio />} label=\"Left\" />\n  </Box>\n</RadioGroup>\n<Box sx={{ position: 'relative', marginTop: theme.spacing(3), height: 300 }}>\n  <SpeedDial\n    sx={{\n      position: 'absolute',\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n        bottom: theme.spacing(2),\n        right: theme.spacing(2)\n      },\n      '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n        top: theme.spacing(2),\n        left: theme.spacing(2)\n      }\n    }}\n    ariaLabel=\"SpeedDial example\"\n    hidden={hidden}\n    icon={<SpeedDialIcon />}\n    onClose={handleClose}\n    onOpen={handleOpen}\n    open={open}\n    direction={direction}\n  >\n    {actions.map((action) => (\n      <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} />\n    ))}\n  </SpeedDial>\n</Box>`;\n\n  return (\n    <MainCard title=\"Basic\" codeString={basicSpeeddialCodeString}>\n      <>\n        <FormControlLabel control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"primary\" />} label=\"Hidden\" />\n        <FormLabel component=\"legend\">Direction</FormLabel>\n        <RadioGroup sx={{ mt: 1 }} aria-label=\"direction\" name=\"direction\" value={direction} onChange={handleDirectionChange} row>\n          <FormControlLabel value=\"up\" control={<Radio />} label=\"Up\" />\n          <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\n            <FormControlLabel value=\"right\" control={<Radio />} label=\"Right\" />\n          </Box>\n          <FormControlLabel value=\"down\" control={<Radio />} label=\"Down\" />\n          <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\n            <FormControlLabel value=\"left\" control={<Radio />} label=\"Left\" />\n          </Box>\n        </RadioGroup>\n        <Box sx={{ position: 'relative', marginTop: theme.spacing(3), height: 300 }}>\n          <SpeedDial\n            sx={{\n              position: 'absolute',\n              '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': { bottom: theme.spacing(2), right: theme.spacing(2) },\n              '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': { top: theme.spacing(2), left: theme.spacing(2) },\n              '& .MuiSpeedDialAction-fab': { bgcolor: 'secondary.200' }\n            }}\n            ariaLabel=\"SpeedDial example\"\n            hidden={hidden}\n            icon={<SpeedDialIcon />}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            open={open}\n            direction={direction}\n          >\n            {actions.map((action) => (\n              <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} />\n            ))}\n          </SpeedDial>\n        </Box>\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":4811},"src/utils/getWindowScheme.js":{"content":"function getWindowScheme() {\n  const mq = window.matchMedia('(prefers-color-scheme: dark)');\n  return mq.matches;\n}\n\nexport default getWindowScheme;\n","size_bytes":149},"src/sections/widget/data/LatestCustomers.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport CardMedia from '@mui/material/CardMedia';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\n// assets\nimport Flag1 from 'assets/images/widget/AUSTRALIA.jpg';\nimport Flag2 from 'assets/images/widget/BRAZIL.jpg';\nimport Flag3 from 'assets/images/widget/GERMANY.jpg';\nimport Flag4 from 'assets/images/widget/UK.jpg';\nimport Flag5 from 'assets/images/widget/USA.jpg';\n\n// table data\nfunction createData(image, subject, dept, date) {\n  return { image, subject, dept, date };\n}\n\nconst rows = [\n  createData(Flag1, 'Germany', 'Angelina Jolly', '56.23%'),\n  createData(Flag2, 'USA', 'John Deo', '25.23%'),\n  createData(Flag3, 'Australia', 'Jenifer Vintage', '12.45%'),\n  createData(Flag4, 'United Kingdom', 'Lori Moore', '8.65%'),\n  createData(Flag5, 'Brazil', 'Allianz Dacron', '3.56%'),\n  createData(Flag1, 'Australia', 'Jenifer Vintage', '12.45%'),\n  createData(Flag3, 'USA', 'John Deo', '25.23%'),\n  createData(Flag5, 'Australia', 'Jenifer Vintage', '12.45%'),\n  createData(Flag2, 'United Kingdom', 'Lori Moore', '8.65%')\n];\n\n// =========================|| DATA WIDGET - LATEST CUSTOMERS ||========================= //\n\nexport default function LatestCustomers() {\n  return (\n    <MainCard\n      title=\"Latest Customers\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <SimpleBar sx={{ height: 290 }}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell sx={{ pl: 3 }}>#</TableCell>\n                <TableCell>Country</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell align=\"right\" sx={{ pr: 3 }}>\n                  Average\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, index) => (\n                <TableRow hover key={index}>\n                  <TableCell sx={{ pl: 3 }}>\n                    <CardMedia component=\"img\" image={row.image} title=\"image\" sx={{ width: 30, height: 'auto' }} />\n                  </TableCell>\n                  <TableCell>{row.subject}</TableCell>\n                  <TableCell>{row.dept}</TableCell>\n                  <TableCell align=\"right\" sx={{ pr: 3 }}>\n                    {row.date}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </SimpleBar>\n    </MainCard>\n  );\n}\n","size_bytes":2981},"src/components/logo/LogoIcon.jsx":{"content":"import logoIcon from 'assets/images/Logo.svg';\n\n// ==============================|| LOGO ICON SVG ||============================== //\n\nexport default function LogoIcon() {\n  return (\n    <img src={logoIcon} alt=\"icon logo\" height=\"auto\" />\n  );\n}\n","size_bytes":247},"src/components/cards/e-commerce/ProductReview.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Rating from '@mui/material/Rating';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| PRODUCT DETAILS - REVIEW ||============================== //\n\nexport default function ProductReview({ avatar, date, name, rating, review }) {\n  return (\n    <Grid item xs={12}>\n      <Stack direction=\"row\" spacing={1}>\n        <Avatar alt={name} src={avatar && getImageUrl(`${avatar}`, ImagePath.USERS)} />\n        <Stack spacing={2}>\n          <Stack spacing={0.25}>\n            <Typography variant=\"subtitle1\" sx={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', display: 'block' }}>\n              {name}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {date}\n            </Typography>\n            <Rating size=\"small\" name=\"simple-controlled\" value={rating < 4 ? rating + 1 : rating} precision={0.1} readOnly />\n          </Stack>\n          <Typography variant=\"body2\">{review}</Typography>\n        </Stack>\n      </Stack>\n    </Grid>\n  );\n}\n\nProductReview.propTypes = {\n  avatar: PropTypes.string,\n  date: PropTypes.oneOfType([PropTypes.string, PropTypes.any]),\n  name: PropTypes.string,\n  rating: PropTypes.number,\n  review: PropTypes.string\n};\n","size_bytes":1522},"src/sections/maps/clusters-map/layers.js":{"content":"// ==============================|| CLUSTERS - LAYER ||============================== //\n\nexport const clusterLayer = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n    'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n  }\n};\n\nexport const clusterCountLayer = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'earthquakes',\n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  }\n};\n\nexport const unclusteredPointLayer = {\n  id: 'unclustered-point',\n  type: 'circle',\n  source: 'earthquakes',\n  filter: ['!', ['has', 'point_count']],\n  paint: {\n    'circle-color': '#11b4da',\n    'circle-radius': 4,\n    'circle-stroke-width': 1,\n    'circle-stroke-color': '#FFFFFF'\n  }\n};\n","size_bytes":986},"src/components/third-party/react-table/RowSelection.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Chip from '@mui/material/Chip';\n\n// ==============================|| ROW SELECTION - PREVIEW ||============================== //\n\nexport default function RowSelection({ selected }) {\n  return (\n    <>\n      {selected > 0 && (\n        <Chip\n          size=\"small\"\n          label={`${selected} row(s) selected`}\n          color=\"secondary\"\n          variant=\"light\"\n          sx={{ position: 'absolute', right: -1, top: -1, borderRadius: '0 4px 0 4px' }}\n        />\n      )}\n    </>\n  );\n}\n\nRowSelection.propTypes = { selected: PropTypes.number };\n","size_bytes":605},"src/sections/forms/validation/RadioGroupForms.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n/**\n * 'Select your favorite color'\n * yup.string Expected 0 arguments, but got 1 */\nconst validationSchema = yup.object({\n  color: yup.string().required('Color selection is required')\n});\n\n// ==============================|| FORM VALIDATION - RADIO GROUP  ||============================== //\n\nexport default function RadioGroupForms() {\n  const formik = useFormik({\n    initialValues: {\n      color: ''\n    },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'Radio - Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n    }\n  });\n\n  return (\n    <MainCard title=\"Radio\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item>\n            <FormControl>\n              <RadioGroup row aria-label=\"color\" value={formik.values.color} onChange={formik.handleChange} name=\"color\" id=\"color\">\n                <FormControlLabel value=\"primary\" control={<Radio />} label=\"Primary\" />\n                <FormControlLabel value=\"error\" control={<Radio color=\"error\" />} label=\"Error\" />\n                <FormControlLabel value=\"secondary\" control={<Radio color=\"secondary\" />} label=\"Secondary\" />\n              </RadioGroup>\n            </FormControl>\n            {formik.errors.color && (\n              <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                {' '}\n                {formik.errors.color}{' '}\n              </FormHelperText>\n            )}\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":2563},"src/sections/apps/kanban/Backlogs/AddItem.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Drawer from '@mui/material/Drawer';\nimport Select from '@mui/material/Select';\nimport Tooltip from '@mui/material/Tooltip';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\n\n// third-party\nimport * as yup from 'yup';\nimport { Chance } from 'chance';\nimport { useFormik } from 'formik';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport UploadMultiFile from 'components/third-party/dropzone/MultiFile';\n\nimport { DropzopType } from 'config';\nimport { addItem, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nconst chance = new Chance();\nconst validationSchema = yup.object({\n  title: yup.string().required('Task title is required'),\n  dueDate: yup.date().required('Due date is required').nullable()\n});\n\n// ==============================|| KANBAN BACKLOGS - ADD ITEM ||============================== //\n\nexport default function AddItem({ open, handleDrawerOpen, storyId }) {\n  const { backlogs } = useGetBacklogs();\n\n  const formik = useFormik({\n    initialValues: {\n      id: '',\n      title: '',\n      assign: null,\n      priority: 'low',\n      dueDate: null,\n      description: '',\n      commentIds: '',\n      image: false,\n      storyId: '',\n      columnId: backlogs?.columns[0].id,\n      files: []\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      const item = {\n        id: values.id || `${chance.integer({ min: 1000, max: 9999 })}`,\n        title: values.title,\n        assign: values.assign,\n        priority: values.priority,\n        dueDate: values.dueDate ? new Date(values.dueDate) : new Date(),\n        description: values.description,\n        commentIds: values.commentIds,\n        image: values.image\n      };\n      addItem(values.columnId, item, storyId);\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n      handleDrawerOpen();\n      resetForm();\n    }\n  });\n\n  return (\n    <Drawer\n      sx={{\n        ml: open ? 3 : 0,\n        flexShrink: 0,\n        zIndex: 1200,\n        overflowX: 'hidden',\n        width: { xs: 320, md: 450 },\n        '& .MuiDrawer-paper': {\n          width: { xs: 320, md: 450 },\n          border: 'none',\n          borderRadius: '0px'\n        }\n      }}\n      variant=\"temporary\"\n      anchor=\"right\"\n      open={open}\n      ModalProps={{ keepMounted: true }}\n      onClose={handleDrawerOpen}\n    >\n      {open && (\n        <SimpleBar sx={{ overflowX: 'hidden', height: '100vh' }}>\n          <Box sx={{ p: 3 }}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n              <Typography variant=\"h4\">Add Task</Typography>\n              <Tooltip title=\"Close\">\n                <IconButton color=\"secondary\" onClick={handleDrawerOpen} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                  <Add style={{ transform: 'rotate(49deg)' }} />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Box>\n          <Divider />\n          <Box sx={{ p: 3 }}>\n            <form onSubmit={formik.handleSubmit}>\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <Grid container spacing={2.5}>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Title</InputLabel>\n                      <TextField\n                        fullWidth\n                        id=\"title\"\n                        name=\"title\"\n                        placeholder=\"Title\"\n                        value={formik.values.title}\n                        onChange={formik.handleChange}\n                        error={formik.touched.title && Boolean(formik.errors.title)}\n                        helperText={formik.touched.title && formik.errors.title}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Assign to</InputLabel>\n                      <Autocomplete\n                        id=\"assign\"\n                        value={backlogs?.profiles.find((profile) => profile.id === formik.values.assign) || null}\n                        onChange={(event, value) => {\n                          formik.setFieldValue('assign', value?.id);\n                        }}\n                        options={backlogs?.profiles}\n                        fullWidth\n                        autoHighlight\n                        getOptionLabel={(option) => option.name}\n                        isOptionEqualToValue={(option) => option.id === formik.values.assign}\n                        renderOption={(props, option) => (\n                          <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                            <img loading=\"lazy\" width=\"20\" src={getImageUrl(`${option.avatar}`, ImagePath.USERS)} alt=\"\" />\n                            {option.name}\n                          </Box>\n                        )}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            placeholder=\"Choose a assignee\"\n                            inputProps={{\n                              ...params.inputProps,\n                              autoComplete: 'new-password' // disable autocomplete and autofill\n                            }}\n                          />\n                        )}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Prioritize</InputLabel>\n                      <FormControl>\n                        <RadioGroup\n                          row\n                          aria-label=\"color\"\n                          value={formik.values.priority}\n                          onChange={formik.handleChange}\n                          name=\"priority\"\n                          id=\"priority\"\n                        >\n                          <FormControlLabel value=\"low\" control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />} label=\"Low\" />\n                          <FormControlLabel\n                            value=\"medium\"\n                            control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />}\n                            label=\"Medium\"\n                          />\n                          <FormControlLabel value=\"high\" control={<Radio color=\"error\" sx={{ color: 'error.main' }} />} label=\"High\" />\n                        </RadioGroup>\n                      </FormControl>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Due date</InputLabel>\n                      <DesktopDatePicker\n                        value={formik.values.dueDate}\n                        format=\"dd/MM/yyyy\"\n                        onChange={(date) => {\n                          formik.setFieldValue('dueDate', date);\n                        }}\n                      />\n                    </Stack>\n                    {formik.touched.dueDate && formik.errors.dueDate && (\n                      <FormHelperText error={true}>{formik.errors.dueDate}</FormHelperText>\n                    )}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Description</InputLabel>\n                      <TextField\n                        fullWidth\n                        id=\"description\"\n                        name=\"description\"\n                        multiline\n                        rows={3}\n                        value={formik.values.description}\n                        onChange={formik.handleChange}\n                        error={formik.touched.description && Boolean(formik.errors.description)}\n                        helperText={formik.touched.description && formik.errors.description}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>State</InputLabel>\n                      <FormControl fullWidth sx={{ m: 1 }}>\n                        <Select\n                          id=\"columnId\"\n                          name=\"columnId\"\n                          displayEmpty\n                          value={formik.values.columnId}\n                          onChange={formik.handleChange}\n                          inputProps={{ 'aria-label': 'Without label' }}\n                        >\n                          {backlogs?.columns.map((column, index) => (\n                            <MenuItem key={index} value={column.id}>\n                              {column.title}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                      <Grid item xs={12}>\n                        <InputLabel sx={{ mt: 0.5 }}>Attachments:</InputLabel>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <UploadMultiFile\n                          type={DropzopType.STANDARD}\n                          showList={true}\n                          setFieldValue={formik.setFieldValue}\n                          files={formik.values.files}\n                          error={formik.touched.files && !!formik.errors.files}\n                        />\n                      </Grid>\n                      {formik.touched.files && formik.errors.files && (\n                        <Grid item xs={12}>\n                          <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                            {formik.errors.files}\n                          </FormHelperText>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <AnimateButton>\n                      <Button fullWidth variant=\"contained\" type=\"submit\">\n                        Save\n                      </Button>\n                    </AnimateButton>\n                  </Grid>\n                </Grid>\n              </LocalizationProvider>\n            </form>\n          </Box>\n        </SimpleBar>\n      )}\n    </Drawer>\n  );\n}\n\nAddItem.propTypes = { open: PropTypes.bool, handleDrawerOpen: PropTypes.func, storyId: PropTypes.string };\n","size_bytes":11938},"src/themes/overrides/AccordionDetails.js":{"content":"// ==============================|| OVERRIDES - ACCORDION DETAILS ||============================== //\n\nexport default function AccordionDetails(theme) {\n  return {\n    MuiAccordionDetails: {\n      styleOverrides: {\n        root: {\n          padding: theme.spacing(2),\n          borderTop: `1px solid ${theme.palette.secondary.light}`\n        }\n      }\n    }\n  };\n}\n","size_bytes":365},"src/sections/landing/Testimonial.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { motion } from 'framer-motion';\nimport Marquee from 'react-fast-marquee';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\nimport MainCard from 'components/MainCard';\nimport { ThemeDirection } from 'config';\n\n// assets\nimport Avatar from 'components/@extended/Avatar';\nimport Avatar1 from 'assets/images/users/avatar-6.png';\nimport Avatar2 from 'assets/images/users/avatar-1.png';\nimport Avatar3 from 'assets/images/users/avatar-2.png';\nimport Avatar4 from 'assets/images/users/avatar-3.png';\nimport Avatar5 from 'assets/images/users/avatar-4.png';\nimport Avatar6 from 'assets/images/users/avatar-5.png';\nimport Avatar7 from 'assets/images/users/avatar-7.png';\nimport Avatar8 from 'assets/images/users/avatar-8.png';\n\n// ================================|| SLIDER - ITEMS ||================================ //\n\nfunction Item({ item }) {\n  return (\n    <MainCard sx={{ width: { xs: '300px', md: '420px' }, cursor: 'pointer', my: 0.2, mx: 1.5 }}>\n      <Stack direction=\"row\" alignItems=\"flex-start\" spacing={2}>\n        <Avatar alt=\"Avatar\" size=\"lg\" src={item.image}></Avatar>\n        <Stack>\n          <Typography>{item.text}</Typography>\n          <Typography>\n            <Typography component=\"span\" variant=\"caption\">\n              {item.name}\n            </Typography>\n            {' - '}\n            <Typography component=\"span\" color=\"text.secondary\">\n              {item.designation}\n            </Typography>\n          </Typography>\n        </Stack>\n      </Stack>\n    </MainCard>\n  );\n}\n\n// ==============================|| LANDING - TestimonialPage ||============================== //\n\nexport default function TestimonialPage() {\n  const theme = useTheme();\n  const items = [\n    { image: Avatar1, text: '“Amazing template for fast develop.💎“', name: 'devbar', designation: 'Customizability' },\n    {\n      image: Avatar2,\n      text: '“Code quality is amazing. Design is astonishing. very easy to customize..😍“',\n      name: 'shahabblouch',\n      designation: 'Code Quality'\n    },\n    {\n      image: Avatar3,\n      text: '“This has been one of my favorite admin dashboards to use. 😍“',\n      name: 'htmhell',\n      designation: 'Design Quality'\n    },\n    {\n      image: Avatar4,\n      text: '“Excellent support, if we need any modification, they are doing immediately“',\n      name: 'hemchandkodali',\n      designation: 'Customer Support'\n    },\n    {\n      image: Avatar5,\n      text: '“For developers like me, this is the total package! 😍 “',\n      name: 'sumaranjum',\n      designation: 'Feature Availability'\n    },\n    {\n      image: Avatar6,\n      text: '“I love the looks of Able Pro 7.0. I really like the colors you guys have chosen for this theme. It looks really nice.. 💎“',\n      name: 'ritelogic',\n      designation: 'Other'\n    },\n    {\n      image: Avatar7,\n      text: '“The author is very nice and solved my problem inmediately 😍 “',\n      name: 'richitela',\n      designation: 'Customer Support'\n    },\n    {\n      image: Avatar8,\n      text: '“Perfect for my need. Elegant look n feel with blazing fast code. 💎“',\n      name: 'Genstiade',\n      designation: 'Feature Availability'\n    }\n  ];\n  return (\n    <>\n      <Box sx={{ mt: { md: 15, xs: 2.5 } }}>\n        <Container>\n          <Grid container spacing={2} justifyContent=\"center\" sx={{ textAlign: 'center', marginBottom: 4 }}>\n            <Grid item xs={12}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.2\n                }}\n              >\n                <Typography variant=\"h2\">\n                  They{' '}\n                  <Typography variant=\"h2\" component=\"span\" sx={{ color: theme.palette.primary.main }}>\n                    love\n                  </Typography>{' '}\n                  Able Pro, Now your turn 😍\n                </Typography>\n              </motion.div>\n            </Grid>\n            <Grid item xs={12} md={7}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.4\n                }}\n              >\n                <Typography>\n                  We take pride in our Dashboard development, which has been consistently rated 4.6/5 by our satisfied customers. It brings\n                  us joy to share the positive feedback we have received from our loyal clients.\n                </Typography>\n              </motion.div>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n      <Box sx={{ mb: { md: 10, xs: 2.5 } }}>\n        <Grid container spacing={4}>\n          <Grid item xs={12} sx={{ direction: theme.direction }}>\n            <FadeInWhenVisible>\n              <Marquee pauseOnHover direction={theme.direction === ThemeDirection.RTL ? 'right' : 'left'} gradient={false}>\n                {items.map((item, index) => (\n                  <Item key={index} item={item} />\n                ))}\n              </Marquee>\n            </FadeInWhenVisible>\n          </Grid>\n          <Grid item xs={12} sx={{ direction: theme.direction }}>\n            <FadeInWhenVisible>\n              <Marquee pauseOnHover direction={theme.direction === ThemeDirection.RTL ? 'left' : 'right'} gradient={false}>\n                {items.map((item, index) => (\n                  <Item key={index} item={item} />\n                ))}\n              </Marquee>\n            </FadeInWhenVisible>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n\nItem.propTypes = { item: PropTypes.object };\n","size_bytes":6223},"src/themes/overrides/Drawer.js":{"content":"// ==============================|| OVERRIDES - DRAWER ||============================== //\n\nexport default function Drawer() {\n  return {\n    MuiDrawer: {\n      styleOverrides: {\n        paper: {\n          backgroundImage: 'none'\n        }\n      }\n    }\n  };\n}\n","size_bytes":261},"src/sections/landing/Technologies.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Badge from '@mui/material/Badge';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Container from '@mui/material/Container';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { motion } from 'framer-motion';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { DocumentDownload, ExportSquare } from 'iconsax-react';\nimport techBootstrap from 'assets/images/landing/tech-bootstrap.svg';\nimport techMui from 'assets/images/landing/tech-mui.svg';\nimport techCodeigniter from 'assets/images/landing/tech-codeigniter.svg';\nimport techAngular from 'assets/images/landing/tech-angular.svg';\nimport techNet from 'assets/images/landing/tech-net.svg';\nimport techFigma from 'assets/images/landing/tech-figma.svg';\nimport techVue from 'assets/images/landing/tech-vuetify.svg';\nimport techVuelaravel from 'assets/images/landing/tech-l+v.svg';\nimport techNextJS from 'assets/images/landing/tech-nextjs.svg';\nimport techLaravelBootstrap from 'assets/images/landing/tech-Laravel+Bootstrap.svg';\nimport techDjango from 'assets/images/landing/tech-Django.svg';\nimport techFlask from 'assets/images/landing/tech-Flask.svg';\nimport techNodeJs from 'assets/images/landing/tech-Node-js.svg';\nimport techSvelteKit from 'assets/images/landing/tech-SvelteKit.svg';\n\nlet value = window.location.search;\nconst params = new URLSearchParams(value);\nconst ispValue = params.get('isp');\nconst ispValueAvailable = ispValue !== null && parseInt(ispValue) === 1;\n\nconst Technologies = [\n  {\n    trending: false,\n    icon: techBootstrap,\n    title: 'Bootstrap 5',\n    description:\n      'Able Pro Bootstrap 5 - the top choice for responsive, mobile-first design, you can achieve both professional functionality and visual appeal.',\n    preview: 'https://ableproadmin.com/dashboard/index.html',\n    free: 'https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template',\n    target: '_blank'\n  },\n  {\n    trending: true,\n    icon: techMui,\n    title: 'React Material-UI',\n    description:\n      'Able Pro React dashboard template is a powerful tool that utilizes the Material-UI component library to create stunning and intuitive user interfaces.',\n    preview: '/login',\n    free: 'https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template',\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techAngular,\n    title: 'Angular',\n    description:\n      'Able Pro Angular dashboard template is a powerful tool that utilizes the Google Material component library to create stunning and intuitive user interfaces.',\n    preview: 'https://ableproadmin.com/angular/default/dashboard/default',\n    free: 'https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template',\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techVue,\n    title: 'Vue',\n    description:\n      'Able Pro Vue stands out as a versatile and powerful - Vue with Vuetify dashboard combines modern design principles with robust functionality.',\n    preview: 'https://ableproadmin.com/vue/dashboard/default',\n    free: null,\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techNextJS,\n    title: 'Next Js',\n    description:\n      'Able Pro Next Js dashboard template is a powerful tool that utilizes the Material-UI component library to create stunning and intuitive user interfaces.',\n    preview: 'https://able-pro-material-next-ts-navy.vercel.app/dashboard/default',\n    free: null,\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techNet,\n    title: 'Asp.net',\n    description:\n      'Able Pro .NET version is a robust dashboard template designed specifically for .NET developers. Its comes with a wide range of pre-built components.',\n    preview: 'https://able-pro.azurewebsites.net/Dashboard/Index',\n    free: 'https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template',\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techCodeigniter,\n    title: 'CodeIgniter',\n    description:\n      'Able Pro CodeIgniter version is a powerful dashboard template built specifically for developers who use the CodeIgniter PHP framework with Bootstrap.',\n    preview: 'https://ableproadmin.com/codeigniter/default/public/dashboard-default',\n    free: 'https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template',\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techVuelaravel,\n    title: 'Vuetify Laravel',\n    description:\n      'Able Pro Vue stands out as a versatile and powerful - Vue with Vuetify dashboard combines modern design principles with robust functionality.',\n    preview: 'https://phplaravel-207002-4524103.cloudwaysapps.com/build/dashboards/default',\n    free: null,\n    target: '_blank'\n  },\n  {\n    trending: false,\n    icon: techLaravelBootstrap,\n    title: 'Laravel Bootstrap',\n    description:\n      'Able Pro Laravel with Bootstrap provides a powerful set of tools and components, crafted specifically for Laravel, to simplify and accelerate your development process.',\n    preview: '#!',\n    free: null,\n    target: '_self'\n  },\n  {\n    trending: false,\n    icon: techDjango,\n    title: 'Django',\n    description:\n      'Able Pro Django is a powerful dashboard template designed for developers. it offers an extensive collection of pre-built components for seamless web development.',\n    preview: '#!',\n    free: null,\n    target: '_self'\n  },\n  {\n    trending: false,\n    icon: techFlask,\n    title: 'Flask',\n    description:\n      'Able Pro Flask is a versatile dashboard solution that offers a rich set of pre-built components to simplify web development.',\n    preview: '#!',\n    free: null,\n    target: '_self'\n  },\n  {\n    trending: false,\n    icon: techNodeJs,\n    title: 'NodeJs',\n    description:\n      'Able Pro Node.js combines flexibility and functionality with a variety of pre-built components tailored for Node.js, which make it easier to develop.',\n    preview: '#!',\n    free: null,\n    target: '_self'\n  },\n  {\n    trending: false,\n    icon: techSvelteKit,\n    title: 'Svelte',\n    description:\n      'Able Pro Svelte provides an extensive toolkit and components, allowing you to build dynamic and responsive interfaces with ease and efficiency.',\n    preview: '#!',\n    free: null,\n    target: '_self'\n  },\n  {\n    trending: false,\n    icon: techFigma,\n    title: 'Figma',\n    description:\n      'Able Pro comes with a Figma design file that allows you to customize and fine-tune your dashboard to meet your specific needs.',\n    preview: 'https://www.figma.com/file/6XqmRhRmkr33w0EFD49acY/Able-Pro--v9.0-Figma-Preview?type=design&mode=design&t=4FS2Lw6WxsmJ3RLm-0',\n    free: null,\n    target: '_blank'\n  }\n];\n\n// ==============================|| LANDING - TechnologiesPage ||============================== //\n\nexport default function TechnologiesPage() {\n  return (\n    <Container>\n      <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 15, xs: 2.5 }, mb: { md: 10, xs: 2.5 } }}>\n        <Grid item xs={12}>\n          <Grid container spacing={2} sx={{ textAlign: 'center', marginBottom: 3 }}>\n            <Grid item xs={12}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.2\n                }}\n              >\n                <Typography variant=\"h2\">Available Technologies</Typography>\n              </motion.div>\n            </Grid>\n            <Grid item xs={12}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.4\n                }}\n              >\n                <Typography>Explore the Demos of Able Pro in multiple technologies.</Typography>\n              </motion.div>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\">\n            {Technologies.map((tech, index) => (\n              <Grid item xs={12} md={6} lg={4} key={index}>\n                <FadeInWhenVisible>\n                  <MainCard>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12}>\n                        {tech.trending && (\n                          <Badge badgeContent=\"TRENDING\" color=\"error\" variant=\"light\">\n                            <CardMedia component=\"img\" image={tech.icon} sx={{ width: 'auto' }} />\n                          </Badge>\n                        )}\n                        {!tech.trending && <CardMedia component=\"img\" image={tech.icon} sx={{ width: 'auto' }} />}\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Typography variant=\"h4\">{tech.title}</Typography>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Typography>{tech.description}</Typography>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Grid container spacing={2} justifyContent=\"flex-start\">\n                          <Grid item>\n                            <Button\n                              variant=\"contained\"\n                              color=\"secondary\"\n                              size=\"large\"\n                              startIcon={<ExportSquare />}\n                              component={tech.title === 'React Material-UI' ? RouterLink : Link}\n                              {...(tech.title === 'React Material-UI'\n                                ? { to: ispValueAvailable ? `${tech.preview}?isp=1` : tech.preview }\n                                : { href: ispValueAvailable ? `${tech.preview}?isp=1` : tech.preview })}\n                              target={tech.target}\n                              sx={{\n                                fontWeight: 500,\n                                bgcolor: 'secondary.light',\n                                color: 'secondary.darker',\n                                '&:hover': { color: 'secondary.lighter' }\n                              }}\n                            >\n                              Reference\n                            </Button>\n                          </Grid>\n                          {!(tech.free == null) && (\n                            <Grid item>\n                              <Link component={RouterLink} to={tech.preview}>\n                                <IconButton\n                                  size=\"large\"\n                                  shape=\"rounded\"\n                                  color=\"secondary\"\n                                  sx={{\n                                    bgcolor: 'secondary.lighter',\n                                    color: 'secondary.darker',\n                                    '&:hover': { color: 'secondary.lighter', bgcolor: 'secondary.darker' }\n                                  }}\n                                >\n                                  <DocumentDownload />\n                                </IconButton>\n                              </Link>\n                            </Grid>\n                          )}\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </MainCard>\n                </FadeInWhenVisible>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","size_bytes":11976},"src/hooks/useAuth.js":{"content":"import { useContext } from 'react';\n\n// auth provider\nimport AuthContext from 'contexts/JWTContext';\n// import AuthContext from 'contexts/FirebaseContext';\n// import AuthContext from 'contexts/AWSCognitoContext';\n// import AuthContext from 'contexts/Auth0Context';\n\n// ==============================|| HOOKS - AUTH ||============================== //\n\nexport default function useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) throw new Error('context must be use inside provider');\n\n  return context;\n}\n","size_bytes":525},"src/sections/widget/statistics/SwitchBalanace.jsx":{"content":"// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowSwapHorizontal } from 'iconsax-react';\n\nexport default function SwitchBalanace() {\n  const theme = useTheme();\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        bgcolor: alpha(theme.palette.primary.main, 1),\n        color: 'common.white',\n        '&:after': {\n          content: '\"\"',\n          background: `linear-gradient(245deg, transparent 25.46%, rgba(0, 0, 0, 0.2) 68.77%, rgba(0, 0, 0, 0.3) 81.72%)`,\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 1,\n          opacity: 0.6\n        }\n      }}\n    >\n      <Box sx={{ p: 2, position: 'inherit', zIndex: 2 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Stack>\n            <Typography>Available Balance</Typography>\n            <Typography variant=\"h4\">$1,234.90</Typography>\n          </Stack>\n          <Avatar\n            variant=\"rounded\"\n            type=\"filled\"\n            size=\"lg\"\n            sx={{ bgcolor: theme.palette.mode === ThemeMode.DARK ? 'primary.100' : 'primary.darker' }}\n          >\n            <ArrowSwapHorizontal />\n          </Avatar>\n        </Stack>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":1605},"src/components/third-party/dropzone/RejectionFiles.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\n// utils\nimport getDropzoneData from 'utils/getDropzoneData';\n\n// ==============================|| DROPZONE - REJECTION FILES ||============================== //\n\nexport default function RejectionFiles({ fileRejections }) {\n  return (\n    <Paper\n      variant=\"outlined\"\n      sx={{ py: 1, px: 2, mt: 3, borderColor: 'error.light', bgcolor: (theme) => alpha(theme.palette.error.main, 0.08) }}\n    >\n      {fileRejections.map(({ file, errors }) => {\n        const { path, size } = getDropzoneData(file);\n\n        return (\n          <Box key={path} sx={{ my: 1 }}>\n            <Typography variant=\"subtitle2\" noWrap>\n              {path} - {size ? size : ''}\n            </Typography>\n\n            {errors.map((error) => (\n              <Box key={error.code} component=\"li\" sx={{ typography: 'caption' }}>\n                {error.message}\n              </Box>\n            ))}\n          </Box>\n        );\n      })}\n    </Paper>\n  );\n}\n\nRejectionFiles.propTypes = { fileRejections: PropTypes.array };\n","size_bytes":1223},"src/sections/components-overview/speeddial/SpeedDialTooltipOpen.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Backdrop from '@mui/material/Backdrop';\nimport SpeedDial from '@mui/material/SpeedDial';\nimport Typography from '@mui/material/Typography';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Copy, Heart, Printer, Save2, Share } from 'iconsax-react';\n\n// =============================|| SPEEDDIAL - PERSISTENT ICON ||============================= //\n\nexport default function SpeedDialTooltipOpen() {\n  const [open, setOpen] = useState(false);\n\n  // fab action options\n  const actions = [\n    { icon: <Copy />, name: 'Copy' },\n    { icon: <Save2 />, name: 'Save' },\n    { icon: <Printer />, name: 'Print' },\n    { icon: <Share />, name: 'Share' },\n    { icon: <Heart />, name: 'Like' }\n  ];\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [hidden, setHidden] = useState(false);\n  const handleVisibility = () => {\n    setHidden((prevHidden) => !prevHidden);\n  };\n\n  const persistSpeeddialCodeString = `<Box sx={{ height: 430, transform: 'translateZ(0px)', flexGrow: 1 }}>\n  <Button onClick={handleVisibility}>Toggle Speed Dial</Button>\n  <Backdrop open={open} />\n  <SpeedDial\n    ariaLabel=\"SpeedDial tooltip example\"\n    hidden={hidden}\n    icon={<SpeedDialIcon />}\n    onClose={handleClose}\n    onOpen={handleOpen}\n    open={open}\n    sx={{ position: 'absolute', bottom: 16, right: 16 }}\n  >\n    {actions.map((action) => (\n      <SpeedDialAction\n        key={action.name}\n        icon={action.icon}\n        tooltipTitle={<Typography variant=\"subtitle1\">{action.name}</Typography>}\n        tooltipOpen\n        onClick={handleClose}\n      />\n    ))}\n  </SpeedDial>\n</Box>`;\n\n  return (\n    <MainCard title=\"Persistent Icon\" codeString={persistSpeeddialCodeString}>\n      <Box sx={{ height: 430, transform: 'translateZ(0px)', flexGrow: 1 }}>\n        <Button onClick={handleVisibility}>Toggle Speed Dial</Button>\n        <Backdrop open={open} />\n        <SpeedDial\n          ariaLabel=\"SpeedDial tooltip example\"\n          hidden={hidden}\n          icon={<SpeedDialIcon />}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          open={open}\n          sx={{ position: 'absolute', bottom: 16, right: 16, '& .MuiSpeedDialAction-fab': { bgcolor: 'secondary.200' } }}\n        >\n          {actions.map((action) => (\n            <SpeedDialAction\n              key={action.name}\n              icon={action.icon}\n              tooltipTitle={<Typography variant=\"subtitle1\">{action.name}</Typography>}\n              tooltipOpen\n              onClick={handleClose}\n            />\n          ))}\n        </SpeedDial>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":2911},"src/sections/forms/edit-forms/works/ImageForm.jsx":{"content":"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik, FieldArray, FormikProvider, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Box, Button, Grid, InputLabel, Stack, Typography, TextField, FormHelperText } from '@mui/material';\n\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\nimport returnImageObject from 'api/fetchData';\n\nconst validationSchema = yup.object({\n  titleImagePath: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  imageLabelSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  reviewAuthorImageSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  secondColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  thirdColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  fourthColumnProjects: yup\n    .array()\n    .of(\n      yup.object({\n        imagePath: yup\n          .mixed()\n          .required('Image is required')\n          .test('fileType', 'Only image files are allowed', (value) => {\n            return value && value.type && value.type.startsWith('image/');\n          }),\n        title: yup.string().required('Text is required')\n      })\n    )\n    .min(1, 'At least one object is required')\n});\n\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const [initialValues, setInitialValues] = useState({\n    titleImagePath: null,\n    imageLabelSrc: null,\n    reviewAuthorImageSrc: null,\n    firstColumnProjects: [{ imagePath: null, title: '' }],\n    secondColumnProjects: [{ imagePath: null, title: '' }],\n    thirdColumnProjects: [{ imagePath: null, title: '' }],\n    fourthColumnProjects: [{ imagePath: null, title: '' }]\n  });\n\n  useEffect(() => {\n    const fetchInitialValues = async () => {\n      const titleImagePath = await returnImageObject(data.titleImagePath);\n      const imageLabelSrc = await returnImageObject(data.imageLabelSrc);\n      const reviewAuthorImageSrc = await returnImageObject(data.review?.imageSrc);\n\n      const firstColumnProjects = await Promise.all(\n        data.firstColumnProjects.map(async (item) => ({\n          ...item,\n          imagePath: await returnImageObject(item.imagePath)\n        }))\n      );\n\n      const secondColumnProjects = await Promise.all(\n        data.secondColumnProjects.map(async (item) => ({\n          ...item,\n          imagePath: await returnImageObject(item.imagePath)\n        }))\n      );\n\n      const thirdColumnProjects = await Promise.all(\n        data.thirdColumnProjects.map(async (item) => ({\n          ...item,\n          imagePath: await returnImageObject(item.imagePath)\n        }))\n      );\n\n      const fourthColumnProjects = await Promise.all(\n        data.fourthColumnProjects.map(async (item) => ({\n          ...item,\n          imagePath: await returnImageObject(item.imagePath)\n        }))\n      );\n\n      setInitialValues({\n        titleImagePath,\n        imageLabelSrc,\n        reviewAuthorImageSrc,\n        firstColumnProjects,\n        secondColumnProjects,\n        thirdColumnProjects,\n        fourthColumnProjects\n      });\n    };\n\n    fetchInitialValues();\n  }, [data]);\n\n  useEffect(() => {\n    console.log(initialValues, data);\n  }, [initialValues, data]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        titleImagePath: values.titleImagePath,\n        imageLabelSrc: values.imageLabelSrc,\n        review: {\n          ...data.review,\n          imageSrc: values.reviewAuthorImageSrc\n        },\n        firstColumnProjects: values.firstColumnProjects,\n        secondColumnProjects: values.secondColumnProjects,\n        thirdColumnProjects: values.thirdColumnProjects,\n        fourthColumnProjects: values.fourthColumnProjects\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"titleImagePath\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label Image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"imageLabelSrc\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Review author image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"reviewAuthorImageSrc\" />\n            </Stack>\n          </Grid>\n\n          <FormikProvider value={formik}>\n            {/* Parent container for first column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"firstColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.firstColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 1st column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`firstColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`firstColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`firstColumnProjects[${index}].title`}\n                            name={`firstColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            mul\n                            value={formik.values.firstColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.firstColumnProjects?.[index]?.text && Boolean(formik.errors.firstColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.firstColumnProjects?.[index]?.text && formik.errors.firstColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.firstColumnProjects &&\n                          //     formik.errors.firstColumnProjects[index] &&\n                          //     formik.errors.firstColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          md={2}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.firstColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.firstColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.firstColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.firstColumnProjects.length === 1 ? theme.palette.action.disabled : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.firstColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for second column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"secondColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.secondColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 2nd column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`secondColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`secondColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`secondColumnProjects[${index}].title`}\n                            name={`secondColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.secondColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.secondColumnProjects?.[index]?.text &&\n                              Boolean(formik.errors.secondColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.secondColumnProjects?.[index]?.text && formik.errors.secondColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          md={2}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.secondColumnProjects &&\n                          //     formik.errors.secondColumnProjects[index] &&\n                          //     formik.errors.secondColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.secondColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.secondColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.secondColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.secondColumnProjects.length === 1\n                                    ? theme.palette.action.disabled\n                                    : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.secondColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for third column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"thirdColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.thirdColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 3rd column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`thirdColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`thirdColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`thirdColumnProjects[${index}].title`}\n                            name={`thirdColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.thirdColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.thirdColumnProjects?.[index]?.text && Boolean(formik.errors.thirdColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.thirdColumnProjects?.[index]?.text && formik.errors.thirdColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          md={2}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.thirdColumnProjects &&\n                          //     formik.errors.thirdColumnProjects[index] &&\n                          //     formik.errors.thirdColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.thirdColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.thirdColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.thirdColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.thirdColumnProjects.length === 1 ? theme.palette.action.disabled : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.thirdColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for fourth column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"fourthColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.fourthColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 4th column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`fourthColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`fourthColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`fourthColumnProjects[${index}].title`}\n                            name={`fourthColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.fourthColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.fourthColumnProjects?.[index]?.text &&\n                              Boolean(formik.errors.fourthColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.fourthColumnProjects?.[index]?.text && formik.errors.fourthColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.fourthColumnProjects &&\n                          //     formik.errors.fourthColumnProjects[index] &&\n                          //     formik.errors.fourthColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          md={2}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.fourthColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.fourthColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.fourthColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.fourthColumnProjects.length === 1\n                                    ? theme.palette.action.disabled\n                                    : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.fourthColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n          </FormikProvider>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\">\n            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n              Back\n            </Button>\n            <AnimateButton>\n              <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                Next\n              </Button>\n            </AnimateButton>\n          </Stack>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":26363},"src/components/third-party/map/PopupStyled.jsx":{"content":"// third-party\nimport { Popup } from 'react-map-gl';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| MAP BOX - POPUP STYLED ||============================== //\n\nconst PopupStyled = styled(Popup)(({ theme }) => {\n  const isRTL = theme.direction === 'rtl';\n\n  return {\n    '& .mapboxgl-popup-content': {\n      maxWidth: 180,\n      padding: 12,\n      boxShadow: theme.customShadows.z1,\n      borderRadius: 4,\n      backgroundColor: theme.palette.mode === ThemeMode.DARK ? theme.palette.background.default : theme.palette.background.paper\n    },\n    '& .mapboxgl-popup-close-button': {\n      width: 24,\n      height: 24,\n      fontSize: 16,\n      opacity: 0.48,\n      color: theme.palette.common.white,\n      right: isRTL && '0',\n      left: isRTL && 'auto',\n      '&:hover': { opacity: 1 },\n      '&:focus': { outline: 'none' }\n    },\n    '&.mapboxgl-popup-anchor-top .mapboxgl-popup-tip': { marginBottom: -1, borderBottomColor: theme.palette.divider },\n    '&.mapboxgl-popup-anchor-right .mapboxgl-popup-tip': { marginLeft: -1, borderLeftColor: theme.palette.divider },\n    '&.mapboxgl-popup-anchor-bottom .mapboxgl-popup-tip': { marginTop: -1, borderTopColor: theme.palette.divider },\n    '&.mapboxgl-popup-anchor-left .mapboxgl-popup-tip': { marginRight: -1, borderRightColor: theme.palette.divider }\n  };\n});\n\nexport default PopupStyled;\n","size_bytes":1447},"src/routes/ComponentsRoutes.jsx":{"content":"import { lazy } from 'react';\n\n// project-imports\nimport ComponentLayout from 'layout/Component';\nimport Loadable from 'components/Loadable';\n\n// render - inputs components page\nconst Autocomplete = Loadable(lazy(() => import('pages/components-overview/autocomplete')));\nconst Buttons = Loadable(lazy(() => import('pages/components-overview/buttons')));\nconst Checkbox = Loadable(lazy(() => import('pages/components-overview/checkbox')));\nconst Radio = Loadable(lazy(() => import('pages/components-overview/radio')));\nconst Rating = Loadable(lazy(() => import('pages/components-overview/rating')));\nconst Select = Loadable(lazy(() => import('pages/components-overview/select')));\nconst Slider = Loadable(lazy(() => import('pages/components-overview/slider')));\nconst Switch = Loadable(lazy(() => import('pages/components-overview/switch')));\nconst TextField = Loadable(lazy(() => import('pages/components-overview/textfield')));\n\n// render - feedback components page\nconst Alert = Loadable(lazy(() => import('pages/components-overview/alert')));\nconst Dialogs = Loadable(lazy(() => import('pages/components-overview/dialogs')));\nconst Progress = Loadable(lazy(() => import('pages/components-overview/progress')));\nconst Snackbar = Loadable(lazy(() => import('pages/components-overview/snackbar')));\n\n// render - data display components\nconst Avatars = Loadable(lazy(() => import('pages/components-overview/avatars')));\nconst Badges = Loadable(lazy(() => import('pages/components-overview/badges')));\nconst Chips = Loadable(lazy(() => import('pages/components-overview/chips')));\nconst Lists = Loadable(lazy(() => import('pages/components-overview/lists')));\nconst Tooltip = Loadable(lazy(() => import('pages/components-overview/tooltip')));\nconst Typography = Loadable(lazy(() => import('pages/components-overview/typography')));\n\n// render - navigation components page\nconst Breadcrumbs = Loadable(lazy(() => import('pages/components-overview/breadcrumbs')));\nconst Pagination = Loadable(lazy(() => import('pages/components-overview/pagination')));\nconst Speeddial = Loadable(lazy(() => import('pages/components-overview/speeddial')));\nconst Stepper = Loadable(lazy(() => import('pages/components-overview/stepper')));\nconst Tabs = Loadable(lazy(() => import('pages/components-overview/tabs')));\n\n// render - surfaces components page\nconst Accordion = Loadable(lazy(() => import('pages/components-overview/accordion')));\nconst Cards = Loadable(lazy(() => import('pages/components-overview/cards')));\n\n// render - utils components page\nconst Color = Loadable(lazy(() => import('pages/components-overview/color')));\nconst DateTimePicker = Loadable(lazy(() => import('pages/components-overview/date-time-picker')));\nconst Modal = Loadable(lazy(() => import('pages/components-overview/modal')));\nconst Shadow = Loadable(lazy(() => import('pages/components-overview/shadows')));\nconst Timeline = Loadable(lazy(() => import('pages/components-overview/timeline')));\nconst TreeView = Loadable(lazy(() => import('pages/components-overview/treeview')));\n\n// ==============================|| COMPONENTS ROUTES ||============================== //\n\nconst ComponentsRoutes = {\n  path: 'components-overview',\n  element: <ComponentLayout />,\n  children: [\n    {\n      path: 'autocomplete',\n      element: <Autocomplete />\n    },\n    {\n      path: 'buttons',\n      element: <Buttons />\n    },\n    {\n      path: 'checkbox',\n      element: <Checkbox />\n    },\n    {\n      path: 'radio',\n      element: <Radio />\n    },\n    {\n      path: 'rating',\n      element: <Rating />\n    },\n    {\n      path: 'switch',\n      element: <Switch />\n    },\n    {\n      path: 'select',\n      element: <Select />\n    },\n    {\n      path: 'slider',\n      element: <Slider />\n    },\n    {\n      path: 'textfield',\n      element: <TextField />\n    },\n    {\n      path: 'avatars',\n      element: <Avatars />\n    },\n    {\n      path: 'badges',\n      element: <Badges />\n    },\n    {\n      path: 'chips',\n      element: <Chips />\n    },\n    {\n      path: 'lists',\n      element: <Lists />\n    },\n    {\n      path: 'tooltip',\n      element: <Tooltip />\n    },\n    {\n      path: 'typography',\n      element: <Typography />\n    },\n    {\n      path: 'alert',\n      element: <Alert />\n    },\n    {\n      path: 'dialogs',\n      element: <Dialogs />\n    },\n    {\n      path: 'progress',\n      element: <Progress />\n    },\n    {\n      path: 'snackbar',\n      element: <Snackbar />\n    },\n    {\n      path: 'breadcrumbs',\n      element: <Breadcrumbs />\n    },\n    {\n      path: 'pagination',\n      element: <Pagination />\n    },\n    {\n      path: 'speeddial',\n      element: <Speeddial />\n    },\n    {\n      path: 'stepper',\n      element: <Stepper />\n    },\n    {\n      path: 'tabs',\n      element: <Tabs />\n    },\n    {\n      path: 'accordion',\n      element: <Accordion />\n    },\n    {\n      path: 'cards',\n      element: <Cards />\n    },\n    {\n      path: 'color',\n      element: <Color />\n    },\n    {\n      path: 'date-time-picker',\n      element: <DateTimePicker />\n    },\n    {\n      path: 'modal',\n      element: <Modal />\n    },\n    {\n      path: 'shadows',\n      element: <Shadow />\n    },\n    {\n      path: 'timeline',\n      element: <Timeline />\n    },\n    {\n      path: 'treeview',\n      element: <TreeView />\n    }\n  ]\n};\n\nexport default ComponentsRoutes;\n","size_bytes":5320},"src/hooks/useLocalStorage.js":{"content":"import { useState, useEffect } from 'react';\n\n// ===========================|| HOOKS - LOCAL STORE ||=========================== //\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [value, setValue] = useState(() => {\n    const storedValue = typeof window !== 'undefined' ? localStorage.getItem(key) : null;\n    return storedValue === null ? defaultValue : JSON.parse(storedValue);\n  });\n\n  useEffect(() => {\n    const listener = (e) => {\n      if (typeof window !== 'undefined' && e.storageArea === localStorage && e.key === key) {\n        setValue(e.newValue ? JSON.parse(e.newValue) : e.newValue);\n      }\n    };\n    window.addEventListener('storage', listener);\n\n    return () => {\n      window.removeEventListener('storage', listener);\n    };\n  }, [key, defaultValue]);\n\n  const setValueInLocalStorage = (newValue) => {\n    setValue((currentValue) => {\n      const result = typeof newValue === 'function' ? newValue(currentValue) : newValue;\n      if (typeof window !== 'undefined') localStorage.setItem(key, JSON.stringify(result));\n      return result;\n    });\n  };\n\n  return [value, setValueInLocalStorage];\n}\n","size_bytes":1139},"src/sections/widget/data/LatestPosts.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport Dashboard1 from 'assets/images/widget/dashborad-1.jpg';\nimport Dashboard2 from 'assets/images/widget/dashborad-3.jpg';\n\nconst mediaSX = {\n  width: 90,\n  height: 80,\n  borderRadius: 1\n};\n\n// ===========================|| DATA WIDGET - LATEST POSTS ||=========================== //\n\nexport default function LatestPosts() {\n  return (\n    <MainCard\n      title=\"Latest Posts\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <CardContent>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <CardMedia component=\"img\" image={Dashboard1} title=\"image\" sx={mediaSX} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Up unpacked friendly</Typography>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      Video | 14 minutes ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <CardMedia component=\"iframe\" src=\"https://www.youtube.com/embed/668nUCeBHyY\" title=\"image\" sx={mediaSX} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Up unpacked friendly</Typography>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      Video | 14 minutes ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container alignItems=\"center\" spacing={2}>\n              <Grid item>\n                <CardMedia component=\"img\" image={Dashboard2} title=\"image\" sx={mediaSX} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Up unpacked friendly</Typography>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      Video | 14 minutes ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":3156},"src/components/ScrollX.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\n\n// ===========================|| HORIZONTAL SCROLLER ||=========================== //\n\nconst ScrollX = styled('div')({\n  width: '100%',\n  overflowX: 'auto',\n  display: 'block'\n});\n\nexport default ScrollX;\n","size_bytes":268},"src/components/third-party/map/MapMarker.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\n\n// third-party\nimport { Marker } from 'react-map-gl';\n\nconst size = 20;\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\n// ==============================|| MAP BOX - MARKER ||============================== //\n\nexport default function MapMarker({ ...other }) {\n  return (\n    <Marker {...other}>\n      <Box\n        component=\"svg\"\n        viewBox=\"0 0 24 24\"\n        sx={{\n          height: size,\n          stroke: 'none',\n          cursor: 'pointer',\n          fill: (theme) => theme.palette.primary.main,\n          transform: `translate(${-size / 2}px,${-size}px)`\n        }}\n      >\n        <path d={ICON} />\n      </Box>\n    </Marker>\n  );\n}\n\nMapMarker.propTypes = { other: PropTypes.any };\n","size_bytes":1014},"src/sections/apps/e-commerce/product-details/ProductFeatures.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| PRODUCT DETAILS - FEATURES ||============================== //\n\nexport default function ProductFeatures() {\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\">Band :</Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography>Smart Band</Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\" noWrap>\n          Compatible Devices :\n        </Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography>Smartphones</Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\" noWrap>\n          Ideal For :\n        </Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography>Unisex</Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\" noWrap>\n          Lifestyle :\n        </Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography noWrap>Fitness | Indoor | Sports | Swimming | Outdoor</Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\" noWrap>\n          Basic Features :\n        </Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography noWrap>Calendar | Date & Time | Timer/Stop Watch</Typography>\n      </Grid>\n      <Grid item xs={3}>\n        <Typography color=\"text.secondary\">Health Tracker :</Typography>\n      </Grid>\n      <Grid item xs={9}>\n        <Typography> Heart Rate | Exercise Tracker</Typography>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1673},"src/components/third-party/react-table/IndeterminateCheckbox.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Checkbox from '@mui/material/Checkbox';\n\n// ==============================|| ROW SELECTION - CHECKBOX ||============================== //\n\nexport default function IndeterminateCheckbox({ indeterminate, ...rest }) {\n  return <Checkbox {...rest} indeterminate={typeof indeterminate === 'boolean' && !rest.checked && indeterminate} />;\n}\n\nIndeterminateCheckbox.propTypes = { indeterminate: PropTypes.bool };\n","size_bytes":463},"src/sections/apps/profiles/user/TabSettings.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { DocumentLike, Sms, Translate } from 'iconsax-react';\n\n// ==============================|| USER PROFILE - SETTINGS ||============================== //\n\nexport default function TabSettings() {\n  const [checked, setChecked] = useState(['oc', 'usn', 'lc']);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  return (\n    <MainCard title=\"Settings\">\n      <List sx={{ '& .MuiListItem-root': { p: 2 } }}>\n        <ListItem divider>\n          <ListItemIcon sx={{ color: 'primary.main', mr: 2, display: { xs: 'none', sm: 'block' } }}>\n            <DocumentLike style={{ fontSize: '1.5rem' }} />\n          </ListItemIcon>\n          <ListItemText\n            id=\"switch-list-label-oc\"\n            primary={<Typography variant=\"h5\">Order Confirmation</Typography>}\n            secondary=\"You will be notified when customer order any product\"\n          />\n          <Switch\n            edge=\"end\"\n            onChange={handleToggle('oc')}\n            checked={checked.indexOf('oc') !== -1}\n            inputProps={{\n              'aria-labelledby': 'switch-list-label-oc'\n            }}\n          />\n        </ListItem>\n        <ListItem divider>\n          <ListItemIcon sx={{ color: 'primary.main', mr: 2, display: { xs: 'none', sm: 'block' } }}>\n            <Sms style={{ fontSize: '1.5rem' }} />\n          </ListItemIcon>\n          <ListItemText\n            id=\"switch-list-label-sen\"\n            primary={<Typography variant=\"h5\">Setup Email Notification</Typography>}\n            secondary=\"Turn on email  notification to get updates through email\"\n          />\n          <Switch\n            edge=\"end\"\n            onChange={handleToggle('sen')}\n            checked={checked.indexOf('sen') !== -1}\n            inputProps={{ 'aria-labelledby': 'switch-list-label-sen' }}\n          />\n        </ListItem>\n        <ListItem divider>\n          <ListItemIcon sx={{ color: 'primary.main', mr: 2, display: { xs: 'none', sm: 'block' } }}>\n            <Sms style={{ fontSize: '1.5rem' }} />\n          </ListItemIcon>\n          <ListItemText\n            id=\"switch-list-label-usn\"\n            primary={<Typography variant=\"h5\">Update System Notification</Typography>}\n            secondary=\"You will be notified when customer order any product\"\n          />\n          <Switch\n            edge=\"end\"\n            onChange={handleToggle('usn')}\n            checked={checked.indexOf('usn') !== -1}\n            inputProps={{ 'aria-labelledby': 'switch-list-label-usn' }}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemIcon sx={{ color: 'primary.main', mr: 2, display: { xs: 'none', sm: 'block' } }}>\n            <Translate style={{ fontSize: '1.5rem' }} />\n          </ListItemIcon>\n          <ListItemText\n            id=\"switch-list-label-lc\"\n            primary={<Typography variant=\"h5\">Language Change</Typography>}\n            secondary=\"You will be notified when customer order any product\"\n          />\n          <Switch\n            edge=\"end\"\n            onChange={handleToggle('lc')}\n            checked={checked.indexOf('lc') !== -1}\n            inputProps={{ 'aria-labelledby': 'switch-list-label-lc' }}\n          />\n        </ListItem>\n      </List>\n      <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2} sx={{ mt: 2.5 }}>\n        <Button variant=\"outlined\" color=\"secondary\">\n          Cancel\n        </Button>\n        <Button variant=\"contained\">Save</Button>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":4194},"src/sections/components-overview/stepper/HorizontalNonLinearStepper.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Step from '@mui/material/Step';\nimport Alert from '@mui/material/Alert';\nimport Button from '@mui/material/Button';\nimport Stepper from '@mui/material/Stepper';\nimport StepButton from '@mui/material/StepButton';\nimport Typography from '@mui/material/Typography';\n\n// material-ui\nimport MainCard from 'components/MainCard';\n\nconst steps = ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n\nfunction StepWrapper({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\n// ==============================|| STEPPER - NON LINEAR ||============================== //\n\nexport default function HorizontalNonLinearStepper() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [completed, setCompleted] = useState({});\n\n  const totalSteps = () => steps.length;\n  const completedSteps = () => Object.keys(completed).length;\n  const isLastStep = () => activeStep === totalSteps() - 1;\n  const allStepsCompleted = () => completedSteps() === totalSteps();\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed,\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !(i in completed))\n        : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  const hnlStepperCodeString = `// HorizontalNonLinearStepper.tsx\n<Stepper nonLinear activeStep={activeStep}>\n  {steps.map((label, index) => (\n    <Step key={label} completed={completed[index]}>\n      <StepButton color=\"inherit\" onClick={handleStep(index)}>\n        {label}\n      </StepButton>\n    </Step>\n  ))}\n</Stepper>\n<div>\n  {allStepsCompleted() ? (\n    <>\n      <Alert sx={{ my: 3 }}>All steps completed - you&apos;re finished</Alert>\n      <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n        <Box sx={{ flex: '1 1 auto' }} />\n        <Button onClick={handleReset} color=\"error\" variant=\"contained\">\n          Reset\n        </Button>\n      </Box>\n    </>\n  ) : (\n    <>\n      <StepWrapper value={activeStep} index={0}>\n        <Typography>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel massa mi. Nullam suscipit eu est non eleifend. Duis in\n          laoreet metus. Etiam a vulputate nibh, sed maximus urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\n          laoreet urna ut sodales malesuada. Vivamus sit amet massa turpis. Nullam nec ligula tempor, aliquam mauris nec, volutpat\n          tellus. Ut mattis a lacus ac fermentum. Vestibulum sit amet tempus nisl. Nulla id enim ante. Orci varius natoque penatibus\n          et magnis dis parturient montes, nascetur ridiculus mus. Nunc nec velit arcu.\n        </Typography>\n      </StepWrapper>\n      <StepWrapper value={activeStep} index={1}>\n        <Typography>\n          Curabitur fringilla purus scelerisque, auctor mi ac, posuere sem. Nullam dictum mauris lectus, in laoreet lorem dignissim\n          vel. Sed rutrum non nulla eget laoreet. Curabitur sit amet hendrerit magna, hendrerit vulputate nunc. Quisque maximus, orci\n          id lobortis imperdiet, mi lectus porta est, eu aliquet leo risus id lectus. Nullam dignissim, nisl non convallis auctor,\n          enim metus laoreet leo, ut hendrerit arcu tortor ut tellus. In quis dui leo. Maecenas risus nisi, aliquet ac elit eu,\n          eleifend posuere enim. Phasellus interdum mi eu ex varius, ut vestibulum mi accumsan. Integer quis metus ac velit laoreet\n          feugiat ac quis est.\n        </Typography>\n      </StepWrapper>\n      <StepWrapper value={activeStep} index={2}>\n        <Typography>\n          Vivamus sed odio dictum, sollicitudin neque in, sagittis erat. Cras feugiat faucibus luctus. Pellentesque sit amet sagittis\n          sapien. Nunc pharetra molestie ante, non posuere est tincidunt quis. Nunc venenatis lobortis magna sit amet sollicitudin.\n          Nam porta neque eu condimentum dignissim. Cras vestibulum dui et ex dignissim gravida. Nam elementum nec urna ut sagittis.\n          Nullam id scelerisque nunc, in ultricies orci.\n        </Typography>\n      </StepWrapper>\n      <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n        <Button variant=\"outlined\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\n          Back\n        </Button>\n        <Box sx={{ flex: '1 1 auto' }} />\n        {activeStep !== steps.length &&\n          (completed[activeStep] ? (\n            <Button color=\"success\">Step {activeStep + 1} already completed</Button>\n          ) : (\n            <Button onClick={handleComplete} color=\"success\" variant={activeStep === totalSteps() - 1 ? 'contained' : 'outlined'}>\n              {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\n            </Button>\n          ))}\n        <Button disabled={activeStep === steps.length - 1} onClick={handleNext} sx={{ ml: 1 }} variant=\"contained\" color=\"primary\">\n          Next\n        </Button>\n      </Box>\n    </>\n  )}\n</div>`;\n\n  return (\n    <MainCard title=\"Non - Linear\" codeString={hnlStepperCodeString}>\n      <Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {allStepsCompleted() ? (\n          <>\n            <Alert sx={{ my: 3 }}>All steps completed - you&apos;re finished</Alert>\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n              <Box sx={{ flex: '1 1 auto' }} />\n              <Button onClick={handleReset} color=\"error\" variant=\"contained\">\n                Reset\n              </Button>\n            </Box>\n          </>\n        ) : (\n          <>\n            <StepWrapper value={activeStep} index={0}>\n              <Typography>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel massa mi. Nullam suscipit eu est non eleifend. Duis in\n                laoreet metus. Etiam a vulputate nibh, sed maximus urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\n                laoreet urna ut sodales malesuada. Vivamus sit amet massa turpis. Nullam nec ligula tempor, aliquam mauris nec, volutpat\n                tellus. Ut mattis a lacus ac fermentum. Vestibulum sit amet tempus nisl. Nulla id enim ante. Orci varius natoque penatibus\n                et magnis dis parturient montes, nascetur ridiculus mus. Nunc nec velit arcu.\n              </Typography>\n            </StepWrapper>\n            <StepWrapper value={activeStep} index={1}>\n              <Typography>\n                Curabitur fringilla purus scelerisque, auctor mi ac, posuere sem. Nullam dictum mauris lectus, in laoreet lorem dignissim\n                vel. Sed rutrum non nulla eget laoreet. Curabitur sit amet hendrerit magna, hendrerit vulputate nunc. Quisque maximus, orci\n                id lobortis imperdiet, mi lectus porta est, eu aliquet leo risus id lectus. Nullam dignissim, nisl non convallis auctor,\n                enim metus laoreet leo, ut hendrerit arcu tortor ut tellus. In quis dui leo. Maecenas risus nisi, aliquet ac elit eu,\n                eleifend posuere enim. Phasellus interdum mi eu ex varius, ut vestibulum mi accumsan. Integer quis metus ac velit laoreet\n                feugiat ac quis est.\n              </Typography>\n            </StepWrapper>\n            <StepWrapper value={activeStep} index={2}>\n              <Typography>\n                Vivamus sed odio dictum, sollicitudin neque in, sagittis erat. Cras feugiat faucibus luctus. Pellentesque sit amet sagittis\n                sapien. Nunc pharetra molestie ante, non posuere est tincidunt quis. Nunc venenatis lobortis magna sit amet sollicitudin.\n                Nam porta neque eu condimentum dignissim. Cras vestibulum dui et ex dignissim gravida. Nam elementum nec urna ut sagittis.\n                Nullam id scelerisque nunc, in ultricies orci.\n              </Typography>\n            </StepWrapper>\n            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n              <Button variant=\"outlined\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\n                Back\n              </Button>\n              <Box sx={{ flex: '1 1 auto' }} />\n              {activeStep !== steps.length &&\n                (completed[activeStep] ? (\n                  <Button color=\"success\">Step {activeStep + 1} already completed</Button>\n                ) : (\n                  <Button onClick={handleComplete} color=\"success\" variant={activeStep === totalSteps() - 1 ? 'contained' : 'outlined'}>\n                    {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\n                  </Button>\n                ))}\n              <Button disabled={activeStep === steps.length - 1} onClick={handleNext} sx={{ ml: 1 }} variant=\"contained\" color=\"primary\">\n                Next\n              </Button>\n            </Box>\n          </>\n        )}\n      </div>\n    </MainCard>\n  );\n}\n\nStepWrapper.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":9948},"src/layout/Dashboard/Drawer/DrawerContent/Navigation/NavGroup.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState, Fragment } from 'react';\nimport { matchPath, useLocation } from 'react-router';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Divider from '@mui/material/Divider';\nimport List from '@mui/material/List';\nimport Paper from '@mui/material/Paper';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Popper from '@mui/material/Popper';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// project-imports\nimport NavItem from './NavItem';\nimport NavCollapse from './NavCollapse';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport Transitions from 'components/@extended/Transitions';\n\nimport { MenuOrientation, ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport { useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { More2 } from 'iconsax-react';\n\nconst PopperStyled = styled(Popper)(({ theme }) => ({\n  overflow: 'visible',\n  zIndex: 1202,\n  minWidth: 180,\n  '&:before': {\n    background: theme.palette.background.paper,\n    content: '\"\"',\n    display: 'block',\n    position: 'absolute',\n    top: 5,\n    left: 32,\n    width: 12,\n    height: 12,\n    transform: 'translateY(-50%) rotate(45deg)',\n    zIndex: 120,\n    borderWidth: '6px',\n    borderStyle: 'solid',\n    borderColor: `${theme.palette.background.paper}  transparent transparent ${theme.palette.background.paper}`,\n    borderLeft: `1px solid ${theme.palette.divider}`,\n    borderTop: `1px solid ${theme.palette.divider}`\n  }\n}));\n\n// ==============================|| NAVIGATION - GROUP ||============================== //\n\nexport default function NavGroup({\n  item,\n  lastItem,\n  remItems,\n  lastItemId,\n  selectedID,\n  setSelectedID,\n  setSelectedItems,\n  selectedItems,\n  setSelectedLevel,\n  selectedLevel\n}) {\n  const theme = useTheme();\n  const { pathname } = useLocation();\n\n  const { mode, menuOrientation, menuCaption } = useConfig();\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [currentItem, setCurrentItem] = useState(item);\n\n  const openMini = Boolean(anchorEl);\n\n  useEffect(() => {\n    if (lastItem) {\n      if (item.id === lastItemId) {\n        const localItem = { ...item };\n        const elements = remItems.map((ele) => ele.elements);\n        localItem.children = elements.flat(1);\n        setCurrentItem(localItem);\n      } else {\n        setCurrentItem(item);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [item, lastItem, downLG]);\n\n  const checkOpenForParent = (child, id) => {\n    child.forEach((ele) => {\n      if (ele.children?.length) {\n        checkOpenForParent(ele.children, currentItem.id);\n      }\n\n      if (ele.url && !!matchPath({ path: ele?.link ? ele.link : ele.url, end: true }, pathname)) {\n        setSelectedID(id);\n      }\n    });\n  };\n  const checkSelectedOnload = (data) => {\n    const childrens = data.children ? data.children : [];\n    childrens.forEach((itemCheck) => {\n      if (itemCheck?.children?.length) {\n        checkOpenForParent(itemCheck.children, currentItem.id);\n      }\n\n      if (itemCheck.url && !!matchPath({ path: itemCheck?.link ? itemCheck.link : itemCheck.url, end: true }, pathname)) {\n        setSelectedID(currentItem.id);\n      }\n    });\n  };\n\n  useEffect(() => {\n    checkSelectedOnload(currentItem);\n    if (openMini) setAnchorEl(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pathname, currentItem]);\n\n  const handleClick = (event) => {\n    if (!openMini) {\n      setAnchorEl(event?.currentTarget);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const isSelected = selectedID === currentItem.id;\n\n  const Icon = currentItem?.icon;\n  const itemIcon = currentItem?.icon ? (\n    <Icon variant=\"Bulk\" size={22} color={isSelected ? theme.palette.primary.main : theme.palette.secondary.main} />\n  ) : null;\n\n  const navCollapse = item.children?.map((menuItem, index) => {\n    switch (menuItem.type) {\n      case 'collapse':\n        return (\n          <NavCollapse\n            key={menuItem.id}\n            menu={menuItem}\n            setSelectedItems={setSelectedItems}\n            setSelectedLevel={setSelectedLevel}\n            selectedLevel={selectedLevel}\n            selectedItems={selectedItems}\n            level={1}\n            parentId={currentItem.id}\n          />\n        );\n      case 'item':\n        return <NavItem key={menuItem.id} item={menuItem} level={1} />;\n      default:\n        return (\n          <Typography key={index} variant=\"h6\" color=\"error\" align=\"center\">\n            Fix - Group Collapse or Items\n          </Typography>\n        );\n    }\n  });\n\n  const moreItems = remItems.map((itemRem, i) => (\n    <Fragment key={i}>\n      {itemRem.url ? (\n        <NavItem item={item} level={1} />\n      ) : (\n        itemRem.title && (\n          <Typography variant=\"caption\" sx={{ pl: 2 }}>\n            {itemRem.title} {itemRem.url}\n          </Typography>\n        )\n      )}\n      {itemRem?.elements?.map((menu) => {\n        switch (menu.type) {\n          case 'collapse':\n            return (\n              <NavCollapse\n                key={menu.id}\n                menu={menu}\n                level={1}\n                parentId={currentItem.id}\n                setSelectedItems={setSelectedItems}\n                setSelectedLevel={setSelectedLevel}\n                selectedLevel={selectedLevel}\n                selectedItems={selectedItems}\n              />\n            );\n          case 'item':\n            return <NavItem key={menu.id} item={menu} level={1} />;\n          default:\n            return (\n              <Typography key={menu.id} variant=\"h6\" color=\"error\" align=\"center\">\n                Menu Items Error\n              </Typography>\n            );\n        }\n      })}\n    </Fragment>\n  ));\n\n  // menu list collapse & items\n  const items = currentItem.children?.map((menu) => {\n    switch (menu?.type) {\n      case 'collapse':\n        return (\n          <NavCollapse\n            key={menu.id}\n            menu={menu}\n            level={1}\n            parentId={currentItem.id}\n            setSelectedItems={setSelectedItems}\n            setSelectedLevel={setSelectedLevel}\n            selectedLevel={selectedLevel}\n            selectedItems={selectedItems}\n          />\n        );\n      case 'item':\n        return <NavItem key={menu.id} item={menu} level={1} />;\n      default:\n        return (\n          <Typography key={menu?.id} variant=\"h6\" color=\"error\" align=\"center\">\n            Menu Items Error\n          </Typography>\n        );\n    }\n  });\n\n  const popperId = openMini ? `group-pop-${item.id}` : undefined;\n  const textColor = mode === ThemeMode.DARK ? 'secondary.400' : 'secondary.main';\n\n  return (\n    <>\n      {menuOrientation === MenuOrientation.VERTICAL || downLG ? (\n        <List\n          subheader={\n            <>\n              {item.title ? (\n                drawerOpen && (\n                  <Box sx={{ pl: 3, mb: 1.5 }}>\n                    <Typography\n                      variant=\"h5\"\n                      color={theme.palette.mode === ThemeMode.DARK ? 'text.secondary' : 'secondary.dark'}\n                      sx={{ textTransform: 'uppercase', fontSize: '0.688rem' }}\n                    >\n                      {item.title}\n                    </Typography>\n                    {item.caption && (\n                      <Typography variant=\"caption\" color=\"secondary\">\n                        {item.caption}\n                      </Typography>\n                    )}\n                  </Box>\n                )\n              ) : (\n                <Divider sx={{ my: 0.5 }} />\n              )}\n            </>\n          }\n          sx={{ mt: drawerOpen && menuCaption && item.title ? 1.5 : 0, py: 0, zIndex: 0 }}\n        >\n          {navCollapse}\n        </List>\n      ) : (\n        <List>\n          <ListItemButton\n            selected={isSelected}\n            sx={{\n              p: 1,\n              px: 1.5,\n              my: 0.5,\n              mr: 1,\n              display: 'flex',\n              alignItems: 'center',\n              borderRadius: 1\n            }}\n            onMouseEnter={handleClick}\n            onClick={handleClick}\n            onMouseLeave={handleClose}\n            aria-describedby={popperId}\n          >\n            {itemIcon && (\n              <ListItemIcon sx={{ minWidth: 32 }}>\n                {currentItem.id === lastItemId ? <More2 size={22} variant=\"Bulk\" /> : itemIcon}\n              </ListItemIcon>\n            )}\n            <ListItemText\n              sx={{ mr: 1 }}\n              primary={\n                <Typography variant=\"h6\" color={isSelected ? 'primary' : textColor} sx={{ fontWeight: isSelected ? 500 : 400 }}>\n                  {currentItem.id === lastItemId ? <FormattedMessage id=\"more-items\" /> : currentItem.title}\n                </Typography>\n              }\n            />\n            {anchorEl && (\n              <PopperStyled id={popperId} open={openMini} anchorEl={anchorEl} placement=\"bottom-start\" style={{ zIndex: 2001 }}>\n                {({ TransitionProps }) => (\n                  <Transitions in={openMini} {...TransitionProps}>\n                    <Paper\n                      sx={{\n                        mt: 0.5,\n                        py: 1.25,\n                        boxShadow: theme.customShadows.z1,\n                        border: '1px solid ',\n                        borderColor: 'divider',\n                        backgroundImage: 'none'\n                      }}\n                    >\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <>\n                          <SimpleBar\n                            sx={{\n                              minWidth: 200,\n                              overflowY: 'auto',\n                              maxHeight: 'calc(100vh - 170px)'\n                            }}\n                          >\n                            {currentItem.id !== lastItemId ? items : moreItems}\n                          </SimpleBar>\n                        </>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Transitions>\n                )}\n              </PopperStyled>\n            )}\n          </ListItemButton>\n        </List>\n      )}\n    </>\n  );\n}\n\nNavGroup.propTypes = {\n  item: PropTypes.any,\n  lastItem: PropTypes.number,\n  remItems: PropTypes.array,\n  lastItemId: PropTypes.string,\n  selectedID: PropTypes.oneOfType([PropTypes.any, PropTypes.string]),\n  setSelectedID: PropTypes.oneOfType([PropTypes.func, PropTypes.any]),\n  setSelectedItems: PropTypes.oneOfType([PropTypes.any, PropTypes.string]),\n  selectedItems: PropTypes.oneOfType([PropTypes.any, PropTypes.string]),\n  setSelectedLevel: PropTypes.func,\n  selectedLevel: PropTypes.number\n};\n","size_bytes":11272},"src/sections/tables/react-table/ExpandingTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment, useEffect, useMemo, useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Skeleton from '@mui/material/Skeleton';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport { flexRender, useReactTable, getExpandedRowModel, getCoreRowModel } from '@tanstack/react-table';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\nimport mockData from 'utils/mock-data';\n\n// assets\nimport { ArrowDown2, ArrowRight2, MinusCirlce } from 'iconsax-react';\n\nconst numRows = mockData(1);\n\n// ==============================|| RENDER - SUB TABLE ||============================== //\n\nfunction RenderSubComponent() {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setData(makeData(numRows.number.status(1, 5)));\n      setLoading(false);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return <TableSubRows {...{ columns, data, loading }} />;\n}\n\nfunction TableSubRows({ columns, data, loading }) {\n  const theme = useTheme();\n\n  const table = useReactTable({\n    data,\n    columns,\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel()\n  });\n\n  if (loading) {\n    return (\n      <>\n        {[0, 1, 2].map((item) => (\n          <TableRow key={item}>\n            <TableCell />\n            {[0, 1, 2, 3, 4].map((col) => (\n              <TableCell key={col}>\n                <Skeleton animation=\"wave\" />\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {table.getRowModel().rows.map((row, index) => (\n        <TableRow sx={{ bgcolor: alpha(theme.palette.primary.lighter, 0.35) }} key={index}>\n          <TableCell />\n          {row.getVisibleCells().map((cell) => (\n            <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </TableCell>\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n}\n\nfunction ReactTable({ columns, data }) {\n  const table = useReactTable({\n    data,\n    columns,\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map(\n    (columns) =>\n      // @ts-ignore\n      columns.columnDef.accessorKey &&\n      headers.push({\n        label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n        // @ts-ignore\n        key: columns.columnDef.accessorKey\n      })\n  );\n\n  return (\n    <MainCard title=\"Expanding Row\" content={false} secondary={<CSVExport {...{ data, headers, filename: 'expanding.csv' }} />}>\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: 58 } }}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <Fragment key={row.id}>\n                  <TableRow>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                  {row.getIsExpanded() && <RenderSubComponent />}\n                </Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - EXPANDING SUB TABLE ||============================== //\n\nexport default function ExpandingSubTable() {\n  const data = makeData(10);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'expander',\n        header: () => null,\n        cell: ({ row }) => {\n          return row.getCanExpand() ? (\n            <Box width={{ xl: 60 }}>\n              <IconButton color={row.getIsExpanded() ? 'primary' : 'secondary'} onClick={row.getToggleExpandedHandler()} size=\"small\">\n                {row.getIsExpanded() ? <ArrowDown2 size=\"32\" variant=\"Outline\" /> : <ArrowRight2 size=\"32\" variant=\"Outline\" />}\n              </IconButton>\n            </Box>\n          ) : (\n            <Box width={{ xl: 60 }}>\n              <IconButton color=\"secondary\" size=\"small\" disabled>\n                <MinusCirlce />\n              </IconButton>\n            </Box>\n          );\n        }\n      },\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ columns, data }} />;\n}\n\nTableSubRows.propTypes = { columns: PropTypes.array, data: PropTypes.array, loading: PropTypes.bool };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":8505},"src/sections/maps/change-theme/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useCallback, memo } from 'react';\n\n// third-party\nimport Map from 'react-map-gl';\n\n// project-imports\nimport ControlPanel from './control-panel';\nimport MapControl from 'components/third-party/map/MapControl';\n\n// ==============================|| MAPBOX - THEME ||============================== //\n\nfunction ChangeTheme({ themes, ...other }) {\n  const [selectTheme, setSelectTheme] = useState('streets');\n  const handleChangeTheme = useCallback((value) => setSelectTheme(value), []);\n\n  return (\n    <>\n      <Map\n        initialViewState={{\n          latitude: 21.2335611,\n          longitude: 72.8636084,\n          zoom: 6,\n          bearing: 0,\n          pitch: 0\n        }}\n        mapStyle={themes?.[selectTheme]}\n        {...other}\n      >\n        <MapControl />\n      </Map>\n\n      <ControlPanel themes={themes} selectTheme={selectTheme} onChangeTheme={handleChangeTheme} />\n    </>\n  );\n}\n\nexport default memo(ChangeTheme);\n\nChangeTheme.propTypes = { themes: PropTypes.object, other: PropTypes.any };\n","size_bytes":1064},"src/sections/components-overview/stepper/VerticalLinearStepper.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Step from '@mui/material/Step';\nimport Button from '@mui/material/Button';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Typography from '@mui/material/Typography';\nimport StepContent from '@mui/material/StepContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst steps = [\n  {\n    label: 'Select campaign settings',\n    description: `For each ad campaign that you create, you can control how much\n              you're willing to spend on clicks and conversions, which networks\n              and geographical locations you want your ads to show on, and more.`\n  },\n  {\n    label: 'Create an ad group',\n    description: 'An ad group contains one or more ads which target a shared set of keywords.'\n  },\n  {\n    label: 'Create an ad',\n    description: `Try out different ad text to see what brings in the most customers,\n              and learn how to enhance your ads using features like ad extensions.\n              If you run into any problems with your ads, find out how to tell if\n              they're running and how to resolve approval issues.`\n  }\n];\n\n// ==============================|| STEPPER - VERTICAL ||============================== //\n\nexport default function VerticalLinearStepper() {\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleNext = () => setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  const handleBack = () => setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  const handleReset = () => setActiveStep(0);\n\n  const verticalStepperCodeString = `// VerticalLinearStepper.tsx\n<Stepper activeStep={activeStep} orientation=\"vertical\">\n  {steps.map((step, index) => (\n    <Step key={step.label}>\n      <StepLabel optional={index === 2 ? <Typography variant=\"caption\">Last step</Typography> : null}>{step.label}</StepLabel>\n      <StepContent>\n        <Typography>{step.description}</Typography>\n        <Box sx={{ mb: 2 }}>\n          <div>\n            <Button\n              variant=\"contained\"\n              onClick={handleNext}\n              sx={{ mt: 1, mr: 1 }}\n              color={index === steps.length - 1 ? 'success' : 'primary'}\n            >\n              {index === steps.length - 1 ? 'Finish' : 'Continue'}\n            </Button>\n            <Button disabled={index === 0} onClick={handleBack} sx={{ mt: 1, mr: 1 }}>\n              Back\n            </Button>\n          </div>\n        </Box>\n      </StepContent>\n    </Step>\n  ))}\n</Stepper>\n{activeStep === steps.length && (\n  <Box sx={{ pt: 2 }}>\n    <Typography sx={{ color: 'success.main' }}>All steps completed - you&apos;re finished</Typography>\n    <Button size=\"small\" variant=\"contained\" color=\"error\" onClick={handleReset} sx={{ mt: 2, mr: 1 }}>\n      Reset\n    </Button>\n  </Box>\n)}`;\n\n  return (\n    <MainCard title=\"Vertical\" codeString={verticalStepperCodeString}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((step, index) => (\n          <Step key={step.label}>\n            <StepLabel optional={index === 2 ? <Typography variant=\"caption\">Last step</Typography> : null}>{step.label}</StepLabel>\n            <StepContent>\n              <Typography>{step.description}</Typography>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 1, mr: 1 }}\n                    color={index === steps.length - 1 ? 'success' : 'primary'}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                  </Button>\n                  <Button disabled={index === 0} onClick={handleBack} sx={{ mt: 1, mr: 1 }}>\n                    Back\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n      {activeStep === steps.length && (\n        <Box sx={{ pt: 2 }}>\n          <Typography sx={{ color: 'success.main' }}>All steps completed - you&apos;re finished</Typography>\n          <Button size=\"small\" variant=\"contained\" color=\"error\" onClick={handleReset} sx={{ mt: 2, mr: 1 }}>\n            Reset\n          </Button>\n        </Box>\n      )}\n    </MainCard>\n  );\n}\n","size_bytes":4358},"src/sections/components-overview/tree-view/GmailTreeView.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\nimport { treeItemClasses } from '@mui/x-tree-view/TreeItem';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2, Book1, InfoCircle, Profile, Sms, Tag2, Trash } from 'iconsax-react';\n\nconst StyledTreeItemRoot = styled(TreeItem)(({ theme }) => ({\n  color: theme.palette.text.secondary,\n  [`& .${treeItemClasses.content}`]: {\n    color: theme.palette.text.secondary,\n    borderTopRightRadius: theme.spacing(2),\n    borderBottomRightRadius: theme.spacing(2),\n    paddingTop: theme.spacing(1.25),\n    paddingBottom: theme.spacing(0.75),\n    paddingRight: theme.spacing(2),\n    fontWeight: theme.typography.fontWeightMedium,\n    '&.Mui-expanded': { fontWeight: theme.typography.fontWeightRegular },\n    '&:hover': { backgroundColor: theme.palette.action.hover },\n    '&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused': {\n      backgroundColor: `var(--tree-view-bg-color, ${theme.palette.action.selected})`,\n      color: 'var(--tree-view-color)'\n    },\n    [`& .${treeItemClasses.label}`]: { fontWeight: 'inherit', color: 'inherit' }\n  },\n  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 0,\n    [`& .${treeItemClasses.content}`]: {\n      paddingLeft: theme.spacing(2)\n    }\n  }\n}));\n\nfunction StyledTreeItem({ bgColor, color, labelIcon, labelInfo, labelText, ...other }) {\n  return (\n    <StyledTreeItemRoot\n      label={\n        <Stack direction=\"row\" spacing={0.5}>\n          <Box sx={{ mr: 1, fontSize: '1rem' }}>{labelIcon}</Box>\n          <Typography variant=\"body2\" sx={{ fontWeight: 'inherit', flexGrow: 1 }}>\n            {labelText}\n          </Typography>\n          <Typography variant=\"caption\" color=\"inherit\">\n            {labelInfo}\n          </Typography>\n        </Stack>\n      }\n      style={{ '--tree-view-color': color, '--tree-view-bg-color': bgColor }}\n      {...other}\n    />\n  );\n}\n\n// ==============================|| TREE VIEW - GMAIL ||============================== //\n\nexport default function GmailTreeView() {\n  const CollapseIcon = () => {\n    return <ArrowDown2 variant=\"Bold\" />;\n  };\n\n  const ExpandIcon = () => {\n    return <ArrowRight2 variant=\"Bold\" />;\n  };\n\n  const EndIcon = () => {\n    return <div style={{ width: 24 }} />;\n  };\n\n  const gmailTreeviewCodeString = `// GmailTreeView.tsx\n<SimpleTreeView\n  aria-label=\"gmail\"\n  defaultExpandedItems={['3']}\n  slots={{ collapseIcon: CollapseIcon, expandIcon: ExpandIcon, endIcon: EndIcon }}\n  sx={{ height: 400, flexGrow: 1, overflowY: 'auto' }}\n>\n  <StyledTreeItem itemId=\"1\" labelText=\"All Mail\" labelIcon={<Sms variant=\"Bold\" />} />\n  <StyledTreeItem itemId=\"2\" labelText=\"Trash\" labelIcon={<Trash variant=\"Bold\" />} />\n  <StyledTreeItem itemId=\"3\" labelText=\"Categories\" labelIcon={<Tag2 variant=\"Bold\" />}>\n    <StyledTreeItem itemId=\"5\" labelText=\"Social\" labelIcon={<Profile variant=\"Bold\" />} labelInfo=\"90\" color=\"#1a73e8\" bgColor=\"#e8f0fe\" />\n    <StyledTreeItem\n      itemId=\"6\"\n      labelText=\"Updates\"\n      labelIcon={<InfoCircle variant=\"Bold\" />}\n      labelInfo=\"2,294\"\n      color=\"#e3742f\"\n      bgColor=\"#fcefe3\"\n    />\n    <StyledTreeItem\n      itemId=\"7\"\n      labelText=\"Forums\"\n      labelIcon={<Book1 variant=\"Bold\" />}\n      labelInfo=\"3,566\"\n      color=\"#a250f5\"\n      bgColor=\"#f3e8fd\"\n    />\n    <StyledTreeItem itemId=\"8\" labelText=\"Promotions\" labelIcon={<Tag2 variant=\"Bold\" />} labelInfo=\"733\" color=\"#3c8039\" bgColor=\"#e6f4ea\" />\n  </StyledTreeItem>\n  <StyledTreeItem itemId=\"4\" labelText=\"History\" labelIcon={<Tag2 variant=\"Bold\" />} />\n</SimpleTreeView>`;\n\n  return (\n    <MainCard title=\"Gmail Clone\" codeString={gmailTreeviewCodeString}>\n      <SimpleTreeView\n        aria-label=\"gmail\"\n        defaultExpandedItems={['3']}\n        slots={{ collapseIcon: CollapseIcon, expandIcon: ExpandIcon, endIcon: EndIcon }}\n        sx={{ height: 400, flexGrow: 1, overflowY: 'auto' }}\n      >\n        <StyledTreeItem itemId=\"1\" labelText=\"All Mail\" labelIcon={<Sms />} />\n        <StyledTreeItem itemId=\"2\" labelText=\"Trash\" labelIcon={<Trash />} />\n        <StyledTreeItem itemId=\"3\" labelText=\"Categories\" labelIcon={<Tag2 />}>\n          <StyledTreeItem\n            itemId=\"5\"\n            labelText=\"Social\"\n            labelIcon={<Profile variant=\"Bulk\" />}\n            labelInfo=\"90\"\n            color=\"#1a73e8\"\n            bgColor=\"#e8f0fe\"\n          />\n          <StyledTreeItem\n            itemId=\"6\"\n            labelText=\"Updates\"\n            labelIcon={<InfoCircle variant=\"Bulk\" />}\n            labelInfo=\"2,294\"\n            color=\"#e3742f\"\n            bgColor=\"#fcefe3\"\n          />\n          <StyledTreeItem\n            itemId=\"7\"\n            labelText=\"Forums\"\n            labelIcon={<Book1 variant=\"Bulk\" />}\n            labelInfo=\"3,566\"\n            color=\"#a250f5\"\n            bgColor=\"#f3e8fd\"\n          />\n          <StyledTreeItem\n            itemId=\"8\"\n            labelText=\"Promotions\"\n            labelIcon={<Tag2 variant=\"Bulk\" />}\n            labelInfo=\"733\"\n            color=\"#3c8039\"\n            bgColor=\"#e6f4ea\"\n          />\n        </StyledTreeItem>\n        <StyledTreeItem itemId=\"4\" labelText=\"History\" labelIcon={<Tag2 />} />\n      </SimpleTreeView>\n    </MainCard>\n  );\n}\n\nStyledTreeItem.propTypes = {\n  bgColor: PropTypes.string,\n  color: PropTypes.string,\n  labelIcon: PropTypes.node,\n  labelInfo: PropTypes.string,\n  labelText: PropTypes.string,\n  other: PropTypes.any\n};\n","size_bytes":5687},"src/sections/maps/clusters-map/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useRef, memo } from 'react';\n\n// third-party\nimport { Map, Layer, Source } from 'react-map-gl';\n\n// project-import\nimport { clusterCountLayer, clusterLayer, unclusteredPointLayer } from './layers';\n\n// ==============================|| MAP - CLUSTERS ||============================== //\n\nfunction MapClusters({ ...other }) {\n  const mapRef = useRef(null);\n\n  const onClick = (event) => {\n    const feature = event.features?.[0];\n    const clusterId = feature?.properties?.cluster_id;\n\n    // @ts-ignore\n    const mapboxSource = mapRef.current?.getSource('earthquakes');\n\n    // @ts-ignore\n    mapboxSource.getClusterExpansionZoom(clusterId, (error, zoom) => {\n      if (error) {\n        return;\n      }\n\n      if (feature?.geometry.type === 'Point') {\n        mapRef.current?.easeTo({\n          center: feature?.geometry.coordinates,\n          zoom: Number.isNaN(zoom) ? 3 : zoom,\n          duration: 500\n        });\n      }\n    });\n  };\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 40.67,\n        longitude: -103.59,\n        zoom: 3\n      }}\n      interactiveLayerIds={[clusterLayer.id || '']}\n      onClick={onClick}\n      ref={mapRef}\n      {...other}\n    >\n      <Source\n        id=\"earthquakes\"\n        type=\"geojson\"\n        data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\n        cluster\n        clusterMaxZoom={14}\n        clusterRadius={50}\n      >\n        <Layer {...clusterLayer} />\n        <Layer {...clusterCountLayer} />\n        <Layer {...unclusteredPointLayer} />\n      </Source>\n    </Map>\n  );\n}\n\nexport default memo(MapClusters);\n\nMapClusters.propTypes = { other: PropTypes.any };\n","size_bytes":1687},"src/pages/components-overview/alert.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { Coin, Ethereum, InfoCircle, MessageQuestion, TickSquare, Warning2 } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - ALERTS ||============================== //\n\nexport default function ComponentAlert() {\n  const theme = useTheme();\n\n  const basicAlertCodeString = `<Alert color=\"primary\" icon={<MessageQuestion variant=\"Bold\" />}>\n  Primary Text\n</Alert>\n<Alert color=\"secondary\" icon={<Coin />}>\n  Secondary Text\n</Alert>\n<Alert color=\"success\" icon={<CheckSquareFilled />}>\n  Success Text\n</Alert>\n<Alert color=\"warning\" icon={<Warning2 variant=\"Bold\" />}>\n  Warning Text\n</Alert>\n<Alert color=\"info\" icon={<InfoCircle variant=\"Bold\" />}>\n  Info Text\n</Alert>\n<Alert color=\"error\" icon={<Ethereum variant=\"Bold\" />}>\n  Error Text\n</Alert>`;\n\n  const actionsAlertCodeString = `<Alert variant=\"border\" color=\"success\" onClose={() => {}}>\n  Success Text\n</Alert>\n<Alert\n  variant=\"border\"\n  color=\"warning\"\n  icon={<Warning2 />}\n  action={\n    <Button color=\"warning\" size=\"small\">\n      Undo\n    </Button>\n  }\n>\n  Warning Text\n</Alert>\n<Alert\n  variant=\"border\"\n  color=\"primary\"\n  icon={<MessageQuestion />}\n  action={\n    <Button variant=\"contained\" size=\"small\">\n      Continue\n    </Button>\n  }\n>\n  Primary Text\n</Alert>`;\n\n  const filledAlertCodeString = `<Alert color=\"primary\" variant=\"filled\" icon={<MessageQuestion variant=\"Bold\" />}>\n  Primary Text\n</Alert>\n<Alert color=\"secondary\" variant=\"filled\" icon={<Coin />}>\n  Secondary Text\n</Alert>\n<Alert color=\"success\" variant=\"filled\" icon={<CheckSquareFilled />}>\n  Success Text\n</Alert>\n<Alert color=\"warning\" variant=\"filled\" icon={<Warning2 variant=\"Bold\" />}>\n  Warning Text\n</Alert>\n<Alert color=\"info\" variant=\"filled\" icon={<InfoCircle variant=\"Bold\" />}>\n  Info Text\n</Alert>\n<Alert color=\"error\" variant=\"filled\" icon={<Ethereum variant=\"Bold\" />}>\n  Error Text\n</Alert>`;\n\n  const descriptionAlertCodeString = `<Alert color=\"primary\" variant=\"border\" icon={<MessageQuestion variant=\"Bold\" />}>\n  <AlertTitle>Primary Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an primary alert.</Typography>\n</Alert>\n<Alert color=\"secondary\" variant=\"border\" icon={<Coin />}>\n  <AlertTitle>Secondary Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an secondary alert.</Typography>\n</Alert>\n<Alert color=\"success\" variant=\"border\" icon={<CheckSquareFilled />}>\n  <AlertTitle>Success Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an success alert.</Typography>\n</Alert>\n<Alert color=\"warning\" variant=\"border\" icon={<Warning2 variant=\"Bold\" />}>\n  <AlertTitle>Warning Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an warning alert.</Typography>\n</Alert>\n<Alert color=\"info\" variant=\"border\" icon={<InfoCircle variant='Bold' />}>\n  <AlertTitle>Info Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an info alert.</Typography>\n</Alert>\n<Alert color=\"error\" variant=\"border\" icon={<Ethereum variant=\"Bold\" />}>\n  <AlertTitle>Error Text</AlertTitle>\n  <Typography variant=\"h6\"> This is an error alert.</Typography>\n</Alert>`;\n\n  const outlinedAlertCodeString = `<Alert color=\"primary\" variant=\"outlined\" icon={<MessageQuestion />}>\n  Primary Text\n</Alert>\n<Alert color=\"secondary\" variant=\"outlined\" icon={<Coin />}>\n  Secondary Text\n</Alert>\n<Alert color=\"success\" variant=\"outlined\" icon={<TickSquare />}>\n  Success Text\n</Alert>\n<Alert color=\"warning\" variant=\"outlined\" icon={<Warning2 />}>\n  Warning Text\n</Alert>\n<Alert color=\"info\" variant=\"outlined\" icon={<InfoCircle />}>\n  Info Text\n</Alert>\n<Alert color=\"error\" variant=\"outlined\" icon={<Ethereum />}>\n  Error Text\n</Alert>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Alert\"\n        caption=\"An alert displays a short, important message in a way that attracts the user's attention without interrupting the user's task.\"\n        directory=\"src/pages/components-overview/alert\"\n        link=\"https://mui.com/material-ui/react-alert/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicAlertCodeString}>\n                <Stack sx={{ width: '100%' }} spacing={2}>\n                  <Alert color=\"primary\" icon={<MessageQuestion variant=\"Bold\" />}>\n                    Primary Text\n                  </Alert>\n                  <Alert color=\"secondary\" icon={<Coin />}>\n                    Secondary Text\n                  </Alert>\n                  <Alert color=\"success\" icon={<TickSquare variant=\"Bold\" />}>\n                    Success Text\n                  </Alert>\n                  <Alert color=\"warning\" icon={<Warning2 variant=\"Bold\" />}>\n                    Warning Text\n                  </Alert>\n                  <Alert color=\"info\" icon={<InfoCircle variant=\"Bold\" />}>\n                    Info Text\n                  </Alert>\n                  <Alert color=\"error\" icon={<Ethereum variant=\"Bold\" />}>\n                    Error Text\n                  </Alert>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Actions\" codeString={actionsAlertCodeString}>\n                <Stack sx={{ width: '100%' }} spacing={2}>\n                  <Alert\n                    variant=\"border\"\n                    color=\"success\"\n                    onClose={() => {}}\n                    sx={{\n                      '& .MuiIconButton-root:focus-visible': {\n                        outline: `2px solid ${theme.palette.success.dark}`,\n                        outlineOffset: 2\n                      }\n                    }}\n                  >\n                    Success Text\n                  </Alert>\n                  <Alert\n                    variant=\"border\"\n                    color=\"warning\"\n                    icon={<Warning2 />}\n                    action={\n                      <Button color=\"warning\" size=\"small\">\n                        Undo\n                      </Button>\n                    }\n                  >\n                    Warning Text\n                  </Alert>\n                  <Alert\n                    variant=\"border\"\n                    color=\"primary\"\n                    icon={<MessageQuestion />}\n                    action={\n                      <Button variant=\"contained\" size=\"small\">\n                        Continue\n                      </Button>\n                    }\n                  >\n                    Primary Text\n                  </Alert>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Filled\" codeString={filledAlertCodeString}>\n                <Stack sx={{ width: '100%' }} spacing={2}>\n                  <Alert color=\"primary\" variant=\"filled\" icon={<MessageQuestion variant=\"Bold\" />}>\n                    Primary Text\n                  </Alert>\n                  <Alert color=\"secondary\" sx={{ color: 'secondary.lighter' }} variant=\"filled\" icon={<Coin />}>\n                    Secondary Text\n                  </Alert>\n                  <Alert color=\"success\" variant=\"filled\" icon={<TickSquare variant=\"Bold\" />}>\n                    Success Text\n                  </Alert>\n                  <Alert color=\"warning\" variant=\"filled\" icon={<Warning2 variant=\"Bold\" />}>\n                    Warning Text\n                  </Alert>\n                  <Alert color=\"info\" variant=\"filled\" icon={<InfoCircle variant=\"Bold\" />}>\n                    Info Text\n                  </Alert>\n                  <Alert color=\"error\" variant=\"filled\" icon={<Ethereum variant=\"Bold\" />}>\n                    Error Text\n                  </Alert>\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Description\" codeString={descriptionAlertCodeString}>\n                <Stack sx={{ width: '100%' }} spacing={2}>\n                  <Alert color=\"primary\" variant=\"border\" icon={<MessageQuestion variant=\"Bold\" />}>\n                    <AlertTitle>Primary Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an primary alert.</Typography>\n                  </Alert>\n                  <Alert color=\"secondary\" variant=\"border\" icon={<Coin />}>\n                    <AlertTitle>Secondary Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an secondary alert.</Typography>\n                  </Alert>\n                  <Alert color=\"success\" variant=\"border\" icon={<TickSquare variant=\"Bold\" />}>\n                    <AlertTitle>Success Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an success alert.</Typography>\n                  </Alert>\n                  <Alert color=\"warning\" variant=\"border\" icon={<Warning2 variant=\"Bold\" />}>\n                    <AlertTitle>Warning Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an warning alert.</Typography>\n                  </Alert>\n                  <Alert color=\"info\" variant=\"border\" icon={<InfoCircle variant=\"Bold\" />}>\n                    <AlertTitle>Info Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an info alert.</Typography>\n                  </Alert>\n                  <Alert color=\"error\" variant=\"border\" icon={<Ethereum variant=\"Bold\" />}>\n                    <AlertTitle>Error Text</AlertTitle>\n                    <Typography variant=\"h6\"> This is an error alert.</Typography>\n                  </Alert>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Outlined\" codeString={outlinedAlertCodeString}>\n                <Stack sx={{ width: '100%' }} spacing={2}>\n                  <Alert color=\"primary\" variant=\"outlined\" icon={<MessageQuestion />}>\n                    Primary Text\n                  </Alert>\n                  <Alert color=\"secondary\" variant=\"outlined\" icon={<Coin />}>\n                    Secondary Text\n                  </Alert>\n                  <Alert color=\"success\" variant=\"outlined\" icon={<TickSquare />}>\n                    Success Text\n                  </Alert>\n                  <Alert color=\"warning\" variant=\"outlined\" icon={<Warning2 />}>\n                    Warning Text\n                  </Alert>\n                  <Alert color=\"info\" variant=\"outlined\" icon={<InfoCircle />}>\n                    Info Text\n                  </Alert>\n                  <Alert color=\"error\" variant=\"outlined\" icon={<Ethereum />}>\n                    Error Text\n                  </Alert>\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":11314},"src/components/third-party/react-table/DebouncedInput.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport OutlinedInput from '@mui/material/OutlinedInput';\n\n// assets\nimport { SearchNormal } from 'iconsax-react';\n\n// ==============================|| FILTER - INPUT ||============================== //\n\nexport default function DebouncedInput({\n  value: initialValue,\n  onFilterChange,\n  debounce = 500,\n  size,\n  startAdornment = <SearchNormal size=\"18\" />,\n  ...props\n}) {\n  const [value, setValue] = useState(initialValue);\n\n  const handleInputChange = (event) => setValue(event.target.value);\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      onFilterChange(value);\n    }, debounce);\n\n    return () => clearTimeout(timeout);\n    // eslint-disable-next-line\n  }, [value]);\n\n  return (\n    <OutlinedInput\n      {...props}\n      value={value}\n      onChange={handleInputChange}\n      sx={{ minWidth: 100 }}\n      {...(startAdornment && { startAdornment })}\n      {...(size && { size })}\n    />\n  );\n}\n\nDebouncedInput.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onFilterChange: PropTypes.func,\n  debounce: PropTypes.number,\n  startAdornment: PropTypes.any,\n  SearchNormal: PropTypes.any,\n  size: PropTypes.string,\n  props: PropTypes.any\n};\n","size_bytes":1363},"src/sections/forms/wizard/team-validation-wizard/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\n// import Checkbox from '@mui/material/Checkbox';\n// import FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\n// import TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n// import { Input } from '@mui/material';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\n// import DragDropFileUpload from 'components/DragDropFileUpload';\n\nconst validationSchema = yup.object({\n  imageSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const formik = useFormik({\n    initialValues: {\n      imageSrc: data.imageSrc ?? null\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        imageSrc: values.imageSrc\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Portrait image of member</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"imageSrc\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\">\n              <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                Back\n              </Button>\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":2582},"src/sections/apps/kanban/Board/EditColumn.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport OutlinedInput from '@mui/material/OutlinedInput';\n\n// project-imports\nimport { ThemeMode } from 'config';\nimport { editColumn } from 'api/kanban';\n\n// ==============================|| KANBAN BOARD - COLUMN EDIT ||============================== //\n\nexport default function EditColumn({ column }) {\n  const theme = useTheme();\n\n  const handleColumnRename = (event) => {\n    editColumn({ id: column.id, title: event.target.value, itemIds: column.itemIds });\n  };\n\n  return (\n    <OutlinedInput\n      fullWidth\n      value={column.title}\n      onChange={handleColumnRename}\n      sx={{\n        mb: 1.5,\n        fontWeight: 500,\n        '& input:focus': {\n          bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.lighter'\n        },\n        '& input:hover': {\n          bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.lighter'\n        },\n        '& input:hover + fieldset': { display: 'block' },\n        '&, & input': { bgcolor: 'transparent' },\n        '& fieldset': { display: 'none' },\n        '& input:focus + fieldset': { display: 'block' }\n      }}\n    />\n  );\n}\n\nEditColumn.propTypes = { column: PropTypes.any };\n","size_bytes":1284},"src/layout/Component/Drawer/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport MuiDrawer from '@mui/material/Drawer';\nimport TextField from '@mui/material/TextField';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport DrawerContent from './DrawerContent';\nimport { DRAWER_WIDTH } from 'config';\nimport { handlerComponentDrawer, useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { SearchNormal1 } from 'iconsax-react';\n\n// ==============================|| DRAWER ||============================== //\n\nexport default function Drawer() {\n  const theme = useTheme();\n  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));\n\n  const { menuMaster } = useGetMenuMaster();\n  const open = menuMaster.isComponentDrawerOpened;\n\n  const [searchValue, setSearchValue] = useState();\n\n  const handleSearchValue = (event) => {\n    const search = event.target.value.trim().toLowerCase();\n    setSearchValue(search);\n  };\n\n  return (\n    <MuiDrawer\n      sx={{\n        width: DRAWER_WIDTH,\n        flexShrink: 0,\n        position: { xs: 'fixed', md: 'sticky' },\n        top: { xs: 0, md: 84, xl: 90 },\n        height: { xs: 'auto', md: 'calc(100vh - 140px)', xl: 'calc(100vh - 148px)' },\n        zIndex: { xs: open ? 1200 : -1, md: 0 },\n        '& .MuiDrawer-paper': {\n          borderRadius: matchDownMd ? 0 : 1.5,\n          position: 'relative',\n          border: 'none'\n        }\n      }}\n      variant={matchDownMd ? 'temporary' : 'persistent'}\n      anchor=\"left\"\n      open={open}\n      ModalProps={{ keepMounted: true }}\n      onClose={() => handlerComponentDrawer(false)}\n    >\n      <MainCard sx={{ height: '100%', borderRadius: matchDownMd ? 0 : 1.5 }} content={false}>\n        <Box sx={{ p: 3, borderBottom: `1px solid ${theme.palette.divider}` }}>\n          <TextField\n            fullWidth\n            autoFocus\n            InputProps={{\n              startAdornment: <SearchNormal1 />,\n              placeholder: 'Search Components',\n              type: 'search'\n            }}\n            onChange={handleSearchValue}\n          />\n        </Box>\n        <DrawerContent searchValue={searchValue} />\n      </MainCard>\n    </MuiDrawer>\n  );\n}\n","size_bytes":2292},"src/sections/forms/edit-forms/blogs/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Blog title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.blogTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Blog Image\n            </Typography>\n            <ImageDisplay file={data.titleImagePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Intro of blog\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.blogIntro}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label of blog\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.label}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath1} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath2} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath3} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath4} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading image\n            </Typography>\n            <ImageDisplay file={data.firstSubheadingImage} />\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSubheadingTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5572},"src/sections/components-overview/dialogs/SizesDialog.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport Dialog from '@mui/material/Dialog';\nimport Select from '@mui/material/Select';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// ==============================|| DIALOG - SIZES ||============================== //\n\nexport default function MaxWidthDialog() {\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState('sm');\n\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleMaxWidthChange = (event) => {\n    setMaxWidth(\n      // @ts-expect-error autofill of arbitrary value is not handled.\n      event.target.value\n    );\n  };\n\n  const handleFullWidthChange = (event) => {\n    setFullWidth(event.target.checked);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle>Optional sizes</DialogTitle>\n          <DialogContent>\n            <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n            <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 1 }}>\n              <Grid item>\n                <Typography variant=\"h6\">Max Width :</Typography>\n              </Grid>\n              <Grid item>\n                <FormControl sx={{ minWidth: 120 }}>\n                  <Select\n                    autoFocus\n                    value={maxWidth}\n                    onChange={handleMaxWidthChange}\n                    inputProps={{\n                      name: 'max-width',\n                      id: 'max-width'\n                    }}\n                  >\n                    <MenuItem value={false}>false</MenuItem>\n                    <MenuItem value=\"xs\">xs</MenuItem>\n                    <MenuItem value=\"sm\">sm</MenuItem>\n                    <MenuItem value=\"md\">md</MenuItem>\n                    <MenuItem value=\"lg\">lg</MenuItem>\n                    <MenuItem value=\"xl\">xl</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 0.25 }}>\n              <Grid item>\n                <Typography variant=\"h6\">Full Width:</Typography>\n              </Grid>\n              <Grid item>\n                <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button variant=\"outlined\" color=\"error\" onClick={handleClose}>\n              Close\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":3370},"src/sections/widget/data/TasksCard.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\n\n// assets\nimport { TickCircle } from 'iconsax-react';\n\n// ==============================|| DATA WIDGET - TASKS ||============================== //\n\nexport default function TasksCard() {\n  return (\n    <MainCard\n      title=\"Tasks\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <CardContent>\n        <Grid\n          container\n          spacing={3.5}\n          alignItems=\"center\"\n          sx={{\n            position: 'relative',\n            '&>*': { position: 'relative', zIndex: '5' },\n            '&:after': {\n              content: '\"\"',\n              position: 'absolute',\n              top: 30,\n              left: 34,\n              width: 2,\n              height: `calc(100% - 30px)`,\n              bgcolor: 'divider',\n              zIndex: '1'\n            }\n          }}\n        >\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box sx={{ color: 'success.main', marginLeft: -0.5 }}>\n                  <TickCircle variant=\"Bold\" />\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={0}>\n                  <Grid item xs={12}>\n                    <Typography>8:50</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"text.secondary\">\n                      You’re getting more and more followers, keep it up!\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Dot size={14} color=\"primary\" componentDiv sx={{ mt: 0.5 }} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={0}>\n                  <Grid item xs={12}>\n                    <Typography>Sat, 5 Mar</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"text.secondary\">\n                      Design mobile Application\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Dot size={14} color=\"error\" componentDiv sx={{ mt: 0.5 }} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={0}>\n                  <Grid item xs={12}>\n                    <Typography>Sun, 17 Feb</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"text.secondary\">\n                      <Link component={RouterLink} to=\"#\" underline=\"hover\">\n                        Jenny\n                      </Link>{' '}\n                      assign you a task{' '}\n                      <Link component={RouterLink} to=\"#\" underline=\"hover\">\n                        Mockup Design\n                      </Link>\n                      .\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Dot size={14} color=\"warning\" componentDiv sx={{ mt: 0.5 }} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={0}>\n                  <Grid item xs={12}>\n                    <Typography>Sat, 18 Mar</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"text.secondary\">\n                      Design logo\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Dot size={14} color=\"success\" componentDiv sx={{ mt: 0.5 }} />\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={0}>\n                  <Grid item xs={12}>\n                    <Typography>Sat, 22 Mar</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"text.secondary\">\n                      Design mobile Application\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Dot size={14} color=\"secondary\" componentDiv sx={{ mt: -1.5 }} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":5501},"src/sections/dashboard/analytics/IncomeChart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst areaChartOptions = {\n  chart: {\n    height: 355,\n    type: 'area',\n    toolbar: {\n      show: false\n    }\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shadeIntensity: 1,\n      type: 'vertical',\n      inverseColors: false,\n      opacityFrom: 0.5,\n      opacityTo: 0\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    curve: 'straight',\n    width: 1\n  },\n  grid: {\n    show: true,\n    borderColor: '#90A4AE',\n    strokeDashArray: 0,\n    position: 'back',\n    xaxis: {\n      lines: {\n        show: true\n      }\n    },\n    yaxis: {\n      lines: {\n        show: true\n      }\n    }\n  }\n};\n\n// ==============================|| ANALYTICS - INCOME LINE CHART ||============================== //\n\nexport default function IncomeAreaChart({ slot, quantity }) {\n  const theme = useTheme();\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const mode = theme.palette.mode;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary.main, theme.palette.primary[700]],\n      xaxis: {\n        categories:\n          slot === 'month'\n            ? ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n            : ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n        labels: {\n          style: {\n            colors: [\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary\n            ]\n          }\n        },\n        axisBorder: {\n          show: true,\n          color: line\n        },\n        tickAmount: slot === 'month' ? 11 : 7\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      tooltip: {\n        y: {\n          formatter(val) {\n            return `$ ${val}`;\n          }\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme, slot]);\n\n  const [series, setSeries] = useState([\n    {\n      name: 'Income',\n      data: [0, 86, 28, 115, 48, 210, 136]\n    }\n  ]);\n\n  useEffect(() => {\n    switch (quantity) {\n      case 'By volume':\n        setSeries([\n          {\n            name: 'Income',\n            data: slot === 'month' ? [100, 40, 60, 40, 40, 40, 80, 40, 40, 50, 40, 40] : [100, 20, 60, 20, 20, 80, 20]\n          }\n        ]);\n        break;\n\n      case 'By margin':\n        setSeries([\n          {\n            name: 'Income',\n            data: slot === 'month' ? [120, 85, 101, 98, 87, 105, 91, 114, 94, 86, 115, 35] : [51, 40, 28, 51, 42, 109, 100]\n          }\n        ]);\n        break;\n      case 'By sales':\n        setSeries([\n          {\n            name: 'Income',\n            data: slot === 'month' ? [90, 85, 101, 98, 87, 105, 91, 114, 94, 86, 115, 35] : [21, 40, 28, 51, 42, 109, 100]\n          }\n        ]);\n        break;\n      default:\n        break;\n    }\n  }, [slot, quantity]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={355} />;\n}\n\nIncomeAreaChart.propTypes = { slot: PropTypes.string, quantity: PropTypes.any };\n","size_bytes":3746},"src/menu-items/dashboard.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// project-imports\nimport { useGetMenu } from 'api/menu';\n\n// assets\nimport { Refresh, Home3, HomeTrendUp, Box1 } from 'iconsax-react';\n\nconst icons = {\n  navigation: Home3,\n  dashboard: HomeTrendUp,\n  components: Box1,\n  loading: Refresh\n};\n\nconst loadingMenu = {\n  id: 'group-dashboard-loading',\n  title: <FormattedMessage id=\"dashboard\" />,\n  type: 'group',\n  icon: icons.loading,\n  children: [\n    {\n      id: 'dashboard1',\n      title: <FormattedMessage id=\"dashboard\" />,\n      type: 'collapse',\n      icon: icons.loading,\n      children: [\n        {\n          id: 'default1',\n          title: 'loading',\n          type: 'item',\n          url: '/dashboard/default',\n          breadcrumbs: false\n        },\n        {\n          id: 'analytics1',\n          title: 'loading',\n          type: 'item',\n          url: '/dashboard/analytics',\n          breadcrumbs: false\n        }\n      ]\n    }\n  ]\n};\n\n// ==============================|| MENU ITEMS - API ||============================== //\n\nexport function MenuFromAPI() {\n  const { menu, menuLoading } = useGetMenu();\n\n  if (menuLoading) return loadingMenu;\n\n  const subChildrenList = (children) => {\n    return children?.map((subList) => {\n      return fillItem(subList);\n    });\n  };\n\n  const itemList = (subList) => {\n    let list = fillItem(subList);\n\n    // if collapsible item, we need to feel its children as well\n    if (subList.type === 'collapse') {\n      list.children = subChildrenList(subList.children);\n    }\n    return list;\n  };\n\n  const childrenList = menu?.children?.map((subList) => {\n    return itemList(subList);\n  });\n\n  let menuList = fillItem(menu, childrenList);\n  return menuList;\n}\n\nfunction fillItem(item, children) {\n  return {\n    ...item,\n    title: <FormattedMessage id={`${item?.title}`} />,\n    // @ts-ignore\n    icon: icons[item?.icon],\n    ...(children && { children })\n  };\n}\n","size_bytes":1928},"src/sections/apps/kanban/Board/AddColumn.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport { Chance } from 'chance';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SubCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode } from 'config';\nimport { addColumn } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nconst chance = new Chance();\n\n// ==============================|| KANBAN BOARD - ADD COLUMN ||============================== //\n\nexport default function AddColumn() {\n  const theme = useTheme();\n\n  const [title, setTitle] = useState('');\n  const [isTitle, setIsTitle] = useState(false);\n\n  const [isAddColumn, setIsAddColumn] = useState(false);\n\n  const handleAddColumnChange = () => {\n    setIsAddColumn((prev) => !prev);\n  };\n\n  const addNewColumn = () => {\n    if (title.length > 0) {\n      const newColumn = {\n        id: `${chance.integer({ min: 1000, max: 9999 })}`,\n        title,\n        itemIds: []\n      };\n\n      addColumn(newColumn);\n      openSnackbar({\n        open: true,\n        message: 'Column Added successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n      setIsAddColumn((prev) => !prev);\n      setTitle('');\n    } else {\n      setIsTitle(true);\n    }\n  };\n\n  const handleAddColumn = (event) => {\n    if (event.key === 'Enter' || event.keyCode === 13) {\n      addNewColumn();\n    }\n  };\n\n  const handleColumnTitle = (event) => {\n    const newTitle = event.target.value;\n    setTitle(newTitle);\n    if (newTitle.length <= 0) {\n      setIsTitle(true);\n    } else {\n      setIsTitle(false);\n    }\n  };\n\n  return (\n    <MainCard\n      sx={{\n        minWidth: 250,\n        backgroundColor: theme.palette.mode === ThemeMode.DARK ? theme.palette.background.default : theme.palette.secondary[200],\n        height: '100%',\n        borderColor: theme.palette.divider\n      }}\n      contentSX={{ p: 1.5, '&:last-of-type': { pb: 1.5 } }}\n    >\n      <Grid container alignItems=\"center\" spacing={1}>\n        {isAddColumn && (\n          <Grid item xs={12}>\n            <SubCard content={false}>\n              <Box sx={{ p: 2, pb: 1.5, transition: 'background-color 0.25s ease-out' }}>\n                <Grid container alignItems=\"center\" spacing={0.5}>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      placeholder=\"Add Column\"\n                      value={title}\n                      onChange={handleColumnTitle}\n                      sx={{\n                        mb: 3,\n                        '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\n                        '& fieldset': { display: 'none' },\n                        '& .MuiFormHelperText-root': { ml: 0 },\n                        '& .MuiOutlinedInput-root': { bgcolor: 'transparent', '&.Mui-focused': { boxShadow: 'none' } }\n                      }}\n                      onKeyUp={handleAddColumn}\n                      helperText={isTitle ? 'Column title is required.' : ''}\n                      error={isTitle}\n                    />\n                  </Grid>\n                  <Grid item xs zeroMinWidth />\n                  <Grid item>\n                    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                      <Tooltip title=\"Cancel\">\n                        <IconButton size=\"small\" color=\"error\" onClick={handleAddColumnChange}>\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </IconButton>\n                      </Tooltip>\n                      <Button variant=\"contained\" color=\"primary\" onClick={addNewColumn} size=\"small\">\n                        Add\n                      </Button>\n                    </Stack>\n                  </Grid>\n                </Grid>\n              </Box>\n            </SubCard>\n          </Grid>\n        )}\n        {!isAddColumn && (\n          <Grid item xs={12}>\n            <Button variant=\"dashed\" color=\"secondary\" fullWidth onClick={handleAddColumnChange}>\n              Add Column\n            </Button>\n          </Grid>\n        )}\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4583},"src/sections/components-overview/notistack/PositioningSnackbar.jsx":{"content":"// material-ul\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\n\n// project-import\nimport MainCard from 'components/MainCard';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// ==============================|| NOTISTACK - POSTIONING ||============================== //\n\nexport default function PositioningSnackbar() {\n  const NotiStackPositioningCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is default message.', {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'left'\n      }\n    })\n  }\n>\n  Top-Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is success message', {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      }\n    })\n  }\n>\n  Top-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is warning message', {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    })\n  }\n>\n  Top-right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is info message', {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'left'\n      }\n    })\n  }\n>\n  Bottom-left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is info message', {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      }\n    })\n  }\n>\n  Bottom-center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    enqueueSnackbar('This is info message', {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      }\n    })\n  }\n>\n  Bottom-Right\n</Button>`;\n\n  return (\n    <MainCard title=\"Positioning\" codeString={NotiStackPositioningCodeString}>\n      <Grid container spacing={2}>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() => enqueueSnackbar('This is default message.', { anchorOrigin: { vertical: 'top', horizontal: 'left' } })}\n          >\n            Top-Left\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              enqueueSnackbar('This is success message', {\n                anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'center'\n                }\n              })\n            }\n          >\n            Top-Center\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              enqueueSnackbar('This is warning message', {\n                anchorOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right'\n                }\n              })\n            }\n          >\n            Top-right\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              enqueueSnackbar('This is info message', {\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left'\n                }\n              })\n            }\n          >\n            Bottom-left\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              enqueueSnackbar('This is info message', {\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'center'\n                }\n              })\n            }\n          >\n            Bottom-center\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() =>\n              enqueueSnackbar('This is info message', {\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right'\n                }\n              })\n            }\n          >\n            Bottom-Right\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4048},"src/sections/widget/chart/EcommerceRadial.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// ==============================|| CHART ||============================== //\n\nfunction EcommerceDataChart({ color }) {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      type: 'radialBar'\n    },\n    plotOptions: {\n      radialBar: {\n        hollow: {\n          margin: 0,\n          size: '60%',\n          background: 'transparent',\n          imageOffsetX: 0,\n          imageOffsetY: 0,\n          position: 'front'\n        },\n        track: {\n          background: alpha(color, 0.5),\n          strokeWidth: '50%'\n        },\n\n        dataLabels: {\n          show: true,\n          name: {\n            show: false\n          },\n          value: {\n            formatter: (val) => val,\n            offsetY: 7,\n            color: color,\n            fontSize: '20px',\n            fontWeight: '700',\n            show: true\n          }\n        }\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [color],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [color, mode, primary, secondary, line, theme]);\n\n  const [series] = useState([30]);\n\n  return <ReactApexChart options={options} series={series} type=\"radialBar\" height={150} />;\n}\n\n// ==============================|| CHART WIDGET - ECOMMERCE RADIAL  ||============================== //\n\nexport default function EcommerceRadial({ color }) {\n  return (\n    <MainCard content={false}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ px: 2 }}>\n        <Box sx={{ width: 120 }}>\n          <EcommerceDataChart color={color} />\n        </Box>\n        <Stack>\n          <Typography>Total Earning</Typography>\n          <Typography variant=\"subtitle1\">$45,890</Typography>\n        </Stack>\n      </Stack>\n    </MainCard>\n  );\n}\n\nEcommerceDataChart.propTypes = { color: PropTypes.string };\n\nEcommerceRadial.propTypes = { color: PropTypes.string };\n","size_bytes":2612},"src/components/Customization/ThemeLayout.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport CardMedia from '@mui/material/CardMedia';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nimport { MenuOrientation, ThemeDirection } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport { handlerDrawerOpen, useGetMenuMaster } from 'api/menu';\n\n// assets\nimport defaultLayout from 'assets/images/customization/ltr.svg';\nimport rtlLayout from 'assets/images/customization/rtl.svg';\nimport miniMenu from 'assets/images/customization/mini-menu.svg';\n\n// ==============================|| CUSTOMIZATION - LAYOUT ||============================== //\n\nexport default function ThemeLayout() {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { miniDrawer, themeDirection, onChangeDirection, onChangeMiniDrawer, menuOrientation } = useConfig();\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  let initialTheme = 'default';\n  if (miniDrawer === true) initialTheme = 'mini';\n  if (themeDirection === ThemeDirection.RTL) initialTheme = 'rtl';\n\n  const [value, setValue] = useState(initialTheme);\n  const handleRadioChange = (event) => {\n    const newValue = event.target.value;\n    setValue(newValue);\n    if (newValue === 'default') {\n      if (themeDirection === ThemeDirection.RTL) {\n        onChangeDirection(ThemeDirection.LTR);\n      }\n      if (miniDrawer === true) {\n        onChangeMiniDrawer(false);\n      }\n      if (!drawerOpen) {\n        handlerDrawerOpen(true);\n      }\n    }\n    if (newValue === 'mini') {\n      onChangeMiniDrawer(true);\n      if (drawerOpen) {\n        handlerDrawerOpen(false);\n      }\n    }\n    if (newValue === ThemeDirection.RTL) {\n      onChangeDirection(ThemeDirection.RTL);\n    }\n  };\n\n  return (\n    <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={value} onChange={handleRadioChange}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value=\"default\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{ borderWidth: 2, p: 1, ...(value === 'default' && { borderColor: theme.palette.primary.main }) }}\n              >\n                <CardMedia component=\"img\" src={defaultLayout} alt=\"defaultLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">Default</Typography>\n            </Stack>\n          }\n        />\n        {(menuOrientation === MenuOrientation.VERTICAL || downLG) && (\n          <FormControlLabel\n            control={<Radio value=\"mini\" sx={{ display: 'none' }} />}\n            sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n            label={\n              <Stack alignItems=\"center\" spacing={0.5}>\n                <MainCard\n                  content={false}\n                  sx={{ borderWidth: 2, p: 1, ...(value === 'mini' && { borderColor: theme.palette.primary.main }) }}\n                >\n                  <CardMedia component=\"img\" src={miniMenu} alt=\"miniMenu\" />\n                </MainCard>\n                <Typography variant=\"caption\">Mini Drawer</Typography>\n              </Stack>\n            }\n          />\n        )}\n        <FormControlLabel\n          control={<Radio value={ThemeDirection.RTL} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{ borderWidth: 2, p: 1, ...(value === ThemeDirection.RTL && { borderColor: theme.palette.primary.main }) }}\n              >\n                <CardMedia component=\"img\" src={rtlLayout} alt=\"rtlLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">RTL</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":4557},"src/sections/auth/AuthSocButton.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\n\n// ==============================|| AUTHENTICATION - CARD ||============================== //\n\nexport default function AuthSocButton({ children, ...other }) {\n  const theme = useTheme();\n  return (\n    <Button\n      variant=\"outlined\"\n      fullWidth\n      sx={{\n        bgcolor: 'secondary.100',\n        borderColor: theme.palette.secondary[200],\n        color: 'secondary.main',\n        '&:hover,&:focus': { bgcolor: 'secondary.100', borderColor: theme.palette.primary.main }\n      }}\n      {...other}\n    >\n      {children}\n    </Button>\n  );\n}\n\nAuthSocButton.propTypes = { children: PropTypes.any, other: PropTypes.any };\n","size_bytes":770},"src/sections/components-overview/accordion/ControlledAccordion.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Accordion from '@mui/material/Accordion';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| ACCORDION - CONTROLLED ||============================== //\n\nexport default function ControlledAccordion() {\n  const [expanded, setExpanded] = useState('panel2');\n\n  const handleChange = (panel) => {\n    setExpanded(panel);\n  };\n\n  const controlledAccordionCodeString = `<Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n  <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n    <Typography variant=\"h6\">Accordion 01</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n  <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n    <Typography variant=\"h6\">Accordion 02</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n  <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n    <Typography variant=\"h6\">Accordion 03</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n  <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n    <Typography variant=\"h6\">Accordion 04</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>`;\n\n  return (\n    <MainCard title=\"Controlled\" codeString={controlledAccordionCodeString}>\n      <>\n        <Accordion expanded={expanded === 'panel1'} onChange={() => handleChange('panel1')}>\n          <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n            <Typography variant=\"h6\">Accordion 01</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel2'} onChange={() => handleChange('panel2')}>\n          <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n            <Typography variant=\"h6\">Accordion 02</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel3'} onChange={() => handleChange('panel3')}>\n          <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n            <Typography variant=\"h6\">Accordion 03</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel4'} onChange={() => handleChange('panel4')}>\n          <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n            <Typography variant=\"h6\">Accordion 04</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5812},"src/sections/auth/AuthSlider.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Rating from '@mui/material/Rating';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\n\n// third-party\nimport Slider from 'react-slick';\n\n// assets\nimport Avatar1 from 'assets/images/users/avatar-1.png';\nimport Avatar2 from 'assets/images/users/avatar-2.png';\nimport Avatar3 from 'assets/images/users/avatar-3.png';\nimport Avatar4 from 'assets/images/users/avatar-4.png';\n\n// ==============================|| AUTH BLUR BACK SVG ||============================== //\n\nexport default function AuthBackground() {\n  const settings = {\n    dots: true,\n    arrows: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1\n  };\n  const usercomment = [\n    {\n      image: Avatar1,\n      name: 'Allie Grater',\n      designation: '@alliegrater',\n      rating: 4,\n      comment:\n        'Very good customer service!👌 I liked the design and there was nothing wrong, but found out after testing that it did not quite match the functionality and overall design that I needed for my type of software. I therefore contacted customer service and it was no problem even though the deadline for refund had actually expired.😍'\n    },\n    {\n      image: Avatar2,\n      name: 'Allie Grater',\n      designation: '@alliegrater',\n      rating: 3,\n      comment:\n        'Very good customer service!👌 I liked the design and there was nothing wrong, but found out after testing that it did not quite match the functionality and overall design that I needed for my type of software. I therefore contacted customer service and it was no problem even though the deadline for refund had actually expired.😍'\n    },\n    {\n      image: Avatar3,\n      name: 'Allie Grater',\n      designation: '@alliegrater',\n      rating: 5,\n      comment:\n        'Very good customer service!👌 I liked the design and there was nothing wrong, but found out after testing that it did not quite match the functionality and overall design that I needed for my type of software. I therefore contacted customer service and it was no problem even though the deadline for refund had actually expired.😍'\n    },\n    {\n      image: Avatar4,\n      name: 'Allie Grater',\n      designation: '@alliegrater',\n      rating: 4,\n      comment:\n        'Very good customer service!👌 I liked the design and there was nothing wrong, but found out after testing that it did not quite match the functionality and overall design that I needed for my type of software. I therefore contacted customer service and it was no problem even though the deadline for refund had actually expired.😍'\n    }\n  ];\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        '&:before': {\n          content: `\" \"`,\n          width: '100%',\n          height: '100%',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          background: 'linear-gradient(338deg, rgba(0, 0, 0, 0.3), transparent)'\n        }\n      }}\n    >\n      <Box\n        sx={{\n          width: 500,\n          m: '0 auto',\n          color: 'common.white',\n          '& .slick-dots': {\n            bottom: '-45px',\n            '& li': {\n              width: 'auto',\n              margin: 0,\n              '& button': {\n                width: 'auto',\n                '&:before': {\n                  position: 'relative',\n                  display: 'inline-block',\n                  content: '\"\"',\n                  width: 6,\n                  height: 6,\n                  borderRadius: 1,\n                  bgcolor: 'common.white'\n                }\n              },\n              '&.slick-active button:before': { width: 30 }\n            }\n          }\n        }}\n      >\n        <Slider {...settings}>\n          {usercomment.map((item, index) => (\n            <Box key={index} sx={{ width: '100%', textAlign: 'center' }}>\n              <Grid container spacing={3} direction=\"column\">\n                <Grid item>\n                  <Avatar alt=\"User 1\" src={item.image} variant=\"circular\" size=\"lg\" sx={{ m: '0 auto' }} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\">{item.name}</Typography>\n                  <Typography variant=\"body2\">{item.designation}</Typography>\n                </Grid>\n                <Grid item>\n                  <Rating name=\"disabled\" value={item.rating} readOnly />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\">{item.comment}</Typography>\n                </Grid>\n              </Grid>\n            </Box>\n          ))}\n        </Slider>\n      </Box>\n    </Box>\n  );\n}\n","size_bytes":4773},"src/sections/apps/kanban/Board/AddItemComment.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport { Chance } from 'chance';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\nimport { addItemComment } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Android, Camera, DocumentUpload } from 'iconsax-react';\n\nconst chance = new Chance();\n\n// ==============================|| KANBAN BOARD - ADD ITEM COMMENT ||============================== //\n\nexport default function AddItemComment({ itemId }) {\n  const theme = useTheme();\n\n  const [comment, setComment] = useState('');\n  const [isComment, setIsComment] = useState(false);\n\n  const handleAddTaskComment = (event) => {\n    if (event.key === 'Enter' || event.keyCode === 13) {\n      addTaskComment();\n    }\n  };\n\n  const addTaskComment = () => {\n    if (comment.length > 0) {\n      const newComment = {\n        id: `${chance.integer({ min: 1000, max: 9999 })}`,\n        comment,\n        profileId: 'profile-3'\n      };\n\n      addItemComment(itemId, newComment);\n      openSnackbar({\n        open: true,\n        message: 'Comment Added successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n\n      setComment('');\n    } else {\n      setIsComment(true);\n    }\n  };\n\n  const handleTaskComment = (event) => {\n    const newComment = event.target.value;\n    setComment(newComment);\n    if (newComment.length <= 0) {\n      setIsComment(true);\n    } else {\n      setIsComment(false);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 2, pb: 1.5, border: '1px solid', borderColor: theme.palette.divider }}>\n      <Grid container alignItems=\"center\" spacing={0.5}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            placeholder=\"Add Comment\"\n            value={comment}\n            onChange={handleTaskComment}\n            sx={{\n              mb: 3,\n              '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\n              '& fieldset': { display: 'none' },\n              '& .MuiFormHelperText-root': { ml: 0 },\n              '& .MuiOutlinedInput-root': { bgcolor: 'transparent', '&.Mui-focused': { boxShadow: 'none' } }\n            }}\n            onKeyUp={handleAddTaskComment}\n            helperText={isComment ? 'Comment is required.' : ''}\n            error={isComment}\n          />\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <Camera />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <DocumentUpload />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <Android />\n          </IconButton>\n        </Grid>\n        <Grid item xs zeroMinWidth />\n        <Grid item>\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={addTaskComment}>\n            Comment\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nAddItemComment.propTypes = { itemId: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]) };\n","size_bytes":3335},"src/sections/widget/chart/NewOrders.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport EcommerceDataChart from './EcommerceDataChart';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowUp } from 'iconsax-react';\n\n// ==============================|| CHART WIDGETS - NEW ORDER ||============================== //\n\nexport default function NewOrders() {\n  const theme = useTheme();\n\n  const [age, setAge] = useState('30');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">New Orders</Typography>\n            <Box sx={{ minWidth: 120 }}>\n              <FormControl fullWidth size=\"small\">\n                <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n                  <MenuItem value={10}>Today</MenuItem>\n                  <MenuItem value={20}>Weekly</MenuItem>\n                  <MenuItem value={30}>Monthly</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <EcommerceDataChart color={theme.palette.primary.main} height={80} />\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n            <Typography variant=\"subtitle1\">$30,200</Typography>\n            <Typography color=\"primary\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5, fontWeight: 500 }}>\n              <ArrowUp size={14} style={{ transform: 'rotate(45deg)' }} />\n              30.6%\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            View more\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2376},"src/pages/auth/auth2/check-mail2.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\n\n// ================================|| CHECK MAIL ||================================ //\n\nexport default function CheckMail() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Box sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Hi, Check Your Mail</Typography>\n            <Typography color=\"secondary\" sx={{ mb: 0.5, mt: 1.25 }}>\n              We have sent a password recover instructions to your email.\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <AnimateButton>\n            <Button\n              component={Link}\n              to={isLoggedIn ? '/auth/login2' : '/login2'}\n              disableElevation\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Sign in\n            </Button>\n          </AnimateButton>\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":1464},"src/sections/charts/apexchart/ApexPolarChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst polarChartOptions = {\n  chart: {\n    width: 450,\n    height: 450,\n    type: 'polarArea'\n  },\n  fill: {\n    opacity: 1\n  },\n  legend: {\n    show: true,\n    fontFamily: `Inter var`,\n    offsetX: 10,\n    offsetY: 10,\n    labels: {\n      useSeriesColors: false\n    },\n    markers: {\n      width: 12,\n      height: 12,\n      radius: 5\n    },\n    itemMargin: {\n      horizontal: 25,\n      vertical: 4\n    }\n  },\n  responsive: [\n    {\n      breakpoint: 450,\n      chart: {\n        width: 280,\n        height: 280\n      },\n      options: {\n        legend: {\n          show: false\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| APEXCHART - POLAR ||============================== //\n\nexport default function ApexPolarChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n  const backColor = theme.palette.background.paper;\n\n  const [series] = useState([14, 23, 21, 17, 15, 10, 12, 17, 21]);\n  const [options, setOptions] = useState(polarChartOptions);\n\n  const secondary = theme.palette.primary[700];\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.main;\n  const error = theme.palette.error.main;\n  const warningDark = theme.palette.warning.main;\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary, primaryMain, successDark, error, warningDark, error],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      stroke: {\n        colors: [backColor]\n      },\n      plotOptions: {\n        polarArea: {\n          rings: {\n            strokeColor: line\n          },\n          spokes: {\n            connectorColors: line\n          }\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, backColor, secondary, primaryMain, successDark, error, warningDark]);\n\n  return (\n    <Box id=\"chart\" sx={{ bgcolor: 'transparent' }}>\n      <ReactApexChart options={options} series={series} type=\"polarArea\" />\n    </Box>\n  );\n}\n","size_bytes":2809},"src/sections/components-overview/autocomplete/CustomizedAutocomplete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useAutocomplete } from '@mui/base';\nimport { styled } from '@mui/material/styles';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// assets\nimport { CloseCircle, TickSquare } from 'iconsax-react';\n\nconst Root = styled('div')(\n  ({ theme }) => `\ncolor: ${theme.palette.text.primary};\nfont-size: 14px;\n`\n);\nRoot.displayName = 'Root';\n\nconst InputWrapper = styled('div')(\n  ({ theme }) => `\nwidth: 100%;\nborder: 1px solid ${theme.palette.divider};\nbackground-color: ${theme.palette.background.default};\nborder-radius: 4px;\npadding: 8px;\ndisplay: flex;\nflex-wrap: wrap;\n\n&:hover {\n  border-color: ${theme.palette.primary.main};\n}\n\n&.focused {\n  border-color: ${theme.palette.primary.main};\n  box-shadow: ${theme.customShadows.primary};\n}\n\n& input {\n  background-color: transparent;\n  height: 30px;\n  box-sizing: border-box;\n  padding: 4px 6px;\n  width: 0;\n  min-width: 30px;\n  flex-grow: 1;\n  border: 0;\n  margin: 0;\n  outline: 0;\n}\n`\n);\n\nfunction Tag({ label, onDelete, ...other }) {\n  return (\n    <div {...other}>\n      <span>{label}</span>\n      <CloseCircle onClick={onDelete} variant=\"Bold\" size={18} />\n    </div>\n  );\n}\n\nconst StyledTag = styled(Tag)(\n  ({ theme }) => `\ndisplay: flex;\nalign-items: center;\nheight: 24px;\nmargin: 4px;\nline-height: 22px;\nbackground-color: ${theme.palette.secondary.lighter};\nborder: 1px solid ${theme.palette.secondary.light};\nborder-radius: 2px;\nbox-sizing: content-box;\npadding: 0 4px 0 10px;\noutline: 0;\noverflow: hidden;\n\n& span {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n& svg {\n  font-size: 0.625rem;\n  cursor: pointer;\n  padding: 4px;\n}\n`\n);\n\nconst Listbox = styled('ul')(\n  ({ theme }) => `\nwidth: 300px;\nmargin: 2px 0 0;\npadding: 0;\nposition: absolute;\nlist-style: none;\nbackground-color: ${theme.palette.background.paper};\noverflow: auto;\nmax-height: 250px;\nborder-radius: 4px;\nbox-shadow: ${theme.customShadows.z1};\nz-index: 1;\n\n& li {\n  padding: 5px 12px;\n  display: flex;\n\n  & span {\n    flex-grow: 1;\n  }\n\n  & svg {\n    color: transparent;\n  }\n}\n\n& li[aria-selected='true'] {\n  background-color: ${theme.palette.primary.lighter};\n  font-weight: 600;\n\n  & svg {\n    color: ${theme.palette.primary.main};\n  }\n}\n\n& li[data-focus='true'] {\n  background-color: ${theme.palette.primary.lighter};\n  cursor: pointer;\n\n  & svg {\n    color: currentColor;\n  }\n}\n`\n);\n\n// ==============================|| AUTOCOMPLETE - CUSTOMIZED ||============================== //\n\nexport default function CustomizedAutocomplete() {\n  const { getRootProps, getInputProps, getTagProps, getListboxProps, getOptionProps, groupedOptions, value, focused, setAnchorEl } =\n    useAutocomplete({\n      id: 'customized-hook-demo',\n      defaultValue: [data[1], data[3], data[8]],\n      multiple: true,\n      options: data,\n      getOptionLabel: (option) => option.label\n    });\n\n  const customAutocompleteCodeString = `// CustomizedAutocomplete.tsx\n<Root>\n  <div {...getRootProps()}>\n    <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\n      {value.map((option: FilmOptionType, index: number) => (\n        <StyledTag label={option.label} {...getTagProps({ index })} />\n      ))}\n      <input {...getInputProps()} />\n    </InputWrapper>\n  </div>\n  {groupedOptions.length > 0 ? (\n    <Listbox {...getListboxProps()}>\n      {(groupedOptions as typeof data).map((option, index) => (\n        <li {...getOptionProps({ option, index })}>\n          <span>{option.label}</span>\n          <TickSquare variant=\"Bold\" size={16} style={{ marginTop: 2 }} />\n        </li>\n      ))}\n    </Listbox>\n  ) : null}\n</Root>`;\n\n  return (\n    <MainCard title=\"Customized\" sx={{ overflow: 'visible' }} codeString={customAutocompleteCodeString}>\n      <Root>\n        <div {...getRootProps()}>\n          <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\n            {value.map((option, index) => (\n              <StyledTag label={option.label} key={index} {...getTagProps({ index })} />\n            ))}\n            <input {...getInputProps()} />\n          </InputWrapper>\n        </div>\n        {groupedOptions.length > 0 ? (\n          <Listbox {...getListboxProps()}>\n            {groupedOptions.map((option, index) => (\n              <li {...getOptionProps({ option, index })} key={index}>\n                <span>{option.label}</span>\n                <TickSquare variant=\"Bold\" size={16} style={{ marginTop: 2 }} />\n              </li>\n            ))}\n          </Listbox>\n        ) : null}\n      </Root>\n    </MainCard>\n  );\n}\n\nTag.propTypes = { label: PropTypes.string, onDelete: PropTypes.any, other: PropTypes.any };\n","size_bytes":4696},"src/sections/apps/kanban/Backlogs/UserStory.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport Menu from '@mui/material/Menu';\nimport Table from '@mui/material/Table';\nimport Stack from '@mui/material/Stack';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport Collapse from '@mui/material/Collapse';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport Typography from '@mui/material/Typography';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport { format } from 'date-fns';\nimport { Droppable, Draggable } from '@hello-pangea/dnd';\n\n// project-imports\nimport Items from './Items';\nimport AddItem from './AddItem';\nimport EditStory from './EditStory';\nimport AlertStoryDelete from './AlertStoryDelete';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ThemeMode } from 'config';\nimport { deleteStory, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { AddSquare, ArrowDown2, ArrowRight2, Hierarchy } from 'iconsax-react';\n\n// drag wrapper\nconst getDragWrapper = (isDragging, theme, open) => {\n  let bgcolor = 'transparent';\n  if (open) {\n    bgcolor = theme.palette.mode === ThemeMode.DARK ? theme.palette.background.default : theme.palette.secondary.lighter;\n  }\n\n  if (isDragging) {\n    bgcolor = theme.palette.mode === ThemeMode.DARK ? theme.palette.background.default : theme.palette.primary.lighter;\n  }\n\n  return { backgroundColor: bgcolor, userSelect: 'none' };\n};\n\n// drop wrapper\nconst getDropWrapper = () => {\n  return { background: 'transparent' };\n};\n\n// ==============================|| KANBAN BACKLOGS - USER STORY ||============================== //\n\nexport default function UserStory({ story, index }) {\n  const theme = useTheme();\n  const { backlogs } = useGetBacklogs();\n\n  const [open, setOpen] = useState(index === 0);\n\n  const storyColumn = backlogs?.columns.filter((column) => column.id === story.columnId)[0];\n  const storyProfile = backlogs?.profiles.filter((profile) => profile.id === story.assign)[0];\n\n  // drawer\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const handleDrawerOpen = () => {\n    setOpenDrawer((prevState) => !prevState);\n  };\n\n  const addItem = () => {\n    setOpenDrawer((prevState) => !prevState);\n  };\n\n  const [openStoryDrawer, setOpenStoryDrawer] = useState(false);\n  const handleStoryDrawerOpen = () => {\n    setOpenStoryDrawer((prevState) => !prevState);\n  };\n\n  const editStory = () => {\n    setOpenStoryDrawer((prevState) => !prevState);\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handleClick = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleModalClose = (status) => {\n    setOpenModal(false);\n    if (status) {\n      deleteStory(story.id);\n      openSnackbar({\n        open: true,\n        message: 'Task Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  return (\n    <>\n      <Draggable draggableId={story.id} index={index}>\n        {(provided, snapshot) => (\n          <>\n            <TableRow\n              hover\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n              sx={{\n                ...getDragWrapper(snapshot.isDragging, theme, open),\n                ...(!open && { '& .MuiTableCell-root': { border: 'none' } })\n              }}\n            >\n              <TableCell sx={{ pl: 3, minWidth: 120, width: 120, height: 46 }}>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Tooltip title=\"Add Task\">\n                    <IconButton aria-label=\"expand row\" onClick={addItem} size=\"small\" sx={{ fontSize: '1.15rem' }}>\n                      <AddSquare color={theme.palette.primary.main} />\n                    </IconButton>\n                  </Tooltip>\n                  <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)} color=\"secondary\">\n                    {open ? <ArrowDown2 /> : <ArrowRight2 />}\n                  </IconButton>\n                </Stack>\n              </TableCell>\n              <TableCell sx={{ width: 110, minWidth: 110 }}>\n                <Stack direction=\"row\" spacing={0.75} alignItems=\"center\">\n                  <Hierarchy size={16} style={{ color: theme.palette.primary.main, marginTop: -2 }} />\n                  <Typography variant=\"subtitle2\">{story.id}</Typography>\n                </Stack>\n              </TableCell>\n              <TableCell sx={{ maxWidth: 'calc(100vw - 850px)', minWidth: 140 }} component=\"th\" scope=\"row\">\n                <Link\n                  underline=\"hover\"\n                  color=\"default\"\n                  onClick={editStory}\n                  sx={{\n                    overflow: 'hidden',\n                    display: 'block',\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                    ':hover': { color: 'primary.main' },\n                    cursor: 'pointer'\n                  }}\n                >\n                  {story.title}\n                </Link>\n              </TableCell>\n              <TableCell sx={{ width: 60, minWidth: 60 }}>\n                <IconButton\n                  size=\"small\"\n                  aria-controls=\"menu-comment\"\n                  onClick={handleClick}\n                  aria-haspopup=\"true\"\n                  color=\"secondary\"\n                  sx={{ color: 'text.secondary' }}\n                >\n                  <MoreIcon />\n                </IconButton>\n                <Menu\n                  id=\"menu-comment\"\n                  anchorEl={anchorEl}\n                  keepMounted\n                  open={Boolean(anchorEl)}\n                  onClose={handleClose}\n                  variant=\"selectedMenu\"\n                  anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                  transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                >\n                  <MenuItem\n                    onClick={() => {\n                      handleClose();\n                      editStory();\n                    }}\n                  >\n                    Edit\n                  </MenuItem>\n                  <MenuItem\n                    onClick={() => {\n                      handleClose();\n                      setOpenModal(true);\n                    }}\n                  >\n                    Delete\n                  </MenuItem>\n                </Menu>\n                <AlertStoryDelete title={story.title} open={openModal} handleClose={handleModalClose} />\n              </TableCell>\n              <TableCell sx={{ width: 90, minWidth: 90 }}>{storyColumn ? storyColumn.title : ''}</TableCell>\n              <TableCell sx={{ width: 140, minWidth: 140 }}>{storyProfile ? storyProfile.name : ''}</TableCell>\n              <TableCell sx={{ width: 85, minWidth: 85, textTransform: 'capitalize' }}>{story.priority}</TableCell>\n              <TableCell sx={{ width: 120, minWidth: 120 }}>{story.dueDate ? format(new Date(story.dueDate), 'd MMM yyyy') : ''}</TableCell>\n            </TableRow>\n\n            <Droppable droppableId={story.id} type=\"item\">\n              {(providedDrop) => (\n                <TableRow ref={providedDrop.innerRef} {...providedDrop.droppableProps} sx={getDropWrapper()}>\n                  <TableCell sx={{ padding: 0 }} colSpan={8}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                      {open && (\n                        <Box sx={{ margin: 0 }}>\n                          <TableContainer>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                              <TableBody>\n                                {story.itemIds?.map((itemId, i) => (\n                                  <Items key={itemId} itemId={itemId} index={i} />\n                                ))}\n                                {providedDrop.placeholder}\n                              </TableBody>\n                            </Table>\n                          </TableContainer>\n                        </Box>\n                      )}\n                    </Collapse>\n                  </TableCell>\n                </TableRow>\n              )}\n            </Droppable>\n          </>\n        )}\n      </Draggable>\n      <EditStory story={story} open={openStoryDrawer} handleDrawerOpen={handleStoryDrawerOpen} />\n      <AddItem open={openDrawer} handleDrawerOpen={handleDrawerOpen} storyId={story.id} />\n    </>\n  );\n}\n\nUserStory.propTypes = { story: PropTypes.any, index: PropTypes.number };\n","size_bytes":9060},"src/components/cards/statistics/ReportCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| STATISTICS - REPORT CARD ||============================== //\n\nexport default function ReportCard({ primary, secondary, iconPrimary, color }) {\n  const IconPrimary = iconPrimary;\n  const primaryIcon = iconPrimary ? <IconPrimary size={44} color={color} /> : null;\n\n  return (\n    <MainCard>\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Stack spacing={0.25}>\n            <Typography variant=\"h3\">{primary}</Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              {secondary}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item>{primaryIcon}</Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nReportCard.propTypes = { primary: PropTypes.any, secondary: PropTypes.any, iconPrimary: PropTypes.any, color: PropTypes.any };\n","size_bytes":1115},"src/themes/overrides/Alert.js":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// project-imports\nimport getColors from 'utils/getColors';\n\n// ==============================|| ALERT - COLORS ||============================== //\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { lighter, light, main } = colors;\n\n  return {\n    borderColor: alpha(light, 0.5),\n    backgroundColor: lighter,\n    '& .MuiAlert-icon': {\n      color: main\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - ALERT ||============================== //\n\nexport default function Alert(theme) {\n  const primaryDashed = getColorStyle({ color: 'primary', theme });\n\n  return {\n    MuiAlert: {\n      styleOverrides: {\n        root: {\n          color: theme.palette.text.primary,\n          fontSize: '0.875rem'\n        },\n        icon: {\n          '& svg': {\n            width: 20,\n            height: 20\n          }\n        },\n        message: {\n          padding: 0,\n          marginTop: 3\n        },\n        filled: {\n          color: theme.palette.common.white\n        },\n        border: {\n          padding: '10px 16px',\n          border: '1px solid',\n          ...primaryDashed,\n          '&.MuiAlert-borderPrimary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiAlert-borderSecondary': getColorStyle({ color: 'secondary', theme }),\n          '&.MuiAlert-borderError': getColorStyle({ color: 'error', theme }),\n          '&.MuiAlert-borderSuccess': getColorStyle({ color: 'success', theme }),\n          '&.MuiAlert-borderInfo': getColorStyle({ color: 'info', theme }),\n          '&.MuiAlert-borderWarning': getColorStyle({ color: 'warning', theme })\n        },\n        action: {\n          '& .MuiButton-root': {\n            padding: 2,\n            height: 'auto',\n            fontSize: '0.75rem',\n            marginTop: -2\n          },\n          '& .MuiIconButton-root': {\n            width: 'auto',\n            height: 'auto',\n            padding: 2,\n            marginRight: 6,\n            '& .MuiSvgIcon-root': {\n              fontSize: '1rem'\n            }\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":2130},"src/sections/components-overview/lists/TransactionList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { Gift, Message, Setting3 } from 'iconsax-react';\n\n// action style\nconst actionSX = {\n  mt: 0.75,\n  ml: 1,\n  top: 'auto',\n  right: 'auto',\n  alignSelf: 'flex-start',\n  transform: 'none'\n};\n\n// ==============================|| LIST - TRANSACTION ||============================== //\n\nexport default function TransactionList() {\n  const transactionListCodeString = `<List\n  component=\"nav\"\n  sx={{\n    py: 0,\n    '& .MuiListItemButton-root': {\n      '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\n    }\n  }}\n>\n  <ListItemButton divider>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\" color=\"success\">\n        <Gift />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #002434</Typography>} secondary=\"Today, 2:00 AM\" />\n    <ListItemSecondaryAction>\n      <Stack alignItems=\"flex-end\">\n        <Typography variant=\"subtitle1\" noWrap>\n          + $1,430\n        </Typography>\n        <Typography variant=\"h6\" color=\"secondary\" noWrap>\n          78%\n        </Typography>\n      </Stack>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n  <ListItemButton divider>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\">\n        <Message />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #984947</Typography>} secondary=\"5 August, 1:45 PM\" />\n    <ListItemSecondaryAction>\n      <Stack alignItems=\"flex-end\">\n        <Typography variant=\"subtitle1\" noWrap>\n          + $302\n        </Typography>\n        <Typography variant=\"h6\" color=\"secondary\" noWrap>\n          8%\n        </Typography>\n      </Stack>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n  <ListItemButton>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\" color=\"error\">\n        <Setting3 />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #988784</Typography>} secondary=\"7 hours ago\" />\n    <ListItemSecondaryAction>\n      <Stack alignItems=\"flex-end\">\n        <Typography variant=\"subtitle1\" noWrap>\n          + $682\n        </Typography>\n        <Typography variant=\"h6\" color=\"secondary\" noWrap>\n          16%\n        </Typography>\n      </Stack>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n</List>`;\n\n  return (\n    <MainCard sx={{ mt: 2 }} content={false} codeString={transactionListCodeString}>\n      <List\n        component=\"nav\"\n        sx={{\n          py: 0,\n          '& .MuiListItemButton-root': { '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' } }\n        }}\n      >\n        <ListItemButton divider>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"filled\" color=\"success\">\n              <Gift />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #002434</Typography>} secondary=\"Today, 2:00 AM\" />\n          <ListItemSecondaryAction>\n            <Stack alignItems=\"flex-end\">\n              <Typography variant=\"subtitle1\" noWrap>\n                + $1,430\n              </Typography>\n              <Typography variant=\"h6\" color=\"secondary\" noWrap>\n                78%\n              </Typography>\n            </Stack>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n        <ListItemButton divider>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"filled\">\n              <Message />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #984947</Typography>} secondary=\"5 August, 1:45 PM\" />\n          <ListItemSecondaryAction>\n            <Stack alignItems=\"flex-end\">\n              <Typography variant=\"subtitle1\" noWrap>\n                + $302\n              </Typography>\n              <Typography variant=\"h6\" color=\"secondary\" noWrap>\n                8%\n              </Typography>\n            </Stack>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n        <ListItemButton>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"filled\" color=\"error\">\n              <Setting3 />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={<Typography variant=\"subtitle1\">Payment from #988784</Typography>} secondary=\"7 hours ago\" />\n          <ListItemSecondaryAction>\n            <Stack alignItems=\"flex-end\">\n              <Typography variant=\"subtitle1\" noWrap>\n                + $682\n              </Typography>\n              <Typography variant=\"h6\" color=\"secondary\" noWrap>\n                16%\n              </Typography>\n            </Stack>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":5295},"src/sections/widget/data/IncomingRequests.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Link from '@mui/material/Link';\nimport Divider from '@mui/material/Divider';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport Dot from 'components/@extended/Dot';\n\n// =========================|| DATA WIDGET - INCOMING REQUESTS ||========================= //\n\nexport default function IncomingRequests() {\n  return (\n    <MainCard\n      title=\"Incoming Requests\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <SimpleBar sx={{ height: 334 }}>\n        <List\n          disablePadding\n          component=\"nav\"\n          aria-label=\"main mailbox folders\"\n          sx={{ '& .MuiListItemButton-root': { borderRadius: 0, my: 0, py: 1.5 }, '& .MuiListItemText-root': { color: 'text.primary' } }}\n        >\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"success\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"Incoming requests\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"error\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"You have 2 pending requests..\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"warning\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"You have 3 pending tasks\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"New order received\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"success\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"Incoming requests\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"You have 2 pending requests..\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"warning\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"You have 3 pending tasks\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <Dot color=\"error\" size={10} />\n            </ListItemIcon>\n            <ListItemText primary=\"New order received\" />\n          </ListItemButton>\n        </List>\n      </SimpleBar>\n    </MainCard>\n  );\n}\n","size_bytes":3109},"src/themes/overrides/Body.js":{"content":"// ==============================|| OVERRIDES - BODY ||============================== //\n\nexport default function Body() {\n  return {\n    MuiCssBaseline: {\n      styleOverrides: {\n        body: {\n          fontFeatureSettings: '\"salt\"'\n        }\n      }\n    }\n  };\n}\n","size_bytes":267},"src/sections/apps/e-commerce/product-list/ProductView.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Rating from '@mui/material/Rating';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| PRODUCT - VIEW ||============================== //\n\nexport default function ProductView({ data }) {\n  const theme = useTheme();\n\n  return (\n    <Grid container spacing={2.5} sx={{ pl: { xs: 0, sm: 5, md: 6, lg: 10, xl: 12 } }}>\n      <Grid item xs={6} sm={5} md={4} lg={3}>\n        <Box sx={{ position: 'relative' }}>\n          <img\n            src={data.image && getImageUrl(`${data.image}`, ImagePath.ECOMMERCE)}\n            alt=\"product\"\n            style={{ background: theme.palette.secondary[200], width: '100%' }}\n          />\n          <Chip\n            label={data.isStock ? 'In Stock' : 'Out of Stock'}\n            color={data.isStock ? 'success' : 'error'}\n            size=\"small\"\n            sx={{ position: 'absolute', right: 8, top: 8 }}\n          />\n        </Box>\n      </Grid>\n      <Grid item xs={12} sm={7} md={8} lg={9}>\n        <Stack spacing={1} sx={{ px: 2 }}>\n          <Typography variant=\"h5\">{data?.name}</Typography>\n          <Typography color=\"text.secondary\">{data?.about}</Typography>\n          <Rating name=\"read-only\" value={data.rating} readOnly />\n          <Box sx={{ width: '80%', pt: 2 }}>\n            <Grid container spacing={1}>\n              <Grid item xs={4} md={3}>\n                <Typography color=\"text.secondary\">Categories</Typography>\n              </Grid>\n              <Grid item xs={8} md={9}>\n                <Stack direction=\"row\" spacing={0.5}>\n                  {data?.categories?.map((item, index) => (\n                    <Typography key={index} variant=\"h6\" sx={{ textTransform: 'capitalize' }}>\n                      {item}\n                      {data?.categories.length > index + 1 ? ',' : ''}\n                    </Typography>\n                  ))}\n                </Stack>\n              </Grid>\n              <Grid item xs={4} md={3}>\n                <Typography color=\"text.secondary\">Qty</Typography>\n              </Grid>\n              <Grid item xs={8} md={9}>\n                <Typography variant=\"h6\">{data?.quantity}</Typography>\n              </Grid>\n              <Grid item xs={4} md={3}>\n                <Typography color=\"text.secondary\">Price</Typography>\n              </Grid>\n              <Grid item xs={8} md={9}>\n                <Typography variant=\"h5\">{data?.salePrice ? `$${data?.salePrice}` : `$${data?.offerPrice}`}</Typography>\n              </Grid>\n            </Grid>\n          </Box>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n\nProductView.propTypes = { data: PropTypes.any };\n","size_bytes":2942},"src/config.js":{"content":"// ==============================|| THEME CONSTANT ||============================== //\n\nexport const twitterColor = '#1DA1F2';\nexport const facebookColor = '#3b5998';\nexport const linkedInColor = '#0e76a8';\n\nexport const APP_DEFAULT_PATH = '/tables/blogs';\nexport const HORIZONTAL_MAX_ITEM = 7;\nexport const DRAWER_WIDTH = 280;\nexport const MINI_DRAWER_WIDTH = 90;\nexport const HEADER_HEIGHT = 74;\n\nexport let SimpleLayoutType;\n\n(function (SimpleLayoutType) {\n  SimpleLayoutType['SIMPLE'] = 'simple';\n  SimpleLayoutType['LANDING'] = 'landing';\n})(SimpleLayoutType || (SimpleLayoutType = {}));\n\nexport let ThemeMode;\n\n(function (ThemeMode) {\n  ThemeMode['LIGHT'] = 'light';\n  ThemeMode['DARK'] = 'dark';\n  ThemeMode['AUTO'] = 'auto';\n})(ThemeMode || (ThemeMode = {}));\n\nexport let MenuOrientation;\n\n(function (MenuOrientation) {\n  MenuOrientation['VERTICAL'] = 'vertical';\n  MenuOrientation['HORIZONTAL'] = 'horizontal';\n})(MenuOrientation || (MenuOrientation = {}));\n\nexport let ThemeDirection;\n\n(function (ThemeDirection) {\n  ThemeDirection['LTR'] = 'ltr';\n  ThemeDirection['RTL'] = 'rtl';\n})(ThemeDirection || (ThemeDirection = {}));\n\nexport let NavActionType;\n\n(function (NavActionType) {\n  NavActionType['FUNCTION'] = 'function';\n  NavActionType['LINK'] = 'link';\n})(NavActionType || (NavActionType = {}));\n\nexport let Gender;\n\n(function (Gender) {\n  Gender['MALE'] = 'Male';\n  Gender['FEMALE'] = 'Female';\n})(Gender || (Gender = {}));\n\nexport let DropzopType;\n\n(function (DropzopType) {\n  DropzopType['DEFAULT'] = 'default';\n  DropzopType['STANDARD'] = 'standard';\n})(DropzopType || (DropzopType = {}));\n\n// ==============================|| THEME CONFIG ||============================== //\nconst config = {\n  fontFamily: `Inter var`,\n  i18n: 'en',\n  menuOrientation: MenuOrientation.VERTICAL,\n  menuCaption: true,\n  miniDrawer: false,\n  container: false,\n  mode: ThemeMode.LIGHT,\n  presetColor: 'default',\n  themeDirection: ThemeDirection.LTR,\n  themeContrast: false\n};\n\nexport default config;\n","size_bytes":1999},"src/pages/components-overview/rating.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Rating from '@mui/material/Rating';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { EmojiHappy, Heart } from 'iconsax-react';\n\nconst labels = {\n  0.5: 'Useless',\n  1: 'Useless+',\n  1.5: 'Poor',\n  2: 'Poor+',\n  2.5: 'Ok',\n  3: 'Ok+',\n  3.5: 'Good',\n  4: 'Good+',\n  4.5: 'Excellent',\n  5: 'Excellent+'\n};\n\n// ==============================|| COMPONENTS - RATING ||============================== //\n\nexport default function ComponentRating() {\n  const [value, setValue] = useState(2);\n  const [hover, setHover] = useState(-1);\n\n  const basicRatingCodeString = `<Rating\n  name=\"simple-controlled\"\n  value={value}\n  onChange={(event, newValue) => {\n    setValue(newValue);\n  }}\n/>\n<Rating name=\"read-only\" value={3} readOnly />\n<Rating name=\"disabled\" value={4} disabled />\n<Rating name=\"no-value\" value={null} />`;\n\n  const precisionRatingCodeString = `<Rating name=\"half-rating\" defaultValue={3.6} precision={0.1} />\n<Rating name=\"half-rating-read\" defaultValue={2.5} precision={0.5} readOnly />`;\n\n  const hoverRatingCodeString = `<Box\n  sx={{\n    width: 200,\n    display: 'flex',\n    alignItems: 'center'\n  }}\n>\n  <Rating\n    name=\"hover-feedback\"\n    value={value}\n    precision={0.5}\n    onChange={(event, newValue) => {\n      setValue(newValue);\n    }}\n    onChangeActive={(event, newHover) => {\n      setHover(newHover);\n    }}\n  />\n  {value !== null && <Box sx={{ ml: 2 }}>{labels[hover !== -1 ? hover : value]}</Box>}\n</Box>`;\n\n  const sizeRatingCodeString = `<Rating name=\"size-small\" defaultValue={2} size=\"small\" />\n  <Rating name=\"size-medium\" defaultValue={2} />\n  <Rating name=\"size-large\" defaultValue={2} size=\"large\" />`;\n\n  const customizationRatingCodeString = `<Rating name=\"customized-10\" defaultValue={2} max={10} />\n<Rating\n  name=\"customized-color\"\n  defaultValue={2}\n  precision={0.5}\n  icon={<Heart variant=\"Bold\" style={{ fontSize: '1.3rem', margin: 2 }} />}\n  emptyIcon={<Heart style={{ fontSize: '1.3rem', margin: 2 }} />}\n  sx={{ color: 'error.main' }}\n/>\n<Rating\n  name=\"customized-color\"\n  defaultValue={3}\n  icon={<EmojiHappy style={{ fontSize: '1.3rem', margin: 2 }} />}\n  emptyIcon={<EmojiHappy style={{ fontSize: '1.3rem', margin: 2 }} />}\n  sx={{ color: 'warning.main' }}\n/>`;\n\n  const halfRatingCodeString = `<Rating name=\"half-rating-read\" defaultValue={2.5} precision={0.5} />\n<Rating\n  name=\"customized-color\"\n  defaultValue={3.5}\n  precision={0.5}\n  icon={<Star1 style={{ fontSize: '1.3rem', margin: 2 }} />}\n  emptyIcon={<Star1 style={{ fontSize: '1.3rem', margin: 2 }} />}\n  sx={{ color: 'warning.main' }}\n/>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Rating\"\n        caption=\"Ratings provide insight regarding others' opinions and experiences, and can allow the user to submit a rating of their own.\"\n        directory=\"src/pages/components-overview/rating\"\n        link=\"https://mui.com/material-ui/react-rating/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicRatingCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item xs={5} sm={3}>\n                    <Typography variant=\"h6\">Controlled</Typography>\n                  </Grid>\n                  <Grid item xs={7} sm={9}>\n                    <Rating\n                      name=\"simple-controlled\"\n                      value={value}\n                      onChange={(event, newValue) => {\n                        setValue(newValue);\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={5} sm={3}>\n                    <Typography variant=\"h6\">Read Only</Typography>\n                  </Grid>\n                  <Grid item xs={7} sm={9}>\n                    <Rating name=\"read-only\" value={3} readOnly />\n                  </Grid>\n                  <Grid item xs={5} sm={3}>\n                    <Typography variant=\"h6\">Disabled</Typography>\n                  </Grid>\n                  <Grid item xs={7} sm={9}>\n                    <Rating name=\"disabled\" value={4} disabled />\n                  </Grid>\n                  <Grid item xs={5} sm={3}>\n                    <Typography variant=\"h6\">No rating</Typography>\n                  </Grid>\n                  <Grid item xs={7} sm={9}>\n                    <Rating name=\"no-value\" value={null} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Precision\" codeString={precisionRatingCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Rating name=\"half-rating\" defaultValue={3.6} precision={0.1} />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Rating name=\"half-rating-read\" defaultValue={2.5} precision={0.5} readOnly />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Hover Feedback\" codeString={hoverRatingCodeString}>\n                <Box\n                  sx={{\n                    width: 200,\n                    display: 'flex',\n                    alignItems: 'center'\n                  }}\n                >\n                  <Rating\n                    name=\"hover-feedback\"\n                    value={value}\n                    precision={0.5}\n                    onChange={(event, newValue) => {\n                      setValue(newValue);\n                    }}\n                    onChangeActive={(event, newHover) => {\n                      setHover(newHover);\n                    }}\n                  />\n                  {value !== null && <Box sx={{ ml: 2 }}>{labels[hover !== -1 ? hover : value]}</Box>}\n                </Box>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Sizes\" codeString={sizeRatingCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Rating name=\"size-small\" defaultValue={2} size=\"small\" />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Rating name=\"size-medium\" defaultValue={2} />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Rating name=\"size-large\" defaultValue={2} size=\"large\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Customization\" codeString={customizationRatingCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Rating name=\"customized-10\" defaultValue={2} max={10} />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Rating\n                      name=\"customized-color-heart\"\n                      defaultValue={2}\n                      icon={<Heart variant=\"Bold\" style={{ fontSize: '1.3rem', margin: 2 }} />}\n                      emptyIcon={<Heart style={{ fontSize: '1.3rem', margin: 2 }} />}\n                      sx={{ color: 'error.main' }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Rating\n                      name=\"customized-color-smily\"\n                      defaultValue={3}\n                      icon={<EmojiHappy style={{ fontSize: '1.3rem', margin: 2 }} />}\n                      emptyIcon={<EmojiHappy style={{ fontSize: '1.3rem', margin: 2 }} />}\n                      sx={{ color: 'warning.main' }}\n                    />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Half\" codeString={halfRatingCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Rating name=\"half-rating-read-custom\" defaultValue={2.5} precision={0.5} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":8634},"src/sections/components-overview/notistack/SnackBarAction.jsx":{"content":"// material-ul\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\n// third-party\nimport { enqueueSnackbar, useSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - ACTION BUTTONS ||============================== //\n\nexport default function SnackBarAction() {\n  const { closeSnackbar } = useSnackbar();\n  const actionTask = (snackbarId) => (\n    <Stack direction=\"row\" spacing={0.5}>\n      <Button\n        size=\"small\"\n        color=\"error\"\n        variant=\"contained\"\n        onClick={() => {\n          alert(`I belong to snackbar with id ${snackbarId}`);\n        }}\n      >\n        Undo\n      </Button>\n      <Button size=\"small\" color=\"secondary\" variant=\"contained\" onClick={() => closeSnackbar(snackbarId)}>\n        Dismiss\n      </Button>\n    </Stack>\n  );\n\n  const NotistackActionCodeString = `const actionTask = (snackbarId: SnackbarKey) => (\n  <>\n    <Button\n      variant=\"text\"\n      onClick={() => {\n        alert(\"I belong to snackbar with id {snackbarId}\");\n      }}\n    >\n      Undo\n    </Button>\n    <Button variant=\"text\" onClick={() => closeSnackbar(snackbarId)}>\n      Dismiss\n    </Button>\n  </>\n);\n<Button variant=\"outlined\" onClick={() => enqueueSnackbar('Your notification here', { action: (key) => actionTask(key) })}>\n Show Snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"With Action\" codeString={NotistackActionCodeString}>\n      <Button\n        variant=\"contained\"\n        fullWidth\n        sx={{ marginBlockStart: 2 }}\n        onClick={() => enqueueSnackbar('Your notification here', { action: (key) => actionTask(key) })}\n      >\n        Show Snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":1747},"src/layout/Component/Drawer/DrawerContent.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport Navigation from './Navigation';\n\n// ==============================|| DRWAER - CONTENT ||============================== //\n\nexport default function DrawerContent({ searchValue }) {\n  return (\n    <SimpleBar\n      sx={{\n        height: { xs: 'calc(100vh - 70px)', md: 'calc(100% - 70px)' },\n        '& .simplebar-content': {\n          display: 'flex',\n          flexDirection: 'column'\n        }\n      }}\n    >\n      <Box sx={{ p: 3, pt: 1.5 }}>\n        <Navigation searchValue={searchValue} />\n      </Box>\n    </SimpleBar>\n  );\n}\n\nDrawerContent.propTypes = { searchValue: PropTypes.string };\n","size_bytes":765},"src/components/third-party/Highlighter.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport CardActions from '@mui/material/CardActions';\nimport Collapse from '@mui/material/Collapse';\nimport Divider from '@mui/material/Divider';\nimport Tooltip from '@mui/material/Tooltip';\n\n// third-party\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n// project-imports\nimport SyntaxHighlight from 'utils/SyntaxHighlight';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Code, Copy } from 'iconsax-react';\n\n// ==============================|| CLIPBOARD & HIGHLIGHTER   ||============================== //\n\nexport default function Highlighter({ codeString, codeHighlight }) {\n  const [highlight, setHighlight] = useState(codeHighlight);\n\n  return (\n    <>\n      <CardActions sx={{ justifyContent: 'flex-end' }}>\n        <Box sx={{ display: 'flex' }}>\n          <CopyToClipboard text={codeString}>\n            <Tooltip title=\"Copy the source\" placement=\"top-end\">\n              <IconButton color=\"secondary\" size=\"small\">\n                <Copy />\n              </IconButton>\n            </Tooltip>\n          </CopyToClipboard>\n          <Divider orientation=\"vertical\" variant=\"middle\" flexItem sx={{ mx: 1 }} />\n          <Tooltip title=\"Show the source\" placement=\"top-end\">\n            <IconButton\n              sx={{ fontSize: '0.875rem' }}\n              size=\"small\"\n              color={highlight ? 'primary' : 'secondary'}\n              onClick={() => setHighlight(!highlight)}\n            >\n              <Code />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </CardActions>\n      <Collapse in={highlight}>{highlight && <SyntaxHighlight>{codeString}</SyntaxHighlight>}</Collapse>\n    </>\n  );\n}\n\nHighlighter.propTypes = { codeString: PropTypes.string, codeHighlight: PropTypes.bool };\n","size_bytes":1881},"src/assets/images/price/StandardPlus.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// ==============================|| PRICE - STANDARD LOGO ||============================== //\n\nconst StandardPlus = () => {\n  const theme = useTheme();\n\n  return (\n    <svg width=\"36\" height=\"35\" viewBox=\"0 0 36 35\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M2.14067 15.527L4.93141 12.7362L4.93432 12.7333H10.1846L8.09556 14.8224L7.55619 15.3617L5.41692 17.501L5.68187 17.7667L17.6666 29.7507L29.9163 17.501L27.7763 15.3617L27.6257 15.2103L25.1486 12.7333H30.3989L30.4018 12.7362L32.5892 14.9235L35.1666 17.501L17.6666 35.001L0.166626 17.501L2.14067 15.527ZM17.6666 0.00100708L27.7785 10.1129H22.5282L17.6666 5.2513L12.805 10.1129H7.55474L17.6666 0.00100708Z\"\n        fill={theme.palette.primary.main}\n      />\n    </svg>\n  );\n};\n\nexport default StandardPlus;\n","size_bytes":854},"src/components/cards/statistics/RoundIconCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// ============================|| STATISTICS - ROUND ICON CARD ||============================ //\n\nexport default function RoundIconCard({ primary, secondary, content, iconPrimary, color, bgcolor }) {\n  const IconPrimary = iconPrimary;\n  const primaryIcon = iconPrimary ? <IconPrimary /> : null;\n\n  return (\n    <MainCard>\n      <Grid container alignItems=\"center\" spacing={0} justifyContent=\"space-between\">\n        <Grid item>\n          <Stack spacing={1}>\n            <Typography variant=\"h5\" color=\"inherit\">\n              {primary}\n            </Typography>\n            <Typography variant=\"h4\">{secondary}</Typography>\n            <Typography variant=\"subtitle2\" color=\"inherit\">\n              {content}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item>\n          <Avatar variant=\"rounded\" sx={{ bgcolor, color }} size=\"lg\">\n            {primaryIcon}\n          </Avatar>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nRoundIconCard.propTypes = {\n  primary: PropTypes.string,\n  secondary: PropTypes.string,\n  content: PropTypes.string,\n  iconPrimary: PropTypes.any,\n  color: PropTypes.string,\n  bgcolor: PropTypes.string\n};\n","size_bytes":1463},"src/sections/components-overview/date-time-picker/SubComponentsPickers.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\nimport { MonthCalendar } from '@mui/x-date-pickers/MonthCalendar';\nimport { YearCalendar } from '@mui/x-date-pickers/YearCalendar';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst minDate = new Date('2020-01-01T00:00:00.000');\nconst maxDate = new Date('2034-01-01T00:00:00.000');\n\n// ==============================|| DATE PICKER - SUB COMPONENT ||============================== //\n\nexport default function SubComponentsPickers() {\n  const [date, setDate] = useState(new Date());\n\n  const subDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <Stack spacing={3} justifyContent=\"center\" alignItems=\"center\">\n    <Box sx={{ maxWidth: 320 }}>\n      <YearCalendar value={date} minDate={minDate} maxDate={maxDate} onChange={(newDate: Date) => setDate(newDate)} />\n    </Box>\n    <Box sx={{ maxWidth: 320 }}>\n      <MonthPicker date={date} minDate={minDate} maxDate={maxDate} onChange={(newDate) => setDate(newDate)} sx={{ m: 'auto' }} />\n    </Box>\n    <Box sx={{ maxWidth: 320 }}>\n      <CalendarPicker date={date} onChange={(newDate) => setDate(newDate)} />\n    </Box>\n  </Stack>\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Sub Component\" codeString={subDatepickerCodeString}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <Stack spacing={3} justifyContent=\"center\" alignItems=\"center\">\n          <Box sx={{ maxWidth: 320 }}>\n            <YearCalendar value={date} minDate={minDate} maxDate={maxDate} onChange={(newDate) => setDate(newDate)} />\n          </Box>\n          <Box sx={{ maxWidth: 320 }}>\n            <MonthCalendar value={date} minDate={minDate} maxDate={maxDate} onChange={(newDate) => setDate(newDate)} sx={{ m: 'auto' }} />\n          </Box>\n          <Box sx={{ maxWidth: 320 }}>\n            <DateCalendar value={date} onChange={(newDate) => setDate(newDate)} />\n          </Box>\n        </Stack>\n      </LocalizationProvider>\n    </MainCard>\n  );\n}\n","size_bytes":2290},"src/components/cards/statistics/MessageCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport Button from '@mui/material/Button';\n\n// project-imports\nimport Dot from 'components/@extended/Dot';\nimport MainCard from 'components/MainCard';\n\n// ==============================|| HEADER - MESSAGE CARD ||============================== //\n\nexport default function MessageCard({ status, time, title, message, src, actions }) {\n  return (\n    <MainCard>\n      <Grid container spacing={1.5}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <Chip label={status.label} color={status.color} size=\"small\" variant=\"light\" />\n            <Typography variant=\"caption\" color=\"secondary\">\n              {time}\n            </Typography>\n            <Dot size={5} color=\"warning\" />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle1\">{title}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>{message}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <CardMedia component=\"img\" src={src} alt={title} />\n        </Grid>\n        {actions && actions?.length > 0 && (\n          <Grid item xs={12} sx={{ mt: 1 }}>\n            <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1.5, sm: 2.5 }}>\n              {actions.map((item, index) => (\n                <Button {...item.button} key={index}>\n                  {item.label}\n                </Button>\n              ))}\n            </Stack>\n          </Grid>\n        )}\n      </Grid>\n    </MainCard>\n  );\n}\n\nMessageCard.propTypes = {\n  status: PropTypes.any,\n  time: PropTypes.string,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  src: PropTypes.string,\n  actions: PropTypes.array\n};\n","size_bytes":1970},"src/sections/components-overview/dialogs/TransitionsDialog.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// project import\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// ==============================|| DIALOG - TRANSITIONS ||============================== //\n\nexport default function AlertDialogSlide() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Slide in dialog\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={PopupTransition}\n        keepMounted\n        onClose={handleClose}\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle>Use Google&apos;ss location service?</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"error\" onClick={handleClose}>\n              Disagree\n            </Button>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Agree\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":1817},"src/sections/apps/customer/export-pdf/ListCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport { Page, View, Document, StyleSheet, Image, Text, Link } from '@react-pdf/renderer';\n\n//project-imports\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\nconst textPrimary = '#262626';\nconst textSecondary = '#8c8c8c';\nconst border = '#f0f0f0';\n\nconst styles = StyleSheet.create({\n  page: {\n    padding: 30\n  },\n  container: {\n    flexDirection: 'column',\n    '@media max-width: 400': {\n      flexDirection: 'column'\n    }\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16\n  },\n  image: {\n    width: 40,\n    height: 40,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  CardInfo: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  title: {\n    fontSize: 14,\n    lineHeight: 1.57,\n    color: textPrimary\n  },\n  role: {\n    fontSize: 10,\n    lineHeight: 1.66,\n    color: textSecondary\n  },\n  hr: {\n    borderBottom: `1px solid ${border}`,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  card: {\n    border: `1px solid ${border}`,\n    marginBottom: '15px'\n  },\n  cardTitle: {\n    fontSize: '12px',\n    borderBottom: `1px solid ${border}`,\n    padding: 15\n  },\n  cardContent: {\n    padding: 15\n  },\n  about: {\n    padding: 15,\n    fontSize: '11px',\n    color: textPrimary\n  },\n  IconContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  IconRow: {\n    width: '48%',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    gap: 5\n  },\n  icon: {\n    width: 12,\n    height: 10\n  },\n  iconTitle: {\n    fontSize: 10,\n    color: textPrimary\n  },\n  mainTitle: {\n    fontSize: '11px',\n    color: textSecondary\n  },\n  chip: {\n    border: `1px solid ${textSecondary}`,\n    alignItems: 'center',\n    borderRadius: '4px',\n    marginRight: 4,\n    marginBottom: 8\n  },\n  chipTitle: {\n    color: textSecondary,\n    fontSize: '10px',\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingBottom: 4,\n    paddingTop: 4\n  },\n  leftColumn: {\n    paddingTop: '10px',\n    width: '75%'\n  },\n  rightColumn: {\n    paddingTop: '10px',\n    width: '25%'\n  },\n  infoCard: {\n    padding: 10\n  },\n  userDetails: {\n    rowGap: 5,\n    marginBottom: 15\n  }\n});\n\n// ==============================|| CUSTOMER - PREVIEW ||============================== //\n\nexport default function ListCard({ customer }) {\n  const theme = useTheme();\n\n  return (\n    <Document title={`${customer?.fatherName}`}>\n      <Page size=\"A4\" style={styles.page}>\n        <View style={styles.container}>\n          <View style={styles.row}>\n            <Image style={styles.image} src={getImageUrl(`avatar-${!customer.avatar ? 1 : customer.avatar}.png`, ImagePath.USERS)} />\n            <View style={styles.CardInfo}>\n              <Text style={styles.title}>{customer.fatherName}</Text>\n              <Text style={styles.role}>{customer.role}</Text>\n            </View>\n          </View>\n          <View style={styles.hr} />\n          <View style={[styles.row, { alignItems: 'flex-start' }]}>\n            <View style={styles.leftColumn}>\n              <View style={styles.card}>\n                <Text style={styles.cardTitle}>About me</Text>\n                <Text style={[styles.about, styles.cardContent]}>Hello, {customer.about}</Text>\n              </View>\n              <View style={styles.card}>\n                <Text style={styles.cardTitle}>Education</Text>\n                <View style={styles.cardContent}>\n                  <View style={styles.IconContainer}>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Master Degree (Year)</Text>\n                      <Text style={styles.iconTitle}>2014-2017</Text>\n                    </View>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Institute</Text>\n                      <Text style={styles.iconTitle}>-</Text>\n                    </View>\n                  </View>\n                  <View style={styles.hr} />\n                  <View style={styles.IconContainer}>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Bachelor (Year)</Text>\n                      <Text style={styles.iconTitle}>2011-2013</Text>\n                    </View>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Institute</Text>\n                      <Text style={styles.iconTitle}>Imperial College London</Text>\n                    </View>\n                  </View>\n                  <View style={styles.hr} />\n                  <View style={styles.IconContainer}>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>School (Year)</Text>\n                      <Text style={styles.iconTitle}>2009-2011</Text>\n                    </View>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Institute</Text>\n                      <Text style={styles.iconTitle}>School of London, England</Text>\n                    </View>\n                  </View>\n                </View>\n              </View>\n              <View style={styles.card}>\n                <Text style={styles.cardTitle}>Employment</Text>\n                <View style={styles.cardContent}>\n                  <View style={styles.IconContainer}>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Senior UI/UX designer (Year)</Text>\n                      <Text style={styles.iconTitle}>2019-Current</Text>\n                    </View>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Job Responsibility</Text>\n                      <Text style={styles.iconTitle}>\n                        Perform task related to project manager with the 100+ team under my observation. Team management is key role in this\n                        company.\n                      </Text>\n                    </View>\n                  </View>\n                  <View style={styles.hr} />\n                  <View style={styles.IconContainer}>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Trainee cum Project Manager (Year)</Text>\n                      <Text style={styles.iconTitle}>2017-2019</Text>\n                    </View>\n                    <View style={[styles.row, styles.IconRow]}>\n                      <Text style={styles.mainTitle}>Job Responsibility</Text>\n                      <Text style={styles.iconTitle}>Team management is key role in this company.</Text>\n                    </View>\n                  </View>\n                </View>\n              </View>\n              <View style={styles.card}>\n                <Text style={styles.cardTitle}>Skill</Text>\n                <View style={styles.cardContent}>\n                  <View style={[styles.row, { gap: 1, flexWrap: 'wrap' }]}>\n                    {customer.skills.map((skill, index) => (\n                      <View style={styles.chip} key={index}>\n                        <Text style={styles.chipTitle}>{skill}</Text>\n                      </View>\n                    ))}\n                  </View>\n                </View>\n              </View>\n            </View>\n            <View style={styles.rightColumn}>\n              <View style={[styles.card, styles.infoCard]}>\n                <View style={styles.userDetails}>\n                  <Text style={styles.mainTitle}>Father Name</Text>\n                  <Text style={styles.iconTitle}>\n                    Mr. {customer.firstName} {customer.lastName}\n                  </Text>\n                </View>\n                <View style={styles.userDetails}>\n                  <Text style={styles.mainTitle}>Email</Text>\n                  <Text style={styles.iconTitle}>{customer.email}</Text>\n                </View>\n                <View style={styles.userDetails}>\n                  <Text style={styles.mainTitle}>Contact</Text>\n                  <Text style={styles.iconTitle}>{customer.contact}</Text>\n                </View>\n                <View style={styles.userDetails}>\n                  <Text style={styles.mainTitle}>Location</Text>\n                  <Text style={styles.iconTitle}>{customer.country}</Text>\n                </View>\n                <View style={styles.userDetails}>\n                  <Text style={styles.mainTitle}>Website</Text>\n                  <Text style={styles.iconTitle}>\n                    <Link\n                      style={[styles.iconTitle, { color: theme.palette.primary.main }]}\n                      src={`https://${customer.firstName}.en`}\n                    >{`https://${customer.firstName}.en`}</Link>\n                  </Text>\n                </View>\n              </View>\n            </View>\n          </View>\n        </View>\n      </Page>\n    </Document>\n  );\n}\n\nListCard.propTypes = { customer: PropTypes.any };\n","size_bytes":9117},"src/components/third-party/react-table/Filter.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\n\n// project-import\nimport DebouncedInput from './DebouncedInput';\n\n// assets\nimport { Minus } from 'iconsax-react';\n\n// ==============================|| FILTER - NUMBER FIELD ||============================== //\n\nfunction NumberInput({ columnFilterValue, getFacetedMinMaxValues, setFilterValue }) {\n  const minOpt = getFacetedMinMaxValues()?.[0];\n  const min = Number(minOpt ?? '');\n\n  const maxOpt = getFacetedMinMaxValues()?.[1];\n  const max = Number(maxOpt);\n\n  return (\n    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n      <DebouncedInput\n        type=\"number\"\n        value={columnFilterValue?.[0] ?? ''}\n        onFilterChange={(value) => setFilterValue((old) => [value, old?.[1]])}\n        placeholder={`Min ${minOpt ? `(${min})` : ''}`}\n        fullWidth\n        inputProps={{ min: min, max: max }}\n        size=\"small\"\n        startAdornment={false}\n      />\n      <>\n        <Minus size=\"32\" color=\"#FF8A65\" variant=\"Outline\" />\n      </>\n      <DebouncedInput\n        type=\"number\"\n        value={columnFilterValue?.[1] ?? ''}\n        onFilterChange={(value) => setFilterValue((old) => [old?.[0], value])}\n        placeholder={`Max ${maxOpt ? `(${max})` : ''}`}\n        fullWidth\n        inputProps={{ min: min, max: max }}\n        size=\"small\"\n        startAdornment={false}\n      />\n    </Stack>\n  );\n}\n\n// ==============================|| FILTER - TEXT FIELD ||============================== //\n\nfunction TextInput({ columnId, columnFilterValue, header, setFilterValue }) {\n  const dataListId = columnId + 'list';\n\n  return (\n    <DebouncedInput\n      type=\"text\"\n      fullWidth\n      value={columnFilterValue ?? ''}\n      onFilterChange={(value) => setFilterValue(value)}\n      placeholder={`Search ${header}`}\n      inputProps={{ list: dataListId }}\n      size=\"small\"\n      startAdornment={false}\n    />\n  );\n}\n\n// ==============================|| FILTER - INPUT ||============================== //\n\nexport default function Filter({ column, table }) {\n  const firstValue = table.getPreFilteredRowModel().flatRows[0]?.getValue(column.id);\n\n  const columnFilterValue = column.getFilterValue();\n\n  return typeof firstValue === 'number' ? (\n    <NumberInput\n      columnFilterValue={columnFilterValue}\n      getFacetedMinMaxValues={column.getFacetedMinMaxValues}\n      setFilterValue={column.setFilterValue}\n    />\n  ) : (\n    <TextInput\n      columnId={column.id}\n      columnFilterValue={columnFilterValue}\n      setFilterValue={column.setFilterValue}\n      header={column.columnDef.header}\n    />\n  );\n}\n\nNumberInput.propTypes = { columnFilterValue: PropTypes.number, getFacetedMinMaxValues: PropTypes.func, setFilterValue: PropTypes.func };\n\nTextInput.propTypes = {\n  columnId: PropTypes.string,\n  columnFilterValue: PropTypes.string,\n  header: PropTypes.string,\n  setFilterValue: PropTypes.func\n};\n\nFilter.propTypes = { column: PropTypes.object, table: PropTypes.object };\n","size_bytes":2996},"src/components/third-party/SimpleBar.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha, styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport SimpleBar from 'simplebar-react';\nimport { BrowserView, MobileView } from 'react-device-detect';\n\n// root style\nconst RootStyle = styled(BrowserView)({\n  flexGrow: 1,\n  height: '100%',\n  overflow: 'hidden'\n});\n\n// scroll bar wrapper\nconst SimpleBarStyle = styled(SimpleBar)(({ theme }) => ({\n  maxHeight: '100%',\n  '& .simplebar-scrollbar': {\n    '&:before': { backgroundColor: alpha(theme.palette.secondary.main, 0.25) },\n    '&.simplebar-visible:before': { opacity: 1 }\n  },\n  '& .simplebar-track.simplebar-vertical': { width: 10 },\n  '& .simplebar-track.simplebar-horizontal .simplebar-scrollbar': { height: 6 },\n  '& .simplebar-mask': { zIndex: 'inherit' }\n}));\n\n// ==============================|| SIMPLE SCROLL BAR  ||============================== //\n\nexport default function SimpleBarScroll({ children, sx, ...other }) {\n  return (\n    <>\n      <RootStyle>\n        <SimpleBarStyle clickOnTrack={false} sx={sx} {...other}>\n          {children}\n        </SimpleBarStyle>\n      </RootStyle>\n      <MobileView>\n        <Box sx={{ overflowX: 'auto', ...sx }} {...other}>\n          {children}\n        </Box>\n      </MobileView>\n    </>\n  );\n}\n\nSimpleBarScroll.propTypes = { children: PropTypes.any, sx: PropTypes.any, other: PropTypes.any };\n","size_bytes":1409},"src/sections/widget/data/LatestMessages.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { Facebook, Profile, ShoppingCart, TickCircle } from 'iconsax-react';\n\n// ==========================|| DATA WIDGET - LATEST MESSAGES ||========================== //\n\nexport default function LatestMessages() {\n  return (\n    <MainCard\n      title=\"Latest Messages\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <CardContent>\n        <Grid\n          container\n          spacing={3}\n          alignItems=\"center\"\n          sx={{\n            position: 'relative',\n            '&>*': { position: 'relative', zIndex: '5' },\n            '&:after': {\n              content: '\"\"',\n              position: 'absolute',\n              top: 8,\n              left: 114,\n              width: 2,\n              height: '100%',\n              bgcolor: 'divider',\n              zIndex: '1'\n            }\n          }}\n        >\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      2 hrs ago\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"info\">\n                      <Facebook variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">+ 1652 Followers</Typography>\n                    <Typography color=\"secondary\" variant=\"caption\">\n                      You’re getting more and more followers, keep it up!\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      4 hrs ago\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"error\">\n                      <ShoppingCart variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">+ 5 New Products were added!</Typography>\n                    <Typography color=\"secondary\" variant=\"caption\">\n                      Congratulations!\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      1 day ago\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"success\">\n                      <TickCircle variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Database backup completed!</Typography>\n                    <Typography color=\"secondary\" variant=\"caption\">\n                      Download the{' '}\n                      <Link component={RouterLink} to=\"#\" underline=\"hover\">\n                        latest backup\n                      </Link>\n                      .\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      2 day ago\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"primary\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">+2 Friend Requests</Typography>\n                    <Typography color=\"secondary\" variant=\"caption\">\n                      This is great, keep it up!\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":5822},"src/pages/apps/e-commerce/product.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLoaderData } from 'react-router-dom';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ProductCard from 'components/cards/e-commerce/ProductCard';\nimport FloatingCart from 'components/cards/e-commerce/FloatingCart';\n\nimport ProductFilterDrawer from 'sections/apps/e-commerce/products/ProductFilterDrawer';\nimport SkeletonProductPlaceholder from 'components/cards/skeleton/ProductPlaceholder';\nimport ProductsHeader from 'sections/apps/e-commerce/products/ProductsHeader';\nimport ProductEmpty from 'sections/apps/e-commerce/products/ProductEmpty';\n\nimport useConfig from 'hooks/useConfig';\nimport { resetCart, useGetCart } from 'api/cart';\nimport { filterProducts } from 'api/products';\n\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' && prop !== 'container' })(({ theme, open, container }) => ({\n  flexGrow: 1,\n  transition: theme.transitions.create('margin', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.shorter\n  }),\n  marginLeft: -320,\n  ...(container && {\n    [theme.breakpoints.only('lg')]: {\n      marginLeft: !open ? -240 : 0\n    }\n  }),\n  [theme.breakpoints.down('lg')]: {\n    paddingLeft: 0,\n    marginLeft: 0\n  },\n  ...(open && {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.shorter\n    }),\n    marginLeft: 0\n  })\n}));\n\n// ==============================|| ECOMMERCE - PRODUCTS ||============================== //\n\nexport default function ProductsPage() {\n  const theme = useTheme();\n\n  const { cart } = useGetCart();\n  const { container } = useConfig();\n\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  // product data\n  const initialProducts = useLoaderData();\n  const [products, setProducts] = useState(initialProducts);\n\n  useEffect(() => {\n    // clear cart if complete order\n    if (cart && cart.step > 2) {\n      resetCart();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [openFilterDrawer, setOpenFilterDrawer] = useState(true);\n  const handleDrawerOpen = () => {\n    setOpenFilterDrawer((prevState) => !prevState);\n  };\n\n  // filter\n  const initialState = {\n    search: '',\n    sort: 'low',\n    gender: [],\n    categories: ['all'],\n    colors: [],\n    price: '',\n    rating: 0\n  };\n  const [filter, setFilter] = useState(initialState);\n\n  const filterData = async () => {\n    await filterProducts(filter).then((response) => {\n      setProducts(response.data);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    filterData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filter]);\n\n  let productResult = <></>;\n  if (products && products.length > 0) {\n    productResult = products.map((product, index) => (\n      <Grid key={index} item xs={12} sm={6} md={4}>\n        <ProductCard\n          id={product.id}\n          image={product.image}\n          name={product.name}\n          brand={product.brand}\n          offer={product.offer}\n          isStock={product.isStock}\n          description={product.description}\n          offerPrice={product.offerPrice}\n          salePrice={product.salePrice}\n          rating={product.rating}\n          color={product.colors ? product.colors[0] : undefined}\n          open={openFilterDrawer}\n        />\n      </Grid>\n    ));\n  } else {\n    productResult = (\n      <Grid item xs={12} sx={{ mt: 3 }}>\n        <ProductEmpty handelFilter={() => setFilter(initialState)} />\n      </Grid>\n    );\n  }\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <ProductFilterDrawer\n        filter={filter}\n        setFilter={setFilter}\n        openFilterDrawer={openFilterDrawer}\n        handleDrawerOpen={handleDrawerOpen}\n        setLoading={setLoading}\n        initialState={initialState}\n      />\n      <Main theme={theme} open={openFilterDrawer} container={container}>\n        <Grid container spacing={2.5}>\n          <Grid item xs={12}>\n            <ProductsHeader filter={filter} handleDrawerOpen={handleDrawerOpen} setFilter={setFilter} />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              {isLoading\n                ? [1, 2, 3, 4, 5, 6, 7, 8].map((item) => (\n                    <Grid key={item} item xs={12} sm={6} md={4} lg={4}>\n                      <SkeletonProductPlaceholder />\n                    </Grid>\n                  ))\n                : productResult}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Main>\n      <FloatingCart />\n    </Box>\n  );\n}\n","size_bytes":4759},"src/sections/widget/chart/RepeatCustomerRate.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport RepeatCustomerChart from './RepeatCustomerChart';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// ==============================|| CHART - REPEAT CUSTOMER RATE ||============================== //\n\nexport default function RepeatCustomerRate() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n        <Typography variant=\"h5\">Repeat customer rate</Typography>\n        <IconButton\n          color=\"secondary\"\n          id=\"wallet-button\"\n          aria-controls={open ? 'wallet-menu' : undefined}\n          aria-haspopup=\"true\"\n          aria-expanded={open ? 'true' : undefined}\n          onClick={handleClick}\n          sx={{ transform: 'rotate(90deg)' }}\n        >\n          <MoreIcon />\n        </IconButton>\n        <Menu\n          id=\"wallet-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{\n            'aria-labelledby': 'wallet-button',\n            sx: { p: 1.25, minWidth: 150 }\n          }}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right'\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right'\n          }}\n        >\n          <ListItemButton onClick={handleClose}>Today</ListItemButton>\n          <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n          <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n        </Menu>\n      </Stack>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" spacing={0.5} sx={{ mt: 1 }}>\n        <Typography variant=\"subtitle1\">5.44%</Typography>\n        <Chip color=\"success\" variant=\"filled\" label=\"+2.6%\" size=\"small\" sx={{ bgcolor: 'success.main', borderRadius: 1 }} />\n      </Stack>\n      <RepeatCustomerChart />\n    </MainCard>\n  );\n}\n","size_bytes":2502},"src/pages/maintenance/error/500.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport error500 from 'assets/images/maintenance/img-error-500.svg';\n\n// ==============================|| ERROR 500 ||============================== //\n\nexport default function Error500() {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\" sx={{ minHeight: '100vh' }} spacing={3}>\n      <Grid item xs={12}>\n        <Box sx={{ width: 325 }}>\n          <img src={error500} alt=\"error 500\" style={{ height: '100%', width: '100%' }} />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack justifyContent=\"center\" alignItems=\"center\">\n          <Typography align=\"center\" variant={matchDownSM ? 'h2' : 'h1'}>\n            Internal Server Error\n          </Typography>\n          <Typography color=\"text.secondary\" variant=\"body2\" align=\"center\" sx={{ width: { xs: '73%', sm: '70%' }, mt: 1 }}>\n            Server error 500. we fixing the problem. please try again at a later stage.\n          </Typography>\n          <Button component={Link} to={APP_DEFAULT_PATH} variant=\"contained\" sx={{ textTransform: 'none', mt: 4 }}>\n            Back To Home\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1714},"src/sections/apps/profiles/user/TabPayment.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Radio from '@mui/material/Radio';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { PatternFormat } from 'react-number-format';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport MainCard from 'components/MainCard';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, Eye, EyeSlash, Trash } from 'iconsax-react';\nimport masterCard from 'assets/images/icons/master-card.png';\nimport paypal from 'assets/images/icons/paypal.png';\nimport visaCard from 'assets/images/icons/visa-card.png';\n\n// style & constant\nconst buttonStyle = { color: 'text.primary', fontWeight: 600 };\n\nconst paymentCards = [\n  {\n    id: 1,\n    name: 'Selena Litten',\n    number: 1234567890123456,\n    email: 'selena.litten@gmail.com',\n    expiry: new Date(),\n    cvv: 789,\n    securityCode: '123456',\n    type: 'master'\n  },\n  {\n    id: 2,\n    name: 'Stebin Ben',\n    number: 9876543210987654,\n    email: 'stebin.ben@gmail.com',\n    expiry: new Date(),\n    cvv: 789,\n    securityCode: '987654',\n    type: 'visa'\n  }\n];\n\n// ==============================|| PAYMENT - CARD ||============================== //\n\nfunction PaymentCard({ card }) {\n  const { id, name, number, type } = card;\n\n  return (\n    <MainCard content={false} sx={{ cursor: 'pointer' }}>\n      <Box sx={{ p: 2 }}>\n        <FormControlLabel\n          value={id}\n          control={<Radio value={id} />}\n          sx={{ display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n              <Grid item>\n                <Stack spacing={0.5} sx={{ ml: 1 }}>\n                  <Typography color=\"secondary\">{name}</Typography>\n                  <Typography variant=\"subtitle1\">\n                    <PatternFormat value={number.toString().substring(12)} displayType=\"text\" type=\"text\" format=\"**** **** **** ####\" />\n                  </Typography>\n                </Stack>\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={1}>\n                  <img src={type === 'master' ? masterCard : visaCard} alt=\"payment card\" />\n                  <IconButton color=\"secondary\">\n                    <Trash />\n                  </IconButton>\n                </Stack>\n              </Grid>\n            </Grid>\n          }\n        />\n      </Box>\n    </MainCard>\n  );\n}\n\n// ==============================|| USER PROFILE - PAYMENT ||============================== //\n\nexport default function TabPayment() {\n  const [cards] = useState(paymentCards);\n  const [method, setMethod] = useState('card');\n  const [value, setValue] = useState('2');\n  const [expiry, setExpiry] = useState(new Date());\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const handleRadioChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <MainCard title=\"Payment\">\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1.25} direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Stack direction=\"row\" spacing={1}>\n              <Button\n                variant=\"outlined\"\n                color={method === 'card' || method === 'add' ? 'primary' : 'secondary'}\n                sx={buttonStyle}\n                onClick={() => setMethod(method !== 'card' ? 'card' : method)}\n                startIcon={<img src={masterCard} alt=\"master card\" />}\n              >\n                Card\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color={method === 'paypal' ? 'primary' : 'secondary'}\n                sx={buttonStyle}\n                onClick={() => setMethod(method !== 'paypal' ? 'paypal' : method)}\n                startIcon={<img src={paypal} alt=\"paypal\" />}\n              >\n                Paypal\n              </Button>\n            </Stack>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={() => setMethod(method !== 'add' ? 'add' : method)}\n              sx={{ display: { xs: 'none', sm: 'flex' } }}\n            >\n              Add New Card\n            </Button>\n            <Tooltip title=\"Add New Card\">\n              <IconButton\n                variant=\"contained\"\n                onClick={() => setMethod(method !== 'add' ? 'add' : method)}\n                sx={{ display: { xs: 'block', sm: 'none' } }}\n              >\n                <Add />\n              </IconButton>\n            </Tooltip>\n          </Stack>\n        </Grid>\n        {method === 'card' && (\n          <>\n            <Grid item xs={12}>\n              <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={value} onChange={handleRadioChange}>\n                <Grid item xs={12} container spacing={2.5}>\n                  {cards.map((card, index) => (\n                    <Grid item xs={12} sm={6} key={index}>\n                      <PaymentCard card={card} />\n                    </Grid>\n                  ))}\n                </Grid>\n              </RadioGroup>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                <Button variant=\"outlined\" color=\"secondary\">\n                  Cancel\n                </Button>\n                <Button variant=\"contained\">Save</Button>\n              </Stack>\n            </Grid>\n          </>\n        )}\n        {method === 'paypal' && (\n          <Grid item xs={12}>\n            <Formik\n              initialValues={{\n                email: 'stebin.ben@paypal.co',\n                submit: null\n              }}\n              validationSchema={Yup.object().shape({\n                email: Yup.string().email('Invalid email address.').max(255).required('Email is required')\n              })}\n              onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                try {\n                  openSnackbar({\n                    open: true,\n                    message: 'Paypal email updated successfully.',\n                    variant: 'alert',\n                    alert: { color: 'success' }\n                  });\n                  setStatus({ success: false });\n                  setSubmitting(false);\n                } catch (err) {\n                  setStatus({ success: false });\n                  setErrors({ submit: err.message });\n                  setSubmitting(false);\n                }\n              }}\n            >\n              {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                <form noValidate onSubmit={handleSubmit}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-paypal-email\">Email Address</InputLabel>\n                        <TextField\n                          type=\"email\"\n                          fullWidth\n                          value={values.email}\n                          name=\"email\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          id=\"payment-paypal-email\"\n                          placeholder=\"Email Address\"\n                        />\n                      </Stack>\n                      {touched.email && errors.email && (\n                        <FormHelperText error id=\"payment-paypal-email-helper\">\n                          {errors.email}\n                        </FormHelperText>\n                      )}\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                        <Button color=\"error\" onClick={() => setMethod('card')}>\n                          Cancel\n                        </Button>\n                        <Button disabled={isSubmitting || Object.keys(errors).length !== 0} type=\"submit\" variant=\"contained\">\n                          Save\n                        </Button>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            </Formik>\n          </Grid>\n        )}\n        {method === 'add' && (\n          <Grid item xs={12}>\n            <Formik\n              initialValues={{\n                cardname: '',\n                cardNumber: '',\n                expiry: new Date(),\n                cvv: '',\n                security: '',\n                submit: null\n              }}\n              validationSchema={Yup.object().shape({\n                cardname: Yup.string().required('Card Name is required'),\n                cardNumber: Yup.string().required('Card Number is required'),\n                cvv: Yup.string().min(3).required('CVV is required'),\n                security: Yup.string().min(6).required('Security Code is required')\n              })}\n              onSubmit={(values, { resetForm, setErrors, setStatus, setSubmitting }) => {\n                try {\n                  openSnackbar({\n                    open: true,\n                    message: 'Card added successfully.',\n                    variant: 'alert',\n                    alert: { color: 'success' }\n                  });\n\n                  resetForm();\n                  setStatus({ success: false });\n                  setSubmitting(false);\n                  setMethod('card');\n                } catch (err) {\n                  setStatus({ success: false });\n                  setErrors({ submit: err.message });\n                  setSubmitting(false);\n                }\n              }}\n            >\n              {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, setFieldValue, touched, values }) => (\n                <form noValidate onSubmit={handleSubmit}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-card-name\">Name on Card</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"payment-card-name\"\n                          value={values.cardname}\n                          name=\"cardname\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          placeholder=\"Name on Card\"\n                        />\n                      </Stack>\n                      {touched.cardname && errors.cardname && (\n                        <FormHelperText error id=\"ayment-card-name-helper\">\n                          {errors.cardname}\n                        </FormHelperText>\n                      )}\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-card-number\">Card Number</InputLabel>\n                        <PatternFormat\n                          id=\"payment-card-number\"\n                          value={values.cardNumber}\n                          name=\"cardNumber\"\n                          format=\"#### #### #### ####\"\n                          prefix=\"\"\n                          fullWidth\n                          customInput={TextField}\n                          placeholder=\"Card Number\"\n                          onBlur={handleBlur}\n                          onValueChange={(values) => {\n                            const { value } = values;\n                            setFieldValue('cardNumber', value);\n                          }}\n                          onChange={handleChange}\n                        />\n                      </Stack>\n                      {touched.cardNumber && errors.cardNumber && (\n                        <FormHelperText error id=\"ayment-cardNumber-helper\">\n                          {errors.cardNumber}\n                        </FormHelperText>\n                      )}\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={4}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-card-expiry\">Expiry Date</InputLabel>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                          <DatePicker\n                            views={['month', 'year']}\n                            value={expiry}\n                            minDate={new Date()}\n                            onChange={(newValue) => {\n                              setExpiry(newValue);\n                            }}\n                            format=\"MM/yyyy\"\n                          />\n                        </LocalizationProvider>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-card-cvv\">CVV Number</InputLabel>\n                        <PatternFormat\n                          id=\"payment-card-cvv\"\n                          value={values.cvv}\n                          name=\"cvv\"\n                          format=\"###\"\n                          prefix=\"\"\n                          fullWidth\n                          customInput={TextField}\n                          placeholder=\"CVV Number\"\n                          onBlur={handleBlur}\n                          onValueChange={(values) => {\n                            const { value } = values;\n                            setFieldValue('cvv', value);\n                          }}\n                        />\n                      </Stack>\n                      {touched.cvv && errors.cvv && (\n                        <FormHelperText error id=\"ayment-cvv-helper\">\n                          {errors.cvv}\n                        </FormHelperText>\n                      )}\n                    </Grid>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"payment-card-security\">Security Code</InputLabel>\n                        <OutlinedInput\n                          placeholder=\"Enter Security Code\"\n                          id=\"payment-card-security\"\n                          type={showPassword ? 'text' : 'password'}\n                          value={values.security}\n                          name=\"security\"\n                          onBlur={handleBlur}\n                          onChange={handleChange}\n                          endAdornment={\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                aria-label=\"toggle password visibility\"\n                                onClick={handleClickShowPassword}\n                                onMouseDown={handleMouseDownPassword}\n                                edge=\"end\"\n                                size=\"large\"\n                                color=\"secondary\"\n                              >\n                                {showPassword ? <Eye /> : <EyeSlash />}\n                              </IconButton>\n                            </InputAdornment>\n                          }\n                          autoComplete=\"security-code\"\n                        />\n                      </Stack>\n                      {touched.security && errors.security && (\n                        <FormHelperText error id=\"ayment-security-helper\">\n                          {errors.security}\n                        </FormHelperText>\n                      )}\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={() => setMethod('card')}>\n                          Cancel\n                        </Button>\n                        <Button disabled={isSubmitting || Object.keys(errors).length !== 0} type=\"submit\" variant=\"contained\">\n                          Save\n                        </Button>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            </Formik>\n          </Grid>\n        )}\n      </Grid>\n    </MainCard>\n  );\n}\n\nPaymentCard.propTypes = { card: PropTypes.any };\n","size_bytes":17499},"src/pages/widget/data.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport MyTask from 'sections/widget/data/MyTask';\nimport UserPersonalData from 'sections/widget/data/UserPersonalData';\nimport TeamMembers from 'sections/widget/data/TeamMembers';\n\nimport Products from 'sections/widget/data/Products';\nimport MonthlyRevenue from 'sections/widget/data/MonthlyRevenue';\n\nimport NewCustomers from 'sections/widget/data/NewCustomers';\nimport RecentTickets from 'sections/widget/data/RecentTickets';\n\nimport Transactions from 'sections/widget/data/Transactions';\nimport PaymentHistory from 'sections/widget/data/PaymentHistory';\nimport AddTask from 'sections/widget/data/AddTask';\n\nimport ToDoList from 'sections/widget/data/ToDoList';\nimport TrafficSources from 'sections/widget/data/TrafficSources';\n\nimport UserActivity from 'sections/widget/data/UserActivity';\nimport LatestMessages from 'sections/widget/data/LatestMessages';\n\nimport ProjectTable from 'sections/widget/data/ProjectTable';\nimport ProductSales from 'sections/widget/data/ProductSales';\n\nimport TasksCard from 'sections/widget/data/TasksCard';\nimport ApplicationSales from 'sections/widget/data/ApplicationSales';\n\nimport ActiveTickets from 'sections/widget/data/ActiveTickets';\nimport LatestPosts from 'sections/widget/data/LatestPosts';\n\nimport FeedsCard from 'sections/widget/data/FeedsCard';\nimport LatestCustomers from 'sections/widget/data/LatestCustomers';\n\nimport LatestOrder from 'sections/widget/data/LatestOrder';\n\nimport IncomingRequests from 'sections/widget/data/IncomingRequests';\nimport TotalRevenue from 'sections/widget/data/TotalRevenue';\n\n// ===========================|| WIDGET - DATA ||=========================== //\n\nexport default function WidgetData() {\n  return (\n    <Grid container spacing={3}>\n      {/* row 1 */}\n      <Grid item xs={12} md={6} lg={4}>\n        <MyTask />\n      </Grid>\n      <Grid item xs={12} md={6} lg={4}>\n        <UserPersonalData />\n      </Grid>\n      <Grid item xs={12} lg={4} md={12}>\n        <TeamMembers />\n      </Grid>\n\n      {/* row 2 */}\n      <Grid item xs={12} md={7} lg={8}>\n        <Products />\n      </Grid>\n      <Grid item xs={12} md={5} lg={4}>\n        <MonthlyRevenue />\n      </Grid>\n\n      {/* row 3 */}\n      <Grid item xs={12} md={5} lg={6}>\n        <NewCustomers />\n      </Grid>\n      <Grid item xs={12} md={7} lg={6}>\n        <RecentTickets />\n      </Grid>\n\n      {/* row 4 */}\n      <Grid item xs={12} md={6}>\n        <Transactions />\n      </Grid>\n      <Grid item xs={12} md={6} lg={3}>\n        <PaymentHistory />\n      </Grid>\n      <Grid item xs={12} md={6} lg={3}>\n        <AddTask />\n      </Grid>\n\n      {/* row 5 */}\n      <Grid item xs={12} md={6} lg={4}>\n        <IncomingRequests />\n      </Grid>\n      <Grid item xs={12} md={6} lg={4}>\n        <TotalRevenue />\n      </Grid>\n      <Grid item xs={12} md={6} lg={4}>\n        <TasksCard />\n      </Grid>\n\n      {/* row 1 */}\n      <Grid item xs={12} md={6} lg={3}>\n        <ToDoList />\n      </Grid>\n      <Grid item xs={12} md={6} lg={3}>\n        <TrafficSources />\n      </Grid>\n      <Grid item xs={12} md={12} lg={6}>\n        <ApplicationSales />\n      </Grid>\n\n      {/* row 2 */}\n      <Grid item xs={12} md={7} lg={6}>\n        <LatestMessages />\n      </Grid>\n      <Grid item xs={12} md={5} lg={6}>\n        <UserActivity />\n      </Grid>\n\n      {/* row 3 */}\n      <Grid item xs={12} lg={6} md={6}>\n        <ProjectTable />\n      </Grid>\n      <Grid item xs={12} lg={6} md={6}>\n        <ProductSales />\n      </Grid>\n\n      {/* row 5 */}\n      <Grid item xs={12} md={8}>\n        <ActiveTickets />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <LatestPosts />\n      </Grid>\n\n      {/* row 6 */}\n      <Grid item xs={12} md={5} lg={4}>\n        <FeedsCard />\n      </Grid>\n      <Grid item xs={12} md={7} lg={8}>\n        <LatestCustomers />\n      </Grid>\n\n      {/* row 7 */}\n      <Grid item xs={12}>\n        <LatestOrder />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":3982},"src/layout/Dashboard/Header/HeaderContent/Profile/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useRef, useState } from 'react';\nimport { useNavigate } from 'react-router';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport CardContent from '@mui/material/CardContent';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport Stack from '@mui/material/Stack';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ProfileTab from './ProfileTab';\nimport SettingTab from './SettingTab';\nimport Avatar from 'components/@extended/Avatar';\nimport MainCard from 'components/MainCard';\nimport Transitions from 'components/@extended/Transitions';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode } from 'config';\nimport useAuth from 'hooks/useAuth';\n\n// assets\nimport avatar1 from 'assets/images/users/avatar-6.png';\nimport { Setting2, Profile, Logout } from 'iconsax-react';\n\n// tab panel wrapper\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`profile-tabpanel-${index}`}\n      aria-labelledby={`profile-tab-${index}`}\n      {...other}\n      sx={{ p: 1 }}\n    >\n      {value === index && children}\n    </Box>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `profile-tab-${index}`,\n    'aria-controls': `profile-tabpanel-${index}`\n  };\n}\n\n// ==============================|| HEADER CONTENT - PROFILE ||============================== //\n\nexport default function ProfilePage() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n\n  const { logout, user } = useAuth();\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate(`/login`, {\n        state: {\n          from: ''\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 0.75 }}>\n      <ButtonBase\n        sx={{\n          p: 0.25,\n          borderRadius: 1,\n          '&:hover': { bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.light' : 'secondary.lighter' },\n          '&:focus-visible': {\n            outline: `2px solid ${theme.palette.secondary.dark}`,\n            outlineOffset: 2\n          }\n        }}\n        aria-label=\"open profile\"\n        ref={anchorRef}\n        aria-controls={open ? 'profile-grow' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n      >\n        <Avatar alt=\"profile user\" src={avatar1} />\n      </ButtonBase>\n      <Popper\n        placement=\"bottom-end\"\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n        popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [0, 9] } }] }}\n      >\n        {({ TransitionProps }) => (\n          <Transitions type=\"grow\" position=\"top-right\" in={open} {...TransitionProps}>\n            <Paper\n              sx={{\n                boxShadow: theme.customShadows.z1,\n                width: 290,\n                minWidth: 240,\n                maxWidth: 290,\n                [theme.breakpoints.down('md')]: { maxWidth: 250 },\n                borderRadius: 1.5\n              }}\n            >\n              <ClickAwayListener onClickAway={handleClose}>\n                <MainCard border={false} content={false}>\n                  <CardContent sx={{ px: 2.5, pt: 3 }}>\n                    <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                      <Grid item>\n                        <Stack direction=\"row\" spacing={1.25} alignItems=\"center\">\n                          <Avatar alt=\"profile user\" src={avatar1} />\n                          <Stack>\n                            <Typography variant=\"subtitle1\">{user?.name}</Typography>\n                            <Typography variant=\"body2\" color=\"secondary\">\n                              UI/UX Designer\n                            </Typography>\n                          </Stack>\n                        </Stack>\n                      </Grid>\n                      <Grid item>\n                        <Tooltip title=\"Logout\">\n                          <IconButton size=\"large\" color=\"error\" sx={{ p: 1 }} onClick={handleLogout}>\n                            <Logout variant=\"Bulk\" />\n                          </IconButton>\n                        </Tooltip>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n\n                  {/* <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                    <Tabs variant=\"fullWidth\" value={value} onChange={handleChange} aria-label=\"profile tabs\">\n                      <Tab\n                        sx={{\n                          display: 'flex',\n                          flexDirection: 'row',\n                          justifyContent: 'center',\n                          alignItems: 'center',\n                          textTransform: 'capitalize'\n                        }}\n                        icon={<Profile size={18} style={{ marginBottom: 0, marginRight: '10px' }} />}\n                        label=\"Profile\"\n                        {...a11yProps(0)}\n                      />\n                      <Tab\n                        sx={{\n                          display: 'flex',\n                          flexDirection: 'row',\n                          justifyContent: 'center',\n                          alignItems: 'center',\n                          textTransform: 'capitalize'\n                        }}\n                        icon={<Setting2 size={18} style={{ marginBottom: 0, marginRight: '10px' }} />}\n                        label=\"Setting\"\n                        {...a11yProps(1)}\n                      />\n                    </Tabs>\n                  </Box> */}\n                  <TabPanel value={value} index={0} dir={theme.direction}>\n                    <ProfileTab handleLogout={handleLogout} />\n                  </TabPanel>\n                  {/* <TabPanel value={value} index={1} dir={theme.direction}>\n                    <SettingTab />\n                  </TabPanel> */}\n                </MainCard>\n              </ClickAwayListener>\n            </Paper>\n          </Transitions>\n        )}\n      </Popper>\n    </Box>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":7082},"src/sections/components-overview/tree-view/BasicTreeView.jsx":{"content":"// material-ui\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| TREE VIEW - BASIC ||============================== //\n\nexport default function BasicTreeView() {\n  const basicTreeviewCodeString = `<SimpleTreeView\n  aria-label=\"file system navigator\"\n  slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n  defaultExpandedItems={['5']}\n  sx={{ height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n>\n  <TreeItem itemId=\"1\" label=\"Applications\">\n    <TreeItem itemId=\"2\" label=\"Calendar\" />\n  </TreeItem>\n  <TreeItem itemId=\"5\" label=\"Documents\">\n    <TreeItem itemId=\"10\" label=\"OSS\" />\n    <TreeItem itemId=\"6\" label=\"MUI\">\n      <TreeItem itemId=\"8\" label=\"index.js\" />\n    </TreeItem>\n  </TreeItem>\n</SimpleTreeView>`;\n\n  return (\n    <MainCard title=\"Basic\" codeHighlight codeString={basicTreeviewCodeString}>\n      <SimpleTreeView\n        aria-label=\"file system navigator\"\n        slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n        defaultExpandedItems={['5']}\n        sx={{ height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n      >\n        <TreeItem itemId=\"1\" label=\"Applications\">\n          <TreeItem itemId=\"2\" label=\"Calendar\" />\n        </TreeItem>\n        <TreeItem itemId=\"5\" label=\"Documents\">\n          <TreeItem itemId=\"10\" label=\"OSS\" />\n          <TreeItem itemId=\"6\" label=\"MUI\">\n            <TreeItem itemId=\"8\" label=\"index.js\" />\n          </TreeItem>\n        </TreeItem>\n      </SimpleTreeView>\n    </MainCard>\n  );\n}\n","size_bytes":1670},"src/sections/dashboard/analytics/AcquisitionChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| ACQUISITION CHANNELS - CHART ||============================== //\n\nexport default function AcquisitionChart() {\n  const theme = useTheme();\n\n  const mode = theme.palette.mode;\n  const line = theme.palette.divider;\n  const { primary, secondary } = theme.palette.text;\n\n  // chart options\n  const barChartOptions = {\n    chart: {\n      type: 'bar',\n      height: 250,\n      width: '100%',\n      stacked: true,\n      toolbar: {\n        show: false\n      }\n    },\n    xaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      }\n    },\n    yaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      }\n    },\n    tooltip: {\n      x: {\n        show: false\n      }\n    },\n    legend: {\n      show: true,\n      position: 'bottom',\n      horizontalAlign: 'left',\n      offsetX: 10,\n      markers: {\n        width: 8,\n        height: 8,\n        radius: '50%'\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    grid: {\n      show: false\n    },\n    stroke: {\n      colors: ['transparent'],\n      width: 1\n    }\n  };\n\n  const [options, setOptions] = useState(barChartOptions);\n  const [series] = useState([\n    {\n      name: 'Direct',\n      data: [21, 17, 15, 13, 15, 13, 16, 13, 8, 14, 11, 9, 7, 5, 3, 3, 7]\n    },\n    {\n      name: 'Referral',\n      data: [28, 30, 20, 26, 18, 27, 22, 28, 20, 21, 15, 14, 12, 10, 8, 18, 16]\n    },\n    {\n      name: 'Social',\n      data: [50, 51, 60, 54, 53, 48, 55, 40, 44, 42, 44, 44, 42, 40, 42, 32, 16]\n    }\n  ]);\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.secondary.darker, theme.palette.primary.main, theme.palette.primary[200]],\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={250} />;\n}\n","size_bytes":2389},"src/themes/overrides/Typography.js":{"content":"// ==============================|| OVERRIDES - TYPOGRAPHY ||============================== //\n\nexport default function Typography() {\n  return {\n    MuiTypography: {\n      styleOverrides: {\n        gutterBottom: {\n          marginBottom: 12\n        }\n      }\n    }\n  };\n}\n","size_bytes":273},"src/sections/forms/wizard/works-validation-wizard/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { FieldArray, FormikProvider, useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { Box } from '@mui/material';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  title: yup.string().required('Title of page is required'),\n  titleParagraph: yup.string().required('Title paragraph is required'),\n  visitWebsiteLink: yup.string().required('Visit website link is required'),\n  callToActionTitle: yup.string().required('Call to action title is required'),\n  callToActionParagraph: yup.string().required('Call to action paragraph is required'),\n  reviewText: yup.string().required('Review text is required'),\n  reviewAuthor: yup.string().required('Review author name is required'),\n  reviewAuthorPosition: yup.string().required('Review author position is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  workTags: yup\n    .array()\n    .of(\n      yup.string().required('Project text is required') // Validate each item in the array\n    )\n    .min(1, 'At least one project text is required') // Ensure at least one project exists\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      title: data.title ?? '',\n      titleParagraph: data.titleParagraph ?? '',\n      visitWebsiteLink: data.visitWebsiteLink ?? '',\n      callToActionTitle: data.callToActionTitle ?? '',\n      callToActionParagraph: data.callToActionParagraph ?? '',\n      reviewText: data.review && data.review.text ? data.review.text : '',\n      reviewAuthor: data.review && data.review.author ? data.review.author : '',\n      reviewAuthorPosition: data.review && data.review.position ? data.review.position : '',\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      workTags: data.workTags || ['']\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        id: values.id,\n        baseUrl: 'works',\n        title: values.title,\n        titleParagraph: values.titleParagraph,\n        visitWebsiteLink: values.visitWebsiteLink,\n        callToActionTitle: values.callToActionTitle,\n        callToActionParagraph: values.callToActionParagraph,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        review: {\n          text: values.reviewText,\n          author: values.reviewAuthor,\n          position: values.reviewAuthorPosition,\n          imageSrc: values.review\n        },\n        workTags: values.workTags\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                multiline\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title of page</InputLabel>\n              <TextField\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title of page *\"\n                multiline\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                error={formik.touched.title && Boolean(formik.errors.title)}\n                helperText={formik.touched.title && formik.errors.title}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title paragraph</InputLabel>\n              <TextField\n                id=\"titleParagraph\"\n                name=\"titleParagraph\"\n                multiline\n                placeholder=\"Title paragraph *\"\n                value={formik.values.titleParagraph}\n                onChange={formik.handleChange}\n                error={formik.touched.titleParagraph && Boolean(formik.errors.titleParagraph)}\n                helperText={formik.touched.titleParagraph && formik.errors.titleParagraph}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Visit website link</InputLabel>\n              <TextField\n                id=\"visitWebsiteLink\"\n                name=\"visitWebsiteLink\"\n                multiline\n                placeholder=\"Visit website link *\"\n                value={formik.values.visitWebsiteLink}\n                onChange={formik.handleChange}\n                error={formik.touched.visitWebsiteLink && Boolean(formik.errors.visitWebsiteLink)}\n                helperText={formik.touched.visitWebsiteLink && formik.errors.visitWebsiteLink}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Call to action title</InputLabel>\n              <TextField\n                id=\"callToActionTitle\"\n                name=\"callToActionTitle\"\n                multiline\n                placeholder=\"Call to action title *\"\n                value={formik.values.callToActionTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.callToActionTitle && Boolean(formik.errors.callToActionTitle)}\n                helperText={formik.touched.callToActionTitle && formik.errors.callToActionTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Call to action paragraph</InputLabel>\n              <TextField\n                id=\"callToActionParagraph\"\n                name=\"callToActionParagraph\"\n                multiline\n                placeholder=\"Call to action paragraph *\"\n                value={formik.values.callToActionParagraph}\n                onChange={formik.handleChange}\n                error={formik.touched.callToActionParagraph && Boolean(formik.errors.callToActionParagraph)}\n                helperText={formik.touched.callToActionParagraph && formik.errors.callToActionParagraph}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review text</InputLabel>\n              <TextField\n                id=\"reviewText\"\n                name=\"reviewText\"\n                placeholder=\"Review text *\"\n                multiline\n                value={formik.values.reviewText}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewText && Boolean(formik.errors.reviewText)}\n                helperText={formik.touched.reviewText && formik.errors.reviewText}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review author name</InputLabel>\n              <TextField\n                id=\"reviewAuthor\"\n                name=\"reviewAuthor\"\n                placeholder=\"Review author name*\"\n                multiline\n                value={formik.values.reviewAuthor}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewAuthor && Boolean(formik.errors.reviewAuthor)}\n                helperText={formik.touched.reviewAuthor && formik.errors.reviewAuthor}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review author position</InputLabel>\n              <TextField\n                id=\"reviewAuthorPosition\"\n                name=\"reviewAuthorPosition\"\n                placeholder=\"Review author position *\"\n                multiline\n                value={formik.values.reviewAuthorPosition}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewAuthorPosition && Boolean(formik.errors.reviewAuthorPosition)}\n                helperText={formik.touched.reviewAuthorPosition && formik.errors.reviewAuthorPosition}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sx={{ mb: 1 }}>\n            <InputLabel>Work tags</InputLabel>\n          </Grid>\n          <FormikProvider value={formik}>\n            <Box sx={{ ml: 3, mt: 0, width: '100%' }} fullWidth>\n              <FieldArray\n                name=\"workTags\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.workTags.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" sx={{ mb: 2 }}>\n                        <Grid item xs={9.6} md={6}>\n                          <TextField\n                            id={`workTags[${index}]`}\n                            name={`workTags[${index}]`}\n                            placeholder=\"Text\"\n                            value={formik.values.workTags[index]}\n                            onChange={formik.handleChange}\n                            error={formik.touched.workTags?.[index] && Boolean(formik.errors.workTags?.[index])}\n                            helperText={formik.touched.workTags?.[index] && formik.errors.workTags?.[index]}\n                            fullWidth\n                            sx={{ mb: 1 }}\n                          />\n                        </Grid>\n\n                        <Grid\n                          item\n                          xs={2.4}\n                          sx={{ mb: () => (formik.errors.workTags?.[index] ? 4 : 1) }}\n                          md={2.4}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.workTags.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              ml: 1,\n                              alignSelf: 'center',\n                              backgroundColor: (theme) =>\n                                formik.values.workTags.length === 1 ? theme.palette.action.disabled : 'transparent',\n                              color: (theme) => (formik.values.workTags.length === 1 ? theme.palette.disabled : theme.palette.error.main),\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.workTags.length === 1 ? theme.palette.action.disabled : theme.palette.error.main,\n                                color: (theme) => (formik.values.workTags.length === 1 ? theme.palette.disabled : 'white')\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    <Button type=\"button\" onClick={() => arrayHelpers.push('')} variant=\"outlined\" sx={{ mt: 2 }}>\n                      Add tag\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n          </FormikProvider>\n\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":14927},"src/pages/apps/invoice/create.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport Select from '@mui/material/Select';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableRow from '@mui/material/TableRow';\nimport TextField from '@mui/material/TextField';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TableContainer from '@mui/material/TableContainer';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport * as yup from 'yup';\nimport { v4 as UIDV4 } from 'uuid';\nimport { format } from 'date-fns';\nimport { FieldArray, Form, Formik } from 'formik';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport CircularLoader from 'components/CircularLoader';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport InvoiceItem from 'sections/apps/invoice/InvoiceItem';\nimport AddressModal from 'sections/apps/invoice/AddressModal';\nimport InvoiceModal from 'sections/apps/invoice/InvoiceModal';\n\nimport incrementer from 'utils/incrementer';\nimport { openSnackbar } from 'api/snackbar';\nimport {\n  handlerCustomerTo,\n  handlerCustomerFrom,\n  handlerPreview,\n  insertInvoice,\n  selectCountry,\n  useGetInvoice,\n  useGetInvoiceMaster\n} from 'api/invoice';\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport { Add, Edit } from 'iconsax-react';\n\nconst validationSchema = yup.object({\n  date: yup.date().required('Invoice date is required'),\n  due_date: yup\n    .date()\n    .when('date', (date, schema) => date && schema.min(date, \"Due date can't be before invoice date\"))\n    .nullable()\n    .required('Due date is required'),\n  customerInfo: yup\n    .object({\n      name: yup.string().required('Invoice receiver information is required')\n    })\n    .required('Invoice receiver information is required'),\n  status: yup.string().required('Status selection is required'),\n  invoice_detail: yup\n    .array()\n    .required('Invoice details is required')\n    .of(\n      yup.object().shape({\n        name: yup.string().required('Product name is required')\n      })\n    )\n    .min(1, 'Invoice must have at least 1 items')\n});\n\n// ==============================|| INVOICE - CREATE ||============================== //\n\nfunction CreateForm({ lists, invoiceMaster }) {\n  const theme = useTheme();\n  const navigation = useNavigate();\n  const notesLimit = 500;\n\n  const handlerCreate = (values) => {\n    const newList = {\n      id: Number(incrementer(lists.length)),\n      invoice_id: Number(values.invoice_id),\n      customer_name: values.cashierInfo?.name,\n      email: values.cashierInfo?.email,\n      avatar: Number(Math.round(Math.random() * 10)),\n      discount: Number(values.discount),\n      tax: Number(values.tax),\n      date: format(new Date(values.date), 'MM/dd/yyyy'),\n      due_date: format(new Date(values.due_date), 'MM/dd/yyyy'),\n      quantity: Number(\n        values.invoice_detail?.reduce((sum, i) => {\n          return sum + i.qty;\n        }, 0)\n      ),\n      status: values.status,\n      cashierInfo: values.cashierInfo,\n      customerInfo: values.customerInfo,\n      invoice_detail: values.invoice_detail,\n      notes: values.notes\n    };\n\n    insertInvoice(newList);\n    openSnackbar({\n      open: true,\n      message: 'Invoice Added successfully',\n      anchorOrigin: { vertical: 'top', horizontal: 'right' },\n      variant: 'alert',\n\n      alert: {\n        color: 'success'\n      }\n    });\n    navigation('/apps/invoice/list');\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        id: 120,\n        invoice_id: Date.now(),\n        status: '',\n        date: new Date(),\n        due_date: null,\n        cashierInfo: {\n          name: 'Belle J. Richter',\n          address: '1300 Cooks Mine, NM 87829',\n          phone: '305-829-7809',\n          email: 'belljrc23@gmail.com'\n        },\n        customerInfo: {\n          address: '',\n          email: '',\n          name: '',\n          phone: ''\n        },\n        invoice_detail: [\n          {\n            id: UIDV4(),\n            name: '',\n            description: '',\n            qty: 1,\n            price: '1.00'\n          }\n        ],\n        discount: 0,\n        tax: 0,\n        notes: ''\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values) => {\n        handlerCreate(values);\n      }}\n    >\n      {({ handleBlur, errors, handleChange, handleSubmit, values, isValid, setFieldValue, touched }) => {\n        const subtotal = values?.invoice_detail.reduce((prev, curr) => {\n          if (curr.name.trim().length > 0) return prev + Number(curr.price * Math.floor(curr.qty));\n          else return prev;\n        }, 0);\n        const taxRate = (values.tax * subtotal) / 100;\n        const discountRate = (values.discount * subtotal) / 100;\n        const total = subtotal - discountRate + taxRate;\n        return (\n          <Form onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Invoice Id</InputLabel>\n                  <FormControl sx={{ width: '100%' }}>\n                    <TextField\n                      required\n                      disabled\n                      type=\"number\"\n                      name=\"invoice_id\"\n                      id=\"invoice_id\"\n                      value={values.invoice_id}\n                      onChange={handleChange}\n                    />\n                  </FormControl>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Status</InputLabel>\n                  <FormControl sx={{ width: '100%' }}>\n                    <Select\n                      value={values.status}\n                      displayEmpty\n                      name=\"status\"\n                      renderValue={(selected) => {\n                        if (selected.length === 0) {\n                          return <Box sx={{ color: 'secondary.400' }}>Select status</Box>;\n                        }\n                        return selected;\n                        // return selected.join(', ');\n                      }}\n                      onChange={handleChange}\n                      error={Boolean(errors.status && touched.status)}\n                    >\n                      <MenuItem disabled value=\"\">\n                        Select status\n                      </MenuItem>\n                      <MenuItem value=\"Paid\">Paid</MenuItem>\n                      <MenuItem value=\"Unpaid\">Unpaid</MenuItem>\n                      <MenuItem value=\"Cancelled\">Cancelled</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Stack>\n                {touched.status && errors.status && <FormHelperText error={true}>{errors.status}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Date</InputLabel>\n                  <FormControl sx={{ width: '100%' }} error={Boolean(touched.date && errors.date)}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <DatePicker format=\"dd/MM/yyyy\" value={values.date} onChange={(newValue) => setFieldValue('date', newValue)} />\n                    </LocalizationProvider>\n                  </FormControl>\n                </Stack>\n                {touched.date && errors.date && <FormHelperText error={true}>{errors.date}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Due Date</InputLabel>\n                  <FormControl sx={{ width: '100%' }} error={Boolean(touched.due_date && errors.due_date)}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <DatePicker\n                        format=\"dd/MM/yyyy\"\n                        value={values.due_date}\n                        onChange={(newValue) => setFieldValue('due_date', newValue)}\n                      />\n                    </LocalizationProvider>\n                  </FormControl>\n                </Stack>\n                {touched.due_date && errors.due_date && <FormHelperText error={true}>{errors.due_date}</FormHelperText>}\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <MainCard sx={{ minHeight: 168 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={8}>\n                      <Stack spacing={2}>\n                        <Typography variant=\"h5\">From:</Typography>\n                        <Stack sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{values?.cashierInfo?.name}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.address}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.phone}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.email}</Typography>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                      <Box textAlign={{ xs: 'left', sm: 'right' }} color=\"secondary.200\">\n                        <Button\n                          variant=\"outlined\"\n                          startIcon={<Edit />}\n                          color=\"secondary\"\n                          onClick={() => handlerCustomerFrom(true)}\n                          size=\"small\"\n                        >\n                          Change\n                        </Button>\n                        <AddressModal\n                          open={invoiceMaster.open}\n                          setOpen={(value) => handlerCustomerFrom(value)}\n                          handlerAddress={(address) => setFieldValue('cashierInfo', address)}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </MainCard>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <MainCard sx={{ minHeight: 168 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={8}>\n                      <Stack spacing={2}>\n                        <Typography variant=\"h5\">To:</Typography>\n                        <Stack sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{values?.customerInfo?.name}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.address}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.phone}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.email}</Typography>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                      <Box textAlign=\"right\" color=\"grey.200\">\n                        <Button\n                          size=\"small\"\n                          startIcon={<Add />}\n                          color=\"secondary\"\n                          variant=\"outlined\"\n                          onClick={() => handlerCustomerTo(true)}\n                        >\n                          Add\n                        </Button>\n                        <AddressModal\n                          open={invoiceMaster.isCustomerOpen}\n                          setOpen={(value) => handlerCustomerTo(value)}\n                          handlerAddress={(value) => setFieldValue('customerInfo', value)}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </MainCard>\n                {touched.customerInfo && errors.customerInfo && <FormHelperText error={true}>{errors?.customerInfo?.name}</FormHelperText>}\n              </Grid>\n\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Detail</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <FieldArray\n                  name=\"invoice_detail\"\n                  render={({ remove, push }) => {\n                    return (\n                      <>\n                        <TableContainer>\n                          <Table sx={{ minWidth: 650 }}>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>#</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Description</TableCell>\n                                <TableCell>Qty</TableCell>\n                                <TableCell>Price</TableCell>\n                                <TableCell align=\"right\">Amount</TableCell>\n                                <TableCell align=\"center\">Action</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {values.invoice_detail?.map((item, index) => (\n                                <TableRow key={item.id}>\n                                  <TableCell>{values.invoice_detail.indexOf(item) + 1}</TableCell>\n                                  <InvoiceItem\n                                    key={item.id}\n                                    id={item.id}\n                                    index={index}\n                                    name={item.name}\n                                    description={item.description}\n                                    qty={item.qty}\n                                    price={item.price}\n                                    onDeleteItem={(index) => remove(index)}\n                                    onEditItem={handleChange}\n                                    Blur={handleBlur}\n                                    errors={errors}\n                                    touched={touched}\n                                  />\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                        <Divider />\n                        {touched.invoice_detail && errors.invoice_detail && !Array.isArray(errors?.invoice_detail) && (\n                          <Stack direction=\"row\" justifyContent=\"center\" sx={{ p: 1.5 }}>\n                            <FormHelperText error={true}>{errors.invoice_detail}</FormHelperText>\n                          </Stack>\n                        )}\n                        <Grid container justifyContent=\"space-between\">\n                          <Grid item xs={12} md={8}>\n                            <Box sx={{ pt: 2.5, pr: 2.5, pb: 2.5, pl: 0 }}>\n                              <Button\n                                color=\"primary\"\n                                startIcon={<Add />}\n                                onClick={() =>\n                                  push({\n                                    id: UIDV4(),\n                                    name: '',\n                                    description: '',\n                                    qty: 1,\n                                    price: '1.00'\n                                  })\n                                }\n                                variant=\"dashed\"\n                                sx={{ bgcolor: 'transparent !important' }}\n                              >\n                                Add Item\n                              </Button>\n                            </Box>\n                          </Grid>\n                          <Grid item xs={12} md={4}>\n                            <Grid container justifyContent=\"space-between\" spacing={2} sx={{ pt: 2.5, pb: 2.5 }}>\n                              <Grid item xs={6}>\n                                <Stack spacing={1}>\n                                  <InputLabel>Discount(%)</InputLabel>\n                                  <TextField\n                                    type=\"number\"\n                                    fullWidth\n                                    name=\"discount\"\n                                    id=\"discount\"\n                                    placeholder=\"0.0\"\n                                    value={values.discount}\n                                    onChange={handleChange}\n                                    inputProps={{\n                                      min: 0\n                                    }}\n                                  />\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={6}>\n                                <Stack spacing={1}>\n                                  <InputLabel>Tax(%)</InputLabel>\n                                  <TextField\n                                    type=\"number\"\n                                    fullWidth\n                                    name=\"tax\"\n                                    id=\"tax\"\n                                    placeholder=\"0.0\"\n                                    value={values.tax}\n                                    onChange={handleChange}\n                                    inputProps={{\n                                      min: 0\n                                    }}\n                                  />\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Stack spacing={2}>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Sub Total:</Typography>\n                                  <Typography>{invoiceMaster.country?.prefix + '' + subtotal.toFixed(2)}</Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Discount:</Typography>\n                                  <Typography variant=\"h6\" color=\"success.main\">\n                                    {invoiceMaster.country?.prefix + '' + discountRate.toFixed(2)}\n                                  </Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Tax:</Typography>\n                                  <Typography>{invoiceMaster.country?.prefix + '' + taxRate.toFixed(2)}</Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography variant=\"subtitle1\">Grand Total:</Typography>\n                                  <Typography variant=\"subtitle1\">\n                                    {' '}\n                                    {total % 1 === 0\n                                      ? invoiceMaster.country?.prefix + '' + total\n                                      : invoiceMaster.country?.prefix + '' + total.toFixed(2)}\n                                  </Typography>\n                                </Stack>\n                              </Stack>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </>\n                    );\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Notes</InputLabel>\n                  <TextField\n                    placeholder=\"Address\"\n                    rows={3}\n                    value={values.notes}\n                    multiline\n                    name=\"notes\"\n                    onChange={handleChange}\n                    inputProps={{\n                      maxLength: notesLimit\n                    }}\n                    helperText={`${values.notes.length} / ${notesLimit}`}\n                    sx={{\n                      width: '100%',\n                      '& .MuiFormHelperText-root': {\n                        mr: 0,\n                        display: 'flex',\n                        justifyContent: 'flex-end'\n                      }\n                    }}\n                  />\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <InputLabel>Set Currency*</InputLabel>\n                  <FormControl sx={{ width: { xs: '100%', sm: 250 } }}>\n                    <Autocomplete\n                      id=\"country-select-demo\"\n                      fullWidth\n                      options={invoiceMaster.countries}\n                      defaultValue={invoiceMaster.countries[2]}\n                      value={invoiceMaster.countries.find((option) => option.code === invoiceMaster.country?.code)}\n                      onChange={(event, value) => selectCountry(value)}\n                      autoHighlight\n                      getOptionLabel={(option) => option.label}\n                      renderOption={(props, option) => (\n                        <Box component=\"li\" sx={{ display: 'flex', direction: 'row', alignItems: 'center', gap: 1 }} {...props}>\n                          {option.code && (\n                            <img\n                              loading=\"lazy\"\n                              width=\"20\"\n                              src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                              srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                              alt=\"\"\n                            />\n                          )}\n                          {option.label}\n                        </Box>\n                      )}\n                      renderInput={(params) => {\n                        const selected = invoiceMaster.countries.find((option) => option.code === invoiceMaster.country?.code);\n                        return (\n                          <TextField\n                            {...params}\n                            name=\"phoneCode\"\n                            placeholder=\"Select\"\n                            InputProps={{\n                              ...params.InputProps,\n                              startAdornment: (\n                                <>\n                                  {selected && selected.code !== '' && (\n                                    <img\n                                      style={{ marginRight: 6 }}\n                                      loading=\"lazy\"\n                                      width=\"20\"\n                                      src={`https://flagcdn.com/w20/${selected.code.toLowerCase()}.png`}\n                                      srcSet={`https://flagcdn.com/w40/${selected.code.toLowerCase()}.png 2x`}\n                                      alt=\"\"\n                                    />\n                                  )}\n                                </>\n                              )\n                            }}\n                            inputProps={{\n                              ...params.inputProps,\n                              autoComplete: 'new-password' // disable autocomplete and autofill\n                            }}\n                          />\n                        );\n                      }}\n                    />\n                  </FormControl>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"flex-end\" spacing={2} sx={{ height: '100%' }}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    disabled={values.status === '' || !isValid}\n                    sx={{ color: 'secondary.dark' }}\n                    onClick={() => handlerPreview(true)}\n                  >\n                    Preview\n                  </Button>\n                  <Button variant=\"outlined\" color=\"secondary\" sx={{ color: 'secondary.dark' }}>\n                    Save\n                  </Button>\n                  <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                    Create & Send\n                  </Button>\n                  <InvoiceModal\n                    isOpen={invoiceMaster.isOpen}\n                    setIsOpen={(value) => handlerPreview(value)}\n                    key={values.invoice_id}\n                    invoiceInfo={{\n                      ...values,\n                      subtotal,\n                      taxRate,\n                      discountRate,\n                      total\n                    }}\n                    items={values?.invoice_detail}\n                    onAddNextInvoice={() => handlerPreview(false)}\n                  />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n}\n\n// ==============================|| INVOICE - CREATE ||============================== //\n\nexport default function Create() {\n  const { invoice } = useGetInvoice();\n  const { invoiceMasterLoading, invoiceMaster } = useGetInvoiceMaster();\n\n  const isLoader = invoiceMasterLoading || invoiceMaster === undefined;\n  const loader = (\n    <Box sx={{ height: 'calc(100vh - 310px)' }}>\n      <CircularLoader />\n    </Box>\n  );\n\n  let breadcrumbLinks = [\n    { title: 'Home', to: APP_DEFAULT_PATH },\n    { title: 'Invoice', to: '/apps/invoice/dashboard' },\n    { title: 'Create Invoice' }\n  ];\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"New Invoice\" links={breadcrumbLinks} />\n      <MainCard>{isLoader ? loader : <CreateForm {...{ lists: invoice, invoiceMaster }} />}</MainCard>\n    </>\n  );\n}\n\nCreateForm.propTypes = { lists: PropTypes.array, invoiceMaster: PropTypes.any };\n","size_bytes":26784},"src/themes/overrides/AlertTitle.js":{"content":"// ==============================|| OVERRIDES - ALERT TITLE ||============================== //\n\nexport default function AlertTitle() {\n  return {\n    MuiAlertTitle: {\n      styleOverrides: {\n        root: {\n          marginBottom: 4,\n          marginTop: 0,\n          fontWeight: 400\n        }\n      }\n    }\n  };\n}\n","size_bytes":316},"src/sections/apps/customer/CustomerModal.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Modal from '@mui/material/Modal';\n\n// project imports\nimport FormCustomerAdd from './FormCustomerAdd';\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport CircularWithPath from 'components/@extended/progress/CircularWithPath';\nimport { useGetCustomer } from 'api/customer';\n\n// ==============================|| CUSTOMER ADD / EDIT ||============================== //\n\nexport default function CustomerModal({ open, modalToggler, customer }) {\n  const { customersLoading: loading } = useGetCustomer();\n\n  const closeModal = () => modalToggler(false);\n\n  const customerForm = useMemo(\n    () => !loading && <FormCustomerAdd customer={customer || null} closeModal={closeModal} />,\n    // eslint-disable-next-line\n    [customer, loading]\n  );\n\n  return (\n    <>\n      {open && (\n        <Modal\n          open={open}\n          onClose={closeModal}\n          aria-labelledby=\"modal-customer-add-label\"\n          aria-describedby=\"modal-customer-add-description\"\n          sx={{ '& .MuiPaper-root:focus': { outline: 'none' } }}\n        >\n          <MainCard\n            sx={{ width: `calc(100% - 48px)`, minWidth: 340, maxWidth: 880, height: 'auto', maxHeight: 'calc(100vh - 48px)' }}\n            modal\n            content={false}\n          >\n            <SimpleBar sx={{ maxHeight: `calc(100vh - 48px)`, '& .simplebar-content': { display: 'flex', flexDirection: 'column' } }}>\n              {loading ? (\n                <Box sx={{ p: 5 }}>\n                  <Stack direction=\"row\" justifyContent=\"center\">\n                    <CircularWithPath />\n                  </Stack>\n                </Box>\n              ) : (\n                customerForm\n              )}\n            </SimpleBar>\n          </MainCard>\n        </Modal>\n      )}\n    </>\n  );\n}\n\nCustomerModal.propTypes = { open: PropTypes.bool, modalToggler: PropTypes.func, customer: PropTypes.any };\n","size_bytes":2079},"src/sections/apps/invoice/InvoiceItem.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport Stack from '@mui/material/Stack';\nimport Skeleton from '@mui/material/Skeleton';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { getIn } from 'formik';\n\n// project-imports\nimport InvoiceField from './InvoiceField';\nimport AlertProductDelete from './AlertProductDelete';\n\nimport { ThemeMode } from 'config';\nimport { useGetInvoiceMaster } from 'api/invoice';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| INVOICE - ITEMS ||============================== //\n\nexport default function InvoiceItem({ id, name, description, qty, price, onDeleteItem, onEditItem, index, Blur, errors, touched }) {\n  const { invoiceMaster } = useGetInvoiceMaster();\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const [open, setOpen] = useState(false);\n  const handleModalClose = (status) => {\n    setOpen(false);\n    if (status) {\n      onDeleteItem(index);\n      openSnackbar({\n        open: true,\n        message: 'Product Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  const Name = `invoice_detail[${index}].name`;\n  const touchedName = getIn(touched, Name);\n  const errorName = getIn(errors, Name);\n\n  const textFieldItem = [\n    {\n      placeholder: 'Item name',\n      label: 'Item Name',\n      name: `invoice_detail.${index}.name`,\n      type: 'text',\n      id: id + '_name',\n      value: name,\n      errors: errorName,\n      touched: touchedName\n    },\n    {\n      placeholder: 'Description',\n      label: 'Description',\n      name: `invoice_detail.${index}.description`,\n      type: 'text',\n      id: id + '_description',\n      value: description\n    },\n    { placeholder: '', label: 'Qty', type: 'number', name: `invoice_detail.${index}.qty`, id: id + '_qty', value: qty },\n    { placeholder: '', label: 'price', type: 'number', name: `invoice_detail.${index}.price`, id: id + '_price', value: price }\n  ];\n\n  return (\n    <>\n      {textFieldItem.map((item) => {\n        return (\n          <InvoiceField\n            onEditItem={(event) => onEditItem(event)}\n            onBlur={(event) => Blur(event)}\n            cellData={{\n              placeholder: item.placeholder,\n              name: item.name,\n              type: item.type,\n              id: item.id,\n              value: item.value,\n              errors: item.errors,\n              touched: item.touched\n            }}\n            key={item.label}\n          />\n        );\n      })}\n      <TableCell>\n        <Stack direction=\"column\" justifyContent=\"flex-end\" alignItems=\"flex-end\" spacing={2}>\n          <Box sx={{ pl: 2 }}>\n            {invoiceMaster === undefined ? (\n              <Skeleton width={520} height={16} />\n            ) : (\n              <Typography>{invoiceMaster.country?.prefix + '' + (price * qty).toFixed(2)}</Typography>\n            )}\n          </Box>\n        </Stack>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Tooltip\n          componentsProps={{\n            tooltip: {\n              sx: {\n                backgroundColor: mode === ThemeMode.DARK ? theme.palette.grey[50] : theme.palette.grey[700],\n                opacity: 0.9\n              }\n            }\n          }}\n          title=\"Remove Item\"\n        >\n          <Button color=\"error\" onClick={() => setOpen(true)}>\n            <Trash />\n          </Button>\n        </Tooltip>\n      </TableCell>\n      <AlertProductDelete title={name} open={open} handleClose={handleModalClose} />\n    </>\n  );\n}\n\nInvoiceItem.propTypes = {\n  id: PropTypes.any,\n  name: PropTypes.any,\n  description: PropTypes.any,\n  qty: PropTypes.any,\n  price: PropTypes.any,\n  onDeleteItem: PropTypes.any,\n  onEditItem: PropTypes.any,\n  index: PropTypes.any,\n  Blur: PropTypes.any,\n  errors: PropTypes.any,\n  touched: PropTypes.any\n};\n","size_bytes":4225},"src/sections/widget/chart/NewUsers.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowUp } from 'iconsax-react';\n\n// ==============================|| CHART ||============================== //\n\nfunction DataChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-users-chart',\n      type: 'area',\n      sparkline: { enabled: true },\n      offsetX: -1\n    },\n    stroke: {\n      width: 1\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 1,\n        type: 'vertical',\n        inverseColors: false,\n        opacityFrom: 0.5,\n        opacityTo: 0\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    series: [\n      {\n        data: [1, 1, 60, 1, 1, 50, 1, 1, 40, 1, 1, 25, 0]\n      }\n    ],\n    tooltip: {\n      fixed: { enabled: false },\n      x: { show: false },\n      y: {\n        title: {\n          formatter: () => ''\n        }\n      }\n    }\n  };\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.success.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      data: [1, 1, 60, 1, 1, 50, 1, 1, 40, 1, 1, 25, 0]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={80} />;\n}\n\n// ==============================|| CHART WIDGETS - NEW USERS ||============================== //\n\nexport default function NewUsers() {\n  const [age, setAge] = useState('30');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">New Users</Typography>\n            <Box sx={{ minWidth: 120 }}>\n              <FormControl fullWidth size=\"small\">\n                <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n                  <MenuItem value={10}>Today</MenuItem>\n                  <MenuItem value={20}>Weekly</MenuItem>\n                  <MenuItem value={30}>Monthly</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <DataChart />\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n            <Typography variant=\"subtitle1\">$30,200</Typography>\n            <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5, fontWeight: 500 }}>\n              <ArrowUp size={14} style={{ transform: 'rotate(45deg)' }} />\n              30.6%\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            View more\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":3825},"src/contexts/AWSCognitoContext.jsx":{"content":"import { createContext, useEffect, useReducer } from 'react';\n\n// third-party\nimport { CognitoUser, CognitoUserPool, CognitoUserAttribute, AuthenticationDetails } from 'amazon-cognito-identity-js';\n\n// project-imports\nimport Loader from 'components/Loader';\nimport { LOGIN, LOGOUT } from 'contexts/auth-reducer/actions';\nimport authReducer from 'contexts/auth-reducer/auth';\n\n// constant\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\n\nexport const userPool = new CognitoUserPool({\n  UserPoolId: import.meta.env.VITE_APP_AWS_POOL_ID || '',\n  ClientId: import.meta.env.VITE_APP_AWS_APP_CLIENT_ID || ''\n});\n\nconst setSession = (serviceToken) => {\n  if (serviceToken) {\n    localStorage.setItem('serviceToken', serviceToken);\n  } else {\n    localStorage.removeItem('serviceToken');\n  }\n};\n\n// ==============================|| AWS COGNITO - CONTEXT & PROVIDER ||============================== //\n\nconst AWSCognitoContext = createContext(null);\n\nexport const AWSCognitoProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const serviceToken = window.localStorage.getItem('serviceToken');\n        if (serviceToken) {\n          setSession(serviceToken);\n          dispatch({\n            type: LOGIN,\n            payload: {\n              isLoggedIn: true,\n              user: {\n                name: 'Betty'\n              }\n            }\n          });\n        } else {\n          dispatch({\n            type: LOGOUT\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: LOGOUT\n        });\n      }\n    };\n\n    init();\n  }, []);\n\n  const login = async (email, password) => {\n    const usr = new CognitoUser({\n      Username: email,\n      Pool: userPool\n    });\n\n    const authData = new AuthenticationDetails({\n      Username: email,\n      Password: password\n    });\n\n    return new Promise((success, rej) => {\n      usr.authenticateUser(authData, {\n        onSuccess: (session) => {\n          setSession(session.getAccessToken().getJwtToken());\n\n          dispatch({\n            type: LOGIN,\n            payload: {\n              isLoggedIn: true,\n              user: {\n                email: authData.getUsername(),\n                name: 'John AWS'\n              }\n            }\n          });\n          success(session);\n        },\n        onFailure: (err) => {\n          rej(err);\n        },\n        newPasswordRequired: () => {\n          // // User was signed up by an admin and must provide new\n          // // password and required attributes, if any, to complete\n          // // authentication.\n          // // the api doesn't accept this field back\n          // delete userAttributes.email_verified;\n          // // unsure about this field, but I don't send this back\n          // delete userAttributes.phone_number_verified;\n          // // Get these details and call\n          // usr.completeNewPasswordChallenge(password, userAttributes, requiredAttributes);\n        }\n      });\n    });\n  };\n\n  const register = (email, password, firstName, lastName) =>\n    new Promise((success, rej) => {\n      userPool.signUp(\n        email,\n        password,\n        [\n          new CognitoUserAttribute({ Name: 'email', Value: email }),\n          new CognitoUserAttribute({ Name: 'name', Value: `${firstName} ${lastName}` })\n        ],\n        [],\n        async (err, result) => {\n          if (err) {\n            rej(err);\n            return;\n          }\n          localStorage.setItem('email', email);\n          success(result);\n        }\n      );\n    });\n\n  const logout = () => {\n    const loggedInUser = userPool.getCurrentUser();\n    if (loggedInUser) {\n      setSession(null);\n      loggedInUser.signOut();\n      dispatch({ type: LOGOUT });\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    const user = new CognitoUser({\n      Username: email,\n      Pool: userPool\n    });\n    user.forgotPassword({\n      onSuccess: function () {},\n      onFailure: function () {}\n    });\n  };\n\n  const resetPassword = async (verificationCode, newPassword) => {\n    const email = localStorage.getItem('email');\n    const user = new CognitoUser({\n      Username: email,\n      Pool: userPool\n    });\n    return new Promise((resolve, reject) => {\n      user.confirmPassword(verificationCode, newPassword, {\n        onSuccess: function (data) {\n          localStorage.removeItem('email');\n          resolve(data);\n        },\n        onFailure: function (error) {\n          reject(error.message);\n        }\n      });\n    });\n  };\n\n  const codeVerification = async (verificationCode) => {\n    const email = localStorage.getItem('email');\n    if (email === null || email === undefined) {\n      return new Promise((resolve, reject) => {\n        reject('Username and Pool information are required');\n      });\n    }\n\n    const user = new CognitoUser({\n      Username: email,\n      Pool: userPool\n    });\n\n    return new Promise((resolve, reject) => {\n      user.confirmRegistration(verificationCode, true, (error, result) => {\n        if (error) {\n          reject(error.message || JSON.stringify(error));\n          return;\n        } else {\n          localStorage.removeItem('email');\n          resolve(result);\n        }\n      });\n    });\n  };\n\n  const resendConfirmationCode = async () => {\n    const email = localStorage.getItem('email');\n    if (email === null || email === undefined) {\n      return new Promise((_, reject) => {\n        reject('Username and Pool information are required');\n      });\n    }\n\n    const user = new CognitoUser({\n      Username: email,\n      Pool: userPool\n    });\n\n    return new Promise((resolve, reject) => {\n      user.resendConfirmationCode((error, result) => {\n        if (error) {\n          reject(error.message || JSON.stringify(error));\n          return;\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  };\n\n  const updateProfile = () => {};\n\n  if (state.isInitialized !== undefined && !state.isInitialized) {\n    return <Loader />;\n  }\n\n  return (\n    <AWSCognitoContext.Provider\n      value={{ ...state, login, logout, register, forgotPassword, resetPassword, updateProfile, codeVerification, resendConfirmationCode }}\n    >\n      {children}\n    </AWSCognitoContext.Provider>\n  );\n};\n\nexport default AWSCognitoContext;\n","size_bytes":6377},"src/sections/maps/heatmap/map-style.js":{"content":"// ==============================|| HEATMAP - LAYER ||============================== //\n\nconst MAX_ZOOM_LEVEL = 9;\n\n// @ts-ignore\nconst heatmapLayer = {\n  id: 'heatmap',\n  maxzoom: MAX_ZOOM_LEVEL,\n  type: 'heatmap',\n  paint: {\n    'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n    'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n    'heatmap-color': [\n      'interpolate',\n      ['linear'],\n      ['heatmap-density'],\n      0,\n      'rgba(33,102,172,0)',\n      0.2,\n      'rgb(103,169,207)',\n      0.4,\n      'rgb(209,229,240)',\n      0.6,\n      'rgb(253,219,199)',\n      0.8,\n      'rgb(239,138,98)',\n      0.9,\n      'rgb(255,201,101)'\n    ],\n    'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, 20],\n    'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n  }\n};\n\nexport default heatmapLayer;\n","size_bytes":908},"src/sections/apps/e-commerce/checkout/BillingAddress.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport Skeleton from '@mui/material/Skeleton';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// project-imports\nimport AddressCard from './AddressCard';\nimport CartDiscount from './CartDiscount';\nimport OrderSummary from './OrderSummery';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { useGetAddress } from 'api/address';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { ArrowLeft2, CallCalling, Trash } from 'iconsax-react';\n\n// ==============================|| CHECKOUT - BILLING ADDRESS ||============================== //\n\nexport default function BillingAddress({ checkout, onBack, billingAddressHandler }) {\n  const [rows, setRows] = useState(checkout.products);\n  const { addressLoading, address } = useGetAddress();\n  useEffect(() => {\n    setRows(checkout.products);\n  }, [checkout.products]);\n\n  let addressResult = (\n    <>\n      {[1, 2].map((index) => (\n        <Grid key={index} item xs={12} lg={6}>\n          <MainCard>\n            <Grid container spacing={0.5}>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" justifyContent=\"space-between\">\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                    <Skeleton variant=\"text\" sx={{ fontSize: '0.875rem' }} width={150} />\n                    <Skeleton variant=\"text\" sx={{ fontSize: '0.75rem' }} width={50} />\n                  </Stack>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={2}>\n                  <Box>\n                    <Skeleton variant=\"text\" sx={{ fontSize: '0.875rem' }} />\n                    <Skeleton variant=\"text\" sx={{ fontSize: '0.875rem' }} width=\"40%\" />\n                  </Box>\n                  <Skeleton variant=\"text\" sx={{ fontSize: '0.75rem' }} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n      ))}\n    </>\n  );\n  if (address && !addressLoading) {\n    addressResult = address.map((address, index) => (\n      <Grid key={index} item xs={12} lg={6}>\n        <AddressCard address={address} billingAddressHandler={billingAddressHandler} />\n      </Grid>\n    ));\n  }\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={2} alignItems=\"flex-end\">\n          <MainCard title=\"Shipping information\">\n            <Stack rowGap={4}>\n              <Grid container spacing={2}>\n                {addressResult}\n              </Grid>\n              <Grid container rowSpacing={2}>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>First Name :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <TextField fullWidth placeholder=\"Enter your first name\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>Last Name :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <TextField fullWidth placeholder=\" Enter your last name\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>Email Id :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <TextField fullWidth type=\"email\" placeholder=\"Enter Email id\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>Date of Birth :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <Grid container spacing={2}>\n                        <Grid item xs={4}>\n                          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                            <TextField fullWidth placeholder=\"31\" />\n                            <Typography>/</Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                            <TextField fullWidth placeholder=\"12\" />\n                            <Typography>/</Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <TextField fullWidth placeholder=\"2021\" />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>Phone number :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <Stack direction=\"row\" spacing={2}>\n                        <Grid item xs={2}>\n                          <TextField placeholder=\"+91\" />\n                        </Grid>\n                        <Grid item xs={10}>\n                          <TextField\n                            fullWidth\n                            type=\"number\"\n                            placeholder=\"Enter the Phone number\"\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\" sx={{ opacity: 0.5, display: { xs: 'none', sm: 'flex' } }}>\n                                  <CallCalling />\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </Grid>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                    <Grid item xs={3}>\n                      <Stack>\n                        <InputLabel>City :</InputLabel>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <TextField fullWidth placeholder=\"Enter City name\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                    <Checkbox defaultChecked sx={{ p: 0 }} />\n                    <Typography>Save this new address for future shipping</Typography>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"flex-end\">\n                    <Button variant=\"outlined\" color=\"secondary\">\n                      Cancel\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Save\n                    </Button>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Stack>\n          </MainCard>\n          <Button variant=\"text\" color=\"secondary\" startIcon={<ArrowLeft2 />} onClick={onBack}>\n            <Typography variant=\"h6\" color=\"text.primary\">\n              Back to Cart\n            </Typography>\n          </Button>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <Stack spacing={3}>\n          <MainCard>\n            <CartDiscount />\n          </MainCard>\n          <Stack>\n            <MainCard title=\"Order Summery\" sx={{ borderRadius: '4px 4px 0 0', borderBottom: 'none' }} content={false}>\n              {rows.map((row, index) => (\n                <List\n                  key={index}\n                  component=\"nav\"\n                  sx={{\n                    '& .MuiListItemButton-root': {\n                      '& .MuiListItemSecondaryAction-root': {\n                        alignSelf: 'flex-start',\n                        ml: 1,\n                        position: 'relative',\n                        right: 'auto',\n                        top: 'auto',\n                        transform: 'none'\n                      },\n                      '& .MuiListItemAvatar-root': { mr: '7px' },\n                      py: 0.5,\n                      pl: '15px',\n                      pr: '8px'\n                    },\n                    p: 0\n                  }}\n                >\n                  <ListItemButton divider>\n                    <ListItemAvatar>\n                      <Avatar\n                        alt=\"Avatar\"\n                        size=\"lg\"\n                        variant=\"rounded\"\n                        color=\"secondary\"\n                        type=\"combined\"\n                        src={row.image ? getImageUrl(`thumbs/${row.image}`, ImagePath.ECOMMERCE) : ''}\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      disableTypography\n                      primary={\n                        <Typography\n                          component={Link}\n                          to={`/apps/e-commerce/product-details/${row.id}`}\n                          target=\"_blank\"\n                          variant=\"subtitle1\"\n                          color=\"text.primary\"\n                          sx={{ textDecoration: 'none' }}\n                        >\n                          {row.name}\n                        </Typography>\n                      }\n                      secondary={\n                        <Stack spacing={1}>\n                          <Typography color=\"text.secondary\">{row.description}</Typography>\n                          <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\n                            <Typography>${row.offerPrice}</Typography>\n                            <Typography color=\"text.secondary\">{row.quantity} items</Typography>\n                          </Stack>\n                        </Stack>\n                      }\n                    />\n                    <ListItemSecondaryAction>\n                      <IconButton size=\"medium\" color=\"secondary\" sx={{ opacity: 0.5, '&:hover': { bgcolor: 'transparent' } }}>\n                        <Trash style={{ color: 'secondary.main' }} />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItemButton>\n                </List>\n              ))}\n            </MainCard>\n            <OrderSummary checkout={checkout} show={false} />\n          </Stack>\n          <Button variant=\"contained\" fullWidth sx={{ textTransform: 'none' }} onClick={() => billingAddressHandler(null)}>\n            Process to Checkout\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n\nBillingAddress.propTypes = {\n  checkout: PropTypes.any,\n  onBack: PropTypes.func,\n  billingAddressHandler: PropTypes.func,\n  removeProduct: PropTypes.func\n};\n","size_bytes":12684},"src/pages/tables/blogs-sorting.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n// import Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\n// import makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\n// import LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { HeaderSort, SelectColumnSorting } from 'components/third-party/react-table';\nimport axiosInstance from 'api/axios-instance';\nimport { useNavigate } from 'react-router-dom';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const navigate = useNavigate();\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [sorting, setSorting] = useState([{ id: 'id', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={matchDownSM ? 'Blog' : 'Blog Table'}\n      content={false}\n      secondary={\n        <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1, sm: 2 }}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          {/* <CSVExport {...{ data: table.getSortedRowModel().rows.map((d) => d.original), headers, filename: 'sorting.csv' }} /> */}\n        </Stack>\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  onClick={() => navigate(`/forms/edit/blog/${row.original.id}`)} // Handle row click navigation\n                  style={{ cursor: 'pointer' }} // Make the row look clickable\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - SORTING ||============================== //\n\nexport default function SortingTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveBlogs = await axiosInstance.get('admin/blogs/list');\n        if (retrieveBlogs.status === 200) {\n          setData(retrieveBlogs.data);\n        } else {\n          console.error('Failed to retrieve blogs');\n        }\n      } catch (error) {\n        console.error('Error fetching blogs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      // {\n      //   header: 'Department',\n      //   accessorKey: 'department'\n      // },\n      {\n        header: 'Page ID',\n        accessorKey: 'id'\n      }\n    ],\n    []\n  );\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5999},"src/sections/components-overview/lists/NotificationList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AntAvatar from 'components/@extended/Avatar';\n\n// assets\nimport avatar1 from 'assets/images/users/avatar-1.png';\nimport avatar2 from 'assets/images/users/avatar-2.png';\nimport avatar3 from 'assets/images/users/avatar-3.png';\nimport avatar4 from 'assets/images/users/avatar-4.png';\n\n// sx styles\nconst actionSX = {\n  mt: '6px',\n  ml: 1,\n  top: 'auto',\n  right: 'auto',\n  alignSelf: 'flex-start',\n  transform: 'none'\n};\n\n// ==============================|| LIST - NOTIFICATION ||============================== //\n\nexport default function NotificationList() {\n  const notificationListCodeString = `<List\n  component=\"nav\"\n  sx={{\n    p: 0,\n    '& .MuiListItemButton-root': {\n      py: 0.5,\n      '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\n    }\n  }}\n>\n  <ListItemButton divider>\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={('/src/assets/images/users/avatar-1.png')} />\n    </ListItemAvatar>\n    <ListItemText\n      primary={\n        <Typography variant=\"h6\">\n          It&apos;s{' '}\n          <Typography component=\"span\" variant=\"subtitle1\">\n            Cristina danny&apos;s\n          </Typography>{' '}\n          birthday today.\n        </Typography>\n      }\n      secondary=\"2 min ago\"\n    />\n    <ListItemSecondaryAction>\n      <Typography variant=\"caption\" noWrap>\n        3:00 AM\n      </Typography>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n  <ListItemButton divider>\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={('/src/assets/images/users/avatar-2.png')} />\n    </ListItemAvatar>\n    <ListItemText\n      primary={\n        <Typography variant=\"h6\">\n          <Typography component=\"span\" variant=\"subtitle1\">\n            Aida Burg\n          </Typography>{' '}\n          commented your post.\n        </Typography>\n      }\n      secondary=\"5 August\"\n    />\n    <ListItemSecondaryAction>\n      <Typography variant=\"caption\" noWrap>\n        6:00 PM\n      </Typography>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n  <ListItemButton divider>\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={('/src/assets/images/users/avatar-3.png')} />\n    </ListItemAvatar>\n    <ListItemText\n      primary={\n        <Typography variant=\"h6\">\n          Profile Complete\n          <Typography component=\"span\" variant=\"subtitle1\">\n            60%\n          </Typography>{' '}\n        </Typography>\n      }\n      secondary=\"7 hours ago\"\n    />\n    <ListItemSecondaryAction>\n      <Typography variant=\"caption\" noWrap>\n        2:45 PM\n      </Typography>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n  <ListItemButton>\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={('/src/assets/images/users/avatar-4.png')} />\n    </ListItemAvatar>\n    <ListItemText\n      primary={\n        <Typography variant=\"h6\">\n          <Typography component=\"span\" variant=\"subtitle1\">\n            Cristina Danny\n          </Typography>{' '}\n          invited to join{' '}\n          <Typography component=\"span\" variant=\"subtitle1\">\n            Meeting.\n          </Typography>\n        </Typography>\n      }\n      secondary=\"Daily scrum meeting time\"\n    />\n    <ListItemSecondaryAction>\n      <Typography variant=\"caption\" noWrap>\n        9:10 PM\n      </Typography>\n    </ListItemSecondaryAction>\n  </ListItemButton>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={notificationListCodeString}>\n      <List\n        component=\"nav\"\n        sx={{\n          p: 0,\n          '& .MuiListItemButton-root': {\n            py: 0.5,\n            my: 0,\n            borderRadius: 0,\n            '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\n          }\n        }}\n      >\n        <ListItemButton divider>\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar1} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={\n              <Typography variant=\"h6\">\n                It&apos;s{' '}\n                <Typography component=\"span\" variant=\"subtitle1\">\n                  Cristina danny&apos;s\n                </Typography>{' '}\n                birthday today.\n              </Typography>\n            }\n            secondary=\"2 min ago\"\n          />\n          <ListItemSecondaryAction>\n            <Typography variant=\"caption\" noWrap>\n              3:00 AM\n            </Typography>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n        <ListItemButton divider>\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar2} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={\n              <Typography variant=\"h6\">\n                <Typography component=\"span\" variant=\"subtitle1\">\n                  Aida Burg\n                </Typography>{' '}\n                commented your post.\n              </Typography>\n            }\n            secondary=\"5 August\"\n          />\n          <ListItemSecondaryAction>\n            <Typography variant=\"caption\" noWrap>\n              6:00 PM\n            </Typography>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n        <ListItemButton divider>\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar3} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={\n              <Typography variant=\"h6\">\n                Profile Complete\n                <Typography component=\"span\" sx={{ mx: 1 }} variant=\"subtitle1\">\n                  60%\n                </Typography>{' '}\n              </Typography>\n            }\n            secondary=\"7 hours ago\"\n          />\n          <ListItemSecondaryAction>\n            <Typography variant=\"caption\" noWrap>\n              2:45 PM\n            </Typography>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n        <ListItemButton>\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar4} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={\n              <Typography variant=\"h6\">\n                <Typography component=\"span\" variant=\"subtitle1\">\n                  Cristina Danny\n                </Typography>{' '}\n                invited to join{' '}\n                <Typography component=\"span\" variant=\"subtitle1\">\n                  Meeting.\n                </Typography>\n              </Typography>\n            }\n            secondary=\"Daily scrum meeting time\"\n          />\n          <ListItemSecondaryAction>\n            <Typography variant=\"caption\" noWrap>\n              9:10 PM\n            </Typography>\n          </ListItemSecondaryAction>\n        </ListItemButton>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":7016},"src/sections/tables/react-table/RowDragDrop.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { DndProvider } from 'react-dnd';\nimport { isMobile } from 'react-device-detect';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\n\n// project-imports\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, DraggableRow } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ defaultColumns, defaultData }) {\n  const [columns] = useState(() => [...defaultColumns]);\n  const [data, setData] = useState([...defaultData]);\n\n  const reorderRow = (draggedRowIndex, targetRowIndex) => {\n    data.splice(targetRowIndex, 0, data.splice(draggedRowIndex, 1)[0]);\n    setData([...data]);\n  };\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.id.toString(), // good to have guaranteed unique row ids/keys for rendering\n    debugTable: true,\n    debugHeaders: true,\n    debugColumns: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title=\"Row Drag & Drop\"\n      content={false}\n      secondary={\n        <CSVExport {...{ data: table.getRowModel().flatRows.map((row) => row.original), headers, filename: 'row-dragable.csv' }} />\n      }\n    >\n      <ScrollX>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: '58px' } }}>\n                  <TableCell />\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <DraggableRow key={row.id} row={row} reorderRow={reorderRow}>\n                  <>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </>\n                </DraggableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| ROW - DRAG & DROP ||============================== //\n\nexport default function RowDragDrop() {\n  const data = useMemo(() => makeData(10), []);\n\n  const defaultColumns = [\n    {\n      id: 'id',\n      header: '#',\n      accessorKey: 'id'\n    },\n    {\n      id: 'firstName',\n      header: 'First Name',\n      accessorKey: 'firstName'\n    },\n    {\n      id: 'lastName',\n      header: 'Last Name',\n      accessorKey: 'lastName'\n    },\n    {\n      id: 'email',\n      header: 'Email',\n      accessorKey: 'email'\n    },\n    {\n      id: 'age',\n      header: 'Age',\n      accessorKey: 'age',\n      meta: {\n        className: 'cell-right'\n      }\n    },\n    {\n      id: 'visits',\n      header: 'Visits',\n      accessorKey: 'visits',\n      meta: {\n        className: 'cell-right'\n      }\n    },\n    {\n      id: 'status',\n      header: 'Status',\n      accessorKey: 'status',\n      cell: (props) => {\n        switch (props.getValue()) {\n          case 'Complicated':\n            return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n          case 'Relationship':\n            return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n          case 'Single':\n          default:\n            return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n        }\n      }\n    },\n    {\n      id: 'progress',\n      header: 'Profile Progress',\n      accessorKey: 'progress',\n      cell: (props) => <LinearWithLabel value={props.getValue()} sx={{ minWidth: 75 }} />\n    }\n  ];\n\n  return (\n    <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n      <ReactTable {...{ defaultColumns, defaultData: data }} />\n    </DndProvider>\n  );\n}\n\nRowDragDrop.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { defaultColumns: PropTypes.array, defaultData: PropTypes.array };\n","size_bytes":5381},"src/sections/forms/wizard/services-validation-wizard/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function AddServicesPages() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.post('services', data);\n      console.log('response:', response.statusText);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n      setData({});\n    }\n  };\n\n  return (\n    <MainCard title=\"Add service page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully added a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setData({});\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5945},"src/components/third-party/dropzone/Avatar.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha, styled, useTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useDropzone } from 'react-dropzone';\n\n// project-imports\nimport RejectionFiles from './RejectionFiles';\n\n// assets\nimport { Camera } from 'iconsax-react';\n\nconst RootWrapper = styled('div')(({ theme }) => ({\n  width: 124,\n  height: 124,\n  borderRadius: '50%',\n  border: '1px dashed',\n  borderColor: theme.palette.primary.main,\n  background: theme.palette.primary.lighter\n}));\n\nconst DropzoneWrapper = styled('div')({\n  zIndex: 0,\n  width: '100%',\n  height: '100%',\n  outline: 'none',\n  display: 'flex',\n  overflow: 'hidden',\n  borderRadius: '50%',\n  position: 'relative',\n  alignItems: 'center',\n  justifyContent: 'center',\n  '& > *': { width: '100%', height: '100%' },\n  '&:hover': { cursor: 'pointer', '& .placeholder': { zIndex: 9 } }\n});\n\nconst PlaceholderWrapper = styled('div')(({ theme }) => ({\n  display: 'flex',\n  position: 'absolute',\n  alignItems: 'center',\n  justifyContent: 'center',\n  color: theme.palette.text.secondary,\n  backgroundColor: alpha(theme.palette.primary.lighter, 0.75),\n  transition: theme.transitions.create('opacity', {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter\n  }),\n  '&:hover': { opacity: 0.85 }\n}));\n\n// ==============================|| UPLOAD - AVATAR ||============================== //\n\nexport default function AvatarUpload({ error, file, setFieldValue, sx }) {\n  const theme = useTheme();\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    accept: { 'image/*': [] },\n    multiple: false,\n    onDrop: (acceptedFiles) => {\n      setFieldValue(\n        'files',\n        acceptedFiles.map((file) => Object.assign(file, { preview: URL.createObjectURL(file) }))\n      );\n    }\n  });\n\n  const thumbs =\n    file &&\n    file.map((item) => (\n      <img\n        key={item.name}\n        alt={item.name}\n        src={item.preview}\n        onLoad={() => {\n          URL.revokeObjectURL(item.preview);\n        }}\n      />\n    ));\n\n  return (\n    <>\n      <RootWrapper sx={{ ...((isDragReject || error) && { borderColor: 'error.light' }), ...sx }}>\n        <DropzoneWrapper {...getRootProps()} sx={{ ...(isDragActive && { opacity: 0.6 }) }}>\n          <input {...getInputProps()} />\n          {thumbs}\n          <PlaceholderWrapper\n            className=\"placeholder\"\n            sx={{\n              ...(thumbs && { opacity: 0, color: 'common.white', bgcolor: 'secondary.darker' }),\n              ...((isDragReject || error) && { bgcolor: 'error.lighter' })\n            }}\n          >\n            <Stack spacing={0.5} alignItems=\"center\">\n              <Camera style={{ color: theme.palette.secondary.main, fontSize: '2rem' }} />\n              <Typography color=\"secondary\">{file ? 'Update' : 'Upload'}</Typography>\n            </Stack>\n          </PlaceholderWrapper>\n        </DropzoneWrapper>\n      </RootWrapper>\n      {fileRejections.length > 0 && <RejectionFiles fileRejections={fileRejections} />}\n    </>\n  );\n}\n\nAvatarUpload.propTypes = { error: PropTypes.any, file: PropTypes.any, setFieldValue: PropTypes.any, sx: PropTypes.any };\n","size_bytes":3306},"src/layout/Component/Drawer/Navigation/NavGroup.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport NavItem from './NavItem';\n\n// ==============================|| NAVIGATION - GROUP ||============================== //\n\nexport default function NavGroup({ item }) {\n  const navCollapse = item.children?.map((menu) => {\n    switch (menu.type) {\n      case 'item':\n        return <NavItem key={menu.id} item={menu} />;\n      default:\n        return (\n          <Typography key={menu.id} variant=\"h6\" color=\"error\" align=\"center\">\n            Fix - Group Collapse or Items\n          </Typography>\n        );\n    }\n  });\n\n  return (\n    <List\n      subheader={\n        item.title && (\n          <Typography variant=\"h5\" color=\"text.primary\" sx={{ mb: 1.5 }}>\n            {item.title}\n          </Typography>\n        )\n      }\n      sx={{ mb: 1 }}\n    >\n      {navCollapse}\n    </List>\n  );\n}\n\nNavGroup.propTypes = { item: PropTypes.any };\n","size_bytes":1001},"src/pages/components-overview/slider.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Slider from '@mui/material/Slider';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { VolumeHigh, VolumeMute } from 'iconsax-react';\n\nfunction valuetext(value) {\n  return `${value}°C`;\n}\n\nfunction valueLabelFormat(value) {\n  return marks.findIndex((mark) => mark.value === value) + 1;\n}\n\nconst minDistance = 10;\n\nconst marks = [\n  {\n    value: 0,\n    label: '0°C'\n  },\n  {\n    value: 20,\n    label: '20°C'\n  },\n  {\n    value: 37,\n    label: '37°C'\n  },\n  {\n    value: 100,\n    label: '100°C'\n  }\n];\n\n// ==============================|| COMPONENTS - SLIDER ||============================== //\n\nexport default function ComponentSlider() {\n  const theme = useTheme();\n\n  const [volume, setVolume] = useState(55);\n  const handleVolumeChange = (event, newVolume) => {\n    setVolume(newVolume);\n  };\n\n  const [range, setRange] = useState([20, 37]);\n  const handleRangeChange = (event, newRange) => {\n    setRange(newRange);\n  };\n\n  const [value1, setValue1] = useState([20, 55]);\n  const handleChange1 = (event, newValue, activeThumb) => {\n    if (!Array.isArray(newValue)) {\n      return;\n    }\n\n    if (activeThumb === 0) {\n      setValue1([Math.min(newValue[0], value1[1] - minDistance), value1[1]]);\n    } else {\n      setValue1([value1[0], Math.max(newValue[1], value1[0] + minDistance)]);\n    }\n  };\n\n  const [value2, setValue2] = useState([35, 76]);\n  const handleChange2 = (event, newValue, activeThumb) => {\n    if (!Array.isArray(newValue)) {\n      return;\n    }\n\n    if (newValue[1] - newValue[0] < minDistance) {\n      if (activeThumb === 0) {\n        const clamped = Math.min(newValue[0], 100 - minDistance);\n        setValue2([clamped, clamped + minDistance]);\n      } else {\n        const clamped = Math.max(newValue[1], minDistance);\n        setValue2([clamped - minDistance, clamped]);\n      }\n    } else {\n      setValue2(newValue);\n    }\n  };\n\n  const basicSliderCodeString = `<Slider defaultValue={35} />`;\n\n  const iconsSliderCodeString = `<Stack spacing={2} direction=\"row\" sx={{ mb: 1 }} alignItems=\"center\">\n  <VolumeMute style={{ color: volume <= 25 ? 'inherit' : theme.palette.text.secondary }} />\n  <Slider aria-label=\"Volume\" value={volume} onChange={handleVolumeChange} />\n  <VolumeHigh style={{ color: volume > 25 ? 'inherit' : theme.palette.text.secondary }} />\n</Stack>`;\n\n  const rangesSliderCodeString = `<Slider\n  getAriaLabel={() => 'Temperature range'}\n  value={range}\n  onChange={handleRangeChange}\n  valueLabelDisplay=\"auto\"\n  getAriaValueText={valuetext}\n/>`;\n\n  const labelSliderCodeString = `<Slider\n  sx={{ mt: 2.5 }}\n  aria-label=\"Always visible\"\n  defaultValue={80}\n  getAriaValueText={valuetext}\n  step={10}\n  valueLabelDisplay=\"on\"\n/>`;\n\n  const verticalSliderCodeString = `<Stack sx={{ height: 300 }} spacing={1} direction=\"row\">\n  <Slider aria-label=\"Temperature\" orientation=\"vertical\" getAriaValueText={valuetext} defaultValue={30} />\n  <Slider aria-label=\"Temperature\" orientation=\"vertical\" defaultValue={30} disabled />\n  <Slider\n    getAriaLabel={() => 'Temperature'}\n    orientation=\"vertical\"\n    getAriaValueText={valuetext}\n    defaultValue={[20, 37]}\n    marks={marks}\n    color=\"warning\"\n  />\n</Stack>`;\n\n  const disabledSliderCodeString = `<Slider defaultValue={50} disabled />`;\n\n  const sizeSliderCodeString = `<Slider size=\"small\" defaultValue={70} aria-label=\"Small\" valueLabelDisplay=\"auto\" />\n<Slider defaultValue={50} aria-label=\"Default\" valueLabelDisplay=\"auto\" />`;\n\n  const discreteSliderCodeString = `<Slider\n  aria-label=\"Temperature\"\n  defaultValue={60}\n  getAriaValueText={valuetext}\n  valueLabelDisplay=\"auto\"\n  step={10}\n  marks\n  min={10}\n  max={110}\n/>`;\n\n  const restrictedSliderCodeString = `<Slider\n  aria-label=\"Restricted values\"\n  defaultValue={20}\n  valueLabelFormat={valueLabelFormat}\n  getAriaValueText={valuetext}\n  step={null}\n  valueLabelDisplay=\"auto\"\n  marks={marks}\n/>`;\n\n  const minSliderCodeString = `<Slider\n  getAriaLabel={() => 'Minimum distance'}\n  value={value1}\n  onChange={handleChange1}\n  valueLabelDisplay=\"auto\"\n  getAriaValueText={valuetext}\n  disableSwap\n/>\n<Slider\n  getAriaLabel={() => 'Minimum distance shift'}\n  value={value2}\n  onChange={handleChange2}\n  valueLabelDisplay=\"auto\"\n  getAriaValueText={valuetext}\n  disableSwap\n/>`;\n\n  const colorsSliderCodeString = `<Slider defaultValue={65} />\n<Slider defaultValue={50} color=\"secondary\" />\n<Slider defaultValue={95} color=\"success\" />\n<Slider defaultValue={30} color=\"warning\" />\n<Slider defaultValue={85} color=\"info\" />\n<Slider defaultValue={5} color=\"error\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Slider\"\n        caption=\"Sliders allow users to make selections from a range of values.\"\n        directory=\"src/pages/components-overview/slider\"\n        link=\"https://mui.com/material-ui/react-slider/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={2.5}>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={2.5}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicSliderCodeString}>\n                <Slider defaultValue={35} />\n              </MainCard>\n              <MainCard title=\"With Icons\" codeString={iconsSliderCodeString}>\n                <Stack spacing={2} direction=\"row\" sx={{ mb: 1 }} alignItems=\"center\">\n                  <VolumeMute style={{ color: volume <= 25 ? 'inherit' : theme.palette.text.secondary }} />\n                  <Slider aria-label=\"Volume\" value={volume} onChange={handleVolumeChange} />\n                  <VolumeHigh style={{ color: volume > 25 ? 'inherit' : theme.palette.text.secondary }} />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Range\" codeString={rangesSliderCodeString}>\n                <Slider\n                  getAriaLabel={() => 'Temperature range'}\n                  value={range}\n                  onChange={handleRangeChange}\n                  valueLabelDisplay=\"auto\"\n                  getAriaValueText={valuetext}\n                />\n              </MainCard>\n              <MainCard title=\"With Label\" codeString={labelSliderCodeString}>\n                <Slider\n                  sx={{ mt: 2.5 }}\n                  aria-label=\"Always visible\"\n                  defaultValue={80}\n                  getAriaValueText={valuetext}\n                  step={10}\n                  valueLabelDisplay=\"on\"\n                />\n              </MainCard>\n              <MainCard title=\"Vertical\" codeString={verticalSliderCodeString}>\n                <Stack sx={{ height: 300 }} spacing={1} direction=\"row\">\n                  <Slider aria-label=\"Temperature\" orientation=\"vertical\" getAriaValueText={valuetext} defaultValue={30} />\n                  <Slider aria-label=\"Temperature\" orientation=\"vertical\" defaultValue={30} disabled />\n                  <Slider\n                    getAriaLabel={() => 'Temperature'}\n                    orientation=\"vertical\"\n                    getAriaValueText={valuetext}\n                    defaultValue={[20, 37]}\n                    marks={marks}\n                    color=\"warning\"\n                  />\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={2.5}>\n              <MainCard title=\"Disabled\" codeString={disabledSliderCodeString}>\n                <Slider defaultValue={50} disabled />\n              </MainCard>\n              <MainCard title=\"Sizes\" codeString={sizeSliderCodeString}>\n                <Slider size=\"small\" defaultValue={70} aria-label=\"Small\" valueLabelDisplay=\"auto\" />\n                <Slider defaultValue={50} aria-label=\"Default\" valueLabelDisplay=\"auto\" />\n              </MainCard>\n              <MainCard title=\"Discrete\" codeString={discreteSliderCodeString}>\n                <Slider\n                  aria-label=\"Temperature\"\n                  defaultValue={60}\n                  getAriaValueText={valuetext}\n                  valueLabelDisplay=\"auto\"\n                  step={10}\n                  marks\n                  min={10}\n                  max={110}\n                />\n              </MainCard>\n              <MainCard title=\"Restricted values\" codeString={restrictedSliderCodeString}>\n                <Slider\n                  aria-label=\"Restricted values\"\n                  defaultValue={20}\n                  valueLabelFormat={valueLabelFormat}\n                  getAriaValueText={valuetext}\n                  step={null}\n                  valueLabelDisplay=\"auto\"\n                  marks={marks}\n                />\n              </MainCard>\n              <MainCard title=\"Minimum distance\" codeString={minSliderCodeString}>\n                <Slider\n                  getAriaLabel={() => 'Minimum distance'}\n                  value={value1}\n                  onChange={handleChange1}\n                  valueLabelDisplay=\"auto\"\n                  getAriaValueText={valuetext}\n                  disableSwap\n                />\n                <Slider\n                  getAriaLabel={() => 'Minimum distance shift'}\n                  value={value2}\n                  onChange={handleChange2}\n                  valueLabelDisplay=\"auto\"\n                  getAriaValueText={valuetext}\n                  disableSwap\n                />\n              </MainCard>\n              <MainCard title=\"Colors\" codeString={colorsSliderCodeString}>\n                <Slider defaultValue={65} />\n                <Slider defaultValue={50} color=\"secondary\" />\n                <Slider defaultValue={95} color=\"success\" />\n                <Slider defaultValue={30} color=\"warning\" />\n                <Slider defaultValue={85} color=\"info\" />\n                <Slider defaultValue={5} color=\"error\" />\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":10280},"src/pages/components-overview/pagination.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Pagination from '@mui/material/Pagination';\nimport FormControl from '@mui/material/FormControl';\nimport TablePagination from '@mui/material/TablePagination';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ==============================|| COMPONENTS - PAGINATION ||============================== //\n\nexport default function ComponentPagination() {\n  // default table pagination\n  const [page, setPage] = useState(2);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // custom pagination\n  const [rows, setRows] = useState(10);\n  const [open, setOpen] = useState(false);\n\n  const handleChange = (event) => {\n    setRows(+event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [goto, setGoto] = useState(1);\n  const handleChangePagination = (event, value) => {\n    setCurrentPage(value);\n  };\n\n  const handleChangeGoto = (event) => {\n    if (+event.target.value > 0 && +event.target.value <= 100 / rows) {\n      setGoto(+event.target.value);\n      setCurrentPage(+event.target.value);\n    } else {\n      setGoto('');\n    }\n  };\n\n  const basicPaginationCodeString = `<Pagination count={10} defaultPage={1} color=\"primary\" />\n<Pagination count={10} defaultPage={2} variant=\"contained\" color=\"primary\" />\n<Pagination count={10} defaultPage={3} variant=\"outlined\" color=\"secondary\" />\n<Pagination count={10} defaultPage={4} disabled />`;\n\n  const sizePaginationCodeString = `<Pagination count={10} defaultPage={1} size=\"small\" color=\"primary\" />\n<Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" />\n<Pagination count={10} defaultPage={3} size=\"large\" variant=\"contained\" color=\"secondary\" />`;\n\n  const rangePaginationCodeString = `<Pagination count={11} defaultPage={1} siblingCount={0} color=\"primary\" />\n<Pagination count={11} defaultPage={2} color=\"primary\" />\n<Pagination count={11} defaultPage={3} color=\"primary\" variant=\"combined\" />\n<Pagination count={11} defaultPage={4} siblingCount={0} boundaryCount={2} variant=\"outlined\" color=\"primary\" />\n<Pagination count={11} defaultPage={5} boundaryCount={2} variant=\"contained\" color=\"primary\" />`;\n\n  const tablesPaginationCodeString = `<Pagination\n  count={100 / rows}\n  page={currentPage}\n  onChange={handleChangePagination}\n  color=\"primary\"\n  variant=\"combined\"\n/>\n<FormControl sx={{ m: 1, minWidth: 120 }}>\n  <Select\n    id=\"demo-controlled-open-select\"\n    open={open}\n    onClose={handleClose}\n    onOpen={handleOpen}\n    value={rows}\n    onChange={handleChange}\n    size=\"small\"\n    sx={{ '& .MuiSelect-select': { py: 0.75, px: 1.25 } }}\n  >\n    <MenuItem value={5}>5 / page</MenuItem>\n    <MenuItem value={10}>10 / page</MenuItem>\n    <MenuItem value={25}>25 / page</MenuItem>\n    <MenuItem value={50}>50 / page</MenuItem>\n    <MenuItem value={100}>100 / page</MenuItem>\n  </Select>\n</FormControl>\n<Stack direction=\"row\" spacing={1} alignItems=\"center\">\n  <Typography variant=\"h6\">Go to</Typography>\n  <TextField\n    id=\"outlined-name\"\n    placeholder=\"Page\"\n    value={goto}\n    onChange={handleChangeGoto}\n    size=\"small\"\n    sx={{ '& .MuiOutlinedInput-input': { py: 0.75, px: 1.25, width: 50 } }}\n  />\n</Stack>`;\n\n  const variantsPaginationCodeString = `<Pagination count={10} defaultPage={1} color=\"primary\" />\n<Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" />\n<Pagination count={10} defaultPage={3} variant=\"contained\" color=\"primary\" />\n<Pagination count={10} defaultPage={4} variant=\"combined\" color=\"primary\" />`;\n\n  const circularPaginationCodeString = `<Pagination count={10} defaultPage={1} color=\"primary\" shape=\"circular\" />\n<Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" shape=\"circular\" />\n<Pagination count={10} defaultPage={3} variant=\"contained\" color=\"primary\" shape=\"circular\" />\n<Pagination count={10} defaultPage={4} variant=\"combined\" color=\"primary\" shape=\"circular\" />`;\n\n  const buttonsPaginationCodeString = `<Pagination count={10} showFirstButton showLastButton variant=\"combined\" color=\"primary\" />\n<Pagination count={10} hidePrevButton hideNextButton variant=\"contained\" shape=\"circular\" />`;\n\n  const colorsPaginationCodeString = `<Pagination count={10} defaultPage={6} color=\"primary\" />\n<Pagination count={10} defaultPage={6} variant=\"outlined\" color=\"secondary\" />\n<Pagination count={10} defaultPage={6} variant=\"contained\" color=\"success\" />\n<Pagination count={10} defaultPage={6} variant=\"combined\" color=\"warning\" />\n<Pagination count={10} defaultPage={6} variant=\"outlined\" color=\"info\" shape=\"circular\" />\n<Pagination count={10} defaultPage={6} variant=\"contained\" color=\"error\" shape=\"circular\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Pagination\"\n        caption=\"The Pagination component enables the user to select a specific page from a range of pages.\"\n        directory=\"src/pages/components-overview/pagination\"\n        link=\"https://mui.com/material-ui/react-pagination/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicPaginationCodeString}>\n                <Stack spacing={2}>\n                  <Pagination count={10} defaultPage={1} color=\"primary\" />\n                  <Pagination count={10} defaultPage={2} variant=\"contained\" color=\"primary\" />\n                  <Pagination count={10} defaultPage={3} variant=\"outlined\" color=\"secondary\" />\n                  <Pagination count={10} defaultPage={4} disabled />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Size\" codeString={sizePaginationCodeString}>\n                <Stack spacing={2}>\n                  <Pagination count={10} defaultPage={1} size=\"small\" color=\"primary\" />\n                  <Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" />\n                  <Pagination count={10} defaultPage={3} size=\"large\" variant=\"contained\" color=\"secondary\" />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Ranges\" codeString={rangePaginationCodeString}>\n                <Stack spacing={2}>\n                  <Pagination count={11} defaultPage={1} siblingCount={0} color=\"primary\" />\n                  <Pagination count={11} defaultPage={2} color=\"primary\" />\n                  <Pagination count={11} defaultPage={3} color=\"primary\" variant=\"combined\" />\n                  <Pagination count={11} defaultPage={4} siblingCount={0} boundaryCount={2} variant=\"outlined\" color=\"primary\" />\n                  <Pagination count={11} defaultPage={5} boundaryCount={2} variant=\"contained\" color=\"primary\" />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Tables\" codeString={tablesPaginationCodeString}>\n                <>\n                  <Grid container alignItems=\"center\" justifyContent=\"flex-end\" spacing={0.5}>\n                    <Grid item>\n                      <Pagination\n                        count={100 / rows}\n                        page={currentPage}\n                        onChange={handleChangePagination}\n                        color=\"primary\"\n                        variant=\"combined\"\n                      />\n                    </Grid>\n                    <Grid item>\n                      <FormControl sx={{ m: 1, minWidth: 120 }}>\n                        <Select\n                          id=\"demo-controlled-open-select\"\n                          open={open}\n                          onClose={handleClose}\n                          onOpen={handleOpen}\n                          value={rows}\n                          onChange={handleChange}\n                          size=\"small\"\n                          sx={{ '& .MuiSelect-select': { py: 0.75, px: 1.25 } }}\n                        >\n                          <MenuItem value={5}>5 / page</MenuItem>\n                          <MenuItem value={10}>10 / page</MenuItem>\n                          <MenuItem value={25}>25 / page</MenuItem>\n                          <MenuItem value={50}>50 / page</MenuItem>\n                          <MenuItem value={100}>100 / page</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Typography variant=\"h6\">Go to</Typography>\n                        <TextField\n                          id=\"outlined-name\"\n                          placeholder=\"Page\"\n                          value={goto}\n                          onChange={handleChangeGoto}\n                          size=\"small\"\n                          sx={{ '& .MuiOutlinedInput-input': { py: 0.75, px: 1.25, width: 50 } }}\n                        />\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                  <TablePagination\n                    component=\"div\"\n                    count={100}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    rowsPerPage={rowsPerPage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                  />\n                </>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Variants\" codeString={variantsPaginationCodeString}>\n                <Stack spacing={2}>\n                  <Pagination count={10} defaultPage={1} color=\"primary\" />\n                  <Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" />\n                  <Pagination count={10} defaultPage={3} variant=\"contained\" color=\"primary\" />\n                  <Pagination count={10} defaultPage={4} variant=\"combined\" color=\"primary\" />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Circular\" codeString={circularPaginationCodeString}>\n                <Stack spacing={2}>\n                  <Pagination count={10} defaultPage={1} color=\"primary\" shape=\"circular\" />\n                  <Pagination count={10} defaultPage={2} variant=\"outlined\" color=\"primary\" shape=\"circular\" />\n                  <Pagination count={10} defaultPage={3} variant=\"contained\" color=\"primary\" shape=\"circular\" />\n                  <Pagination count={10} defaultPage={4} variant=\"combined\" color=\"primary\" shape=\"circular\" />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Buttons\" codeString={buttonsPaginationCodeString}>\n                <Stack spacing={2}>\n                  <Stack spacing={2}>\n                    <Pagination count={10} showFirstButton showLastButton variant=\"combined\" color=\"primary\" />\n                    <Pagination count={10} hidePrevButton hideNextButton variant=\"contained\" shape=\"circular\" />\n                  </Stack>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Colors\" codeString={colorsPaginationCodeString}>\n                <Stack spacing={2}>\n                  <Stack spacing={2}>\n                    <Pagination count={10} defaultPage={6} color=\"primary\" />\n                    <Pagination count={10} defaultPage={6} variant=\"outlined\" color=\"secondary\" />\n                    <Pagination count={10} defaultPage={6} variant=\"contained\" color=\"success\" />\n                    <Pagination count={10} defaultPage={6} variant=\"combined\" color=\"warning\" />\n                    <Pagination count={10} defaultPage={6} variant=\"outlined\" color=\"info\" shape=\"circular\" />\n                    <Pagination count={10} defaultPage={6} variant=\"contained\" color=\"error\" shape=\"circular\" />\n                  </Stack>\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":12789},"src/utils/route-guard/GuestGuard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// project-imports\nimport { APP_DEFAULT_PATH } from 'config';\nimport useAuth from 'hooks/useAuth';\n\n// ==============================|| GUEST GUARD ||============================== //\n\nexport default function GuestGuard({ children }) {\n  const { isLoggedIn } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate(location?.state?.from ? location?.state?.from : APP_DEFAULT_PATH, {\n        state: { from: '' },\n        replace: true\n      });\n    }\n  }, [isLoggedIn, navigate, location]);\n\n  return children;\n}\n\nGuestGuard.propTypes = { children: PropTypes.any };\n","size_bytes":781},"src/layout/Dashboard/Header/HeaderContent/FullScreen.jsx":{"content":"import { useCallback, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\n\n// project import\nimport IconButton from 'components/@extended/IconButton';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Maximize1 } from 'iconsax-react';\n\n// ==============================|| HEADER CONTENT - FULLSCREEN ||============================== //\n\nexport default function FullScreen() {\n  const theme = useTheme();\n\n  const [open, setOpen] = useState(false);\n\n  const handleToggle = useCallback(() => {\n    setOpen((prevOpen) => !prevOpen);\n    if (document && !document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n    }\n  }, []);\n\n  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 0.75 }}>\n      <Tooltip title={open ? 'Exit Fullscreen' : 'Fullscreen'}>\n        <IconButton\n          color=\"secondary\"\n          variant=\"light\"\n          onClick={handleToggle}\n          size=\"large\"\n          sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, p: 1 }}\n        >\n          <Maximize1 variant=\"Bulk\" {...(open && { style: { transform: 'rotate(180deg)' } })} />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n}\n","size_bytes":1574},"src/components/cards/e-commerce/ProductCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Divider from '@mui/material/Divider';\nimport Rating from '@mui/material/Rating';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport SkeletonProductPlaceholder from 'components/cards/skeleton/ProductPlaceholder';\n\nimport { useGetCart, addToCart } from 'api/cart';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Heart } from 'iconsax-react';\n\n// ==============================|| PRODUCT CARD ||============================== //\n\nexport default function ProductCard({ id, color, name, brand, offer, isStock, image, description, offerPrice, salePrice, rating }) {\n  const theme = useTheme();\n\n  const [wishlisted, setWishlisted] = useState(false);\n  const { cart } = useGetCart();\n\n  const addCart = () => {\n    addToCart({ id, name, image, salePrice, offerPrice, color, size: 8, quantity: 1, description }, cart.products);\n    openSnackbar({\n      open: true,\n      message: 'Add To Cart Success',\n      variant: 'alert',\n\n      alert: {\n        color: 'success'\n      }\n    });\n  };\n\n  const addToFavourite = () => {\n    setWishlisted(!wishlisted);\n    openSnackbar({\n      open: true,\n      message: 'Added to favourites',\n      variant: 'alert',\n\n      alert: {\n        color: 'success'\n      }\n    });\n  };\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  if (loading) return <SkeletonProductPlaceholder />;\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        '&:hover': {\n          transform: 'scale3d(1.02, 1.02, 1)',\n          transition: 'all .4s ease-in-out'\n        }\n      }}\n    >\n      <Box sx={{ width: 250, m: 'auto' }}>\n        <CardMedia\n          sx={{ height: 250, textDecoration: 'none', opacity: isStock ? 1 : 0.25 }}\n          image={image && getImageUrl(`${image}`, ImagePath.ECOMMERCE)}\n          component={Link}\n          to={`/apps/e-commerce/product-details/${id}`}\n        />\n      </Box>\n      <Stack\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        sx={{ width: '100%', position: 'absolute', top: 0, pt: 1.75, pl: 2, pr: 1 }}\n      >\n        {!isStock && <Chip variant=\"light\" color=\"error\" size=\"small\" label=\"Sold out\" />}\n        {offer && <Chip label={offer} variant=\"combined\" color=\"success\" size=\"small\" />}\n        <IconButton color=\"secondary\" sx={{ ml: 'auto', '&:hover': { bgcolor: 'transparent' } }} onClick={addToFavourite}>\n          {wishlisted ? (\n            <Heart variant=\"Bold\" style={{ fontSize: '1.15rem', color: theme.palette.error.main }} />\n          ) : (\n            <Heart style={{ fontSize: '1.15rem' }} />\n          )}\n        </IconButton>\n      </Stack>\n      <Divider />\n      <CardContent sx={{ p: 2 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Stack>\n              <Typography\n                component={Link}\n                to={`/apps/e-commerce/product-details/${id}`}\n                color=\"text.primary\"\n                variant=\"h5\"\n                sx={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', display: 'block', textDecoration: 'none' }}\n              >\n                {name}\n              </Typography>\n              <Typography variant=\"h6\" color=\"text.secondary\">\n                {brand}\n              </Typography>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-end\" flexWrap=\"wrap\" rowGap={1.75}>\n              <Stack>\n                <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                  <Typography variant=\"h5\">${offerPrice}</Typography>\n                  {salePrice && (\n                    <Typography variant=\"h6\" color=\"text.secondary\" sx={{ textDecoration: 'line-through' }}>\n                      ${salePrice}\n                    </Typography>\n                  )}\n                </Stack>\n                <Stack direction=\"row\" alignItems=\"flex-start\">\n                  <Rating precision={0.5} name=\"size-small\" value={rating} size=\"small\" readOnly />\n                  <Typography variant=\"caption\">({rating?.toFixed(1)})</Typography>\n                </Stack>\n              </Stack>\n\n              <Button variant=\"contained\" onClick={addCart} disabled={!isStock}>\n                {!isStock ? 'Sold Out' : 'Add to Cart'}\n              </Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n\nProductCard.propTypes = {\n  id: PropTypes.any,\n  color: PropTypes.any,\n  name: PropTypes.any,\n  brand: PropTypes.any,\n  offer: PropTypes.any,\n  isStock: PropTypes.any,\n  image: PropTypes.any,\n  description: PropTypes.any,\n  offerPrice: PropTypes.any,\n  salePrice: PropTypes.any,\n  rating: PropTypes.any\n};\n","size_bytes":5454},"src/pages/components-overview/select.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicSelect from 'sections/components-overview/select/BasicSelect';\nimport HelperTextSelect from 'sections/components-overview/select/HelperTextSelect';\nimport AutoWidthSelect from 'sections/components-overview/select/AutoWidthSelect';\nimport MultipleSelect from 'sections/components-overview/select/MultipleSelect';\nimport CheckmarksSelect from 'sections/components-overview/select/CheckmarksSelect';\nimport ChipSelect from 'sections/components-overview/select/ChipSelect';\n\n// ==============================|| COMPONENTS - SELECT ||============================== //\n\nexport default function ComponentSelect() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Select\"\n        caption=\"Select components are used for collecting user provided information from a list of options.\"\n        directory=\"src/pages/components-overview/select\"\n        link=\"https://mui.com/material-ui/react-select/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <BasicSelect />\n              <HelperTextSelect />\n              <AutoWidthSelect />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <MultipleSelect />\n              <CheckmarksSelect />\n              <ChipSelect />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1819},"src/sections/landing/Header.jsx":{"content":"import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Rating from '@mui/material/Rating';\nimport Tooltip from '@mui/material/Tooltip';\nimport Container from '@mui/material/Container';\nimport CardMedia from '@mui/material/CardMedia';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Menu from '@mui/material/Menu';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { motion } from 'framer-motion';\n\n// assets\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport techBootstrap from 'assets/images/landing/tech-bootstrap.svg';\nimport techReact from 'assets/images/landing/tech-react.svg';\nimport techAngular from 'assets/images/landing/tech-angular.svg';\nimport techCodeigniter from 'assets/images/landing/tech-codeigniter.svg';\nimport techNet from 'assets/images/landing/tech-net.svg';\nimport techFigma from 'assets/images/landing/tech-figma.svg';\nimport techVue from 'assets/images/landing/tech-vuetify.svg';\nimport techVuelaravel from 'assets/images/landing/tech-l+v.svg';\nimport techNextJS from 'assets/images/landing/tech-nextjs.svg';\nimport techLaravelBootstrap from 'assets/images/landing/tech-Laravel+Bootstrap.svg';\nimport techDjango from 'assets/images/landing/tech-Django.svg';\nimport techFlask from 'assets/images/landing/tech-Flask.svg';\nimport techNodeJs from 'assets/images/landing/tech-Node-js.svg';\nimport techSvelteKit from 'assets/images/landing/tech-SvelteKit.svg';\n\n// ==============================|| LANDING - HERO PAGE ||============================== //\n\nexport default function HeroPage() {\n  const theme = useTheme();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  let value = window.location.search;\n  const params = new URLSearchParams(value);\n  const ispValue = params.get('isp');\n  const ispValueAvailable = ispValue !== null && parseInt(ispValue) === 1;\n\n  const items = [\n    {\n      label: 'Bootstrap',\n      image: techBootstrap,\n      url: 'https://ableproadmin.com/dashboard/index.html',\n      target: '_blank',\n      tooltipTitle: 'Bootstrap'\n    },\n    {\n      label: 'React MUI',\n      image: techReact,\n      url: '/login',\n      target: '_blank',\n      tooltipTitle: 'React MUI'\n    },\n    {\n      label: 'Angular',\n      image: techAngular,\n      url: 'https://ableproadmin.com/angular/default/dashboard/default',\n      target: '_blank',\n      tooltipTitle: 'Angular'\n    },\n    {\n      label: 'CodeIgniter',\n      image: techCodeigniter,\n      url: 'https://ableproadmin.com/codeigniter/default/public/dashboard-default',\n      target: '_blank',\n      tooltipTitle: 'CodeIgniter'\n    },\n    {\n      label: 'ASP.net',\n      image: techNet,\n      url: 'https://able-pro.azurewebsites.net/Dashboard/Index',\n      target: '_blank',\n      tooltipTitle: 'ASP.net'\n    },\n    {\n      label: 'Next js',\n      image: techNextJS,\n      url: 'https://able-pro.azurewebsites.net/Dashboard/Index',\n      target: '_blank',\n      tooltipTitle: 'Next js'\n    },\n    {\n      label: 'Vue',\n      image: techVue,\n      url: 'https://ableproadmin.com/vue/dashboard/default',\n      target: '_blank',\n      tooltipTitle: 'Vue'\n    },\n    {\n      label: 'Vuetify Laravel',\n      image: techVuelaravel,\n      url: 'https://phplaravel-207002-4524103.cloudwaysapps.com/build/dashboards/default',\n      target: '_blank',\n      tooltipTitle: 'Vuetify Laravel'\n    },\n    {\n      label: 'Laravel Bootstrap',\n      image: techLaravelBootstrap,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Django',\n      image: techDjango,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Node JS',\n      image: techNodeJs,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Flask',\n      image: techFlask,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'SvelteKit',\n      image: techSvelteKit,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Figma',\n      image: techFigma,\n      url: 'https://www.figma.com/file/6XqmRhRmkr33w0EFD49acY/Able-Pro--v9.0-Figma-Preview?type=design&mode=design&t=4FS2Lw6WxsmJ3RLm-0',\n      target: '_blank',\n      tooltipTitle: 'Figma'\n    }\n  ];\n\n  const listItems = items.map((item, index) => {\n    // Construct the final URL\n    const finalUrl = item.url !== '#!' && ispValueAvailable ? `${item.url}?isp=1` : item.url;\n    return (\n      <ListItemButton\n        key={index}\n        component={item.label === 'React MUI' ? RouterLink : 'a'}\n        {...(item.label === 'React MUI' ? { to: finalUrl } : { href: finalUrl })}\n        target={item.target}\n      >\n        <Tooltip title={item.tooltipTitle} placement=\"bottom\">\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <ListItemAvatar\n              sx={{ minWidth: 'auto', marginRight: 1, filter: item.tooltipTitle === 'Live Preview Not Available' ? 'grayscale(1)' : '' }}\n            >\n              <CardMedia component=\"img\" image={item.image} sx={{ width: '30px' }} />\n            </ListItemAvatar>\n            <ListItemText primary={item.label} />\n          </div>\n        </Tooltip>\n      </ListItemButton>\n    );\n  });\n\n  const techBottom = items.map((item, index) => {\n    const finalUrl = item.url !== '#!' && ispValue !== null && parseInt(ispValue) === 1 ? `${item.url}?isp=1` : item.url;\n    return (\n      <Grid item key={index}>\n        <motion.div\n          initial={{ opacity: 0, translateY: 550 }}\n          animate={{ opacity: 1, translateY: 0 }}\n          transition={{ type: 'spring', stiffness: 150, damping: 30, delay: 0.8 }}\n        >\n          <Tooltip title={'click to Preview ' + item.tooltipTitle}>\n            <Link\n              component={item.label === 'React MUI' ? RouterLink : Link}\n              {...(item.label === 'React MUI' ? { to: finalUrl } : { href: finalUrl })}\n              target={item.target}\n            >\n              <CardMedia component=\"img\" image={item.image} sx={{ width: 'auto' }} />\n            </Link>\n          </Tooltip>\n        </motion.div>\n      </Grid>\n    );\n  });\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <Box sx={{ minHeight: '100vh', position: 'relative', pb: 12.5, pt: 10, display: 'flex', alignItems: 'center' }}>\n      <Container>\n        <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={2} sx={{ pt: { md: 0, xs: 10 }, pb: { md: 0, xs: 22 } }}>\n          <Grid item xs={12} md={9}>\n            <Grid container spacing={3} sx={{ textAlign: 'center' }}>\n              <Grid item xs={12}>\n                <motion.div\n                  initial={{ opacity: 0, translateY: 550 }}\n                  animate={{ opacity: 1, translateY: 0 }}\n                  transition={{\n                    type: 'spring',\n                    stiffness: 150,\n                    damping: 30\n                  }}\n                >\n                  <Typography\n                    variant=\"h1\"\n                    sx={{\n                      fontSize: { xs: '1.825rem', sm: '2rem', md: '3.4375rem' },\n                      fontWeight: 700,\n                      lineHeight: 1.2\n                    }}\n                  >\n                    Explore One of the{' '}\n                    <Typography\n                      variant=\"h1\"\n                      component=\"span\"\n                      sx={{\n                        fontSize: 'inherit',\n                        background: 'linear-gradient(90deg, rgb(37, 161, 244), rgb(249, 31, 169), rgb(37, 161, 244)) 0 0 / 400% 100%',\n                        color: 'transparent',\n                        WebkitBackgroundClip: 'text',\n                        backgroundClip: 'text',\n                        animation: 'move-bg 24s infinite linear',\n                        '@keyframes move-bg': { '100%': { backgroundPosition: '400% 0' } }\n                      }}\n                    >\n                      Featured Dashboard\n                    </Typography>{' '}\n                    Template in Themeforest\n                  </Typography>\n                </motion.div>\n              </Grid>\n              <Grid container justifyContent=\"center\" item xs={12}>\n                <Grid item xs={8}>\n                  <motion.div\n                    initial={{ opacity: 0, translateY: 550 }}\n                    animate={{ opacity: 1, translateY: 0 }}\n                    transition={{\n                      type: 'spring',\n                      stiffness: 150,\n                      damping: 30,\n                      delay: 0.2\n                    }}\n                  >\n                    <Typography\n                      variant=\"h6\"\n                      sx={{\n                        fontSize: { xs: '0.875rem', md: '1rem' },\n                        fontWeight: 400,\n                        lineHeight: { xs: 1.4, md: 1.4 }\n                      }}\n                    >\n                      Able Pro is the one of the Featured admin dashboard template in Envato Marketplace and used by over 2.5K+ Customers\n                      wordwide.\n                    </Typography>\n                  </motion.div>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <motion.div\n                  initial={{ opacity: 0, translateY: 550 }}\n                  animate={{ opacity: 1, translateY: 0 }}\n                  transition={{\n                    type: 'spring',\n                    stiffness: 150,\n                    damping: 30,\n                    delay: 0.4\n                  }}\n                >\n                  <Grid container spacing={2} justifyContent=\"center\">\n                    {/* <Grid item>\n                      <AnimateButton>\n                        <Button component={RouterLink} to=\"/components-overview/buttons\" size=\"large\" color=\"secondary\" variant=\"outlined\">\n                          Explore Components\n                        </Button>\n                      </AnimateButton>\n                    </Grid> */}\n                    <Grid item>\n                      <AnimateButton>\n                        <Button\n                          aria-controls={open ? 'wallet-menu' : undefined}\n                          aria-haspopup=\"true\"\n                          aria-expanded={open ? 'true' : undefined}\n                          onClick={handleClick}\n                          size=\"large\"\n                          color=\"primary\"\n                          variant=\"contained\"\n                        >\n                          Live Preview\n                        </Button>\n                      </AnimateButton>\n                      <Menu\n                        id=\"wallet-menu\"\n                        anchorEl={anchorEl}\n                        open={open}\n                        onClose={handleClose}\n                        MenuListProps={{\n                          'aria-labelledby': 'wallet-button',\n                          sx: { p: 1.25, minWidth: 150 }\n                        }}\n                        anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'right'\n                        }}\n                        transformOrigin={{\n                          vertical: 'top',\n                          horizontal: 'right'\n                        }}\n                      >\n                        {listItems}\n                      </Menu>\n                    </Grid>\n                  </Grid>\n                </motion.div>\n              </Grid>\n              <Grid item xs={12}>\n                <motion.div\n                  initial={{ opacity: 0, translateY: 550 }}\n                  animate={{ opacity: 1, translateY: 0 }}\n                  transition={{\n                    type: 'spring',\n                    stiffness: 150,\n                    damping: 30,\n                    delay: 0.6\n                  }}\n                >\n                  <Grid container spacing={3} justifyContent=\"center\">\n                    <Grid\n                      item\n                      sx={{\n                        position: 'relative',\n                        '&:after': {\n                          content: '\"\"',\n                          position: 'absolute',\n                          height: 30,\n                          bottom: 10,\n                          left: 'auto',\n                          right: '-12px',\n                          width: '1px',\n                          background: theme.palette.divider\n                        }\n                      }}\n                    >\n                      <Rating name=\"read-only\" value={4.5} size=\"small\" readOnly />\n                      <Typography variant=\"h4\">\n                        4.7/5\n                        <span\n                          style={{\n                            fontSize: '75%',\n                            fontWeight: 400,\n                            margin: 5,\n                            color: theme.palette.text.secondary\n                          }}\n                        >\n                          Ratings\n                        </span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h5\">\n                        <span\n                          style={{\n                            fontSize: '75%',\n                            fontWeight: 400,\n                            color: theme.palette.text.secondary\n                          }}\n                        >\n                          Sales\n                        </span>\n                      </Typography>\n                      <Typography variant=\"h4\">2.5K+</Typography>\n                    </Grid>\n                  </Grid>\n                </motion.div>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box\n          sx={{\n            display: 'flex',\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n            right: 0,\n            alignItems: 'center',\n            justifyContent: 'center',\n            bgcolor: 'background.paper',\n            borderTop: `1px solid ${theme.palette.divider}`,\n            borderBottom: `1px solid ${theme.palette.divider}`\n          }}\n        >\n          <Grid\n            container\n            spacing={0}\n            justifyContent={{ xs: 'start', lg: 'center' }}\n            wrap=\"nowrap\"\n            sx={{\n              overflowX: 'auto',\n              '& > .MuiGrid-item': {\n                borderRight: `1px solid ${theme.palette.divider}`,\n                '&:first-of-type': { borderLeft: `1px solid ${theme.palette.divider}` },\n                '& img': { padding: 1.3 }\n              }\n            }}\n          >\n            {techBottom}\n          </Grid>\n        </Box>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":15445},"src/components/third-party/dropzone/PlaceholderContent.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport CardMedia from '@mui/material/CardMedia';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { DropzopType } from 'config';\n\n// assets\nimport { Camera } from 'iconsax-react';\nimport UploadCover from 'assets/images/upload/upload.svg';\n\n// ==============================|| UPLOAD - PLACEHOLDER ||============================== //\n\nexport default function PlaceholderContent({ type }) {\n  return (\n    <>\n      {type !== DropzopType.STANDARD && (\n        <Stack\n          spacing={2}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          direction={{ xs: 'column', md: 'row' }}\n          sx={{ width: 1, textAlign: { xs: 'center', md: 'left' } }}\n        >\n          <CardMedia component=\"img\" image={UploadCover} sx={{ width: 150 }} />\n          <Stack sx={{ p: 3 }} spacing={1}>\n            <Typography variant=\"h5\">Drag & Drop or Select file</Typography>\n\n            <Typography color=\"secondary\">\n              Drop files here or click&nbsp;\n              <Typography component=\"span\" color=\"primary\" sx={{ textDecoration: 'underline' }}>\n                browse\n              </Typography>\n              &nbsp;thorough your machine\n            </Typography>\n          </Stack>\n        </Stack>\n      )}\n      {type === DropzopType.STANDARD && (\n        <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: 1 }}>\n          <Camera style={{ fontSize: '32px' }} />\n        </Stack>\n      )}\n    </>\n  );\n}\n\nPlaceholderContent.propTypes = { type: PropTypes.any };\n","size_bytes":1620},"src/sections/forms/validation/LoginForms.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n/**\n * 'Enter your email'\n * yup.string Expected 0 arguments, but got 1 */\nconst validationSchema = yup.object({\n  email: yup.string().email('Enter a valid email').required('Email is required'),\n  password: yup.string().min(8, 'Password should be of minimum 8 characters length').required('Password is required')\n});\n\n// ==============================|| FORM VALIDATION - LOGIN FORMIK  ||============================== //\n\nexport default function LoginForms() {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n    }\n  });\n\n  return (\n    <MainCard title=\"On Submit\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel htmlFor=\"email\">Email Address</InputLabel>\n              <TextField\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email address\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel htmlFor=\"email\">Password</InputLabel>\n              <TextField\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Enter your password\"\n                type=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Verify & Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":2978},"src/components/Loader.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// loader style\nconst LoaderWrapper = styled('div')(({ theme }) => ({\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  zIndex: 2001,\n  width: '100%',\n  '& > * + *': { marginTop: theme.spacing(2) }\n}));\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <LinearProgress color=\"primary\" sx={{ height: 2 }} />\n    </LoaderWrapper>\n  );\n}\n","size_bytes":474},"src/sections/apps/kanban/Backlogs/StoryComment.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport Avatar from 'components/@extended/Avatar';\n\nimport { ThemeMode } from 'config';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| KANBAN BACKLOGS - STORY COMMENT ||============================== //\n\nexport default function StoryComment({ comment, profile }) {\n  const theme = useTheme();\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.lighter',\n        p: 1.5,\n        mt: 1.25\n      }}\n    >\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Grid container wrap=\"nowrap\" alignItems=\"center\" spacing={1}>\n            <Grid item>\n              <Avatar\n                sx={{ width: 24, height: 24 }}\n                size=\"sm\"\n                alt=\"User 1\"\n                src={profile && profile.avatar && getImageUrl(`${profile.avatar}`, ImagePath.USERS)}\n              />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Grid container alignItems=\"center\" spacing={1} justifyContent=\"space-between\">\n                <Grid item>\n                  <Typography variant=\"subtitle1\">{profile.name}</Typography>\n                </Grid>\n                <Grid item>\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                    <Dot size={6} sx={{ mt: -0.25 }} color=\"secondary\" />\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      {profile.time}\n                    </Typography>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sx={{ '&.MuiGrid-root': { pt: 1.5 } }}>\n          <Typography variant=\"body2\">{comment?.comment}</Typography>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nStoryComment.propTypes = { comment: PropTypes.any, profile: PropTypes.any };\n","size_bytes":2284},"src/sections/forms/wizard/blog-validation-wizard/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function AddBlogPage() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.post('blogs', data);\n      // const response = await axios.post(\"https://cors-anywhere.herokuapp.com/https://httpbin.org/post\", getAxiosObject(data))\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n      setData({});\n    }\n  };\n\n  return (\n    <MainCard title=\"Add blog page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully added a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setData({});\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6052},"src/sections/components-overview/tree-view/ControlledTreeView.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| TREE VIEW - CONTROLLED ||============================== //\n\nexport default function ControlledTreeView() {\n  const [expanded, setExpanded] = useState(['1']);\n  const [selected, setSelected] = useState([]);\n\n  const handleToggle = (event, nodeIds) => {\n    setExpanded(nodeIds);\n  };\n\n  const handleSelect = (event, nodeIds) => {\n    setSelected(nodeIds);\n  };\n\n  const handleExpandClick = () => {\n    setExpanded((oldExpanded) => (oldExpanded.length === 0 ? ['1', '5', '6', '7'] : []));\n  };\n\n  const handleSelectClick = () => {\n    setSelected((oldSelected) => (oldSelected.length === 0 ? ['1', '2', '3', '4', '5', '6', '7', '8', '9'] : []));\n  };\n\n  const controlledTreeviewCodeString = `<Box sx={{ height: 270, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}>\n  <Box sx={{ mb: 1 }}>\n    <Button onClick={handleExpandClick}>{expanded.length === 0 ? 'Expand all' : 'Collapse all'}</Button>\n    <Button onClick={handleSelectClick}>{selected.length === 0 ? 'Select all' : 'Unselect all'}</Button>\n  </Box>\n  <SimpleTreeView\n    aria-label=\"controlled\"\n    slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n    expandedItems={expanded}\n    selectedItems={selected}\n    onExpandedItemsChange={handleToggle}\n    onSelectedItemsChange={handleSelect}\n    multiSelect\n  >\n    <TreeItem itemId=\"1\" label=\"Applications\">\n      <TreeItem itemId=\"2\" label=\"Calendar\" />\n      <TreeItem itemId=\"3\" label=\"Chrome\" />\n      <TreeItem itemId=\"4\" label=\"Webstorm\" />\n    </TreeItem>\n    <TreeItem itemId=\"5\" label=\"Documents\">\n      <TreeItem itemId=\"6\" label=\"MUI\">\n        <TreeItem itemId=\"7\" label=\"src\">\n          <TreeItem itemId=\"8\" label=\"index.js\" />\n          <TreeItem itemId=\"9\" label=\"tree-view.js\" />\n        </TreeItem>\n      </TreeItem>\n    </TreeItem>\n  </SimpleTreeView>\n</Box>`;\n\n  return (\n    <MainCard title=\"Controlled\" codeString={controlledTreeviewCodeString}>\n      <Box sx={{ height: 270, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}>\n        <Box sx={{ mb: 1 }}>\n          <Button onClick={handleExpandClick}>{expanded.length === 0 ? 'Expand all' : 'Collapse all'}</Button>\n          <Button onClick={handleSelectClick}>{selected.length === 0 ? 'Select all' : 'Unselect all'}</Button>\n        </Box>\n        <SimpleTreeView\n          aria-label=\"controlled\"\n          slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n          expandedItems={expanded}\n          selectedItems={selected}\n          onExpandedItemsChange={handleToggle}\n          onSelectedItemsChange={handleSelect}\n          multiSelect\n        >\n          <TreeItem itemId=\"1\" label=\"Applications\">\n            <TreeItem itemId=\"2\" label=\"Calendar\" />\n            <TreeItem itemId=\"3\" label=\"Chrome\" />\n            <TreeItem itemId=\"4\" label=\"Webstorm\" />\n          </TreeItem>\n          <TreeItem itemId=\"5\" label=\"Documents\">\n            <TreeItem itemId=\"6\" label=\"MUI\">\n              <TreeItem itemId=\"7\" label=\"src\">\n                <TreeItem itemId=\"8\" label=\"index.js\" />\n                <TreeItem itemId=\"9\" label=\"tree-view.js\" />\n              </TreeItem>\n            </TreeItem>\n          </TreeItem>\n        </SimpleTreeView>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":3543},"src/components/DragDropFileUpload.jsx":{"content":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Box, Paper, Typography, IconButton, CircularProgress, Grid, FormHelperText } from '@mui/material';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { getIn } from 'formik';\n\nfunction DragDropFileUpload({ formik, name }) {\n  const nameOfValue = getIn(formik.values, name);\n  const [dragOver, setDragOver] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [imagePreview, setImagePreview] = useState(null);\n\n  useEffect(() => {\n    let objectUrl;\n    if (nameOfValue && typeof nameOfValue === 'object' && 'type' in nameOfValue && nameOfValue.type.startsWith('image/')) {\n      objectUrl = URL.createObjectURL(nameOfValue);\n      setImagePreview(objectUrl);\n    } else {\n      setImagePreview(null);\n    }\n\n    return () => {\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl); // Clean up the URL to free memory\n      }\n    };\n  }, [nameOfValue]);\n\n  const handleFileChange = useCallback(\n    (file) => {\n      setLoading(true);\n      formik.setFieldValue(name, file); // Set the correct field value in Formik\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setLoading(false);\n        setImagePreview(reader.result); // Set preview for the specific field\n      };\n      reader.readAsDataURL(file);\n    },\n    [formik, name] // Name is unique for each field\n  );\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (event) => {\n    event.preventDefault();\n    setDragOver(false);\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    setDragOver(false);\n    const files = event.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileChange(files[0]); // Handle the dropped file\n    }\n  };\n\n  const handleChange = (event) => {\n    const files = event.target.files;\n    if (files && files[0]) {\n      handleFileChange(files[0]); // Handle the file selection\n    }\n  };\n\n  return (\n    <Box>\n      <Paper\n        variant=\"outlined\"\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        style={{\n          border: dragOver ? '2px dashed #000' : '2px dashed #aaa',\n          padding: 20,\n          textAlign: 'center',\n          cursor: 'pointer',\n          background: dragOver ? '#eee' : '#fafafa',\n          position: 'relative'\n        }}\n      >\n        <input\n          accept=\"image/*\"\n          style={{ display: 'none' }}\n          id={`raised-button-file-${name}`} // Ensure unique ID for each input\n          multiple\n          type=\"file\"\n          onChange={handleChange}\n        />\n        <label htmlFor={`raised-button-file-${name}`}>\n          <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n            <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n              <CloudUploadIcon style={{ fontSize: 60 }} />\n            </IconButton>\n            <Typography color=\"common.black\">\n              {imagePreview ? 'Change image' : 'Drag and drop files here or click to select files'}\n            </Typography>\n          </Box>\n        </label>\n        {loading && (\n          <CircularProgress\n            size={24}\n            style={{\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              marginTop: '-12px',\n              marginLeft: '-12px'\n            }}\n          />\n        )}\n      </Paper>\n\n      {/* Image Preview */}\n      {imagePreview && (\n        <Grid container justifyContent=\"center\" style={{ marginTop: 16 }}>\n          <Grid item xs={12} sm={6} md={4}>\n            <Box component=\"img\" src={imagePreview} alt=\"Image Preview\" sx={{ width: '100%', height: 'auto' }} />\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Formik Error Display */}\n      {formik.touched[name] && Boolean(formik.errors[name]) && <FormHelperText error>{formik.errors[name]}</FormHelperText>}\n    </Box>\n  );\n}\n\nexport default DragDropFileUpload;\n","size_bytes":4060},"src/sections/maps/side-by-side/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useCallback, useMemo, memo } from 'react';\n\n// third-party\nimport { Map } from 'react-map-gl';\n\n// project-import\nimport ControlPanel from './control-panel';\n\nconst leftMapStyle = {\n  position: 'absolute',\n  width: '50%',\n  height: '100%'\n};\n\nconst rightMapStyle = {\n  position: 'absolute',\n  left: '50%',\n  width: '50%',\n  height: '100%'\n};\n\n// ==============================|| SIDE BY SIDE ||============================== //\n\nfunction SideBySide({ ...other }) {\n  const [viewState, setViewState] = useState({\n    latitude: 21.2335611,\n    longitude: 72.8636084,\n    zoom: 12,\n    pitch: 30\n  });\n\n  const [mode, setMode] = useState('split-screen');\n  const [activeMap, setActiveMap] = useState('left');\n  const onLeftMoveStart = useCallback(() => setActiveMap('left'), []);\n  const onRightMoveStart = useCallback(() => setActiveMap('right'), []);\n  const onMove = useCallback((event) => setViewState(event.viewState), []);\n\n  const width = typeof window === 'undefined' ? 100 : window.innerWidth;\n  const leftMapPadding = useMemo(() => ({ left: mode === 'split-screen' ? width / 2 : 0, top: 0, right: 0, bottom: 0 }), [width, mode]);\n  const rightMapPadding = useMemo(() => ({ right: mode === 'split-screen' ? width / 2 : 0, top: 0, left: 0, bottom: 0 }), [width, mode]);\n\n  const handleChangeMode = (event, newMode) => {\n    if (newMode !== null) {\n      setMode(newMode);\n    }\n  };\n\n  return (\n    <>\n      <Map\n        id=\"left-map\"\n        {...viewState}\n        padding={leftMapPadding}\n        onMoveStart={onLeftMoveStart}\n        onMove={(event) => {\n          if (activeMap === 'left') {\n            onMove(event);\n          }\n        }}\n        style={leftMapStyle}\n        mapStyle=\"mapbox://styles/mapbox/light-v10\"\n        {...other}\n      />\n      <Map\n        id=\"right-map\"\n        {...viewState}\n        padding={rightMapPadding}\n        onMoveStart={onRightMoveStart}\n        onMove={(event) => {\n          if (activeMap === 'right') {\n            onMove(event);\n          }\n        }}\n        style={rightMapStyle}\n        mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n        {...other}\n      />\n      <ControlPanel mode={mode} onModeChange={handleChangeMode} />\n    </>\n  );\n}\n\nexport default memo(SideBySide);\n\nSideBySide.propTypes = { other: PropTypes.any };\n","size_bytes":2338},"src/sections/widget/chart/MonthlyReport.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// ==============================|| CHART ||============================== //\n\nfunction EcommerceDataChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      type: 'bar',\n      stacked: true,\n      toolbar: {\n        show: false\n      }\n    },\n    fill: {\n      opacity: [1, 0.7, 0.4, 0.3]\n    },\n    grid: {\n      strokeDashArray: 4\n    },\n    dataLabels: {\n      enabled: false\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: '80%'\n      }\n    },\n    xaxis: {\n      crosshairs: {\n        width: 1\n      }\n    },\n    tooltip: {\n      fixed: {\n        enabled: false\n      },\n      x: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary.main, theme.palette.primary.light, theme.palette.primary[200], theme.palette.warning.light],\n      xaxis: {\n        categories: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n        labels: {\n          style: {\n            colors: [\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary\n            ]\n          }\n        },\n        axisBorder: {\n          show: false,\n          color: line\n        },\n        axisTicks: {\n          show: false\n        },\n        tickAmount: 11\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      name: 'Deals',\n      data: [44, 55, 41, 67, 52, 53, 13, 23, 20, 8, 13, 27]\n    },\n    {\n      name: 'Income Report',\n      data: [13, 23, 20, 8, 13, 27, 21, 7, 25, 13, 22, 8]\n    },\n    {\n      name: 'Customer',\n      data: [11, 17, 15, 15, 21, 14, 11, 17, 15, 15, 21, 14]\n    },\n    {\n      name: 'Profits',\n      data: [21, 7, 25, 13, 22, 3, 44, 55, 41, 67, 22, 12]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={350} />;\n}\n\n// ==============================|| CHART WIDGETS - MONTHLY REPORT ||============================== //\n\nexport default function MonthlyReport() {\n  const [age, setAge] = useState('30');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Monthly Report</Typography>\n            <Box sx={{ minWidth: 120 }}>\n              <FormControl fullWidth>\n                <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n                  <MenuItem value={10}>Today</MenuItem>\n                  <MenuItem value={20}>Weekly</MenuItem>\n                  <MenuItem value={30}>Monthly</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <EcommerceDataChart />\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4274},"src/pages/charts/apexchart.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// charts\nimport ApexAreaChart from 'sections/charts/apexchart/ApexAreaChart';\nimport ApexBarChart from 'sections/charts/apexchart/ApexBarChart';\nimport ApexColumnChart from 'sections/charts/apexchart/ApexColumnChart';\nimport ApexLineChart from 'sections/charts/apexchart/ApexLineChart';\nimport ApexMixedChart from 'sections/charts/apexchart/ApexMixedChart';\nimport ApexPieChart from 'sections/charts/apexchart/ApexPieChart';\nimport ApexPolarChart from 'sections/charts/apexchart/ApexPolarChart';\nimport ApexRedialChart from 'sections/charts/apexchart/ApexRadialChart';\n\n// ==============================|| APEX CHARTS ||============================== //\n\nexport default function Apexchart() {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Column Chart\">\n          <ApexColumnChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Bar Chart\">\n          <ApexBarChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6} lg={6}>\n        <MainCard title=\"Line Chart\">\n          <ApexLineChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6} lg={6}>\n        <MainCard title=\"Area Chart\">\n          <ApexAreaChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6} lg={8}>\n        <MainCard title=\"Mixed Chart\">\n          <ApexMixedChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={4}>\n        <MainCard title=\"Redial Chart\">\n          <ApexRedialChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6} xl={4}>\n        <MainCard title=\"Polar Chart\">\n          <ApexPolarChart />\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6} xl={4}>\n        <MainCard title=\"Pie Chart\">\n          <ApexPieChart />\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1990},"src/sections/widget/data/LatestOrder.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport Stack from '@mui/material/Stack';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport CardMedia from '@mui/material/CardMedia';\nimport Chip from '@mui/material/Chip';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Edit, Trash } from 'iconsax-react';\n\nimport Phone1 from 'assets/images/widget/PHONE1.jpg';\nimport Phone2 from 'assets/images/widget/PHONE2.jpg';\nimport Phone3 from 'assets/images/widget/PHONE3.jpg';\nimport Phone4 from 'assets/images/widget/PHONE4.jpg';\n\n// table data\nfunction createData(customer, cid, photo, product, quantity, date, status, statuscolor) {\n  return { customer, cid, photo, product, quantity, date, status, statuscolor };\n}\n\nconst rows = [\n  createData('John Deo', '#81412314', Phone1, 'Moto G5', '10', '17-2-2017', 'Pending', 'warning'),\n  createData('Jenny William', '#68457898', Phone2, 'iPhone 8', '16', '20-2-2017', 'Paid', 'primary'),\n  createData('Lori Moore', '#45457898', Phone3, 'Redmi 4', '20', '17-2-2017', 'Success', 'success'),\n  createData('Austin Pena', '#62446232', Phone4, 'Jio', '15', '25-4-2017', 'Failed', 'error')\n];\n\n// =========================|| DATA WIDGET - LATEST ORDER ||========================= //\n\nexport default function LatestOrder() {\n  return (\n    <MainCard\n      title=\"Latest Order\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <TableContainer>\n        <Table sx={{ minWidth: 350 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pl: 3 }}>Customer</TableCell>\n              <TableCell>Order Id</TableCell>\n              <TableCell>Photo</TableCell>\n              <TableCell>Product</TableCell>\n              <TableCell align=\"right\">Total</TableCell>\n              <TableCell align=\"center\">Date</TableCell>\n              <TableCell align=\"center\">Status</TableCell>\n              <TableCell align=\"center\" sx={{ pr: 3 }}>\n                Action\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => (\n              <TableRow hover key={index}>\n                <TableCell sx={{ pl: 3 }}>{row.customer}</TableCell>\n                <TableCell>{row.cid}</TableCell>\n                <TableCell>\n                  <CardMedia component=\"img\" image={row.photo} title=\"image\" sx={{ width: 20, height: 'auto' }} />\n                </TableCell>\n                <TableCell>{row.product}</TableCell>\n                <TableCell align=\"right\">{row.quantity}</TableCell>\n                <TableCell align=\"center\">{row.date}</TableCell>\n                <TableCell align=\"center\">\n                  <Chip color={row.statuscolor} label={row.status} size=\"small\" />\n                </TableCell>\n                <TableCell align=\"center\" sx={{ pr: 3 }}>\n                  <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n                    <IconButton color=\"primary\" size=\"large\">\n                      <Edit />\n                    </IconButton>\n                    <IconButton color=\"inherit\" size=\"large\">\n                      <Trash />\n                    </IconButton>\n                  </Stack>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":3838},"src/contexts/FirebaseContext.jsx":{"content":"import { createContext, useEffect, useReducer } from 'react';\n\n// third-party\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\n// action - state management\nimport { LOGIN, LOGOUT } from 'contexts/auth-reducer/actions';\nimport authReducer from 'contexts/auth-reducer/auth';\n\n// project-imports\nimport Loader from 'components/Loader';\n\n// firebase initialize\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: import.meta.env.VITE_APP_FIREBASE_API_KEY,\n    authDomain: import.meta.env.VITE_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: import.meta.env.VITE_APP_FIREBASE_PROJECT_ID,\n    storageBucket: import.meta.env.VITE_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: import.meta.env.VITE_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: import.meta.env.VITE_APP_FIREBASE_APP_ID,\n    measurementId: import.meta.env.VITE_APP_FIREBASE_MEASUREMENT_ID\n  });\n}\n\n// const\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\n\n// ==============================|| FIREBASE CONTEXT & PROVIDER ||============================== //\n\nconst FirebaseContext = createContext(null);\n\nexport const FirebaseProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(\n    () =>\n      firebase.auth().onAuthStateChanged((user) => {\n        if (user) {\n          dispatch({\n            type: LOGIN,\n            payload: {\n              isLoggedIn: true,\n              user: {\n                id: user.uid,\n                email: user.email,\n                name: user.displayName || 'Stebin Ben',\n                role: 'UI/UX Designer'\n              }\n            }\n          });\n        } else {\n          dispatch({\n            type: LOGOUT\n          });\n        }\n      }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dispatch]\n  );\n\n  const firebaseEmailPasswordSignIn = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password);\n\n  const firebaseGoogleSignIn = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseTwitterSignIn = () => {\n    const provider = new firebase.auth.TwitterAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseFacebookSignIn = () => {\n    const provider = new firebase.auth.FacebookAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseRegister = async (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password);\n\n  const logout = () => firebase.auth().signOut();\n\n  const resetPassword = async (email) => {\n    await firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const updateProfile = () => {};\n  if (state.isInitialized !== undefined && !state.isInitialized) {\n    return <Loader />;\n  }\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        ...state,\n        firebaseRegister,\n        firebaseEmailPasswordSignIn,\n        login: () => {},\n        firebaseGoogleSignIn,\n        firebaseTwitterSignIn,\n        firebaseFacebookSignIn,\n        logout,\n        resetPassword,\n        updateProfile\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n\nexport default FirebaseContext;\n","size_bytes":3288},"src/components/RTLLayout.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\n// material-ui\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\n\n// third-party\nimport rtlPlugin from 'stylis-plugin-rtl';\n\n// project-imports\nimport { ThemeDirection } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| RTL LAYOUT ||============================== //\n\nexport default function RTLLayout({ children }) {\n  const { themeDirection } = useConfig();\n\n  useEffect(() => {\n    document.dir = themeDirection;\n  }, [themeDirection]);\n\n  const cacheRtl = createCache({\n    key: themeDirection === ThemeDirection.RTL ? 'rtl' : 'css',\n    prepend: true,\n    stylisPlugins: themeDirection === ThemeDirection.RTL ? [rtlPlugin] : []\n  });\n\n  return <CacheProvider value={cacheRtl}>{children}</CacheProvider>;\n}\n\nRTLLayout.propTypes = { children: PropTypes.node };\n","size_bytes":919},"src/components/Locales.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// third-party\nimport { IntlProvider } from 'react-intl';\n\n// project-imports\nimport useConfig from 'hooks/useConfig';\n\n// load locales files\nconst loadLocaleData = (locale) => {\n  switch (locale) {\n    case 'fr':\n      return import('utils/locales/fr.json');\n    case 'ro':\n      return import('utils/locales/ro.json');\n    // case 'zh':\n    //   return import('utils/locales/zh.json');\n    case 'en':\n    default:\n      return import('utils/locales/en.json');\n  }\n};\n\n// ==============================|| LOCALIZATION ||============================== //\n\nexport default function Locales({ children }) {\n  const { i18n } = useConfig();\n\n  const [messages, setMessages] = useState();\n\n  useEffect(() => {\n    loadLocaleData(i18n).then((d) => {\n      setMessages(d.default);\n    });\n  }, [i18n]);\n\n  return (\n    <>\n      {messages && (\n        <IntlProvider locale={i18n} defaultLocale=\"en\" messages={messages}>\n          {children}\n        </IntlProvider>\n      )}\n    </>\n  );\n}\n\nLocales.propTypes = { children: PropTypes.node };\n","size_bytes":1113},"src/sections/components-overview/lists/FolderList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { Camera, DocumentFilter, Gps } from 'iconsax-react';\n\n// ==============================|| LIST - FOLDER ||============================== //\n\nexport default function FolderList() {\n  const folderListCodeString = `<List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n  <ListItem>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\" color=\"warning\">\n        <Camera />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary=\"Photos\" secondary=\"Jan 9, 2014\" />\n  </ListItem>\n  <ListItem>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\">\n        <DocumentFilter />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\n  </ListItem>\n  <ListItem>\n    <ListItemAvatar>\n      <Avatar alt=\"Basic\" type=\"combined\" color=\"info\">\n        <Gps />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary=\"Vacation\" secondary=\"July 20, 2014\" />\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={folderListCodeString}>\n      <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"combined\" color=\"warning\">\n              <Camera variant=\"Bold\" />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Photos\" secondary=\"Jan 9, 2014\" />\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"combined\">\n              <DocumentFilter variant=\"Bold\" />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar alt=\"Basic\" type=\"combined\" color=\"info\">\n              <Gps variant=\"Bold\" />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Vacation\" secondary=\"July 20, 2014\" />\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":2329},"src/sections/components-overview/dialogs/ScrollDialog.jsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// ==============================|| DIALOG - SCROLLING ||============================== //\n\nexport default function ScrollDialog() {\n  const [open, setOpen] = useState(false);\n  const [scroll, setScroll] = useState('paper');\n\n  const handleClickOpen = (scrollType) => () => {\n    setOpen(true);\n    setScroll(scrollType);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const descriptionElementRef = useRef(null);\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef;\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, [open]);\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen('paper')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n        scroll=paper\n      </Button>\n      <Button variant=\"outlined\" onClick={handleClickOpen('body')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n        scroll=body\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        scroll={scroll}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <DialogTitle>Subscribe</DialogTitle>\n          </Grid>\n          <Grid item sx={{ mr: 1.5 }}>\n            <IconButton color=\"secondary\" onClick={handleClose}>\n              <Add style={{ transform: 'rotate(45deg)' }} />\n            </IconButton>\n          </Grid>\n        </Grid>\n        <DialogContent dividers>\n          <Grid container spacing={1.25}>\n            {[...new Array(25)].map((i, index) => (\n              <Grid item key={`${index}-${scroll}`}>\n                <Typography variant=\"h6\">\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac in, egestas eget quam. Morbi leo risus,\n                  porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n                </Typography>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"error\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"contained\" onClick={handleClose} sx={{ mr: 1 }}>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":2970},"src/layout/Dashboard/Header/HeaderContent/Localization.jsx":{"content":"import { useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport Transitions from 'components/@extended/Transitions';\n\nimport { ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport { LanguageSquare } from 'iconsax-react';\n\n// ==============================|| HEADER CONTENT - LOCALIZATION ||============================== //\n\nexport default function Localization() {\n  const theme = useTheme();\n  const matchesXs = useMediaQuery(theme.breakpoints.down('md'));\n\n  const { mode, i18n, onChangeLocalization } = useConfig();\n\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleListItemClick = (lang) => {\n    onChangeLocalization(lang);\n    setOpen(false);\n  };\n\n  const iconBackColorOpen = mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 0.5 }}>\n      <IconButton\n        color=\"secondary\"\n        variant=\"light\"\n        aria-label=\"open localization\"\n        ref={anchorRef}\n        aria-controls={open ? 'localization-grow' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        size=\"large\"\n        sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, p: 1 }}\n      >\n        <LanguageSquare variant=\"Bulk\" />\n      </IconButton>\n      <Popper\n        placement={matchesXs ? 'bottom-start' : 'bottom'}\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n        popperOptions={{\n          modifiers: [\n            {\n              name: 'offset',\n              options: {\n                offset: [matchesXs ? 0 : 0, 9]\n              }\n            }\n          ]\n        }}\n      >\n        {({ TransitionProps }) => (\n          <Transitions type=\"grow\" position={matchesXs ? 'top-right' : 'top'} in={open} {...TransitionProps}>\n            <Paper sx={{ boxShadow: theme.customShadows.z1, borderRadius: 1.5 }}>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MainCard border={false} content={false}>\n                  <List\n                    component=\"nav\"\n                    sx={{\n                      p: 1,\n                      width: '100%',\n                      minWidth: 200,\n                      maxWidth: 290,\n                      bgcolor: theme.palette.background.paper,\n                      [theme.breakpoints.down('md')]: { maxWidth: 250 }\n                    }}\n                  >\n                    <ListItemButton selected={i18n === 'en'} onClick={() => handleListItemClick('en')}>\n                      <ListItemText\n                        primary={\n                          <Grid container>\n                            <Typography color=\"text.primary\">English</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: '8px' }}>\n                              (UK)\n                            </Typography>\n                          </Grid>\n                        }\n                      />\n                    </ListItemButton>\n                    <ListItemButton selected={i18n === 'fr'} onClick={() => handleListItemClick('fr')}>\n                      <ListItemText\n                        primary={\n                          <Grid container>\n                            <Typography color=\"text.primary\">français</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: '8px' }}>\n                              (French)\n                            </Typography>\n                          </Grid>\n                        }\n                      />\n                    </ListItemButton>\n                    <ListItemButton selected={i18n === 'ro'} onClick={() => handleListItemClick('ro')}>\n                      <ListItemText\n                        primary={\n                          <Grid container>\n                            <Typography color=\"text.primary\">Română</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: '8px' }}>\n                              (Romanian)\n                            </Typography>\n                          </Grid>\n                        }\n                      />\n                    </ListItemButton>\n                    {/* <ListItemButton selected={i18n === 'zh'} onClick={() => handleListItemClick('zh')}>\n                      <ListItemText\n                        primary={\n                          <Grid container>\n                            <Typography color=\"text.primary\">中国人</Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: '8px' }}>\n                              (Chinese)\n                            </Typography>\n                          </Grid>\n                        }\n                      />\n                    </ListItemButton> */}\n                  </List>\n                </MainCard>\n              </ClickAwayListener>\n            </Paper>\n          </Transitions>\n        )}\n      </Popper>\n    </Box>\n  );\n}\n","size_bytes":6074},"src/sections/forms/wizard/blog-validation-wizard/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Blog title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.blogTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Blog Image\n            </Typography>\n            <ImageDisplay file={data.titleImagePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Intro of blog\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.blogIntro}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label of blog\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.label}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath1} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath2} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath3} />\n          </Stack>\n        </Grid>\n        <Grid item xs={3}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Carousel Image\n            </Typography>\n            <ImageDisplay file={data.carouselImagePath4} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading image\n            </Typography>\n            <ImageDisplay file={data.firstSubheadingImage} />\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSubheadingTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSubheadingFirstText}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5572},"src/sections/auth/AuthDivider.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\n\n// ==============================|| AUTHENTICATION - CARD ||============================== //\n\nexport default function AuthDivider({ children }) {\n  return (\n    <Box\n      sx={{\n        position: 'relative',\n        display: 'flex',\n        '&:after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: '50%',\n          left: 0,\n          width: '100%',\n          height: '1px',\n          zIndex: 1,\n          bgcolor: 'divider'\n        },\n        '& .MuiTypography-root': {\n          bgcolor: 'background.paper',\n          position: 'relative',\n          padding: '8px 20px',\n          margin: '0 auto',\n          zIndex: 5\n        }\n      }}\n    >\n      {children}\n    </Box>\n  );\n}\n\nAuthDivider.propTypes = { children: PropTypes.node };\n","size_bytes":854},"src/sections/maps/change-theme/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Typography from '@mui/material/Typography';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\n// ==============================|| MAPBOX - THEME ||============================== //\n\nfunction ControlPanel({ themes, selectTheme, onChangeTheme }) {\n  return (\n    <ControlPanelStyled>\n      <Typography gutterBottom variant=\"subtitle2\">\n        Select variants:\n      </Typography>\n\n      <RadioGroup value={selectTheme} onChange={(event, newValue) => onChangeTheme(newValue)}>\n        {Object.keys(themes).map((item) => (\n          <FormControlLabel key={item} value={item} control={<Radio size=\"small\" />} label={item} sx={{ textTransform: 'capitalize' }} />\n        ))}\n      </RadioGroup>\n    </ControlPanelStyled>\n  );\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = { themes: PropTypes.object, selectTheme: PropTypes.string, onChangeTheme: PropTypes.func };\n","size_bytes":1171},"src/sections/apps/customer/CustomerView.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport Transitions from 'components/@extended/Transitions';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Link2, Location, Mobile, Sms } from 'iconsax-react';\n\n// ==============================|| CUSTOMER - VIEW ||============================== //\n\nexport default function CustomerView({ data }) {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n\n  return (\n    <Transitions type=\"slide\" direction=\"down\" in={true}>\n      <Grid container spacing={2.5} sx={{ pl: { xs: 0, sm: 5, md: 6, lg: 10, xl: 12 } }}>\n        <Grid item xs={12} sm={5} md={4} lg={4} xl={3}>\n          <MainCard>\n            <Chip\n              label={data.status}\n              size=\"small\"\n              color=\"primary\"\n              sx={{ position: 'absolute', right: 10, top: 10, fontSize: '0.675rem' }}\n            />\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={2.5} alignItems=\"center\">\n                  <Avatar alt=\"Avatar 1\" size=\"xl\" src={getImageUrl(`avatar-${data.avatar}.png`, ImagePath.USERS)} />\n                  <Stack spacing={0.5} alignItems=\"center\">\n                    <Typography variant=\"h5\">{data.fatherName}</Typography>\n                    <Typography color=\"secondary\">{data.role}</Typography>\n                  </Stack>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" justifyContent=\"space-around\" alignItems=\"center\">\n                  <Stack spacing={0.5} alignItems=\"center\">\n                    <Typography variant=\"h5\">{data.age}</Typography>\n                    <Typography color=\"secondary\">Age</Typography>\n                  </Stack>\n                  <Divider orientation=\"vertical\" flexItem />\n                  <Stack spacing={0.5} alignItems=\"center\">\n                    <Typography variant=\"h5\">{data.progress}%</Typography>\n                    <Typography color=\"secondary\">Progress</Typography>\n                  </Stack>\n                  <Divider orientation=\"vertical\" flexItem />\n                  <Stack spacing={0.5} alignItems=\"center\">\n                    <Typography variant=\"h5\">{data.visits}</Typography>\n                    <Typography color=\"secondary\">Visits</Typography>\n                  </Stack>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <List aria-label=\"main mailbox folders\" sx={{ py: 0, '& .MuiListItemIcon-root': { minWidth: 32 } }}>\n                  <ListItem>\n                    <ListItemIcon>\n                      <Sms size={18} />\n                    </ListItemIcon>\n                    <ListItemSecondaryAction>\n                      <Typography align=\"right\">{data.email}</Typography>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <Mobile size={18} />\n                    </ListItemIcon>\n                    <ListItemSecondaryAction>\n                      <Typography align=\"right\">\n                        <PatternFormat displayType=\"text\" format=\"+1 (###) ###-####\" mask=\"_\" defaultValue={data.contact} />\n                      </Typography>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <Location size={18} />\n                    </ListItemIcon>\n                    <ListItemSecondaryAction>\n                      <Typography align=\"right\">{data.country}</Typography>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  <ListItem>\n                    <ListItemIcon>\n                      <Link2 size={18} />\n                    </ListItemIcon>\n                    <ListItemSecondaryAction>\n                      <Link align=\"right\" href=\"https://google.com\" target=\"_blank\">\n                        https://anshan.dh.url\n                      </Link>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} sm={7} md={8} lg={8} xl={9}>\n          <Stack spacing={2.5}>\n            <MainCard title=\"Personal Details\">\n              <List sx={{ py: 0 }}>\n                <ListItem divider={!matchDownMD}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Full Name</Typography>\n                        <Typography>{data.fatherName}</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Father Name</Typography>\n                        <Typography>\n                          Mr. {data.firstName} {data.lastName}\n                        </Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem divider={!matchDownMD}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Country</Typography>\n                        <Typography>{data.country}</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Zip Code</Typography>\n                        <Typography>\n                          <PatternFormat displayType=\"text\" format=\"### ###\" mask=\"_\" defaultValue={data.contact} />\n                        </Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </ListItem>\n                <ListItem>\n                  <Stack spacing={0.5}>\n                    <Typography color=\"secondary\">Address</Typography>\n                    <Typography>{data.address}</Typography>\n                  </Stack>\n                </ListItem>\n              </List>\n            </MainCard>\n            <MainCard title=\"About me\">\n              <Typography color=\"secondary\">\n                Hello, I’m {data.fatherName} {data.role} based in international company, {data.about}\n              </Typography>\n            </MainCard>\n          </Stack>\n        </Grid>\n      </Grid>\n    </Transitions>\n  );\n}\n\nCustomerView.propTypes = { data: PropTypes.any };\n","size_bytes":7719},"src/sections/tables/react-table/StickyHeader.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\nimport makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, HeaderSort } from 'components/third-party/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const [sorting, setSorting] = useState([{ id: 'age', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard content={false} title=\"Sticky Header\" secondary={<CSVExport {...{ data, headers, filename: 'sticky-header.csv' }} />}>\n      <ScrollX>\n        <TableContainer component={Paper} sx={{ maxHeight: 544 }}>\n          <Table>\n            <TableHead className=\"sticky-header\">\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - STICKY HEADER ||============================== //\n\nexport default function StickyHeader() {\n  const data = makeData(15);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Role',\n        accessorKey: 'role'\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ columns, data }} />;\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5604},"src/sections/landing/Apps.jsx":{"content":"import { useRef, useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport CardMedia from '@mui/material/CardMedia';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\nimport { ThemeDirection } from 'config';\n\n// third-party\nimport Slider from 'react-slick';\n\n// assets\nimport featureChat from 'assets/images/landing/chat.png';\nimport featureEcommerce from 'assets/images/landing/e-commerce.png';\nimport featureMail from 'assets/images/landing/mail.png';\nimport featureSocial from 'assets/images/landing/social.png';\n\nconst Technologies = [\n  {\n    image: featureChat,\n    title: 'Chat',\n    href: 'chat',\n    description: 'Power your web apps with the conceptual chat app of Able Pro Dashboard Template.'\n  },\n  {\n    image: featureEcommerce,\n    title: 'E-commerce',\n    href: 'ecommerce',\n    description: 'Collection, Filter, Product Detail, Add New Product, and Checkout pages makes your e-commerce app complete.'\n  },\n  {\n    image: featureMail,\n    title: 'Inbox',\n    href: 'mail',\n    description: 'Compose Message, List Message (email), Detailed Inbox pages well suited for any conversation based web apps.'\n  },\n  {\n    image: featureSocial,\n    title: 'User Management',\n    href: 'social',\n    description: 'Detailed pages for User Management like Profile settings, role, account settings, social profile and more to explore.'\n  }\n];\n// ==============================|| LANDING - AppsPage ||============================== //\n\nexport default function AppsPage() {\n  const theme = useTheme();\n  const [slideIndex, setSlideIndex] = useState(0);\n\n  function handleChange(value) {\n    goToSlide(value);\n    setSlideIndex(value);\n  }\n\n  const [state, setState] = useState(0);\n  const sliderRef = useRef(null);\n\n  const goToSlide = (index) => {\n    setState(index);\n    if (sliderRef.current) {\n      sliderRef.current.slickGoTo(index);\n    }\n  };\n\n  const settings = {\n    autoplay: true,\n    fade: true,\n    dots: false,\n    arrows: false,\n    infinite: true,\n    speed: 5000,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    beforeChange: function (currentSlide, next) {\n      setSlideIndex(next);\n    }\n  };\n\n  return (\n    <Box sx={{ bgcolor: theme.palette.primary.main, overflow: 'hidden', pt: { md: 10, xs: 5 } }}>\n      <Container>\n        <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\">\n          <Grid item xs={12}>\n            <Grid container spacing={2} justifyContent=\"center\" sx={{ textAlign: 'center', marginBottom: 3 }}>\n              <Grid item xs={12}>\n                <Typography variant=\"h2\" color=\"white\">\n                  Working Conceptual Apps\n                </Typography>\n              </Grid>\n              <Grid item xs={12} md={7}>\n                <Typography color=\"white\">\n                  Each App is carefully crafted to achieve the best feature rich working concept for your project\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n      <Container>\n        <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ pt: { md: 10, xs: 2.5 } }}>\n          <Grid item xs={12}>\n            <Grid container spacing={3} alignItems=\"start\">\n              <Grid item xs={12} md={6}>\n                <Box pb={{ xs: 0, md: 10 }}>\n                  <Grid container spacing={1.5} alignItems=\"center\">\n                    {Technologies.map((tech, index) => (\n                      <Grid item xs={12} key={index}>\n                        <FadeInWhenVisible>\n                          <Button\n                            onClick={() => {\n                              handleChange(index);\n                            }}\n                            role=\"link\"\n                            href={`#${tech.href}`}\n                            sx={{\n                              p: 3,\n                              borderRadius: 1.5,\n                              ...(slideIndex === index && {\n                                background: alpha(theme.palette.secondary.lighter, 0.13),\n                                boxShadow: theme.customShadows.z1,\n                                '&:hover': { background: alpha(theme.palette.secondary.lighter, 0.13), boxShadow: theme.customShadows.z1 }\n                              })\n                            }}\n                            variant=\"light\"\n                          >\n                            <Grid container textAlign=\"start\" spacing={2}>\n                              <Grid item xs={12}>\n                                <Typography variant=\"h4\" color=\"white\">\n                                  {tech.title}\n                                </Typography>\n                              </Grid>\n                              <Grid item xs={12}>\n                                <Typography color=\"white\">{tech.description}</Typography>\n                              </Grid>\n                            </Grid>\n                          </Button>\n                        </FadeInWhenVisible>\n                      </Grid>\n                    ))}\n                  </Grid>\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Box\n                  sx={{\n                    transform: 'scale(1.56)',\n                    transformOrigin: 'top left',\n                    mt: 3,\n                    width: '100%',\n                    pointerEvents: 'none',\n                    ...(theme.direction === ThemeDirection.RTL && {\n                      '& .slick-slider > .slick-list > .slick-track > .slick-slide': { float: 'right !important' }\n                    })\n                  }}\n                >\n                  <Slider ref={sliderRef} {...settings}>\n                    {Technologies.map((tech, index) => (\n                      <Box key={index + state}>\n                        <CardMedia component=\"img\" image={tech.image} sx={{ width: '100%', minHeight: '100%' }} />\n                      </Box>\n                    ))}\n                  </Slider>\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":6421},"src/sections/widget/chart/EcommerceIncome.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { DollarCircle } from 'iconsax-react';\n\n// ==============================|| CHART  ||============================== //\n\nfunction EcommerceDataChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      type: 'bar',\n      sparkline: {\n        enabled: true\n      },\n      toolbar: {\n        show: false\n      },\n      offsetX: -4\n    },\n    dataLabels: {\n      enabled: false\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: '80%'\n      }\n    },\n    xaxis: {\n      crosshairs: {\n        width: 1\n      }\n    },\n    tooltip: {\n      fixed: {\n        enabled: false\n      },\n      x: {\n        show: false\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.success.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      name: 'Users',\n      data: [10, 30, 40, 20, 60, 50, 20, 15, 20, 25, 30, 25]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={80} />;\n}\n\n// ==============================|| CHART WIDGET - ECOMMERCE INCOME  ||============================== //\n\nexport default function EcommerceIncome() {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Avatar variant=\"rounded\" color=\"secondary\" sx={{ color: 'text.secondary' }}>\n              <DollarCircle />\n            </Avatar>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                'aria-labelledby': 'wallet-button',\n                sx: { p: 1.25, minWidth: 150 }\n              }}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right'\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack>\n            <Typography variant=\"subtitle1\">$30,200.00</Typography>\n            <Typography variant=\"caption\">Income</Typography>\n          </Stack>\n          <EcommerceDataChart />\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4197},"src/sections/components-overview/select/HelperTextSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| SELECT - HELPER TEXT ||============================== //\n\nexport default function HelperTextSelect() {\n  const [age, setAge] = useState('');\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const helperSelectCodeString = `<FormControl fullWidth>\n  <InputLabel id=\"demo-simple-select-helper-label\">Number</InputLabel>\n  <Select labelId=\"demo-simple-select-helper-label\" id=\"demo-simple-select-helper\" value={age} onChange={handleChange}>\n    <MenuItem value=\"\">\n      <em>Select Number</em>\n    </MenuItem>\n    <MenuItem value={10}>Ten</MenuItem>\n    <MenuItem value={20}>Twenty</MenuItem>\n    <MenuItem value={30}>Thirty</MenuItem>\n  </Select>\n  <FormHelperText>helper text</FormHelperText>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"With Helper Text\" codeString={helperSelectCodeString}>\n      <Stack spacing={1}>\n        <InputLabel id=\"demo-simple-select-helper-label\">Number</InputLabel>\n        <FormControl fullWidth>\n          <Select labelId=\"demo-simple-select-helper-label\" id=\"demo-simple-select-helper\" value={age} onChange={handleChange}>\n            <MenuItem value=\"\">\n              <em>Select Number</em>\n            </MenuItem>\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n          <FormHelperText>helper text</FormHelperText>\n        </FormControl>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":1911},"src/sections/apps/kanban/Board/AlertItemDelete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| KANBAN BOARD - ITEM DELETE ||============================== //\n\nexport default function AlertItemDelete({ title, open, handleClose }) {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => handleClose(false)}\n      TransitionComponent={PopupTransition}\n      keepMounted\n      maxWidth=\"xs\"\n      aria-labelledby=\"item-delete-title\"\n      aria-describedby=\"item-delete-description\"\n    >\n      <DialogContent sx={{ mt: 2, my: 1 }}>\n        <Stack alignItems=\"center\" spacing={3.5}>\n          <Avatar color=\"error\" sx={{ width: 72, height: 72, fontSize: '1.75rem' }}>\n            <Trash variant=\"Bold\" />\n          </Avatar>\n          <Stack spacing={2}>\n            <Typography variant=\"h4\" align=\"center\">\n              Are you sure you want to delete?\n            </Typography>\n            <Typography align=\"center\">\n              By deleting\n              <Typography variant=\"subtitle1\" component=\"span\">\n                {' '}\n                &quot;{title}&quot;{' '}\n              </Typography>\n              task, Its details will also be deleted.\n            </Typography>\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2} sx={{ width: 1 }}>\n            <Button fullWidth onClick={() => handleClose(false)} color=\"secondary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button fullWidth color=\"error\" variant=\"contained\" onClick={() => handleClose(true)} autoFocus>\n              Delete\n            </Button>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nAlertItemDelete.propTypes = { title: PropTypes.string, open: PropTypes.bool, handleClose: PropTypes.func };\n","size_bytes":2172},"src/pages/forms/team.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AddTeamMember from 'sections/forms/wizard/team-validation-wizard';\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormTeam() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <AddTeamMember />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":441},"src/sections/apps/kanban/Backlogs/Items.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Link from '@mui/material/Link';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport TableRow from '@mui/material/TableRow';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { format } from 'date-fns';\nimport { Draggable } from '@hello-pangea/dnd';\n\n// project-imports\nimport AlertItemDelete from '../Board/AlertItemDelete';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ThemeMode } from 'config';\nimport { deleteItem, handlerKanbanDialog, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Task } from 'iconsax-react';\n\n// drag wrapper\nconst getDragWrapper = (isDragging, theme) => {\n  const bgcolor =\n    theme.palette.mode === ThemeMode.DARK ? alpha(theme.palette.background.paper, 0.9) : alpha(theme.palette.primary.lighter, 0.99);\n  return {\n    backgroundColor: isDragging ? bgcolor : 'transparent',\n    userSelect: 'none'\n  };\n};\n\n// ==============================|| KANBAN BACKLOGS - ITEMS ||============================== //\n\nexport default function Items({ itemId, index }) {\n  const theme = useTheme();\n  const { backlogs } = useGetBacklogs();\n\n  const item = backlogs?.items.filter((data) => data.id === itemId)[0];\n  const itemColumn = backlogs?.columns.filter((column) => column.itemIds.filter((id) => id === item.id)[0])[0];\n  const itemProfile = backlogs?.profiles.filter((profile) => profile.id === item.assign)[0];\n\n  const handlerDetails = () => {\n    handlerKanbanDialog(itemId);\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handleClick = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [open, setOpen] = useState(false);\n  const handleModalClose = (status) => {\n    setOpen(false);\n    if (status) {\n      deleteItem(item.id);\n      openSnackbar({\n        open: true,\n        message: 'Task Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  return (\n    <Draggable draggableId={item.id} index={index}>\n      {(provided, snapshot) => (\n        <TableRow\n          hover\n          key={item.id}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          sx={{\n            '& th,& td': { whiteSpace: 'nowrap' },\n            '& .more-button': { opacity: 0 },\n            ':hover': { '& .more-button': { opacity: 1 } },\n            ...(Boolean(anchorEl) && { '& .more-button': { opacity: 1 } }),\n            ...getDragWrapper(snapshot.isDragging, theme)\n          }}\n        >\n          <TableCell sx={{ pl: 3, minWidth: 120, width: 120, height: 46 }} />\n          <TableCell sx={{ width: 110, minWidth: 110 }}>\n            <Stack direction=\"row\" spacing={0.75} alignItems=\"center\">\n              <Task size={16} style={{ color: theme.palette.info.main, marginTop: -2 }} />\n              <Typography variant=\"subtitle2\">{item.id}</Typography>\n            </Stack>\n          </TableCell>\n          <TableCell sx={{ maxWidth: 'calc(100vw - 850px)', minWidth: 140 }} component=\"th\" scope=\"row\">\n            <Link\n              underline=\"hover\"\n              color=\"default\"\n              onClick={handlerDetails}\n              sx={{\n                overflow: 'hidden',\n                display: 'block',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                ':hover': { color: 'info.main' },\n                cursor: 'pointer'\n              }}\n            >\n              {item.title}\n            </Link>\n          </TableCell>\n          <TableCell sx={{ width: 60, minWidth: 60 }}>\n            <IconButton\n              className=\"more-button\"\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls=\"menu-comment\"\n              aria-haspopup=\"true\"\n              color=\"secondary\"\n              sx={{ color: 'text.secondary' }}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-comment\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n              variant=\"selectedMenu\"\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <MenuItem\n                onClick={() => {\n                  handleClose();\n                  handlerDetails();\n                }}\n              >\n                Edit\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  handleClose();\n                  setOpen(true);\n                }}\n              >\n                Delete\n              </MenuItem>\n            </Menu>\n            <AlertItemDelete title={item.title} open={open} handleClose={handleModalClose} />\n          </TableCell>\n          <TableCell sx={{ width: 90, minWidth: 90 }}>{itemColumn ? itemColumn.title : 'New'}</TableCell>\n          <TableCell sx={{ width: 140, minWidth: 140 }}>{itemProfile ? itemProfile.name : ''}</TableCell>\n          <TableCell sx={{ width: 85, minWidth: 85, textTransform: 'capitalize' }}>{item.priority}</TableCell>\n          <TableCell sx={{ width: 120, minWidth: 120 }}>{item.dueDate ? format(new Date(item.dueDate), 'd MMM yyyy') : ''}</TableCell>\n        </TableRow>\n      )}\n    </Draggable>\n  );\n}\n\nItems.propTypes = { itemId: PropTypes.string, index: PropTypes.number };\n","size_bytes":5918},"src/sections/forms/plugins/ReactDraft.jsx":{"content":"import { useState } from 'react';\n\n// third-party\nimport { Editor } from 'react-draft-wysiwyg';\nimport { ContentState, EditorState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n// ==============================|| EDITOR - DRAFT ||============================== //\n\nexport default function ReactDraft() {\n  const [editorState, setEditorState] = useState(() => {\n    const initialContent =\n      \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n    return EditorState.createWithContent(ContentState.createFromText(initialContent));\n  });\n\n  const onEditorStateChange = (editor) => {\n    setEditorState(editor);\n  };\n  return (\n    <Editor\n      editorState={editorState}\n      toolbarClassName=\"toolbarClassName\"\n      wrapperClassName=\"wrapperClassName\"\n      editorClassName=\"editorClassName\"\n      onEditorStateChange={onEditorStateChange}\n    />\n  );\n}\n","size_bytes":1417},"src/themes/overrides/TableFooter.js":{"content":"// ==============================|| OVERRIDES - TABLE FOOTER ||============================== //\n\nexport default function TableFooter(theme) {\n  return {\n    MuiTableFooter: {\n      styleOverrides: {\n        root: {\n          backgroundColor: theme.palette.secondary.lighter,\n          borderTop: `2px solid ${theme.palette.divider}`,\n          borderBottom: `1px solid ${theme.palette.divider}`\n        }\n      }\n    }\n  };\n}\n","size_bytes":427},"src/sections/components-overview/dialogs/SimpleDialog.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\n\n// ==============================|| DIALOG - SIMPLE ||============================== //\n\nfunction SimpleDialog({ onClose, selectedValue, open }) {\n  const theme = useTheme();\n\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  const handleListItemClick = (value) => {\n    onClose(value);\n  };\n\n  return (\n    <Dialog onClose={handleClose} open={open}>\n      <Grid\n        container\n        spacing={2}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}\n      >\n        <Grid item>\n          <DialogTitle>Set backup account</DialogTitle>\n        </Grid>\n        <Grid item sx={{ mr: 1.5 }}>\n          <IconButton color=\"secondary\" onClick={handleClose}>\n            <Add style={{ transform: 'rotate(45deg)' }} />\n          </IconButton>\n        </Grid>\n      </Grid>\n\n      <List sx={{ p: 2.5 }}>\n        {emails.map((email, index) => (\n          <ListItemButton onClick={() => handleListItemClick(email)} key={email} selected={selectedValue === email} sx={{ p: 1.25 }}>\n            <ListItemAvatar>\n              <Avatar src={getImageUrl(`avatar-${index + 1}.png`, ImagePath.USERS)} />\n            </ListItemAvatar>\n            <ListItemText primary={email} />\n          </ListItemButton>\n        ))}\n        <ListItemButton autoFocus onClick={() => handleListItemClick('addAccount')} sx={{ p: 1.25 }}>\n          <ListItemAvatar>\n            <Avatar sx={{ bgcolor: 'primary.lighter', color: 'primary.main', width: 32, height: 32 }}>\n              <Add style={{ fontSize: '0.625rem' }} />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary=\"Add Account\" />\n        </ListItemButton>\n      </List>\n    </Dialog>\n  );\n}\n\nexport default function SimpleDialogDemo() {\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <SimpleDialog selectedValue={selectedValue} open={open} onClose={handleClose} />\n    </>\n  );\n}\n\nSimpleDialog.propTypes = { onClose: PropTypes.func, selectedValue: PropTypes.string, open: PropTypes.bool };\n","size_bytes":3200},"src/sections/apps/e-commerce/product-details/ProductReview.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// third-party\nimport { format } from 'date-fns';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport List from '@mui/material/List';\nimport Button from '@mui/material/Button';\nimport Rating from '@mui/material/Rating';\nimport ListItem from '@mui/material/ListItem';\nimport Skeleton from '@mui/material/Skeleton';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport ProductReview from 'components/cards/e-commerce/ProductReview';\n\nimport { getProductReviews } from 'api/products';\n\n// assets\nimport { EmojiHappy, Image, Paperclip2 } from 'iconsax-react';\n\n// progress\nfunction LinearProgressWithLabel({ star, color, value, ...others }) {\n  return (\n    <>\n      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n        <LinearProgress\n          value={value}\n          variant=\"determinate\"\n          color={color}\n          {...others}\n          sx={{ width: '100%', bgcolor: 'secondary.lighter' }}\n        />\n        <Typography variant=\"body2\" sx={{ minWidth: 50 }} color=\"text.secondary\">{`${Math.round(star)} Star`}</Typography>\n      </Stack>\n    </>\n  );\n}\n\n// ==============================|| PRODUCT DETAILS - REVIEWS ||============================== //\n\nexport default function ProductReviews({ product }) {\n  const theme = useTheme();\n\n  const [reviews, setReviews] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  (async () => {\n    await getProductReviews().then((response) => {\n      setReviews(response.data.productReviews);\n      setLoader(false);\n    });\n  })();\n\n  let productReview = (\n    <Grid item xs={12}>\n      <List>\n        {[1, 2, 3].map((index) => (\n          <MainCard content={false} key={index} sx={{ mb: 2.5 }}>\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar sx={{ minWidth: 72 }}>\n                <Skeleton variant=\"rectangular\" width={62} height={62} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Skeleton animation=\"wave\" height={22} />}\n                secondary={\n                  <>\n                    <Skeleton animation=\"wave\" height={14} width=\"60%\" />\n                    <Skeleton animation=\"wave\" height={18} width=\"20%\" />\n                    <Skeleton animation=\"wave\" height={14} width=\"35%\" sx={{ mt: 1.25 }} />\n                    <Skeleton animation=\"wave\" height={14} width=\"100%\" />\n                    <Skeleton animation=\"wave\" height={14} width=\"55%\" />\n                  </>\n                }\n              />\n            </ListItem>\n          </MainCard>\n        ))}\n      </List>\n    </Grid>\n  );\n\n  if (reviews && !loader) {\n    productReview = reviews.map((review, index) => (\n      <Grid item xs={12} key={index}>\n        <MainCard sx={{ bgcolor: 'secondary.lighter' }}>\n          <ProductReview\n            avatar={review.profile.avatar}\n            date={format(new Date(review.date), 'dd/MM, yyyy h:dd:ss a')}\n            name={review.profile.name}\n            rating={review.rating}\n            review={review.review}\n          />\n        </MainCard>\n      </Grid>\n    ));\n  }\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard>\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2.5}>\n            <Grid item>\n              {product && (\n                <Stack spacing={1} sx={{ height: '100%' }}>\n                  <Stack spacing={1}>\n                    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                      <Typography variant=\"h2\">{Number((product.rating < 4 ? product.rating + 1 : product.rating).toFixed(1))}</Typography>\n                      <Typography variant=\"h4\" color=\"text.secondary\">\n                        /5\n                      </Typography>\n                    </Stack>\n                    <Typography color=\"text.secondary\">Based on {product.offerPrice?.toFixed(0)} reviews</Typography>\n                  </Stack>\n                  <Rating\n                    name=\"simple-controlled\"\n                    value={product.rating < 4 ? product.rating + 1 : product.rating}\n                    readOnly\n                    precision={0.1}\n                  />\n                </Stack>\n              )}\n            </Grid>\n            <Grid item>\n              <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n                <Grid item xs={12}>\n                  <LinearProgressWithLabel color=\"warning\" star={5} value={100} />\n                </Grid>\n                <Grid item xs={12}>\n                  <LinearProgressWithLabel color=\"warning\" star={4} value={80} />\n                </Grid>\n                <Grid item xs={12}>\n                  <LinearProgressWithLabel color=\"warning\" star={3} value={60} />\n                </Grid>\n                <Grid item xs={12}>\n                  <LinearProgressWithLabel color=\"warning\" star={2} value={40} />\n                </Grid>\n                <Grid item xs={12}>\n                  <LinearProgressWithLabel color=\"warning\" star={1} value={20} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n\n      {productReview}\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"center\">\n          <Button variant=\"text\" sx={{ textTransform: 'none' }}>\n            {' '}\n            View more comments{' '}\n          </Button>\n        </Stack>\n      </Grid>\n      <Grid item xs={12}>\n        <Box sx={{ p: 2, pb: 1.5, border: '1px solid', borderColor: theme.palette.divider }}>\n          <Grid container alignItems=\"center\" spacing={0.5}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                placeholder=\"Add Comment\"\n                sx={{\n                  mb: 3,\n                  '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\n                  '& fieldset': { display: 'none' },\n                  '& .MuiFormHelperText-root': { ml: 0 },\n                  '& .MuiOutlinedInput-root': { bgcolor: 'transparent', '&.Mui-focused': { boxShadow: 'none' } }\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <IconButton>\n                <Paperclip2 />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton>\n                <Image />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton>\n                <EmojiHappy />\n              </IconButton>\n            </Grid>\n            <Grid item xs zeroMinWidth />\n            <Grid item>\n              <Button size=\"small\" variant=\"contained\" color=\"primary\">\n                Comment\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  star: PropTypes.number,\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning', undefined]),\n  value: PropTypes.number,\n  others: PropTypes.any\n};\n\nProductReviews.propTypes = { product: PropTypes.any };\n","size_bytes":7618},"src/sections/apps/e-commerce/checkout/PaymentOptions.js":{"content":"// assets\nimport paypal from 'assets/images/e-commerce/paypal.png';\nimport card from 'assets/images/e-commerce/card.png';\n\n// ==============================|| CHECKOUT - PAYMENT OPTIONS ||============================== //\n\nconst PaymentOptions = [\n  {\n    id: 2,\n    value: 'card',\n    title: 'Credit Card',\n    caption: '10% off with master card',\n    image: card,\n    size: {\n      width: 72,\n      height: 24\n    }\n  },\n  {\n    id: 1,\n    value: 'paypal',\n    title: 'Pay with PayPal',\n    caption: '5% off on first payment',\n    image: paypal,\n    size: {\n      width: 50,\n      height: 14\n    }\n  },\n  {\n    id: 3,\n    value: 'cod',\n    title: 'Cash on Delivery',\n    caption: 'When you use this payment',\n    size: {\n      width: 46,\n      height: 28\n    }\n  }\n];\n\nexport default PaymentOptions;\n","size_bytes":802},"src/api/operation-with-files-object.js":{"content":"// Function to convert File object to Data URL\nexport const convertFileToBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n};\n\n// Recursive function to iterate through the object and handle File objects\nasync function convertObjectWithBase64(obj) {\n  if (Array.isArray(obj)) {\n    // Handle arrays: Map over array and return a new array\n    return await Promise.all(\n      obj.map(async (item) => {\n        return await convertObjectWithBase64(item);\n      })\n    );\n  } else if (typeof obj === 'object' && obj !== null) {\n    // Handle objects: Map over object keys and return a new object\n    const newObj = {};\n    for (const key of Object.keys(obj)) {\n      const value = obj[key];\n\n      if (value instanceof File) {\n        // If the value is a File, convert it to base64\n        newObj[key] = await convertFileToBase64(value);\n      } else {\n        // Otherwise, recurse\n        newObj[key] = await convertObjectWithBase64(value);\n      }\n    }\n    return newObj;\n  } else {\n    // Return primitive values as-is\n    return obj;\n  }\n}\n\nexport async function getAxiosObject(obj) {\n  // const convertedObject = await convertObjectWithBase64(obj);\n  const convertedObject = JSON.stringify(await convertObjectWithBase64(obj));\n  console.log(\"converted obj:\", convertedObject);\n  return obj;\n}\n","size_bytes":1468},"src/pages/components-overview/dialogs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport SimpleDialog from 'sections/components-overview/dialogs/SimpleDialog';\nimport AlertDialog from 'sections/components-overview/dialogs/AlertDialog';\nimport FormDialog from 'sections/components-overview/dialogs/FormDialog';\nimport TransitionsDialog from 'sections/components-overview/dialogs/TransitionsDialog';\nimport CustomizedDialog from 'sections/components-overview/dialogs/CustomizedDialog';\nimport FullScreenDialog from 'sections/components-overview/dialogs/FullScreenDialog';\nimport SizesDialog from 'sections/components-overview/dialogs/SizesDialog';\nimport ResponsiveDialog from 'sections/components-overview/dialogs/ResponsiveDialog';\nimport DraggableDialog from 'sections/components-overview/dialogs/DraggableDialog';\nimport ScrollDialog from 'sections/components-overview/dialogs/ScrollDialog';\nimport ConfirmationDialog from 'sections/components-overview/dialogs/ConfirmationDialog';\n\n// ==============================|| COMPONENTS - DIALOGS ||============================== //\n\nexport default function Dialogs() {\n  const basicDialogCodeString = `// SimpleDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open simple dialog\n</Button>\n<Dialog onClose={handleClose} open={open}>\n  <Grid\n    container\n    spacing={2}\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    sx={{ borderBottom: '1px solid {theme.palette.divider}' }}\n  >\n    <Grid item>\n      <DialogTitle>Set backup account</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n\n  <List sx={{ p: 2.5 }}>\n  {emails.map((email, index) => (\n    <ListItemButton onClick={() => handleListItemClick(email)} key={email} selected={selectedValue === email} sx={{ p: 1.25 }}>\n      <ListItemAvatar>\n        <Avatar src={'/src/assets/images/users/avatar-{index + 1}.png'} />\n      </ListItemAvatar>\n      <ListItemText primary={email} />\n    </ListItemButton>\n  ))}\n  <ListItemButton autoFocus onClick={() => handleListItemClick('addAccount')} sx={{ p: 1.25 }}>\n    <ListItemAvatar>\n      <Avatar sx={{ bgcolor: 'primary.lighter', color: 'primary.main', width: 32, height: 32 }}>\n        <Add style={{ fontSize: '0.625rem' }} />\n      </Avatar>\n    </ListItemAvatar>\n    <ListItemText primary=\"Add Account\" />\n  </ListItemButton>\n</List>\n</Dialog>`;\n\n  const alertcDialogCodeString = `// AlertDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open alert dialog\n</Button>\n<Dialog open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n<Box sx={{ p: 1, py: 1.5 }}>\n  <DialogTitle id=\"alert-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n  <DialogContent>\n    <DialogContentText id=\"alert-dialog-description\">\n      Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n    </DialogContentText>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Disagree\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} autoFocus>\n      Agree\n    </Button>\n  </DialogActions>\n</Box>\n</Dialog>`;\n\n  const formDialogCodeString = `// FormDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open form dialog\n</Button>\n<Dialog open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Subscribe</DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const transitionsDialogCodeString = ` // TransitionsDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Slide in dialog\n</Button>\n<Dialog\n  open={open}\n  TransitionComponent={Transition}\n  keepMounted\n  onClose={handleClose}\n  aria-describedby=\"alert-dialog-slide-description\"\n>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Use Google&apos;ss location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-slide-description\">\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const customizedDialogCodeString = `// CustomizedDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open dialog\n</Button>\n<BootstrapDialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n  <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n    Modal Title\n  </BootstrapDialogTitle>\n  <DialogContent dividers sx={{ p: 3 }}>\n    <Typography variant=\"h6\" gutterBottom>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus,\n      porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus\n      sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n    </Typography>\n    <Typography variant=\"h6\" gutterBottom>\n      Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed\n      odio dui. Donec ullamcorper nulla non metus auctor fringilla.\n    </Typography>\n  </DialogContent>\n  <DialogActions>\n    <Button variant=\"contained\" autoFocus onClick={handleClose}>\n      Save changes\n    </Button>\n  </DialogActions>\n</BootstrapDialog>`;\n\n  const fullscreenDialogCodeString = `// FullScreenDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open full-screen dialog\n</Button>\n<Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n  <AppBar sx={{ position: 'relative' }}>\n    <Toolbar>\n      <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n        <CloseOutlined />\n      </IconButton>\n      <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\">\n        Set Backup Account\n      </Typography>\n      <Button autoFocus color=\"inherit\" onClick={handleClose}>\n        save\n      </Button>\n    </Toolbar>\n  </AppBar>\n  <List sx={{ p: 3 }}>\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-1.png')} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Phone ringtone\" secondary=\"Default\" />\n    </ListItem>\n    <Divider />\n    <ListItem button>\n      <ListItemAvatar>\n        <Avatar src={avatarImage('./avatar-2.png')} />\n      </ListItemAvatar>\n      <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n  </List>\n</Dialog>`;\n\n  const sizesDialogCodeString = `// SizesDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open max-width dialog\n</Button>\n<Dialog fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle>Optional sizes</DialogTitle>\n    <DialogContent>\n      <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 1 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Max Width :</Typography>\n        </Grid>\n        <Grid item>\n          <FormControl sx={{ minWidth: 120 }}>\n            <Select\n              autoFocus\n              value={maxWidth}\n              onChange={handleMaxWidthChange}\n              inputProps={{\n                name: 'max-width',\n                id: 'max-width'\n              }}\n            >\n              <MenuItem value={false as any}>false</MenuItem>\n              <MenuItem value=\"xs\">xs</MenuItem>\n              <MenuItem value=\"sm\">sm</MenuItem>\n              <MenuItem value=\"md\">md</MenuItem>\n              <MenuItem value=\"lg\">lg</MenuItem>\n              <MenuItem value=\"xl\">xl</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1.5} alignItems=\"center\" sx={{ mt: 0.25 }}>\n        <Grid item>\n          <Typography variant=\"h6\">Full Width:</Typography>\n        </Grid>\n        <Grid item>\n          <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n        </Grid>\n      </Grid>\n    </DialogContent>\n    <DialogActions>\n      <Button variant=\"outlined\" color=\"error\" onClick={handleClose}>\n        Close\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const responsiveDialogCodeString = `// ResponsiveDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open responsive dialog\n</Button>\n<Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle id=\"responsive-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n    <DialogContent>\n      <DialogContentText>\n        Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Disagree\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose} autoFocus>\n        Agree\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const draggaleDialogCodeString = `// DraggableDialog\n<Button variant=\"contained\" onClick={handleClickOpen}>\n  Open draggable dialog\n</Button>\n<Dialog open={open} onClose={handleClose} PaperComponent={PaperComponent} aria-labelledby=\"draggable-dialog-title\">\n  <Box sx={{ p: 1, py: 1.5 }}>\n    <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n      Subscribe\n    </DialogTitle>\n    <DialogContent>\n      <DialogContentText sx={{ mb: 2 }}>\n        To subscribe to this website, please enter your email address here. We will send updates occasionally.\n      </DialogContentText>\n      <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"error\" onClick={handleClose}>\n        Cancel\n      </Button>\n      <Button variant=\"contained\" onClick={handleClose}>\n        Subscribe\n      </Button>\n    </DialogActions>\n  </Box>\n</Dialog>`;\n\n  const scrollingDialogCodeString = `// ScrollDialog.tsx\n<Button variant=\"contained\" onClick={handleClickOpen('paper')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=paper\n</Button>\n<Button variant=\"outlined\" onClick={handleClickOpen('body')} sx={{ mr: 1, ml: 1, mb: 1, mt: 1 }}>\n  scroll=body\n</Button>\n<Dialog\n  open={open}\n  onClose={handleClose}\n  scroll={scroll}\n  aria-labelledby=\"scroll-dialog-title\"\n  aria-describedby=\"scroll-dialog-description\"\n>\n  <Grid container spacing={2} justifyContent=\"space-between\" alignItems=\"center\">\n    <Grid item>\n      <DialogTitle>Subscribe</DialogTitle>\n    </Grid>\n    <Grid item sx={{ mr: 1.5 }}>\n      <IconButton color=\"secondary\" onClick={handleClose}>\n        <CloseOutlined />\n      </IconButton>\n    </Grid>\n  </Grid>\n  <DialogContent dividers>\n    <Grid container spacing={1.25}>\n      {[...new Array(25)].map((i, index) => (\n        <Grid item key={'{index}-{scroll}'}>\n          <Typography variant=\"h6\">\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac in, egestas eget quam. Morbi leo risus,\n            porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n          </Typography>\n        </Grid>\n      ))}\n    </Grid>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" onClick={handleClose}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleClose} sx={{ mr: 1 }}>\n      Subscribe\n    </Button>\n  </DialogActions>\n</Dialog>`;\n\n  const confirmDialogCodeString = `// ConfirmationDialog.tsx\n<Box sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n  <List role=\"group\">\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Interruptions\" />\n    </ListItem>\n    <ListItem\n      button\n      divider\n      aria-haspopup=\"true\"\n      aria-controls=\"ringtone-menu\"\n      aria-label=\"phone ringtone\"\n      onClick={handleClickListItem}\n    >\n      <ListItemText primary=\"Phone Ringtone\" secondary={value} />\n    </ListItem>\n    <ListItem button divider disabled>\n      <ListItemText primary=\"Default Notification Ringtone\" secondary=\"Tethys\" />\n    </ListItem>\n    <ConfirmationDialogRaw id=\"ringtone-menu\" keepMounted open={open} onClose={handleClose} value={value} />\n  </List>\n</Box>\n<Dialog\n  sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\n  maxWidth={matchDownMD ? 'sm' : 'lg'}\n  TransitionProps={{ onEntering: handleEntering }}\n  open={open}\n  {...other}\n>\n  <DialogTitle>Phone Ringtone</DialogTitle>\n  <DialogContent dividers>\n    <RadioGroup row={!matchDownMD} ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange}>\n      {options.map((option) => (\n        <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n      ))}\n    </RadioGroup>\n  </DialogContent>\n  <DialogActions>\n    <Button color=\"error\" autoFocus onClick={handleCancel}>\n      Cancel\n    </Button>\n    <Button variant=\"contained\" onClick={handleOk} sx={{ mr: 0.5 }}>\n      Done\n    </Button>\n  </DialogActions>\n</Dialog>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Dialog\"\n        caption=\"Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks.\"\n        directory=\"src/pages/components-overview/dialogs\"\n        link=\"https://mui.com/material-ui/react-dialog/\"\n      />\n      <ComponentWrapper sx={{ '& .MuiCardContent-root': { textAlign: 'center' } }}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Basic\" codeString={basicDialogCodeString}>\n              <SimpleDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Alert\" codeString={alertcDialogCodeString}>\n              <AlertDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Form\" codeString={formDialogCodeString}>\n              <FormDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Transitions\" codeString={transitionsDialogCodeString}>\n              <TransitionsDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Customized\" codeString={customizedDialogCodeString}>\n              <CustomizedDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Full Screen\" codeString={fullscreenDialogCodeString}>\n              <FullScreenDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Sizes\" codeString={sizesDialogCodeString}>\n              <SizesDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Responsive\" codeString={responsiveDialogCodeString}>\n              <ResponsiveDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Draggable\" codeString={draggaleDialogCodeString}>\n              <DraggableDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Scrolling\" codeString={scrollingDialogCodeString}>\n              <ScrollDialog />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} lg={4}>\n            <MainCard title=\"Confirmation\" codeString={confirmDialogCodeString}>\n              <ConfirmationDialog />\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":17032},"src/sections/apps/kanban/Backlogs/AlertStoryDelete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| KANBAN BACKLOGS - STORY DELETE ||============================== //\n\nexport default function AlertStoryDelete({ title, open, handleClose }) {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => handleClose(false)}\n      keepMounted\n      TransitionComponent={PopupTransition}\n      maxWidth=\"xs\"\n      aria-labelledby=\"item-delete-title\"\n      aria-describedby=\"item-delete-description\"\n    >\n      <DialogContent sx={{ mt: 2, my: 1 }}>\n        <Stack alignItems=\"center\" spacing={3.5}>\n          <Avatar color=\"error\" sx={{ width: 72, height: 72, fontSize: '1.75rem' }}>\n            <Trash variant=\"Bold\" />\n          </Avatar>\n          <Stack spacing={2}>\n            <Typography variant=\"h4\" align=\"center\">\n              Are you sure you want to delete?\n            </Typography>\n            <Typography align=\"center\">\n              By deleting\n              <Typography variant=\"subtitle1\" component=\"span\">\n                {' '}\n                &quot;{title}&quot;{' '}\n              </Typography>\n              user story, all task inside that user story will also be deleted.\n            </Typography>\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2} sx={{ width: 1 }}>\n            <Button fullWidth onClick={() => handleClose(false)} color=\"secondary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button fullWidth color=\"error\" variant=\"contained\" onClick={() => handleClose(true)} autoFocus>\n              Delete\n            </Button>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nAlertStoryDelete.propTypes = { title: PropTypes.string, open: PropTypes.bool, handleClose: PropTypes.func };\n","size_bytes":2204},"src/sections/components-overview/buttons/ButtonGroups.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| BUTTON GROUPS ||============================== //\n\nexport default function ButtonGroups() {\n  const buttons = [<Button key=\"one\">One</Button>, <Button key=\"two\">Two</Button>, <Button key=\"three\">Three</Button>];\n\n  const groupButtonCodeString = `<ButtonGroup disableElevation variant=\"contained\" aria-label=\"outlined primary button group\">\n  <Button key=\"one\">One</Button>\n  <Button key=\"two\">Two</Button>\n  <Button key=\"three\">Three</Button>\n</ButtonGroup>\n<ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n  <Button key=\"one\">One</Button>\n  <Button key=\"two\">Two</Button>\n  <Button key=\"three\">Three</Button>\n</ButtonGroup>\n<ButtonGroup variant=\"text\" aria-label=\"text button group\">\n  <Button key=\"one\">One</Button>\n  <Button key=\"two\">Two</Button>\n  <Button key=\"three\">Three</Button>\n</ButtonGroup>\n<ButtonGroup color=\"warning\" aria-label=\"medium secondary button group\">\n  <Button key=\"one\">One</Button>\n  <Button key=\"two\">Two</Button>\n  <Button key=\"three\">Three</Button>\n</ButtonGroup>\n<ButtonGroup orientation=\"vertical\" aria-label=\"vertical outlined button group\">\n  <Button key=\"one\">One</Button>\n  <Button key=\"two\">Two</Button>\n  <Button key=\"three\">Three</Button>\n</ButtonGroup>`;\n\n  return (\n    <MainCard title=\"Button Group\" codeString={groupButtonCodeString}>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <ButtonGroup disableElevation variant=\"contained\" aria-label=\"outlined primary button group\">\n            {buttons}\n          </ButtonGroup>\n        </Grid>\n        <Grid item>\n          <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n            {buttons}\n          </ButtonGroup>\n        </Grid>\n        <Grid item>\n          <ButtonGroup variant=\"text\" aria-label=\"text button group\">\n            {buttons}\n          </ButtonGroup>\n        </Grid>\n        <Grid item>\n          <ButtonGroup color=\"warning\" aria-label=\"medium secondary button group\">\n            {buttons}\n          </ButtonGroup>\n        </Grid>\n        <Grid item>\n          <ButtonGroup orientation=\"vertical\" aria-label=\"vertical outlined button group\">\n            {buttons}\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2480},"src/pages/forms/layouts/action-bar.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport CardContent from '@mui/material/CardContent';\nimport CardActions from '@mui/material/CardActions';\nimport Divider from '@mui/material/Divider';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Link2, Trash } from 'iconsax-react';\n\n// ==============================|| LAYOUTS- ACTION BAR ||============================== //\n\nexport default function ActionBar() {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={6} lg={6}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"Simple Action Bar\" content={false}>\n              <CardContent>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Name</InputLabel>\n                      <TextField fullWidth placeholder=\"Enter full name\" />\n                    </Stack>\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ width: 1, px: 1.5, py: 0.75 }}>\n                  <Button color=\"error\" size=\"small\">\n                    Cancel\n                  </Button>\n                  <Button variant=\"contained\" size=\"small\">\n                    Submit\n                  </Button>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Action Button with Link\" content={false}>\n              <CardContent>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Name</InputLabel>\n                      <TextField fullWidth placeholder=\"Enter full name\" />\n                    </Stack>\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent=\"flex-end\" sx={{ width: 1, px: 1.5, py: 0.75 }}>\n                  <Button color=\"error\" size=\"small\">\n                    Cancel\n                  </Button>\n                  <Typography variant=\"body2\" sx={{ mr: '8px !important' }}>\n                    or\n                  </Typography>\n                  <Button variant=\"contained\" size=\"small\">\n                    Submit\n                  </Button>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"With side action button\" content={false}>\n              <CardContent>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Name</InputLabel>\n                      <TextField fullWidth placeholder=\"Enter full name\" />\n                    </Stack>\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ width: 1 }}>\n                  <Tooltip title=\"Delete Event\" placement=\"top\">\n                    <IconButton size=\"large\" color=\"error\">\n                      <Trash variant=\"Bold\" />\n                    </IconButton>\n                  </Tooltip>\n                  <Stack direction=\"row\" spacing={1} sx={{ px: 1.5, py: 0.75 }}>\n                    <Button color=\"error\" size=\"small\">\n                      Cancel\n                    </Button>\n                    <Button variant=\"contained\" size=\"small\">\n                      Submit\n                    </Button>\n                  </Stack>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={6} lg={6}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"Left Align Action Bar\" content={false}>\n              <CardContent>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Name</InputLabel>\n                      <TextField fullWidth placeholder=\"Enter full name\" />\n                    </Stack>\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" spacing={1} sx={{ px: 1.5, py: 0.75 }}>\n                  <Button color=\"error\" size=\"small\">\n                    Cancel\n                  </Button>\n                  <Button variant=\"contained\" size=\"small\">\n                    Submit\n                  </Button>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Horizontal Form\" content={false}>\n              <CardContent>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                    <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>\n                  </Grid>\n                  <Grid item xs={12} sm={9} lg={8}>\n                    <TextField fullWidth placeholder=\"Enter full name\" />\n                    <FormHelperText>Please enter your full name</FormHelperText>\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" spacing={1} justifyContent=\"center\" sx={{ width: 1, px: 1.5, py: 0.75 }}>\n                  <Button color=\"error\" size=\"small\">\n                    Cancel\n                  </Button>\n                  <Button variant=\"contained\" size=\"small\">\n                    Submit\n                  </Button>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard\n              title=\"Top & Bottom Actions Bars\"\n              content={false}\n              secondary={\n                <IconButton>\n                  <Link2 style={{ color: theme.palette.primary.main }} />\n                </IconButton>\n              }\n            >\n              <CardContent>\n                <Stack spacing={1}>\n                  <InputLabel>Name</InputLabel>\n                  <TextField fullWidth placeholder=\"Enter full name\" />\n                </Stack>\n                <FormHelperText>Please enter your full name</FormHelperText>\n              </CardContent>\n              <Divider />\n              <CardActions>\n                <Stack direction=\"row\" spacing={1} sx={{ width: 1, px: 1.5, py: 0.75 }}>\n                  <Button color=\"error\" size=\"small\">\n                    Cancel\n                  </Button>\n                  <Button variant=\"contained\" size=\"small\">\n                    Submit\n                  </Button>\n                </Stack>\n              </CardActions>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":8255},"src/pages/tables/services-sorting.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n// import Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\n// import makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\n// import LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { HeaderSort, SelectColumnSorting } from 'components/third-party/react-table';\nimport axiosInstance from 'api/axios-instance';\nimport { useNavigate } from 'react-router-dom';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const navigate = useNavigate();\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [sorting, setSorting] = useState([{ id: 'id', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={matchDownSM ? 'Services' : 'Services Table'}\n      content={false}\n      secondary={\n        <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1, sm: 2 }}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          {/* <CSVExport {...{ data: table.getSortedRowModel().rows.map((d) => d.original), headers, filename: 'sorting.csv' }} /> */}\n        </Stack>\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  onClick={() => navigate(`/forms/edit/services/${row.original.id}`)} // Handle row click navigation\n                  style={{ cursor: 'pointer' }} // Make the row look clickable\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - SORTING ||============================== //\n\nexport default function SortingTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveServices = await axiosInstance.get('admin/services/list');\n        if (retrieveServices.status === 200) {\n          setData(retrieveServices.data);\n        } else {\n          console.error('Failed to retrieve services');\n        }\n      } catch (error) {\n        console.error('Error fetching services:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      // {\n      //   header: 'Department',\n      //   accessorKey: 'department'\n      // },\n      {\n        header: 'Page Name',\n        accessorKey: 'title'\n      },\n      {\n        header: 'Page ID',\n        accessorKey: 'id'\n      }\n    ],\n    []\n  );\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":6104},"src/components/cards/statistics/EcommerceDataCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// ==============================|| CHART WIDGET - ECOMMERCE CARD  ||============================== //\n\nexport default function EcommerceDataCard({ title, count, percentage, color, iconPrimary, children }) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n              <Avatar variant=\"rounded\" color={color}>\n                {iconPrimary}\n              </Avatar>\n              <Typography variant=\"subtitle1\">{title}</Typography>\n            </Stack>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                'aria-labelledby': 'wallet-button',\n                sx: { p: 1.25, minWidth: 150 }\n              }}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right'\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <MainCard content={false} border={false} sx={{ bgcolor: 'background.default' }}>\n            <Box sx={{ p: 3, pb: 1.25 }}>\n              <Grid container spacing={3}>\n                <Grid item xs={7}>\n                  {children}\n                </Grid>\n                <Grid item xs={5}>\n                  <Stack spacing={1}>\n                    <Typography variant=\"h5\">{count}</Typography>\n                    {percentage}\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Box>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nEcommerceDataCard.propTypes = {\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.node,\n  color: PropTypes.any,\n  iconPrimary: PropTypes.node,\n  children: PropTypes.any\n};\n","size_bytes":3454},"src/sections/maps/draggable-marker/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useCallback, memo } from 'react';\n\n// third-party\nimport Map from 'react-map-gl';\n\n// project-import\nimport ControlPanel from './control-panel';\nimport MapControl from 'components/third-party/map/MapControl';\nimport MapMarker from 'components/third-party/map/MapMarker';\n\n// ==============================|| MAP - DRAGGABLE MARKER ||============================== //\n\nfunction DraggableMarkers({ ...other }) {\n  const [marker, setMarker] = useState({\n    latitude: 21.2335611,\n    longitude: 72.8636084\n  });\n\n  const [events, logEvents] = useState({});\n\n  const onMarkerDragStart = useCallback((event) => {\n    // @ts-ignore\n    logEvents((_events) => ({ ..._events, onDragStart: event.lngLat }));\n  }, []);\n\n  const onMarkerDrag = useCallback((event) => {\n    // @ts-ignore\n    logEvents((_events) => ({ ..._events, onDrag: event.lngLat }));\n\n    setMarker({\n      longitude: event.lngLat.lng,\n      latitude: event.lngLat.lat\n    });\n  }, []);\n\n  const onMarkerDragEnd = useCallback((event) => {\n    // @ts-ignore\n    logEvents((_events) => ({ ..._events, onDragEnd: event.lngLat }));\n  }, []);\n\n  return (\n    <>\n      <Map initialViewState={{ latitude: 21.2335611, longitude: 72.8636084, zoom: 6 }} {...other}>\n        <MapControl />\n        <MapMarker\n          longitude={marker.longitude}\n          latitude={marker.latitude}\n          anchor=\"bottom\"\n          draggable\n          onDragStart={onMarkerDragStart}\n          onDrag={onMarkerDrag}\n          onDragEnd={onMarkerDragEnd}\n        />\n      </Map>\n\n      <ControlPanel events={events} />\n    </>\n  );\n}\n\nexport default memo(DraggableMarkers);\n\nDraggableMarkers.propTypes = { other: PropTypes.any };\n","size_bytes":1722},"src/components/cards/statistics/UserCountCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// styles\nconst IconWrapper = styled('div')({\n  position: 'absolute',\n  left: '-17px',\n  bottom: '-27px',\n  color: '#fff',\n  transform: 'rotate(25deg)',\n  '& svg': { width: '100px', height: '100px', opacity: '0.35' }\n});\n\n// =============================|| STATISTICS - USER NUM CARD ||============================= //\n\nexport default function UserCountCard({ primary, secondary, iconPrimary, color }) {\n  const IconPrimary = iconPrimary;\n  const primaryIcon = iconPrimary ? <IconPrimary fontSize=\"large\" /> : null;\n\n  return (\n    <Card elevation={0} sx={{ bgcolor: color, position: 'relative', color: '#fff' }}>\n      <CardContent>\n        <IconWrapper>{primaryIcon}</IconWrapper>\n        <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\" spacing={1}>\n          <Grid item sm={12}>\n            <Typography variant=\"h3\" align=\"center\" color=\"inherit\">\n              {secondary}\n            </Typography>\n          </Grid>\n          <Grid item sm={12}>\n            <Typography variant=\"body1\" align=\"center\" color=\"inherit\">\n              {primary}\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n}\n\nUserCountCard.propTypes = { primary: PropTypes.string, secondary: PropTypes.string, iconPrimary: PropTypes.any, color: PropTypes.string };\n","size_bytes":1599},"src/sections/components-overview/buttons/ToggleButtons/ExclusiveToggleButtons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// assets\nimport { TextalignCenter, TextalignJustifycenter, TextalignLeft, TextalignRight } from 'iconsax-react';\n\n// ==============================|| TOGGLE BUTTON - EXCLUSIVE ||============================== //\n\nexport default function ExclusiveToggleButtons() {\n  const [alignment, setAlignment] = useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n      <ToggleButton value=\"left\" aria-label=\"left aligned\">\n        <TextalignCenter />\n      </ToggleButton>\n      <ToggleButton value=\"center\" aria-label=\"centered\">\n        <TextalignRight />\n      </ToggleButton>\n      <ToggleButton value=\"right\" aria-label=\"right aligned\">\n        <TextalignLeft />\n      </ToggleButton>\n      <ToggleButton value=\"list\" aria-label=\"list\" disabled sx={{ '&.Mui-disabled': { color: 'text.disabled' } }}>\n        <TextalignJustifycenter />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":1231},"src/sections/components-overview/accordion/DisabledAccordion.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Accordion from '@mui/material/Accordion';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| ACCORDION - DISABLED ||============================== //\n\nexport default function DisabledAccordion() {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const disabledAccordionCodeString = `<Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n  <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n    <Typography variant=\"h6\">Accordion 01</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n  <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n    <Typography variant=\"h6\">Accordion 02</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n  <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n    <Typography variant=\"h6\">Accordion 03</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')} disabled>\n  <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n    <Typography variant=\"h6\">Accordion 04</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel5'} onChange={handleChange('panel5')} disabled>\n  <AccordionSummary aria-controls=\"panel5d-content\" id=\"panel5d-header\">\n    <Typography variant=\"h6\">Accordion 05</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>`;\n\n  return (\n    <MainCard title=\"Disabled\" codeString={disabledAccordionCodeString}>\n      <>\n        <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n          <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n            <Typography variant=\"h6\">Accordion 01</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n          <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n            <Typography variant=\"h6\">Accordion 02</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n          <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n            <Typography variant=\"h6\">Accordion 03</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')} disabled>\n          <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n            <Typography variant=\"h6\">Accordion 04</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel5'} onChange={handleChange('panel5')} disabled>\n          <AccordionSummary aria-controls=\"panel5d-content\" id=\"panel5d-header\">\n            <Typography variant=\"h6\">Accordion 05</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":7109},"src/pages/components-overview/cards.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Divider from '@mui/material/Divider';\nimport CardMedia from '@mui/material/CardMedia';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport CardTabs from 'sections/components-overview/cards/CardTabs';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { Edit, Setting } from 'iconsax-react';\nimport media from 'assets/images/component/card-media.png';\n\n// ==============================|| COMPONENTS - CARD ||============================== //\n\nexport default function ComponentCard() {\n  const theme = useTheme();\n\n  const cardAction = (\n    <ToggleButtonGroup\n      fullWidth\n      color=\"primary\"\n      exclusive\n      aria-label=\"text alignment\"\n      size=\"small\"\n      sx={{\n        p: 1,\n        '& .MuiToggleButton-root': {\n          borderRadius: 0,\n          p: 0.75,\n          '&:not(.Mui-selected)': { borderTopColor: 'transparent', borderBottomColor: 'transparent' },\n          '&:first-of-type': { borderLeftColor: 'transparent' },\n          '&:last-of-type': { borderRightColor: 'transparent' },\n          '&:hover': { bgcolor: 'transparent', color: 'primary.main' }\n        }\n      }}\n    >\n      <ToggleButton value=\"web\" aria-label=\"web\">\n        <Setting />\n      </ToggleButton>\n      <ToggleButton value=\"android\" aria-label=\"android\">\n        <Edit />\n      </ToggleButton>\n      <ToggleButton value=\"ios\" aria-label=\"ios\">\n        <MoreIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n\n  const basicCardCodeString = `<MainCard border={false} shadow={theme.customShadows.z1} sx={{ height: '100%' }}>\n  <Typography variant=\"h6\">Card Subtitle</Typography>\n  <Typography variant=\"caption\" color=\"text.secondary\">\n    This is card description\n  </Typography>\n</MainCard>\n\n<MainCard title=\"Card Title\" border={false} shadow={theme.customShadows.z1} sx={{ height: '100%' }}>\n  <Typography variant=\"h6\">Card Subtitle</Typography>\n  <Typography variant=\"caption\" color=\"text.secondary\">\n    This is card description\n  </Typography>\n</MainCard>`;\n\n  const outlinedCardCodeString = `<MainCard sx={{ height: '100%' }}>\n  <Typography variant=\"h6\">Card Subtitle</Typography>\n  <Typography variant=\"caption\" color=\"text.secondary\">\n    This is card description\n  </Typography>\n</MainCard>\n\n<MainCard title=\"Card Title\" sx={{ height: '100%' }}>\n  <Typography variant=\"h6\">Card Subtitle</Typography>\n  <Typography variant=\"caption\" color=\"text.secondary\">\n    This is card description\n  </Typography>\n</MainCard>`;\n\n  const actionCardCodeString = `<MainCard\n  title=\"Card Title\"\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      More\n    </Link>\n  }\n>\n  <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n    Card Subtitle\n  </Typography>\n  <Typography variant=\"body1\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim.\n  </Typography>\n</MainCard>\n<MainCard\n  title=\"Card Title\"\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      <More />\n    </Link>\n  }\n>\n  <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n    Card Subtitle\n  </Typography>\n  <Typography variant=\"body1\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper\n    ligula. Mauris purus sem.\n  </Typography>\n</MainCard>\n\n<MainCard\n  title=\"Card Title\"\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      <More />\n    </Link>\n  }\n  content={false}\n>\n  <CardContent>\n    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n      Card Subtitle\n    </Typography>\n    <Typography variant=\"body1\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Typography>\n  </CardContent>\n  <Divider />\n  <ToggleButtonGroup\n    fullWidth\n    color=\"primary\"\n    exclusive\n    aria-label=\"text alignment\"\n    size=\"small\"\n    sx={{\n      p: 1,\n      '& .MuiToggleButton-root': {\n        borderRadius: 0,\n        p: 0.75,\n        '&:not(.Mui-selected)': {\n          borderTopColor: 'transparent',\n          borderBottomColor: 'transparent'\n        },\n        '&:first-of-type': {\n          borderLeftColor: 'transparent'\n        },\n        '&:last-of-type': {\n          borderRightColor: 'transparent'\n        },\n        '&:hover': {\n          bgcolor: 'transparent',\n          color: 'primary.main'\n        }\n      }\n    }}\n  >\n    <ToggleButton value=\"web\" aria-label=\"web\">\n      <Setting />\n    </ToggleButton>\n    <ToggleButton value=\"android\" aria-label=\"android\">\n      <Edit />\n    </ToggleButton>\n    <ToggleButton value=\"ios\" aria-label=\"ios\">\n      <More style={{ transform: 'rotate(90deg)' }} />\n    </ToggleButton>\n  </ToggleButtonGroup>\n</MainCard>`;\n\n  const mediaCardCodeString = `<MainCard content={false}>\n  <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n  <CardContent>\n    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n      Card Subtitle\n    </Typography>\n    <Typography variant=\"body1\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu.\n    </Typography>\n  </CardContent>\n  <Divider />\n  <ToggleButtonGroup\n    fullWidth\n    color=\"primary\"\n    exclusive\n    aria-label=\"text alignment\"\n    size=\"small\"\n    sx={{\n      p: 1,\n      '& .MuiToggleButton-root': {\n        borderRadius: 0,\n        p: 0.75,\n        '&:not(.Mui-selected)': {\n          borderTopColor: 'transparent',\n          borderBottomColor: 'transparent'\n        },\n        '&:first-of-type': {\n          borderLeftColor: 'transparent'\n        },\n        '&:last-of-type': {\n          borderRightColor: 'transparent'\n        },\n        '&:hover': {\n          bgcolor: 'transparent',\n          color: 'primary.main'\n        }\n      }\n    }}\n  >\n    <ToggleButton value=\"web\" aria-label=\"web\">\n      <Setting />\n    </ToggleButton>\n    <ToggleButton value=\"android\" aria-label=\"android\">\n      <Edit />\n    </ToggleButton>\n    <ToggleButton value=\"ios\" aria-label=\"ios\">\n      <More style={{ transform: 'rotate(90deg)' }} />\n    </ToggleButton>\n  </ToggleButtonGroup>\n</MainCard>\n\n<MainCard\n  title=\"Card Title\"\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      <More />\n    </Link>\n  }\n  content={false}\n>\n  <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n  <CardContent>\n    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n      Card Subtitle\n    </Typography>\n    <Typography variant=\"body1\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu,\n    </Typography>\n  </CardContent>\n</MainCard>\n\n<MainCard\n  title=\"Card Title\"\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      <More />\n    </Link>\n  }\n  content={false}\n>\n  <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n  <CardContent>\n    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n      Card Subtitle\n    </Typography>\n    <Typography variant=\"body1\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Typography>\n  </CardContent>\n  <Divider />\n  <ToggleButtonGroup\n    fullWidth\n    color=\"primary\"\n    exclusive\n    aria-label=\"text alignment\"\n    size=\"small\"\n    sx={{\n      p: 1,\n      '& .MuiToggleButton-root': {\n        borderRadius: 0,\n        p: 0.75,\n        '&:not(.Mui-selected)': {\n          borderTopColor: 'transparent',\n          borderBottomColor: 'transparent'\n        },\n        '&:first-of-type': {\n          borderLeftColor: 'transparent'\n        },\n        '&:last-of-type': {\n          borderRightColor: 'transparent'\n        },\n        '&:hover': {\n          bgcolor: 'transparent',\n          color: 'primary.main'\n        }\n      }\n    }}\n  >\n    <ToggleButton value=\"web\" aria-label=\"web\">\n      <Setting />\n    </ToggleButton>\n    <ToggleButton value=\"android\" aria-label=\"android\">\n      <Edit />\n    </ToggleButton>\n    <ToggleButton value=\"ios\" aria-label=\"ios\">\n      <More style={{ transform: 'rotate(90deg)' }} />\n    </ToggleButton>\n  </ToggleButtonGroup>\n</MainCard>`;\n\n  const complexCardCodeString = `<MainCard content={false}>\n  <Box sx={{ width: '100%' }}>\n    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n      <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n        <Tab label=\"Article\" {...a11yProps(0)} />\n        <Tab label=\"App\" {...a11yProps(1)} />\n        <Tab label=\"Project\" {...a11yProps(2)} />\n      </Tabs>\n    </Box>\n    <TabPanel value={value} index={0}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        Article Content\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom={!activeTab}>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n        purus sem, sagittis eu mauris et, viverra lobortis urna.\n      </Typography>\n      {!activeTab && (\n        <Typography variant=\"h6\">\n          Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis.\n          Suspendisse blandit velit sit amet velit porta aliquet.\n        </Typography>\n      )}\n    </TabPanel>\n    <TabPanel value={value} index={1}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        App Content\n      </Typography>\n      <Typography variant=\"h6\">\n        Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n        semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n      </Typography>\n    </TabPanel>\n    <TabPanel value={value} index={2}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        Project Content\n      </Typography>\n      <Typography variant=\"h6\">\n        Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n        cursus in nec est.\n      </Typography>\n    </TabPanel>\n  </Box>\n</MainCard>\n\n<MainCard\n  title=\"Card Title\"\n  divider={false}\n  content={false}\n  secondary={\n    <Link color=\"primary\" href=\"/\">\n      More\n    </Link>\n  }\n>\n  <Box sx={{ width: '100%' }}>\n    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n      <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n        <Tab label=\"Article\" {...a11yProps(0)} />\n        <Tab label=\"App\" {...a11yProps(1)} />\n        <Tab label=\"Project\" {...a11yProps(2)} />\n      </Tabs>\n    </Box>\n    <TabPanel value={value} index={0}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        Article Content\n      </Typography>\n      <Typography variant=\"h6\" gutterBottom={!activeTab}>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n        purus sem, sagittis eu mauris et, viverra lobortis urna.\n      </Typography>\n      {!activeTab && (\n        <Typography variant=\"h6\">\n          Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis.\n          Suspendisse blandit velit sit amet velit porta aliquet.\n        </Typography>\n      )}\n    </TabPanel>\n    <TabPanel value={value} index={1}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        App Content\n      </Typography>\n      <Typography variant=\"h6\">\n        Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n        semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n      </Typography>\n    </TabPanel>\n    <TabPanel value={value} index={2}>\n      <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n        Project Content\n      </Typography>\n      <Typography variant=\"h6\">\n        Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n        cursus in nec est.\n      </Typography>\n    </TabPanel>\n  </Box>\n</MainCard>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Card\"\n        caption=\"Cards contain content and actions about a single subject.\"\n        directory=\"src/pages/components-overview/cards\"\n        link=\"https://mui.com/material-ui/react-card/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeString={basicCardCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <MainCard border={false} shadow={theme.customShadows.z1} sx={{ height: '100%' }}>\n                    <Typography variant=\"h6\">Card Subtitle</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      This is card description\n                    </Typography>\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <MainCard title=\"Card Title\" border={false} shadow={theme.customShadows.z1} sx={{ height: '100%' }}>\n                    <Typography variant=\"h6\">Card Subtitle</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      This is card description\n                    </Typography>\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Outlined\" codeString={outlinedCardCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <MainCard sx={{ height: '100%' }}>\n                    <Typography variant=\"h6\">Card Subtitle</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      This is card description\n                    </Typography>\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <MainCard title=\"Card Title\" sx={{ height: '100%' }}>\n                    <Typography variant=\"h6\">Card Subtitle</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      This is card description\n                    </Typography>\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Action\" codeString={actionCardCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <MainCard\n                    title=\"Card Title\"\n                    secondary={\n                      <Link component={RouterLink} to=\"#\" color=\"primary\">\n                        More\n                      </Link>\n                    }\n                  >\n                    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                      Card Subtitle\n                    </Typography>\n                    <Typography variant=\"body1\">\n                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim.\n                    </Typography>\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <MainCard\n                    title=\"Card Title\"\n                    secondary={\n                      <IconButton size=\"small\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                        <MoreIcon />\n                      </IconButton>\n                    }\n                  >\n                    <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                      Card Subtitle\n                    </Typography>\n                    <Typography variant=\"body1\">\n                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper\n                      ligula. Mauris purus sem.\n                    </Typography>\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <MainCard\n                    title=\"Card Title\"\n                    secondary={\n                      <IconButton size=\"small\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                        <MoreIcon />\n                      </IconButton>\n                    }\n                    content={false}\n                  >\n                    <CardContent>\n                      <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                        Card Subtitle\n                      </Typography>\n                      <Typography variant=\"body1\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Typography>\n                    </CardContent>\n                    <Divider />\n                    {cardAction}\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Complex Interaction\" codeString={complexCardCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <MainCard content={false}>\n                    <CardTabs />\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12}>\n                  <MainCard\n                    title=\"Card Title\"\n                    divider={false}\n                    content={false}\n                    secondary={\n                      <Link component={RouterLink} to=\"#\" color=\"primary\">\n                        More\n                      </Link>\n                    }\n                  >\n                    <CardTabs activeTab={2} />\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} xl={9}>\n            <MainCard title=\"Media\" codeString={mediaCardCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6} lg={4}>\n                  <MainCard content={false}>\n                    <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n                    <CardContent>\n                      <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                        Card Subtitle\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu.\n                      </Typography>\n                    </CardContent>\n                    <Divider />\n                    {cardAction}\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} sm={6} lg={4}>\n                  <MainCard\n                    title=\"Card Title\"\n                    secondary={\n                      <IconButton size=\"small\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                        <MoreIcon />\n                      </IconButton>\n                    }\n                    content={false}\n                  >\n                    <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n                    <CardContent>\n                      <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                        Card Subtitle\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu,\n                      </Typography>\n                    </CardContent>\n                  </MainCard>\n                </Grid>\n                <Grid item xs={12} sm={6} lg={4}>\n                  <MainCard\n                    title=\"Card Title\"\n                    secondary={\n                      <IconButton size=\"small\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                        <MoreIcon />\n                      </IconButton>\n                    }\n                    content={false}\n                  >\n                    <CardMedia component=\"img\" image={media} alt=\"green iguana\" />\n                    <CardContent>\n                      <Typography variant=\"h5\" color=\"text.secondary\" gutterBottom>\n                        Card Subtitle\n                      </Typography>\n                      <Typography variant=\"body1\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</Typography>\n                    </CardContent>\n                    <Divider />\n                    {cardAction}\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":21581},"src/sections/apps/chat/ChatDrawer.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Drawer from '@mui/material/Drawer';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport UserAvatar from './UserAvatar';\nimport UserList from './UserList';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\nimport useAuth from 'hooks/useAuth';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowRight2, Clock, Logout, MinusCirlce, SearchNormal1, Setting3, TickCircle } from 'iconsax-react';\n\n// ==============================|| CHAT - DRAWER ||============================== //\n\nexport default function ChatDrawer({ handleDrawerOpen, openChatDrawer, setUser, selectedUser }) {\n  const theme = useTheme();\n  const { user } = useAuth();\n\n  const matchDownLG = useMediaQuery(theme.breakpoints.down('lg'));\n  const drawerBG = theme.palette.mode === ThemeMode.DARK ? 'dark.main' : 'white';\n\n  // show menu to set current user status\n  const [anchorEl, setAnchorEl] = useState();\n  const handleClickRightMenu = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleCloseRightMenu = () => {\n    setAnchorEl(null);\n  };\n\n  // set user status on status menu click\n  const [status, setStatus] = useState('available');\n  const handleRightMenuItemClick = (userStatus) => () => {\n    setStatus(userStatus);\n    handleCloseRightMenu();\n  };\n\n  const [search, setSearch] = useState('');\n  const handleSearch = async (event) => {\n    const newString = event?.target.value;\n    setSearch(newString);\n  };\n\n  return (\n    <Drawer\n      sx={{\n        width: 320,\n        flexShrink: 0,\n        zIndex: { xs: openChatDrawer ? 1200 : -1, lg: 0 },\n        '& .MuiDrawer-paper': {\n          height: matchDownLG ? '100%' : 'auto',\n          width: 320,\n          boxSizing: 'border-box',\n          position: 'relative',\n          border: 'none',\n          ...(!matchDownLG && { borderRadius: '12px 0 0 12px' })\n        }\n      }}\n      variant={matchDownLG ? 'temporary' : 'persistent'}\n      anchor=\"left\"\n      open={openChatDrawer}\n      ModalProps={{ keepMounted: true }}\n      onClose={handleDrawerOpen}\n    >\n      <MainCard\n        sx={{ bgcolor: matchDownLG ? 'transparent' : drawerBG, borderRadius: '12px 0 0 12px', borderRight: 'none' }}\n        border={!matchDownLG}\n        content={false}\n      >\n        <Box sx={{ p: 3, pb: 1 }}>\n          <Stack spacing={2}>\n            <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n              <Typography variant=\"h5\" color=\"inherit\">\n                Messages\n              </Typography>\n              <Chip\n                label=\"9\"\n                color={theme.palette.mode === ThemeMode.DARK ? 'default' : 'secondary'}\n                sx={{ width: 20, height: 20, borderRadius: '50%', '& .MuiChip-label': { px: 0.5 } }}\n              />\n            </Stack>\n\n            <OutlinedInput\n              fullWidth\n              id=\"input-search-header\"\n              placeholder=\"Search\"\n              value={search}\n              onChange={handleSearch}\n              sx={{ '& .MuiOutlinedInput-input': { p: '10.5px 0px 12px' } }}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchNormal1 style={{ fontSize: 'small' }} />\n                </InputAdornment>\n              }\n            />\n          </Stack>\n        </Box>\n\n        <SimpleBar\n          sx={{\n            overflowX: 'hidden',\n            height: matchDownLG ? 'calc(100vh - 120px)' : 'calc(100vh - 428px)',\n            minHeight: matchDownLG ? 0 : 420\n          }}\n        >\n          <Box sx={{ p: 3, pt: 0 }}>\n            <UserList setUser={setUser} search={search} selectedUser={selectedUser} />\n          </Box>\n        </SimpleBar>\n        <Box sx={{ px: 3 }}>\n          <List sx={{ '& .MuiListItemIcon-root': { minWidth: 32 } }}>\n            <ListItemButton>\n              <ListItemIcon>\n                <Logout variant=\"Bulk\" />\n              </ListItemIcon>\n              <ListItemText primary=\"LogOut\" />\n            </ListItemButton>\n            <ListItemButton>\n              <ListItemIcon>\n                <Setting3 variant=\"Bulk\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Settings\" />\n            </ListItemButton>\n          </List>\n        </Box>\n\n        <Box sx={{ p: 3, pt: 1, pl: 5 }}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Grid container spacing={1} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\n                <Grid item>\n                  <UserAvatar user={{ online_status: status, avatar: 'avatar-1.png', name: 'User 1' }} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Stack sx={{ cursor: 'pointer', textDecoration: 'none' }} component={Link} to=\"/apps/profiles/user/personal\">\n                    <Typography variant=\"h5\" color=\"text.primary\">\n                      {user ? user?.name : ''}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {user ? user?.role : ''}\n                    </Typography>\n                  </Stack>\n                </Grid>\n                <Grid item>\n                  <IconButton onClick={handleClickRightMenu} size=\"small\" color=\"secondary\">\n                    <ArrowRight2 />\n                  </IconButton>\n                  <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleCloseRightMenu}\n                    anchorOrigin={{\n                      vertical: 'top',\n                      horizontal: 'right'\n                    }}\n                    transformOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right'\n                    }}\n                    sx={{ '& .MuiMenu-list': { p: 0 }, '& .MuiMenuItem-root': { pl: '6px', py: '3px' } }}\n                  >\n                    <MenuItem onClick={handleRightMenuItemClick('available')}>\n                      <IconButton\n                        size=\"small\"\n                        sx={{\n                          color: 'success.main',\n                          '&:hover': { color: 'success.main', bgcolor: 'transparent', transition: 'none', padding: 0 }\n                        }}\n                      >\n                        <TickCircle variant=\"Bold\" />\n                      </IconButton>\n                      <Typography>Active</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={handleRightMenuItemClick('offline')}>\n                      <IconButton\n                        size=\"small\"\n                        sx={{\n                          color: 'warning.main',\n                          '&:hover': { color: 'warning.main', bgcolor: 'transparent', transition: 'none', padding: 0 }\n                        }}\n                      >\n                        <Clock />\n                      </IconButton>\n                      <Typography>Away</Typography>\n                    </MenuItem>\n                    <MenuItem onClick={handleRightMenuItemClick('do_not_disturb')}>\n                      <IconButton\n                        size=\"small\"\n                        sx={{\n                          color: 'secondary.400',\n                          '&:hover': { color: 'secondary.400', bgcolor: 'transparent', transition: 'none', padding: 0 }\n                        }}\n                      >\n                        <MinusCirlce />\n                      </IconButton>\n                      <Typography>Do not disturb</Typography>\n                    </MenuItem>\n                  </Menu>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </MainCard>\n    </Drawer>\n  );\n}\n\nChatDrawer.propTypes = {\n  handleDrawerOpen: PropTypes.func,\n  openChatDrawer: PropTypes.oneOfType([PropTypes.bool, PropTypes.any]),\n  setUser: PropTypes.func,\n  selectedUser: PropTypes.oneOfType([PropTypes.any, PropTypes.string])\n};\n","size_bytes":8928},"src/components/cards/skeleton/ProductPlaceholder.jsx":{"content":"// material-ui\nimport CardContent from '@mui/material/CardContent';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Skeleton from '@mui/material/Skeleton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ===========================|| SKELETON - PRODUCT CARD ||=========================== //\n\nexport default function ProductPlaceholder() {\n  return (\n    <MainCard content={false}>\n      <Skeleton variant=\"rectangular\" height={220} />\n      <CardContent sx={{ p: 2 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Skeleton variant=\"rectangular\" height={20} />\n          </Grid>\n          <Grid item xs={12}>\n            <Skeleton variant=\"rectangular\" height={45} />\n          </Grid>\n          <Grid item xs={12} sx={{ pt: '8px !important' }}>\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n              <Skeleton variant=\"rectangular\" height={20} width={90} />\n              <Skeleton variant=\"rectangular\" height={20} width={38} />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Grid container spacing={1}>\n                <Grid item>\n                  <Skeleton variant=\"rectangular\" height={20} width={40} />\n                </Grid>\n                <Grid item>\n                  <Skeleton variant=\"rectangular\" height={17} width={20} />\n                </Grid>\n              </Grid>\n              <Skeleton variant=\"rectangular\" height={32} width={47} />\n            </Stack>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":1699},"src/layout/Dashboard/Header/HeaderContent/Profile/SettingTab.jsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Link from '@mui/material/Link';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\n// assets\nimport { Clipboard, I24Support, Lock1, Messages1, Profile } from 'iconsax-react';\n\n// ==============================|| HEADER PROFILE - SETTING TAB ||============================== //\n\nexport default function SettingTab() {\n  const navigate = useNavigate();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const handleListItemClick = (event, index, route = '') => {\n    setSelectedIndex(index);\n    if (route && route !== '') {\n      navigate(route);\n    }\n  };\n\n  return (\n    <List component=\"nav\" sx={{ p: 0, '& .MuiListItemIcon-root': { minWidth: 32 } }}>\n      {/* <Link style={{ textDecoration: 'none' }} target=\"_blank\" href=\"https://phoenixcoded.authordesk.app/\">\n        <ListItemButton selected={selectedIndex === 0} onClick={(event) => handleListItemClick(event, 0)}>\n          <ListItemIcon>\n            <I24Support variant=\"Bulk\" size={18} />\n          </ListItemIcon>\n          <ListItemText primary=\"Support\" />\n        </ListItemButton>\n      </Link> */}\n      <ListItemButton selected={selectedIndex === 1} onClick={(event) => handleListItemClick(event, 1, '/apps/profiles/account/settings')}>\n        <ListItemIcon>\n          <Profile variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Account Settings\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 2} onClick={(event) => handleListItemClick(event, 2)}>\n        <ListItemIcon>\n          <Lock1 variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Privacy Center\" />\n      </ListItemButton>\n      {/* <Link style={{ textDecoration: 'none' }} target=\"_blank\" href=\"https://phoenixcoded.authordesk.app/\">\n        <ListItemButton selected={selectedIndex === 3} onClick={(event) => handleListItemClick(event, 3)}>\n          <ListItemIcon>\n            <Messages1 variant=\"Bulk\" size={18} />\n          </ListItemIcon>\n          <ListItemText primary=\"Feedback\" />\n        </ListItemButton>\n      </Link> */}\n      <ListItemButton selected={selectedIndex === 4} onClick={(event) => handleListItemClick(event, 4)}>\n        <ListItemIcon>\n          <Clipboard variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"History\" />\n      </ListItemButton>\n    </List>\n  );\n}\n","size_bytes":2613},"src/themes/overrides/FormHelperText.js":{"content":"// ==============================|| OVERRIDES - FORM HELPER TEXT ||============================== //\n\nexport default function FormHelperText() {\n  return {\n    MuiFormHelperText: {\n      styleOverrides: {\n        root: {\n          marginTop: 4,\n          marginLeft: 0\n        }\n      }\n    }\n  };\n}\n","size_bytes":300},"src/utils/trimFc.js":{"content":"// ==============================|| CUSTOM FUNCTION - STRING TRIM ||============================== //\n\nfunction ltrim(str) {\n  if (!str) return str;\n  return str.replace(/^\\s+/g, '');\n}\n\nfunction rtrim(str) {\n  if (!str) return str;\n  return str.replace(/\\s+$/g, ' ');\n}\n\nexport default function trimFc(formik) {\n  return (e) => {\n    const ff = ltrim(rtrim(e.target.value));\n    formik.setFieldValue(e.target.name, ff);\n  };\n}\n","size_bytes":428},"src/sections/apps/e-commerce/checkout/CheckoutTab.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// MATIRIAL-UI\nimport { styled, useTheme } from '@mui/material/styles';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// PROJECT IMPORT\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport BillingAddress from 'sections/apps/e-commerce/checkout/BillingAddress';\nimport Cart from 'sections/apps/e-commerce/checkout/Cart';\nimport CartEmpty from 'sections/apps/e-commerce/checkout/CartEmpty';\nimport Payment from 'sections/apps/e-commerce/checkout/Payment';\n\nimport { updateAddress } from 'api/address';\nimport { openSnackbar } from 'api/snackbar';\nimport { removeCartProduct, setBackStep, setBillingAddress, setCheckoutStep, setNextStep, updateCartProduct } from 'api/cart';\n\n// ASSETS\nimport { TickCircle } from 'iconsax-react';\n\nconst StyledTab = styled((props) => <Tab {...props} />)(({ theme }) => ({\n  minHeight: 'auto',\n  minWidth: 250,\n  padding: 16,\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'flex-start',\n  textAlign: 'left',\n  justifyContent: 'flex-start',\n  '&:after': { backgroundColor: 'transparent !important' },\n  '& > svg': {\n    marginBottom: '0px !important',\n    marginRight: 10,\n    marginTop: 2,\n    height: 20,\n    width: 20\n  },\n  [theme.breakpoints.down('md')]: { minWidth: 'auto' }\n}));\n\n// tabs option\nconst tabsOption = [{ label: 'Cart' }, { label: 'Shipping Information' }, { label: 'Payment' }];\n\n// tabs\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <div>{children}</div>}\n    </div>\n  );\n}\n\n// ==============================|| PRODUCT - CHECKOUT MAIN ||============================== //\n\nexport default function CheckoutTab({ cart }) {\n  const theme = useTheme();\n\n  const isCart = cart.products && cart.products.length > 0;\n\n  const [value, setValue] = useState(cart.step > 2 ? 2 : cart.step);\n  const [billing, setBilling] = useState(cart.billing);\n\n  const editBillingAddress = (addressEdit) => {\n    updateAddress(addressEdit.id, addressEdit).then(() => setBillingAddress(addressEdit));\n  };\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n    setCheckoutStep(newValue);\n  };\n\n  useEffect(() => {\n    setValue(cart.step > 2 ? 2 : cart.step);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cart.step]);\n\n  const removeProduct = (id) => {\n    removeCartProduct(id, cart.products);\n    openSnackbar({\n      open: true,\n      message: 'Update Cart Success',\n      variant: 'alert',\n      alert: { color: 'success' }\n    });\n  };\n\n  const updateQuantity = (id, quantity) => {\n    updateCartProduct(id, quantity, cart.products);\n  };\n\n  const onNext = () => {\n    setNextStep();\n  };\n\n  const onBack = () => {\n    setBackStep();\n  };\n\n  const billingAddressHandler = (addressBilling) => {\n    if (billing !== null || addressBilling !== null) {\n      if (addressBilling !== null) {\n        setBilling(addressBilling);\n      }\n\n      setBillingAddress(addressBilling !== null ? addressBilling : billing);\n      onNext();\n    } else {\n      openSnackbar({\n        open: true,\n        message: 'Please select delivery address',\n        variant: 'alert',\n        alert: { color: 'error' }\n      });\n    }\n  };\n\n  return (\n    <Stack spacing={2}>\n      <MainCard content={false}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Tabs\n              value={value}\n              onChange={(e, newValue) => handleChange(newValue)}\n              aria-label=\"icon label tabs example\"\n              variant=\"scrollable\"\n              sx={{\n                '& .MuiTabs-flexContainer': { borderBottom: 'none' },\n                '& .MuiTabs-indicator': { display: 'none' },\n                '& .MuiButtonBase-root + .MuiButtonBase-root': {\n                  position: 'relative',\n                  overflow: 'visible',\n                  ml: 2,\n                  '&:after': {\n                    content: '\"\"',\n                    bgcolor: '#ccc',\n                    width: 1,\n                    height: 'calc(100% - 16px)',\n                    position: 'absolute',\n                    top: 8,\n                    left: -8\n                  }\n                }\n              }}\n            >\n              {tabsOption.map((tab, index) => (\n                <StyledTab\n                  theme={theme}\n                  value={index}\n                  cart={cart}\n                  disabled={index > cart.step}\n                  key={index}\n                  label={\n                    <Grid container>\n                      <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                        <Avatar\n                          type={index !== cart.step ? 'combined' : 'filled'}\n                          size=\"xs\"\n                          color={index > cart.step ? 'secondary' : 'primary'}\n                          sx={{ p: 0, border: 'none', '& svg': { width: 24, height: 24 } }}\n                        >\n                          {index === cart.step ? index + 1 : <TickCircle />}\n                        </Avatar>\n                        <Typography color={index > cart.step ? 'text.secondary' : 'inherit'}>{tab.label}</Typography>\n                      </Stack>\n                    </Grid>\n                  }\n                />\n              ))}\n            </Tabs>\n          </Grid>\n        </Grid>\n      </MainCard>\n      <Grid container>\n        <Grid item xs={12}>\n          <TabPanel value={value} index={0}>\n            {isCart && <Cart checkout={cart} onNext={onNext} removeProduct={removeProduct} updateQuantity={updateQuantity} />}\n            {!isCart && <CartEmpty />}\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <BillingAddress checkout={cart} onBack={onBack} billingAddressHandler={billingAddressHandler} />\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <Payment checkout={cart} onBack={onBack} onNext={onNext} removeProduct={removeProduct} editAddress={editBillingAddress} />\n          </TabPanel>\n        </Grid>\n      </Grid>\n    </Stack>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.any, value: PropTypes.any, index: PropTypes.any, other: PropTypes.any };\n\nCheckoutTab.propTypes = { cart: PropTypes.any };\n","size_bytes":6583},"src/themes/overrides/LinearProgress.js":{"content":"// ==============================|| OVERRIDES - LINER PROGRESS ||============================== //\n\nexport default function LinearProgress() {\n  return {\n    MuiLinearProgress: {\n      styleOverrides: {\n        root: {\n          height: 6,\n          borderRadius: 100\n        },\n        bar: {\n          borderRadius: 100\n        }\n      }\n    }\n  };\n}\n","size_bytes":353},"src/sections/apps/invoice/InvoiceModal.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport { format } from 'date-fns';\n\n// project-imports\nimport Logo from 'components/logo';\nimport ExportPDFView from './export-pdf';\n\n// assets\nimport { DocumentDownload } from 'iconsax-react';\n\n// ==============================|| INVOICE - PREVIEW ||============================== //\n\nexport default function InvoiceModal({ isOpen, setIsOpen, invoiceInfo, items, onAddNextInvoice }) {\n  const theme = useTheme();\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const addNextInvoiceHandler = () => {\n    setIsOpen(false);\n    onAddNextInvoice();\n  };\n\n  let date;\n  let dueDate;\n  try {\n    date = format(new Date(invoiceInfo.date), 'dd/mm/yyyy');\n    dueDate = format(new Date(invoiceInfo.due_date), 'dd/MM/yyyy');\n  } catch (error) {\n    console.log('error - ', error);\n  }\n\n  const subtotal = invoiceInfo?.invoice_detail?.reduce((prev, curr) => {\n    if (curr.name.trim().length > 0) return prev + Number(curr.price * Math.floor(curr.qty));\n    else return prev;\n  }, 0);\n  const taxRate = (invoiceInfo.tax * subtotal) / 100;\n  const discountRate = (invoiceInfo.discount * subtotal) / 100;\n  const total = subtotal - discountRate + taxRate;\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={closeModal}\n      maxWidth=\"md\"\n      sx={{\n        '& .MuiDialog-paper': { p: 0, minWidth: { xl: 1200, sm: 'calc(100% - 20%)' } },\n        '& .MuiBackdrop-root': { opacity: '0.5 !important' }\n      }}\n    >\n      <Box sx={{ pb: 2.5 }}>\n        {/* This element is to trick the browser into centering the modal contents. */}\n        <span aria-hidden=\"true\">&#8203;</span>\n        <Box id=\"print\" sx={{ p: 2.5 }}>\n          <Box sx={{ pb: 2.5 }}>\n            <Stack sx={{ flexDirection: { xs: 'column', sm: 'row' } }} justifyContent=\"space-between\">\n              <Box sx={{ pt: 2.5 }}>\n                <Stack direction=\"row\" spacing={2}>\n                  <Logo /> <Chip label=\"Paid\" variant=\"light\" color=\"success\" />\n                </Stack>\n                <Typography color=\"secondary\">{invoiceInfo.invoice_id}</Typography>\n              </Box>\n              <Box sx={{ pt: 2.5, pb: 1.75 }}>\n                <Stack direction=\"row\" justifyContent=\"space-between\">\n                  <Typography sx={{ pl: 4 }} variant=\"subtitle1\">\n                    Date{' '}\n                  </Typography>\n                  <Typography>{date}</Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"space-between\">\n                  <Typography sx={{ pr: 2, overflow: 'hidden' }} variant=\"subtitle1\">\n                    Due Date\n                  </Typography>\n                  <Typography>{dueDate}</Typography>\n                </Stack>\n              </Box>\n            </Stack>\n            <Box sx={{ pt: 2.5 }}>\n              <Grid container spacing={2} justifyContent=\"space-between\" direction=\"row\">\n                <Grid item xs={12} sm={6}>\n                  <Box sx={{ border: 1, minHeight: 168, borderColor: 'secondary.200', borderRadius: 0.5, p: 2.5 }}>\n                    <Grid container direction=\"row\">\n                      <Grid item md={8}>\n                        <Typography variant=\"h5\">From:</Typography>\n                        <FormControl sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{invoiceInfo.cashierInfo.name}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.cashierInfo.address}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.cashierInfo.phone}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.cashierInfo.email}</Typography>\n                        </FormControl>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Box sx={{ border: 1, minHeight: 168, borderColor: 'secondary.200', borderRadius: 0.5, p: 2.5 }}>\n                    <Grid container direction=\"row\">\n                      <Grid item md={8}>\n                        <Typography variant=\"h5\">To:</Typography>\n                        <FormControl sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{invoiceInfo.customerInfo.name}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.customerInfo.address}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.customerInfo.phone}</Typography>\n                          <Typography color=\"secondary\">{invoiceInfo.customerInfo.email}</Typography>\n                        </FormControl>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>#</TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell align=\"right\">Qty</TableCell>\n                  <TableCell align=\"right\">Price</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {items.map((item) => (\n                  <TableRow key={item.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                    <TableCell>{items.indexOf(item) + 1}</TableCell>\n                    <TableCell>{item.name}</TableCell>\n                    <TableCell>{item.description}</TableCell>\n                    <TableCell align=\"right\">{item.qty}</TableCell>\n                    <TableCell align=\"right\">${Number(item.price).toFixed(2)}</TableCell>\n                    <TableCell align=\"right\">${Number(item.price * item.qty).toFixed(2)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Box sx={{ p: 2.5 }}>\n            <Grid container direction=\"row\" justifyContent=\"flex-end\">\n              <Grid item md={4}>\n                <Stack spacing={2}>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color=\"secondary\">Sub Total:</Typography>\n                    <Typography variant=\"h6\">${subtotal.toFixed(2)}</Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color=\"secondary\">Discount:</Typography>\n                    <Typography variant=\"h6\" color={theme.palette.success.main}>\n                      ${discountRate.toFixed(2)}\n                    </Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color={theme.palette.secondary.main}>Tax:</Typography>\n                    <Typography variant=\"h6\">${taxRate.toFixed(2)}</Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography sx={{ pr: 2 }} variant=\"subtitle1\">\n                      Grand Total:\n                    </Typography>\n                    <Typography variant=\"h6\">${total % 1 === 0 ? total : total.toFixed(2)}</Typography>\n                  </Stack>\n                </Stack>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n        <Box sx={{ p: 2.5 }}>\n          <Typography>Notes: {invoiceInfo.notes}</Typography>\n        </Box>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={2} sx={{ p: 2.5 }}>\n          <Button color=\"secondary\" onClick={addNextInvoiceHandler}>\n            Cancel\n          </Button>\n          <PDFDownloadLink\n            document={<ExportPDFView list={invoiceInfo} />}\n            fileName={`${invoiceInfo?.invoiceId || invoiceInfo?.invoice_id}-${\n              invoiceInfo?.customer_name || invoiceInfo?.from?.name || invoiceInfo?.customerInfo?.name\n            }.pdf`}\n            style={{ textDecoration: 'none' }}\n          >\n            <Button startIcon={<DocumentDownload />} variant=\"contained\" color=\"primary\">\n              Download\n            </Button>\n          </PDFDownloadLink>\n        </Stack>\n      </Box>\n    </Dialog>\n  );\n}\n\nInvoiceModal.propTypes = {\n  isOpen: PropTypes.any,\n  setIsOpen: PropTypes.any,\n  invoiceInfo: PropTypes.any,\n  items: PropTypes.any,\n  onAddNextInvoice: PropTypes.any\n};\n","size_bytes":9311},"src/sections/components-overview/buttons/ToggleButtons/index.jsx":{"content":"// material-ui\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ExclusiveToggleButtons from './ExclusiveToggleButtons';\nimport MultipleToggleButtons from './MultipleToggleButtons';\nimport ColorToggleButton from './ColorToggleButton';\nimport TextToggleButtons from './TextToggleButtons';\nimport VariantToggleButtons from './VariantToggleButtons';\nimport VerticalToggleButtons from './VerticalToggleButtons';\n\n// ==============================|| TOGGLE BUTTON ||============================== //\n\nconst toggleButtonCodeString = `// ExclusiveToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\" disabled sx={{ '&.Mui-disabled': { color: 'text.disabled' } }}>\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"text formatting\">\n  <ToggleButton value=\"bold\" aria-label=\"bold\">\n    <BoldOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"italic\" aria-label=\"italic\">\n    <ItalicOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n    <UnderlineOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n    <BgColorsOutlined />\n    <DownOutlined style={{ fontSize: '0.625rem', marginLeft: 6 }} />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// ColorToggleButton.tsx\n<ToggleButtonGroup color=\"primary\" value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"left\" aria-label=\"left aligned\">\n    <AlignLeftOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"center\" aria-label=\"centered\">\n    <AlignCenterOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"right\" aria-label=\"right aligned\">\n    <AlignRightOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"list\" aria-label=\"list\">\n    <UnorderedListOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// TextToggleButtons.tsx\n<ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n  <ToggleButton value=\"one\" aria-label=\"first\">\n    One\n  </ToggleButton>\n  <ToggleButton value=\"two\" aria-label=\"second\">\n    Two\n  </ToggleButton>\n  <ToggleButton value=\"three\" aria-label=\"third\">\n    Three\n  </ToggleButton>\n  <ToggleButton value=\"four\" aria-label=\"fourth\">\n    Four\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VariantToggleButtons.tsx\n<ToggleButtonGroup\n  value={alignment}\n  color=\"primary\"\n  exclusive\n  onChange={handleAlignment}\n  aria-label=\"text alignment\"\n  sx={{\n    '& .MuiToggleButton-root': {\n      '&:not(.Mui-selected)': {\n        borderTopColor: 'transparent',\n        borderBottomColor: 'transparent'\n      },\n      '&:first-of-type': {\n        borderLeftColor: 'transparent'\n      },\n      '&:last-of-type': {\n        borderRightColor: 'transparent'\n      },\n      '&.Mui-selected': {\n        borderColor: 'inherit',\n        borderLeftColor: theme.palette.primary.main !important,\n        '&:hover': {\n          bgcolor: theme.palette.primary.lighter\n        }\n      },\n      '&:hover': {\n        bgcolor: 'transparent',\n        borderColor: theme.palette.primary.main,\n        borderLeftColor: theme.palette.primary.main !important,\n        zIndex: 2\n      }\n    }\n  }}\n>\n  <ToggleButton value=\"web\" aria-label=\"web\">\n    Web\n  </ToggleButton>\n  <ToggleButton value=\"android\" aria-label=\"android\">\n    Android\n  </ToggleButton>\n  <ToggleButton value=\"ios\" aria-label=\"ios\">\n    iOS\n  </ToggleButton>\n  <ToggleButton value=\"all\" aria-label=\"all\">\n    All\n  </ToggleButton>\n</ToggleButtonGroup>\n\n// VerticalToggleButtons.tsx\n<ToggleButtonGroup orientation=\"vertical\" value={view} exclusive onChange={handleChange}>\n  <ToggleButton value=\"tree\" aria-label=\"tree\">\n    <ApartmentOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"grid\" aria-label=\"grid\">\n    <AppstoreOutlined />\n  </ToggleButton>\n  <ToggleButton value=\"table\" aria-label=\"table\">\n    <TableOutlined />\n  </ToggleButton>\n</ToggleButtonGroup>`;\n\nexport default function ToggleButtons() {\n  return (\n    <MainCard title=\"Toggle Button\" codeString={toggleButtonCodeString}>\n      <Stack spacing={2} sx={{ mb: 2 }}>\n        <ExclusiveToggleButtons />\n        <MultipleToggleButtons />\n        <ColorToggleButton />\n        <TextToggleButtons />\n        <VariantToggleButtons />\n      </Stack>\n      <VerticalToggleButtons />\n    </MainCard>\n  );\n}\n","size_bytes":4836},"src/routes/ErrorBoundary.jsx":{"content":"import { isRouteErrorResponse, useRouteError } from 'react-router-dom';\n\n// material-ui\nimport Alert from '@mui/material/Alert';\n\n// ==============================|| ELEMENT ERROR - COMMON ||============================== //\n\nexport default function ErrorBoundary() {\n  const error = useRouteError();\n\n  if (isRouteErrorResponse(error)) {\n    if (error.status === 404) {\n      return <Alert color=\"error\">Error 404 - This page doesn&apos;t exist!</Alert>;\n    }\n\n    if (error.status === 401) {\n      return <Alert color=\"error\">Error 401 - You aren&apos;t authorized to see this</Alert>;\n    }\n\n    if (error.status === 503) {\n      return <Alert color=\"error\">Error 503 - Looks like our API is down</Alert>;\n    }\n\n    if (error.status === 418) {\n      return <Alert color=\"error\">Error 418 - Contact administrator</Alert>;\n    }\n  }\n\n  return <Alert color=\"error\">Under Maintenance</Alert>;\n}\n","size_bytes":896},"src/layout/Simple/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { lazy, Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\n// project import\nimport Loader from 'components/Loader';\nimport { SimpleLayoutType } from 'config';\n\nconst Header = lazy(() => import('./Header'));\nconst FooterBlock = lazy(() => import('./FooterBlock'));\n\n// ==============================|| LAYOUT - SIMPLE / LANDING ||============================== //\n\nexport default function SimpleLayout({ layout = SimpleLayoutType.SIMPLE }) {\n  return (\n    <Suspense fallback={<Loader />}>\n      <Header />\n      <Outlet />\n      <FooterBlock isFull={layout === SimpleLayoutType.LANDING} />\n    </Suspense>\n  );\n}\n\nSimpleLayout.propTypes = { layout: PropTypes.any };\n","size_bytes":728},"src/sections/components-overview/lists/BasicList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { DocumentSketch, Element, Grid5 } from 'iconsax-react';\n\n// ==============================|| LIST - BASIC ||============================== //\n\nexport default function BasicList() {\n  const basicListCodeString = `<List sx={{ p: 0 }}>\n  <ListItem disablePadding divider>\n    <ListItemButton>\n      <ListItemText primary=\"List item 01\" />\n    </ListItemButton>\n  </ListItem>\n  <ListItem disablePadding divider>\n    <ListItemButton>\n      <ListItemText primary=\"List item 02\" />\n    </ListItemButton>\n  </ListItem>\n  <ListItem disablePadding divider>\n    <ListItemButton>\n      <ListItemIcon>\n        <Grid5 />\n      </ListItemIcon>\n      <ListItemText primary=\"Sample\" />\n    </ListItemButton>\n  </ListItem>\n  <ListItem disablePadding divider>\n    <ListItemButton>\n      <ListItemIcon>\n        <DocumentSketch />\n      </ListItemIcon>\n      <ListItemText primary=\"Page\" />\n    </ListItemButton>\n  </ListItem>\n  <ListItem disablePadding>\n    <ListItemButton>\n      <ListItemIcon>\n        <Element />\n      </ListItemIcon>\n      <ListItemText primary=\"UI Elements\" />\n    </ListItemButton>\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeHighlight codeString={basicListCodeString}>\n      <List sx={{ p: 0, '& .MuiListItemButton-root': { borderRadius: 0, my: 0 } }}>\n        <ListItem disablePadding divider>\n          <ListItemButton>\n            <ListItemText primary=\"List item 01\" />\n          </ListItemButton>\n        </ListItem>\n        <ListItem disablePadding divider>\n          <ListItemButton>\n            <ListItemText primary=\"List item 02\" />\n          </ListItemButton>\n        </ListItem>\n        <ListItem disablePadding divider>\n          <ListItemButton>\n            <ListItemIcon>\n              <Grid5 size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Sample\" />\n          </ListItemButton>\n        </ListItem>\n        <ListItem disablePadding divider>\n          <ListItemButton>\n            <ListItemIcon>\n              <DocumentSketch size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Page\" />\n          </ListItemButton>\n        </ListItem>\n        <ListItem disablePadding>\n          <ListItemButton>\n            <ListItemIcon>\n              <Element size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"UI Elements\" />\n          </ListItemButton>\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":2773},"src/sections/components-overview/stepper/HorizontalLinearStepper.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Step from '@mui/material/Step';\nimport Alert from '@mui/material/Alert';\nimport Button from '@mui/material/Button';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst steps = ['Select campaign settings', 'Create an ad group', 'Create an ad'];\n\nfunction StepWrapper({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\n// ==============================|| STEPPER - LINEAR ||============================== //\n\nexport default function HorizontalLinearStepper() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [skipped, setSkipped] = useState(new Set());\n\n  const isStepOptional = (step) => step === 1;\n\n  const isStepSkipped = (step) => skipped.has(step);\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const hlStepperCodeString = ` // HorizontalLinearStepper.tsx\n<Stepper activeStep={activeStep}>\n  {steps.map((label, index) => {\n    const stepProps: { completed?: boolean } = {};\n    const labelProps: {\n      optional?: ReactNode;\n    } = {};\n    if (isStepOptional(index)) {\n      labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n    }\n    if (isStepSkipped(index)) {\n      stepProps.completed = false;\n    }\n    return (\n      <Step key={label} {...stepProps}>\n        <StepLabel {...labelProps}>{label}</StepLabel>\n      </Step>\n    );\n  })}\n</Stepper>\n{activeStep === steps.length ? (\n  <>\n    <Alert sx={{ my: 3 }}>All steps completed - you&apos;re finished</Alert>\n    <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n      <Box sx={{ flex: '1 1 auto' }} />\n      <Button onClick={handleReset} color=\"error\" variant=\"contained\">\n        Reset\n      </Button>\n    </Box>\n  </>\n) : (\n  <>\n    <StepWrapper value={activeStep} index={0}>\n      <Typography>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel massa mi. Nullam suscipit eu est non eleifend. Duis in\n        laoreet metus. Etiam a vulputate nibh, sed maximus urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\n        laoreet urna ut sodales malesuada. Vivamus sit amet massa turpis. Nullam nec ligula tempor, aliquam mauris nec, volutpat\n        tellus. Ut mattis a lacus ac fermentum. Vestibulum sit amet tempus nisl. Nulla id enim ante. Orci varius natoque penatibus\n        et magnis dis parturient montes, nascetur ridiculus mus. Nunc nec velit arcu.\n      </Typography>\n    </StepWrapper>\n    <StepWrapper value={activeStep} index={1}>\n      <Typography>\n        Curabitur fringilla purus scelerisque, auctor mi ac, posuere sem. Nullam dictum mauris lectus, in laoreet lorem dignissim\n        vel. Sed rutrum non nulla eget laoreet. Curabitur sit amet hendrerit magna, hendrerit vulputate nunc. Quisque maximus, orci\n        id lobortis imperdiet, mi lectus porta est, eu aliquet leo risus id lectus. Nullam dignissim, nisl non convallis auctor,\n        enim metus laoreet leo, ut hendrerit arcu tortor ut tellus. In quis dui leo. Maecenas risus nisi, aliquet ac elit eu,\n        eleifend posuere enim. Phasellus interdum mi eu ex varius, ut vestibulum mi accumsan. Integer quis metus ac velit laoreet\n        feugiat ac quis est.\n      </Typography>\n    </StepWrapper>\n    <StepWrapper value={activeStep} index={2}>\n      <Typography>\n        Vivamus sed odio dictum, sollicitudin neque in, sagittis erat. Cras feugiat faucibus luctus. Pellentesque sit amet sagittis\n        sapien. Nunc pharetra molestie ante, non posuere est tincidunt quis. Nunc venenatis lobortis magna sit amet sollicitudin.\n        Nam porta neque eu condimentum dignissim. Cras vestibulum dui et ex dignissim gravida. Nam elementum nec urna ut sagittis.\n        Nullam id scelerisque nunc, in ultricies orci.\n      </Typography>\n    </StepWrapper>\n    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n      <Button variant=\"outlined\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\n        Back\n      </Button>\n      <Box sx={{ flex: '1 1 auto' }} />\n      {isStepOptional(activeStep) && (\n        <Button color=\"error\" onClick={handleSkip} sx={{ mr: 1 }}>\n          Skip\n        </Button>\n      )}\n      <Button onClick={handleNext} variant=\"contained\" color={activeStep === steps.length - 1 ? 'success' : 'primary'}>\n        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n      </Button>\n    </Box>\n  </>\n)}`;\n\n  return (\n    <MainCard title=\"Basic - Linear\" codeString={hlStepperCodeString}>\n      <>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const labelProps = {};\n            if (isStepOptional(index)) {\n              labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        {activeStep === steps.length ? (\n          <>\n            <Alert sx={{ my: 3 }}>All steps completed - you&apos;re finished</Alert>\n            <Box sx={{ display: 'flex', flexDirection: 'row' }}>\n              <Box sx={{ flex: '1 1 auto' }} />\n              <Button onClick={handleReset} color=\"error\" variant=\"contained\">\n                Reset\n              </Button>\n            </Box>\n          </>\n        ) : (\n          <>\n            <StepWrapper value={activeStep} index={0}>\n              <Typography>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec vel massa mi. Nullam suscipit eu est non eleifend. Duis in\n                laoreet metus. Etiam a vulputate nibh, sed maximus urna. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\n                laoreet urna ut sodales malesuada. Vivamus sit amet massa turpis. Nullam nec ligula tempor, aliquam mauris nec, volutpat\n                tellus. Ut mattis a lacus ac fermentum. Vestibulum sit amet tempus nisl. Nulla id enim ante. Orci varius natoque penatibus\n                et magnis dis parturient montes, nascetur ridiculus mus. Nunc nec velit arcu.\n              </Typography>\n            </StepWrapper>\n            <StepWrapper value={activeStep} index={1}>\n              <Typography>\n                Curabitur fringilla purus scelerisque, auctor mi ac, posuere sem. Nullam dictum mauris lectus, in laoreet lorem dignissim\n                vel. Sed rutrum non nulla eget laoreet. Curabitur sit amet hendrerit magna, hendrerit vulputate nunc. Quisque maximus, orci\n                id lobortis imperdiet, mi lectus porta est, eu aliquet leo risus id lectus. Nullam dignissim, nisl non convallis auctor,\n                enim metus laoreet leo, ut hendrerit arcu tortor ut tellus. In quis dui leo. Maecenas risus nisi, aliquet ac elit eu,\n                eleifend posuere enim. Phasellus interdum mi eu ex varius, ut vestibulum mi accumsan. Integer quis metus ac velit laoreet\n                feugiat ac quis est.\n              </Typography>\n            </StepWrapper>\n            <StepWrapper value={activeStep} index={2}>\n              <Typography>\n                Vivamus sed odio dictum, sollicitudin neque in, sagittis erat. Cras feugiat faucibus luctus. Pellentesque sit amet sagittis\n                sapien. Nunc pharetra molestie ante, non posuere est tincidunt quis. Nunc venenatis lobortis magna sit amet sollicitudin.\n                Nam porta neque eu condimentum dignissim. Cras vestibulum dui et ex dignissim gravida. Nam elementum nec urna ut sagittis.\n                Nullam id scelerisque nunc, in ultricies orci.\n              </Typography>\n            </StepWrapper>\n            <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n              <Button variant=\"outlined\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\n                Back\n              </Button>\n              <Box sx={{ flex: '1 1 auto' }} />\n              {isStepOptional(activeStep) && (\n                <Button color=\"error\" onClick={handleSkip} sx={{ mr: 1 }}>\n                  Skip\n                </Button>\n              )}\n              <Button onClick={handleNext} variant=\"contained\" color={activeStep === steps.length - 1 ? 'success' : 'primary'}>\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n              </Button>\n            </Box>\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n\nStepWrapper.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":9960},"src/sections/extra-pages/contact/ContactHeader.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\n\n// assets\nimport AuthBackground from 'assets/images/auth/AuthBackground';\n\n// ==============================|| CONTACT US - HEADER ||============================== //\n\nexport default function ContactHeader() {\n  return (\n    <Box sx={{ position: 'relative', overflow: 'hidden', pt: 9, pb: 2 }}>\n      <AuthBackground />\n      <Container maxWidth=\"lg\" sx={{ px: { xs: 0, sm: 2 } }}>\n        <Box sx={{ width: { xs: '100%', sm: 252, md: 360, lg: 436 }, py: 6, mx: 'auto' }}>\n          <Stack spacing={1}>\n            <Typography align=\"center\" variant=\"h2\">\n              Talk to our Expert\n            </Typography>\n            <Typography align=\"center\" color=\"text.secondary\">\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n            </Typography>\n          </Stack>\n        </Box>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":1108},"src/components/Customization/MenuCaption.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport CardMedia from '@mui/material/CardMedia';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport Caption from 'assets/images/customization/caption.svg';\nimport NoCaption from 'assets/images/customization/no-caption.svg';\n\n// ==============================|| CUSTOMIZATION - MODE ||============================== //\n\nexport default function MenuCaption() {\n  const theme = useTheme();\n  const { menuCaption, onChangeMenuCaption } = useConfig();\n\n  const handleMenuCaptionChange = () => {\n    onChangeMenuCaption();\n  };\n\n  return (\n    <RadioGroup\n      row\n      aria-label=\"payment-card\"\n      name=\"payment-card\"\n      value={menuCaption ? 'caption' : 'default'}\n      onChange={handleMenuCaptionChange}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value=\"caption\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(menuCaption && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={Caption} alt=\"Caption\" />\n              </MainCard>\n              <Typography variant=\"caption\">Show Caption</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value=\"default\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(!menuCaption && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={NoCaption} alt=\"NoCaption\" />\n              </MainCard>\n              <Typography variant=\"caption\">Hide Caption</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":2470},"src/sections/apps/kanban/Board/AlertColumnDelete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| KANBAN BOARD - COLUMN DELETE ||============================== //\n\nexport default function AlertColumnDelete({ title, open, handleClose }) {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => handleClose(false)}\n      keepMounted\n      TransitionComponent={PopupTransition}\n      maxWidth=\"xs\"\n      aria-labelledby=\"column-delete-title\"\n      aria-describedby=\"column-delete-description\"\n    >\n      <DialogContent sx={{ mt: 2, my: 1 }}>\n        <Stack alignItems=\"center\" spacing={3.5}>\n          <Avatar color=\"error\" sx={{ width: 72, height: 72, fontSize: '1.75rem' }}>\n            <Trash variant=\"Bold\" />\n          </Avatar>\n          <Stack spacing={2}>\n            <Typography variant=\"h4\" align=\"center\">\n              Are you sure you want to delete?\n            </Typography>\n            <Typography align=\"center\">\n              By deleting\n              <Typography variant=\"subtitle1\" component=\"span\">\n                {' '}\n                &quot;{title}&quot;{' '}\n              </Typography>\n              column, all task inside that column will also be deleted.\n            </Typography>\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2} sx={{ width: 1 }}>\n            <Button fullWidth onClick={() => handleClose(false)} color=\"secondary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button fullWidth color=\"error\" variant=\"contained\" onClick={() => handleClose(true)} autoFocus>\n              Delete\n            </Button>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nAlertColumnDelete.propTypes = { title: PropTypes.string, open: PropTypes.bool, handleClose: PropTypes.func };\n","size_bytes":2200},"src/sections/apps/calendar/Toolbar.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport ButtonGroup from '@mui/material/ButtonGroup';\n\n// third-party\nimport { format } from 'date-fns';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { ArrowLeft2, ArrowRight2, Calendar1, Category, Grid6, TableDocument } from 'iconsax-react';\n\n// constant\nconst viewOptions = [\n  {\n    label: 'Month',\n    value: 'dayGridMonth',\n    icon: Category\n  },\n  {\n    label: 'Week',\n    value: 'timeGridWeek',\n    icon: Grid6\n  },\n  {\n    label: 'Day',\n    value: 'timeGridDay',\n    icon: Calendar1\n  },\n  {\n    label: 'Agenda',\n    value: 'listWeek',\n    icon: TableDocument\n  }\n];\n\n// ==============================|| CALENDAR - TOOLBAR ||============================== //\n\nexport default function Toolbar({ date, view, onClickNext, onClickPrev, onClickToday, onChangeView }) {\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [viewFilter, setViewFilter] = useState(viewOptions);\n\n  useEffect(() => {\n    if (matchDownSM) {\n      const filter = viewOptions.filter((item) => item.value !== 'dayGridMonth' && item.value !== 'timeGridWeek');\n      setViewFilter(filter);\n    } else {\n      setViewFilter(viewOptions);\n    }\n  }, [matchDownSM]);\n\n  return (\n    <Grid alignItems=\"center\" container justifyContent=\"space-between\" spacing={matchDownSM ? 1 : 3} sx={{ pb: 3 }}>\n      <Grid item>\n        <Button variant=\"outlined\" onClick={onClickToday} size={matchDownSM ? 'small' : 'medium'}>\n          Today\n        </Button>\n      </Grid>\n      <Grid item>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={matchDownSM ? 1 : 3}>\n          <IconButton onClick={onClickPrev} size={matchDownSM ? 'small' : 'large'}>\n            <ArrowLeft2 />\n          </IconButton>\n          <Typography variant={matchDownSM ? 'h5' : 'h3'} color=\"text.primary\">\n            {format(date, 'MMMM yyyy')}\n          </Typography>\n          <IconButton onClick={onClickNext} size={matchDownSM ? 'small' : 'large'}>\n            <ArrowRight2 />\n          </IconButton>\n        </Stack>\n      </Grid>\n      <Grid item>\n        <ButtonGroup variant=\"outlined\" aria-label=\"outlined button group\">\n          {viewFilter.map((viewOption) => {\n            const Icon = viewOption.icon;\n            return (\n              <Tooltip title={viewOption.label} key={viewOption.value}>\n                <Button\n                  size={matchDownSM ? 'small' : 'large'}\n                  disableElevation\n                  variant={viewOption.value === view ? 'contained' : 'outlined'}\n                  onClick={() => onChangeView(viewOption.value)}\n                >\n                  <Icon variant={viewOption.value === view ? 'Bold' : 'Linear'} />\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  );\n}\n\nToolbar.propTypes = {\n  date: PropTypes.oneOfType([PropTypes.number, PropTypes.any]),\n  view: PropTypes.string,\n  onClickNext: PropTypes.func,\n  onClickPrev: PropTypes.func,\n  onClickToday: PropTypes.func,\n  onChangeView: PropTypes.func\n};\n","size_bytes":3436},"src/sections/forms/edit-forms/jobs/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\n\nimport { List, ListItem } from '@mui/material';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.jobTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Internship Status\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.isInternship ? 'Yes' : 'No'}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta Description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta Keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Location\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.location}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job type\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.type}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First section list\n            </Typography>\n            <List>\n              {data.firstSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second section list\n            </Typography>\n            <List>\n              {data.secondSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.thirdSectionList}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third section list\n            </Typography>\n            <List>\n              {data.thirdSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.fourthSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth section list\n            </Typography>\n            <List>\n              {data.fourthSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5484},"src/sections/forms/wizard/team-validation-wizard/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  console.log(data.imageLabelSrc);\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Full Name of member\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.fullName}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.job}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Portrait image of member\n            </Typography>\n            <ImageDisplay file={data.imageSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Facebook link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.facebook}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Linkedin link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.linkedin}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Twitter link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.twitter}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":3034},"src/themes/theme/theme3.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME3 ||============================== //\n\nexport default function Theme4(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#E6F3EC', '#84c297', '#5eb57d', '#3da866', '#1f9c53', '#068e44', '#006933', '#004222', '#001c0f', '#000000'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1a231f', '#173123', '#174029', '#13502f', '#0e6737', '#0a7d3e', '#1f8f4e', '#3ba162', '#5cb07a', '#82bf95'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2912},"src/sections/components-overview/select/AutoWidthSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| SELECT - AUTO WIDTH ||============================== //\n\nexport default function AutoWidthSelect() {\n  const [age, setAge] = useState('');\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const widthSelectCodeString = `<FormControl sx={{ minWidth: 80 }}>\n  <InputLabel id=\"demo-simple-select-autowidth-label\">Auto</InputLabel>\n  <Select\n    labelId=\"demo-simple-select-autowidth-label\"\n    id=\"demo-simple-select-autowidth\"\n    value={age}\n    onChange={handleChange}\n    autoWidth\n    placeholder=\"Age\"\n  >\n    <MenuItem value=\"\">\n      <em>None</em>\n    </MenuItem>\n    <MenuItem value={10}>Twenty</MenuItem>\n    <MenuItem value={21}>Twenty one</MenuItem>\n    <MenuItem value={22}>Twenty one and a half</MenuItem>\n  </Select>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"Auto Width\" codeString={widthSelectCodeString}>\n      <FormControl sx={{ minWidth: 80 }}>\n        <InputLabel id=\"demo-simple-select-autowidth-label\">Auto</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-autowidth-label\"\n          id=\"demo-simple-select-autowidth\"\n          value={age}\n          onChange={handleChange}\n          autoWidth\n          placeholder=\"Age\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Twenty</MenuItem>\n          <MenuItem value={21}>Twenty one</MenuItem>\n          <MenuItem value={22}>Twenty one and a half</MenuItem>\n        </Select>\n      </FormControl>\n    </MainCard>\n  );\n}\n","size_bytes":1854},"src/sections/apps/kanban/Backlogs/EditStory.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Drawer from '@mui/material/Drawer';\nimport Select from '@mui/material/Select';\nimport Tooltip from '@mui/material/Tooltip';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\n\n// third-party\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\n\n// project-imports\nimport AddStoryComment from './AddStoryComment';\nimport StoryComment from './StoryComment';\nimport AlertStoryDelete from './AlertStoryDelete';\n\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport UploadMultiFile from 'components/third-party/dropzone/MultiFile';\n\nimport { DropzopType } from 'config';\nimport { deleteStory, editStory, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add, Trash } from 'iconsax-react';\n\nconst validationSchema = yup.object({\n  title: yup.string().required('User story title is required'),\n  dueDate: yup.date()\n});\n\n// ==============================|| KANBAN BACKLOGS - EDIT STORY ||============================== //\n\nexport default function EditStory({ story, open, handleDrawerOpen }) {\n  const { backlogs } = useGetBacklogs();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      id: story.id,\n      title: story.title,\n      assign: story.assign,\n      columnId: story.columnId,\n      priority: story.priority,\n      dueDate: story.dueDate ? new Date(story.dueDate) : new Date(),\n      acceptance: story.acceptance,\n      description: story.description,\n      commentIds: story.commentIds,\n      image: false,\n      itemIds: story.itemIds,\n      files: []\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      editStory(values);\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n      handleDrawerOpen();\n    }\n  });\n\n  const [openModal, setOpenModal] = useState(false);\n  const handleModalClose = (status) => {\n    setOpenModal(false);\n    if (status) {\n      handleDrawerOpen();\n      deleteStory(story.id);\n      openSnackbar({\n        open: true,\n        message: 'Story Deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  return (\n    <Drawer\n      sx={{\n        ml: open ? 3 : 0,\n        flexShrink: 0,\n        zIndex: 1200,\n        overflowX: 'hidden',\n        width: { xs: 320, md: 450 },\n        '& .MuiDrawer-paper': {\n          width: { xs: 320, md: 450 },\n          border: 'none',\n          borderRadius: '0px'\n        }\n      }}\n      variant=\"temporary\"\n      anchor=\"right\"\n      open={open}\n      ModalProps={{ keepMounted: true }}\n      onClose={() => {\n        handleDrawerOpen();\n        formik.resetForm();\n      }}\n    >\n      {open && (\n        <SimpleBar sx={{ overflowX: 'hidden', height: '100vh' }}>\n          <Box sx={{ p: 3 }}>\n            <Grid container alignItems=\"center\" spacing={0.5} justifyContent=\"space-between\">\n              <Grid item sx={{ width: 'calc(100% - 64px)' }}>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Typography\n                    variant=\"h4\"\n                    sx={{\n                      display: 'inline-block',\n                      width: 'calc(100% - 34px)',\n                      textOverflow: 'ellipsis',\n                      whiteSpace: 'nowrap',\n                      overflow: 'hidden',\n                      verticalAlign: 'middle'\n                    }}\n                  >\n                    {story.title}\n                  </Typography>\n                </Stack>\n              </Grid>\n\n              <Grid item>\n                <Stack direction=\"row\" alignItems=\"center\">\n                  <Tooltip title=\"Delete Task\">\n                    <IconButton color=\"error\" onClick={() => setOpenModal(true)} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                      <Trash variant=\"Bold\" />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Close\">\n                    <IconButton color=\"secondary\" onClick={handleDrawerOpen} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                      <Add style={{ transform: 'rotate(45deg)' }} />\n                    </IconButton>\n                  </Tooltip>\n                </Stack>\n                <AlertStoryDelete title={story.title} open={openModal} handleClose={handleModalClose} />\n              </Grid>\n            </Grid>\n          </Box>\n          <Divider />\n          <Box sx={{ p: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <form onSubmit={formik.handleSubmit}>\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <Grid container spacing={2.5}>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Title</InputLabel>\n                          <TextField\n                            fullWidth\n                            id=\"title\"\n                            name=\"title\"\n                            placeholder=\"Title\"\n                            value={formik.values.title}\n                            onChange={formik.handleChange}\n                            error={formik.touched.title && Boolean(formik.errors.title)}\n                            helperText={formik.touched.title && formik.errors.title}\n                          />\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Assign to</InputLabel>\n                          <Autocomplete\n                            id=\"assign\"\n                            value={backlogs?.profiles.find((profile) => profile.id === formik.values.assign) || null}\n                            onChange={(event, value) => {\n                              formik.setFieldValue('assign', value?.id);\n                            }}\n                            options={backlogs?.profiles}\n                            fullWidth\n                            autoHighlight\n                            getOptionLabel={(option) => option.name}\n                            isOptionEqualToValue={(option) => option.id === formik.values.assign}\n                            renderOption={(props, option) => (\n                              <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                                <img loading=\"lazy\" width=\"20\" src={getImageUrl(`${option.avatar}`, ImagePath.USERS)} alt=\"\" />\n                                {option.name}\n                              </Box>\n                            )}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Choose a assignee\"\n                                inputProps={{\n                                  ...params.inputProps,\n                                  autoComplete: 'new-password' // disable autocomplete and autofill\n                                }}\n                              />\n                            )}\n                          />\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Prioritize</InputLabel>\n                          <FormControl>\n                            <RadioGroup\n                              row\n                              aria-label=\"color\"\n                              value={formik.values.priority}\n                              onChange={formik.handleChange}\n                              name=\"priority\"\n                              id=\"priority\"\n                            >\n                              <FormControlLabel\n                                value=\"low\"\n                                control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />}\n                                label=\"Low\"\n                              />\n                              <FormControlLabel\n                                value=\"medium\"\n                                control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />}\n                                label=\"Medium\"\n                              />\n                              <FormControlLabel value=\"high\" control={<Radio color=\"error\" sx={{ color: 'error.main' }} />} label=\"High\" />\n                            </RadioGroup>\n                          </FormControl>\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Due date</InputLabel>\n                          <DesktopDatePicker\n                            value={formik.values.dueDate}\n                            format=\"dd/MM/yyyy\"\n                            onChange={(date) => {\n                              formik.setFieldValue('dueDate', date);\n                            }}\n                          />\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Acceptance</InputLabel>\n                          <TextField\n                            fullWidth\n                            id=\"acceptance\"\n                            name=\"acceptance\"\n                            multiline\n                            rows={3}\n                            value={formik.values.acceptance}\n                            onChange={formik.handleChange}\n                            error={formik.touched.acceptance && Boolean(formik.errors.acceptance)}\n                            helperText={formik.touched.acceptance && formik.errors.acceptance}\n                          />\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>Description</InputLabel>\n                          <TextField\n                            fullWidth\n                            id=\"description\"\n                            name=\"description\"\n                            multiline\n                            rows={3}\n                            value={formik.values.description}\n                            onChange={formik.handleChange}\n                            error={formik.touched.description && Boolean(formik.errors.description)}\n                            helperText={formik.touched.description && formik.errors.description}\n                          />\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <InputLabel>State</InputLabel>\n                          <FormControl fullWidth sx={{ m: 1 }}>\n                            <Select\n                              id=\"columnId\"\n                              name=\"columnId\"\n                              displayEmpty\n                              value={formik.values.columnId}\n                              onChange={formik.handleChange}\n                              inputProps={{ 'aria-label': 'Without label' }}\n                            >\n                              {backlogs?.columns.map((column, index) => (\n                                <MenuItem key={index} value={column.id}>\n                                  {column.title}\n                                </MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Grid container spacing={1}>\n                          <Grid item xs={12}>\n                            <InputLabel sx={{ mt: 0.5 }}>Attachments:</InputLabel>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <UploadMultiFile\n                              type={DropzopType.STANDARD}\n                              showList={true}\n                              setFieldValue={formik.setFieldValue}\n                              files={formik.values.files}\n                              error={formik.touched.files && !!formik.errors.files}\n                            />\n                          </Grid>\n                          {formik.touched.files && formik.errors.files && (\n                            <Grid item xs={12}>\n                              <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                                {formik.errors.files}\n                              </FormHelperText>\n                            </Grid>\n                          )}\n                        </Grid>\n                      </Grid>\n\n                      <Grid item xs={12}>\n                        <AnimateButton>\n                          <Button fullWidth variant=\"contained\" type=\"submit\">\n                            Save\n                          </Button>\n                        </AnimateButton>\n                      </Grid>\n                    </Grid>\n                  </LocalizationProvider>\n                </form>\n              </Grid>\n              <Grid item xs={12}>\n                {story &&\n                  story?.commentIds &&\n                  [...(story?.commentIds || [])].reverse().map((commentId, index) => {\n                    const commentData = backlogs?.comments.filter((comment) => comment.id === commentId)[0];\n                    const profile = backlogs?.profiles.filter((item) => item.id === commentData.profileId)[0];\n                    return <StoryComment key={index} comment={commentData} profile={profile} />;\n                  })}\n              </Grid>\n              <Grid item xs={12}>\n                <AddStoryComment storyId={story.id} />\n              </Grid>\n            </Grid>\n          </Box>\n        </SimpleBar>\n      )}\n    </Drawer>\n  );\n}\n\nEditStory.propTypes = { story: PropTypes.any, open: PropTypes.bool, handleDrawerOpen: PropTypes.func };\n","size_bytes":15510},"src/pages/apps/chat.jsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport Popper from '@mui/material/Popper';\nimport Collapse from '@mui/material/Collapse';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\n\n// third-party\nimport EmojiPicker, { SkinTones } from 'emoji-picker-react';\n\n// project-imports\nimport ChatDrawer from 'sections/apps/chat/ChatDrawer';\nimport ChatHistory from 'sections/apps/chat/ChatHistory';\nimport ChatHeader from 'sections/apps/chat/ChatHeader';\nimport UserDetails from 'sections/apps/chat/UserDetails';\n\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport { PopupTransition } from 'components/@extended/Transitions';\nimport CircularWithPath from 'components/@extended/progress/CircularWithPath';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ThemeDirection, ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport { openSnackbar } from 'api/snackbar';\nimport { insertChat, useGetUsers } from 'api/chat';\nimport incrementer from 'utils/incrementer';\n\n// assets\nimport {\n  Add,\n  Call,\n  Camera,\n  DocumentDownload,\n  EmojiHappy,\n  Image,\n  InfoCircle,\n  Paperclip,\n  Send,\n  Trash,\n  VolumeHigh,\n  VolumeMute\n} from 'iconsax-react';\n\nconst drawerWidth = 320;\n\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  flexGrow: 1,\n  transition: theme.transitions.create('margin', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.shorter\n  }),\n  marginLeft: `-${drawerWidth}px`,\n  [theme.breakpoints.down('lg')]: {\n    paddingLeft: 0,\n    marginLeft: 0\n  },\n  ...(open && {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.shorter\n    }),\n    marginLeft: 0\n  })\n}));\n\n// ==============================|| APPLICATION - CHAT ||============================== //\n\nexport default function Chat() {\n  const theme = useTheme();\n  const { themeDirection } = useConfig();\n  const { usersLoading, users } = useGetUsers();\n\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('lg'));\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n  const [emailDetails, setEmailDetails] = useState(false);\n  const [user, setUser] = useState({});\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  useEffect(() => {\n    if (!usersLoading) {\n      const newUser = users.filter((item) => item.id?.toString() === '2')[0];\n      setUser(newUser);\n    }\n    // eslint-disable-next-line\n  }, [usersLoading]);\n\n  const handleClickSort = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleCloseSort = () => {\n    setAnchorEl(null);\n  };\n\n  const handleUserChange = () => {\n    setEmailDetails((prev) => !prev);\n  };\n\n  const [openChatDrawer, setOpenChatDrawer] = useState(true);\n  const handleDrawerOpen = () => {\n    setOpenChatDrawer((prevState) => !prevState);\n  };\n\n  const [anchorElEmoji, setAnchorElEmoji] = useState(); /** No single type can cater for all elements */\n\n  const handleOnEmojiButtonClick = (event) => {\n    setAnchorElEmoji(anchorElEmoji ? null : event?.currentTarget);\n  };\n\n  // handle new message form\n  const [message, setMessage] = useState('');\n  const textInput = useRef(null);\n\n  const handleOnSend = () => {\n    if (message.trim() === '') {\n      openSnackbar({\n        open: true,\n        message: 'Message required',\n        variant: 'alert',\n\n        alert: {\n          color: 'error'\n        }\n      });\n    } else {\n      const d = new Date();\n      const newMessage = {\n        id: Number(incrementer(users.length)),\n        from: 'User1',\n        to: user.name,\n        text: message,\n        time: d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n      };\n      insertChat(user.name, newMessage);\n    }\n    setMessage('');\n  };\n\n  const handleEnter = (event) => {\n    if (event?.key !== 'Enter') {\n      return;\n    }\n    handleOnSend();\n  };\n\n  // handle emoji\n  const onEmojiClick = (emojiObject) => {\n    setMessage(message + emojiObject.emoji);\n  };\n\n  const emojiOpen = Boolean(anchorElEmoji);\n  const emojiId = emojiOpen ? 'simple-popper' : undefined;\n\n  const handleCloseEmoji = () => {\n    setAnchorElEmoji(null);\n  };\n\n  // close sidebar when widow size below 'md' breakpoint\n  useEffect(() => {\n    setOpenChatDrawer(!matchDownSM);\n  }, [matchDownSM]);\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <ChatDrawer\n        openChatDrawer={openChatDrawer}\n        handleDrawerOpen={handleDrawerOpen}\n        setUser={setUser}\n        selectedUser={usersLoading || Object.keys(user).length === 0 ? null : user.id}\n      />\n      <Main theme={theme} open={openChatDrawer}>\n        <Grid container>\n          <Grid\n            item\n            xs={12}\n            md={emailDetails ? 8 : 12}\n            xl={emailDetails ? 9 : 12}\n            sx={{\n              transition: theme.transitions.create('width', {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.shorter + 200\n              })\n            }}\n          >\n            <MainCard\n              content={false}\n              sx={{\n                bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.main' : 'grey.50',\n                pt: 2,\n                pl: 2,\n                borderRadius: emailDetails ? '0' : '0 12px 12px 0',\n                transition: theme.transitions.create('width', {\n                  easing: theme.transitions.easing.easeOut,\n                  duration: theme.transitions.duration.shorter + 200\n                })\n              }}\n            >\n              <Grid container spacing={3}>\n                <Grid item xs={12} sx={{ bgcolor: 'background.paper', pr: 2, pb: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>\n                  <Grid container justifyContent=\"space-between\" spacing={1.5}>\n                    <Grid item>\n                      <ChatHeader loading={usersLoading} user={user} handleDrawerOpen={handleDrawerOpen} />\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" spacing={1}>\n                        <IconButton size=\"large\" color=\"secondary\">\n                          <Call />\n                        </IconButton>\n                        <IconButton size=\"large\" color=\"secondary\">\n                          <Camera />\n                        </IconButton>\n                        <IconButton onClick={handleUserChange} size=\"large\" color={emailDetails ? 'error' : 'secondary'}>\n                          {emailDetails ? <Add style={{ transform: 'rotate(45deg)' }} /> : <InfoCircle />}\n                        </IconButton>\n                        <IconButton onClick={handleClickSort} size=\"large\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                          {' '}\n                          <MoreIcon />\n                        </IconButton>\n                        <Menu\n                          id=\"simple-menu\"\n                          anchorEl={anchorEl}\n                          keepMounted\n                          open={Boolean(anchorEl)}\n                          onClose={handleCloseSort}\n                          anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right'\n                          }}\n                          transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right'\n                          }}\n                          sx={{ p: 0, '& .MuiMenu-list': { p: 0 } }}\n                        >\n                          <MenuItem onClick={handleCloseSort}>\n                            <DocumentDownload style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n                            <Typography>Archive</Typography>\n                          </MenuItem>\n                          <MenuItem onClick={handleCloseSort}>\n                            <VolumeMute style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n                            <Typography>Muted</Typography>\n                          </MenuItem>\n                          <MenuItem onClick={handleCloseSort}>\n                            <Trash style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n                            <Typography>Delete</Typography>\n                          </MenuItem>\n                        </Menu>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                  <SimpleBar\n                    sx={{\n                      overflowX: 'hidden',\n                      height: 'calc(100vh - 416px)',\n                      minHeight: 420,\n                      '& .simplebar-content': {\n                        height: '100%'\n                      }\n                    }}\n                  >\n                    <Box sx={{ pl: 1, pr: 3, height: '100%' }}>\n                      {usersLoading || Object.keys(user).length === 0 ? (\n                        <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: '100%' }}>\n                          <CircularWithPath />\n                        </Stack>\n                      ) : (\n                        <ChatHistory theme={theme} user={user} />\n                      )}\n                    </Box>\n                  </SimpleBar>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  sx={{ mt: 3, bgcolor: 'background.paper', borderTop: '1px solid ', borderTopColor: theme.palette.divider }}\n                >\n                  <Stack>\n                    <TextField\n                      inputRef={textInput}\n                      fullWidth\n                      multiline\n                      rows={4}\n                      placeholder=\"Your Message...\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value.length <= 1 ? e.target.value.trim() : e.target.value)}\n                      onKeyDown={handleEnter}\n                      variant=\"standard\"\n                      sx={{ pr: 2, '& .MuiInput-root:before': { borderBottomColor: theme.palette.divider } }}\n                    />\n                    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                      <Stack direction=\"row\" sx={{ py: 2, ml: -1 }}>\n                        <>\n                          <IconButton\n                            ref={anchorElEmoji}\n                            aria-describedby={emojiId}\n                            onClick={handleOnEmojiButtonClick}\n                            sx={{ opacity: 0.5 }}\n                            size=\"medium\"\n                            color=\"secondary\"\n                          >\n                            <EmojiHappy />\n                          </IconButton>\n                          <Popper\n                            id={emojiId}\n                            open={emojiOpen}\n                            anchorEl={anchorElEmoji}\n                            disablePortal\n                            sx={{ zIndex: 1200 }}\n                            popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [-20, 125] } }] }}\n                          >\n                            <ClickAwayListener onClickAway={handleCloseEmoji}>\n                              <MainCard elevation={8} content={false}>\n                                <EmojiPicker onEmojiClick={onEmojiClick} defaultSkinTone={SkinTones.DARK} autoFocusSearch={false} />\n                              </MainCard>\n                            </ClickAwayListener>\n                          </Popper>\n                        </>\n                        <IconButton sx={{ opacity: 0.5 }} size=\"medium\" color=\"secondary\">\n                          <Paperclip />\n                        </IconButton>\n                        <IconButton sx={{ opacity: 0.5 }} size=\"medium\" color=\"secondary\">\n                          <Image />\n                        </IconButton>\n                        <IconButton sx={{ opacity: 0.5 }} size=\"medium\" color=\"secondary\">\n                          <VolumeHigh />\n                        </IconButton>\n                      </Stack>\n                      <IconButton color=\"primary\" onClick={handleOnSend} size=\"large\" sx={{ mr: 1.5 }}>\n                        <Send />\n                      </IconButton>\n                    </Stack>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={4} xl={3} sx={{ overflow: 'hidden', display: emailDetails ? 'flex' : 'none' }}>\n            <Collapse orientation=\"horizontal\" in={emailDetails && !matchDownMD}>\n              <UserDetails user={user} onClose={handleUserChange} />\n            </Collapse>\n          </Grid>\n\n          <Dialog TransitionComponent={PopupTransition} onClose={handleUserChange} open={matchDownMD && emailDetails} scroll=\"body\">\n            <UserDetails user={user} onClose={handleUserChange} />\n          </Dialog>\n        </Grid>\n      </Main>\n    </Box>\n  );\n}\n","size_bytes":13974},"src/sections/components-overview/notistack/MaxSnackbar.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { handlerIncrease, useGetSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, Minus } from 'iconsax-react';\n\n// ==============================|| NOTISTACK - MAXIMUM SNACKBAR ||============================== //\n\nexport default function MaxSnackbar() {\n  const width = { minWidth: 'auto' };\n\n  const { snackbar } = useGetSnackbar();\n  const [value, setValue] = useState(3);\n\n  const handlerMaxStack = () => {\n    enqueueSnackbar('Your notification here');\n    handlerIncrease(value);\n  };\n\n  const NotiStackMaxSnackbarCodeString = `<Button\nvariant=\"contained\"\nfullWidth\nsx={{ marginBlockStart: 2 }}\nonClick={() => {\n  enqueueSnackbar('Your notification here');\n  handlerIncrease(value);\n}}\n>\n  Show Snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"Maximum snackbars\" codeString={NotiStackMaxSnackbarCodeString}>\n      <Stack justifyContent={'space-between'} flexDirection={'row'}>\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          sx={width}\n          disabled={snackbar.maxStack === 0 ? true : false}\n          onClick={() => setValue((prev) => prev - 1)}\n        >\n          <Minus />\n        </Button>\n        <Typography variant=\"body1\">stack up to {value}</Typography>\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          sx={width}\n          disabled={snackbar.maxStack === 4 ? true : false}\n          onClick={() => setValue((prev) => prev + 1)}\n        >\n          <Add />\n        </Button>\n      </Stack>\n      <Button variant=\"contained\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => handlerMaxStack()}>\n        Show Snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":1960},"src/assets/fonts/inter/inter.css":{"content":"@font-face {\n  font-family: 'Inter var';\n  font-weight: 100 900;\n  font-display: swap;\n  font-style: normal;\n  font-named-instance: 'Regular';\n  src: url('Inter-roman.var.woff2?v=3.18') format('woff2');\n}\n\n@font-face {\n  font-family: 'Inter var';\n  font-weight: 100 900;\n  font-display: swap;\n  font-style: italic;\n  font-named-instance: 'Italic';\n  src: url('Inter-italic.var.woff2?v=3.18') format('woff2');\n}\n","size_bytes":411},"src/sections/dashboard/analytics/AcquisitionChannels.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AcquisitionChart from './AcquisitionChart';\nimport Avatar from 'components/@extended/Avatar';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Chainlink, DocumentText } from 'iconsax-react';\n\n// avatar style\nconst avatarSX = { width: 36, height: 36, fontSize: '1rem' };\n\n// action style\nconst actionSX = {\n  mt: 0.75,\n  ml: 1,\n  top: 'auto',\n  right: 'auto',\n  alignSelf: 'flex-start',\n  transform: 'none'\n};\n\n// ==============================|| ANALYTICS - ACQUISITION CHANNELS ||============================== //\n\nexport default function AcquisitionChannels() {\n  const theme = useTheme();\n  return (\n    <MainCard content={false}>\n      <Stack>\n        <List sx={{ p: 0, '& .MuiListItemButton-root': { pt: 2, pb: 0 } }}>\n          <ListItemButton sx={{ '&:hover': { bgcolor: 'transparent' }, cursor: 'text' }}>\n            <ListItemText\n              primary={<Typography variant=\"subtitle1\">Acquisition Channels</Typography>}\n              secondary={<Typography>Marketing</Typography>}\n            />\n            <Typography variant=\"h5\" color=\"primary\">\n              -128\n            </Typography>\n          </ListItemButton>\n        </List>\n        <Box sx={{ pr: 2 }}>\n          <AcquisitionChart />\n        </Box>\n\n        <List\n          component=\"nav\"\n          sx={{\n            p: 0,\n            '& .MuiListItemButton-root': {\n              py: 1.5,\n              borderRadius: 0,\n              '& .MuiAvatar-root': avatarSX,\n              '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\n            }\n          }}\n        >\n          <ListItemButton divider>\n            <ListItemAvatar>\n              <Avatar\n                sx={{\n                  color: `${theme.palette.secondary.darker}`,\n                  bgcolor: `${theme.palette.secondary[200]}`\n                }}\n              >\n                <Chainlink />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={<Typography variant=\"subtitle1\">Top Channels</Typography>} secondary=\"Today, 2:00 AM\" />\n            <ListItemSecondaryAction>\n              <Stack alignItems=\"flex-end\">\n                <Typography variant=\"subtitle1\">+ $1,430</Typography>\n                <Typography color=\"text.secondary\" noWrap>\n                  35%\n                </Typography>\n              </Stack>\n            </ListItemSecondaryAction>\n          </ListItemButton>\n          <ListItemButton>\n            <ListItemAvatar>\n              <Avatar\n                sx={{\n                  color: 'primary.main',\n                  bgcolor: 'primary.lighter'\n                }}\n              >\n                <DocumentText />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={<Typography variant=\"subtitle1\">Top Pages</Typography>} secondary=\"Today 6:00 AM\" />\n            <ListItemSecondaryAction>\n              <Stack alignItems=\"flex-end\">\n                <Typography variant=\"subtitle1\" noWrap>\n                  - $1430\n                </Typography>\n                <Typography color=\"text.secondary\" noWrap>\n                  35%\n                </Typography>\n              </Stack>\n            </ListItemSecondaryAction>\n          </ListItemButton>\n        </List>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":3796},"src/sections/tables/react-table/BasicTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { flexRender, useReactTable, getCoreRowModel } from '@tanstack/react-table';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport { CSVExport } from 'components/third-party/react-table';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data, striped, title }) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      content={false}\n      title={title}\n      secondary={<CSVExport {...{ data, headers, filename: striped ? 'striped.csv' : 'basic.csv' }} />}\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody {...(striped && { className: 'striped' })}>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - BASIC ||============================== //\n\nexport default function BasicTable({ striped, title }) {\n  const data = makeData(10);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ data, columns, title, striped }} />;\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array, striped: PropTypes.bool, title: PropTypes.string };\n\nBasicTable.propTypes = { striped: PropTypes.bool, title: PropTypes.string };\n","size_bytes":4355},"src/api/products.js":{"content":"import axios from 'utils/axios';\n\n// ⬇️ this is the loader for the detail route\nexport async function loader() {\n  try {\n    const response = await axios.get('/api/products/list');\n    return response.data.products;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function filterProducts(filter) {\n  return await axios.post('/api/products/filter', { filter });\n}\n\nexport async function productLoader({ params }) {\n  try {\n    const response = await axios.post('/api/product/details', { id: params.id });\n    return response.data;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport async function getRelatedProducts(id) {\n  return await axios.post('/api/product/related', { id });\n}\n\nexport async function getProductReviews() {\n  return await axios.get('/api/review/list');\n}\n","size_bytes":790},"src/pages/components-overview/buttons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Fab from '@mui/material/Fab';\nimport Tooltip from '@mui/material/Tooltip';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport IconButton from 'components/@extended/IconButton';\nimport LoadingButton from 'components/@extended/LoadingButton';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport ToggleButtons from 'sections/components-overview/buttons/ToggleButtons';\nimport ButtonGroups from 'sections/components-overview/buttons/ButtonGroups';\n\n// assets\nimport { Add, AddCircle, Camera, Edit, EmojiHappy, Home3, Location, MicrophoneSlash, Send, Setting2 } from 'iconsax-react';\n\n// styles\nconst Input = styled('input')({ display: 'none' });\nInput.displayName = 'Input';\n\n// ==============================|| COMPOENETS - BUTTON ||============================== //\n\nexport default function Buttons() {\n  const [loading, setLoading] = useState({\n    home: false,\n    edit: false,\n    address: false,\n    add: false,\n    submit: false,\n    cancel: false\n  });\n\n  const loadingHandler = (state) => {\n    setLoading({ ...loading, [state]: true });\n    setTimeout(() => {\n      setLoading({ ...loading, [state]: false });\n    }, 1000);\n  };\n\n  const basicButtonCodeString = `<Button variant=\"contained\">Primary</Button>\n<Button variant=\"contained\" color=\"secondary\">Secondary</Button>\n<Button variant=\"contained\" color=\"info\">Info</Button>\n<Button variant=\"contained\" color=\"success\">Success</Button>\n<Button variant=\"contained\" color=\"warning\">Warning</Button>\n<Button variant=\"contained\" color=\"error\">Error</Button>`;\n\n  const outlinedButtonCodeString = `<Button variant=\"outlined\">Primary</Button>\n<Button variant=\"outlined\" color=\"secondary\">Secondary</Button>\n<Button variant=\"outlined\" color=\"info\">Info</Button>\n<Button variant=\"outlined\" color=\"success\">Success</Button>\n<Button variant=\"outlined\" color=\"warning\">Warning</Button>\n<Button variant=\"outlined\" color=\"error\">Error</Button>`;\n\n  const dashButtonCodeString = `<Button variant=\"dashed\">Primary</Button>\n<Button variant=\"dashed\" color=\"secondary\">Secondary</Button>\n<Button variant=\"dashed\" color=\"info\">Info</Button>\n<Button variant=\"dashed\" color=\"success\">Success</Button>\n<Button variant=\"dashed\" color=\"warning\">Warning</Button>\n<Button variant=\"dashed\" color=\"error\">Error</Button>`;\n\n  const textButtonCodeString = `<Button>Primary</Button>\n<Button color=\"secondary\">Secondary</Button>\n<Button color=\"info\">Info</Button>\n<Button color=\"success\">Success</Button>\n<Button color=\"warning\">Warning</Button>\n<Button color=\"error\">Error</Button>`;\n\n  const shadowButtonCodeString = `<Button variant=\"shadow\">Primary</Button>\n<Button variant=\"shadow\" color=\"secondary\">Secondary</Button>\n<Button variant=\"shadow\" color=\"info\">Info</Button>\n<Button variant=\"shadow\" color=\"success\">Success</Button>\n<Button variant=\"shadow\" color=\"warning\">Warning</Button>\n<Button variant=\"shadow\" color=\"error\">Error</Button>`;\n\n  const withIconButtonCodeString = `<Button variant=\"contained\" startIcon={<Home3 />}>Home</Button>\n<Button variant=\"contained\" color=\"secondary\" endIcon={<EmojiHappy variant=\"Bold\" />}>Profile</Button>\n<Button variant=\"outlined\" color=\"info\" startIcon={<Location />}>Address</Button>\n<Button variant=\"outlined\" color=\"success\" startIcon={<AddCircle />}>Add</Button>\n<Button variant=\"outlined\" color=\"warning\" endIcon={<Send />}>Send</Button>\n<Button color=\"error\" endIcon={<Add style={{ transform: 'rotate(45deg)' }} />}>Cancel</Button>`;\n\n  const sizeButtonCodeString = `<Button variant=\"contained\" size=\"extraSmall\">Extra Small</Button>\n<Button variant=\"contained\" size=\"small\">small</Button>\n<Button variant=\"contained\">Default</Button>\n<Button variant=\"contained\" size=\"large\">Large</Button>`;\n\n  const uploadButtonCodeString = `<label htmlFor=\"contained-button-file\">\n  <Input accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" />\n  <Button variant=\"contained\">\n    Upload\n  </Button>\n</label>\n<label htmlFor=\"icon-button-file\">\n  <Input accept=\"image/*\" id=\"icon-button-file\" type=\"file\" />\n  <IconButton variant=\"contained\" shape=\"rounded\" aria-label=\"upload picture\">\n    <Camera />\n  </IconButton>\n</label>`;\n\n  const disabledButtonCodeString = `<Button disabled>Default</Button>\n<Button variant=\"contained\" disabled>Contained</Button>\n<Button variant=\"outlined\" disabled>Outlined</Button>\n<Button variant=\"dashed\" color=\"success\" disabled>Dashed</Button>\n<IconButton variant=\"contained\" disabled><Home3 /></IconButton>\n<IconButton variant=\"outlined\" color=\"success\" disabled><AddCircle /></IconButton>\n<IconButton variant=\"dashed\" color=\"warning\" disabled><Send /></IconButton>\n<LoadingButton loading color=\"secondary\"><Add style={{ transform: 'rotate(45deg)' }} /></LoadingButton>`;\n\n  const blockButtonCodeString = `<Button variant=\"contained\" fullWidth>Primary</Button>\n<Button variant=\"outlined\" color=\"secondary\" fullWidth>Secondary</Button>`;\n\n  const fabButtonCodeString = `<Fab color=\"primary\" aria-label=\"add\">\n  <Add style={{ fontSize: '1.3rem' }} />\n</Fab>\n<Fab color=\"info\" aria-label=\"edit\">\n  <Edit style={{ fontSize: '1.3rem' }} />\n</Fab>\n<Fab disabled aria-label=\"like\">\n  <MicrophoneSlash style={{ fontSize: '1.3rem' }} />\n</Fab>\n<Fab color=\"error\" variant=\"extended\">\n  Extended\n</Fab>`;\n\n  const iconButtonCodeString = `<IconButton variant=\"contained\">\n  <Home3 />\n</IconButton>\n<IconButton variant=\"contained\" color=\"secondary\">\n<EmojiHappy variant=\"Bold\" />\n</IconButton>\n<IconButton variant=\"outlined\" color=\"info\">\n  <Location />\n</IconButton>\n<IconButton variant=\"outlined\" color=\"success\">\n  <AddCircle />\n</IconButton>\n<IconButton variant=\"dashed\" color=\"warning\">\n  <Send />\n</IconButton>\n<IconButton color=\"error\">\n  <Add style={{ transform: 'rotate(45deg)' }} />\n</IconButton>\n<IconButton shape=\"rounded\" variant=\"contained\">\n  <Home3 />\n</IconButton>\n<IconButton shape=\"rounded\" variant=\"contained\" color=\"secondary\">\n<EmojiHappy variant=\"Bold\" />\n</IconButton>\n<IconButton shape=\"rounded\" variant=\"outlined\" color=\"info\">\n  <Location />\n</IconButton>\n<IconButton shape=\"rounded\" variant=\"outlined\" color=\"success\">\n  <AddCircle />\n</IconButton>\n<IconButton shape=\"rounded\" variant=\"dashed\" color=\"warning\">\n  <Send />\n</IconButton>\n<IconButton shape=\"rounded\" color=\"error\">\n  <Add style={{ transform: 'rotate(45deg)' }} />\n</IconButton>`;\n\n  const loadingButtonCodeString = `<LoadingButton loading variant=\"contained\" loadingPosition=\"start\" startIcon={<Home3 />}>\n  Home\n</LoadingButton>\n<LoadingButton loading color=\"secondary\" variant=\"outlined\" loadingPosition=\"end\" endIcon={<EmojiHappy variant=\"Bold\" />}>\n  Edit\n</LoadingButton>\n<LoadingButton loading color=\"info\" variant=\"dashed\" loadingIndicator=\"Loading...\">\n  Address\n</LoadingButton>\n<LoadingButton loading color=\"success\" variant=\"contained\" shape=\"square\">\n  <AddCircle />\n</LoadingButton>\n<LoadingButton loading color=\"warning\" variant=\"dashed\" shape=\"rounded\">\n  <Send />\n</LoadingButton>\n<LoadingButton loading color=\"error\">\n<Add style={{ transform: 'rotate(45deg)' }} />\n</LoadingButton>\n<LoadingButton loading={loading.home} variant=\"contained\" loadingPosition=\"start\" startIcon={<Home3 />} onClick={() => loadingHandler('home')}>\n  Home\n</LoadingButton>\n<LoadingButton loading={loading.edit} color=\"secondary\" variant=\"outlined\" loadingPosition=\"end\" endIcon={<EmojiHappy variant=\"Bold\" />} onClick={() => loadingHandler('edit')}>\n  Edit\n</LoadingButton>\n<LoadingButton loading={loading.address} color=\"info\" variant=\"dashed\" loadingIndicator=\"Loading...\" onClick={() => loadingHandler('address')}>\n  Address\n</LoadingButton>\n<LoadingButton loading={loading.add} color=\"success\" variant=\"contained\" shape=\"square\" onClick={() => loadingHandler('add')}>\n    <AddCircle />\n</LoadingButton>\n<LoadingButton loading={loading.submit} color=\"warning\" variant=\"dashed\" shape=\"rounded\" onClick={() => loadingHandler('submit')}>\n  <Send />\n</LoadingButton>\n<LoadingButton loading={loading.cancel} color=\"error\" onClick={() => loadingHandler('cancel')}>\n<Add style={{ transform: 'rotate(45deg)' }} />\n</LoadingButton>`;\n\n  const animationButtonCodeString = `<AnimateButton>\n  <Button variant=\"contained\">Default</Button>\n</AnimateButton>\n<AnimateButton scale={{ hover: 1.1, tap: 0.9 }}>\n  <Button variant=\"contained\" color=\"info\">Scale</Button>\n</AnimateButton>\n<AnimateButton type=\"slide\">\n  <Button variant=\"contained\" color=\"success\">Slide</Button>\n</AnimateButton>\n<AnimateButton type=\"rotate\">\n  <Tooltip title=\"Rotate\">\n    <IconButton color=\"warning\" variant=\"dashed\" shape=\"rounded\">\n      <Setting2 />\n    </IconButton>\n  </Tooltip>\n</AnimateButton>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Buttons\"\n        caption=\"Buttons allow users to take actions, and make choices, with a single tap.\"\n        directory=\"src/pages/components-overview/buttons\"\n        link=\"https://mui.com/material-ui/react-button/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic Button\" codeHighlight codeString={basicButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"contained\">Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"secondary\">\n                      Secondary\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"info\">\n                      Info\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"success\">\n                      Success\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"warning\">\n                      Warning\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"error\">\n                      Error\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Outlined Button\" codeString={outlinedButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"outlined\">Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"secondary\">\n                      Secondary\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"info\">\n                      Info\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"success\">\n                      Success\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"warning\">\n                      Warning\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"error\">\n                      Error\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Dashed Button\" codeString={dashButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"dashed\">Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"secondary\">\n                      Secondary\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"info\">\n                      Info\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"success\">\n                      Success\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"warning\">\n                      Warning\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"error\">\n                      Error\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Text Button\" codeString={textButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button>Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"secondary\">Secondary</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"info\">Info</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"success\">Success</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"warning\">Warning</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"error\">Error</Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Shadow Button\" codeString={shadowButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"shadow\">Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"shadow\" color=\"secondary\">\n                      Secondary\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"shadow\" color=\"info\">\n                      Info\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"shadow\" color=\"success\">\n                      Success\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"shadow\" color=\"warning\">\n                      Warning\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"shadow\" color=\"error\">\n                      Error\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"With Icon\" codeString={withIconButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"contained\" startIcon={<Home3 />}>\n                      Home\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" color=\"secondary\" endIcon={<EmojiHappy variant=\"Bold\" />}>\n                      Profile\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"info\" startIcon={<Location />}>\n                      Address\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"success\" startIcon={<AddCircle />}>\n                      Add\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" color=\"warning\" endIcon={<Send />}>\n                      Send\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button color=\"error\" endIcon={<Add style={{ transform: 'rotate(45deg)' }} />}>\n                      Cancel\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Button Size\" codeString={sizeButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button variant=\"contained\" size=\"extraSmall\">\n                      Extra Small\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" size=\"small\">\n                      small\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\">Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" size=\"large\">\n                      Large\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Upload Button\" codeString={uploadButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <label htmlFor=\"contained-button-file\">\n                      <Input accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" />\n                      <Button variant=\"contained\">Upload</Button>\n                    </label>\n                  </Grid>\n                  <Grid item>\n                    <label htmlFor=\"icon-button-file\">\n                      <Input accept=\"image/*\" id=\"icon-button-file\" type=\"file\" />\n                      <IconButton\n                        variant=\"contained\"\n                        shape=\"rounded\"\n                        aria-label=\"upload picture\"\n                        sx={{ '& svg': { width: 18, height: 18 } }}\n                      >\n                        <Camera />\n                      </IconButton>\n                    </label>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Diabled Button\" codeString={disabledButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button disabled>Default</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"contained\" disabled>\n                      Contained\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"outlined\" disabled>\n                      Outlined\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button variant=\"dashed\" color=\"success\" disabled>\n                      Dashed\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <IconButton variant=\"contained\" disabled>\n                      <Home3 />\n                    </IconButton>\n                  </Grid>\n                  <Grid item>\n                    <IconButton variant=\"outlined\" color=\"success\" disabled>\n                      <AddCircle />\n                    </IconButton>\n                  </Grid>\n                  <Grid item>\n                    <IconButton variant=\"dashed\" color=\"warning\" disabled>\n                      <Send />\n                    </IconButton>\n                  </Grid>\n                  <Grid item>\n                    <LoadingButton loading color=\"secondary\">\n                      <Add style={{ transform: 'rotate(45deg)' }} />\n                    </LoadingButton>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Block Level\" codeString={blockButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Button variant=\"contained\" fullWidth>\n                      Primary\n                    </Button>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Button variant=\"outlined\" color=\"secondary\" fullWidth>\n                      Secondary\n                    </Button>\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <ToggleButtons />\n              <ButtonGroups />\n              <MainCard title=\"Fab \" codeString={fabButtonCodeString}>\n                <Grid container spacing={2} alignItems=\"center\">\n                  <Grid item>\n                    <Fab color=\"primary\" aria-label=\"add\">\n                      <Add style={{ fontSize: '1.3rem' }} />\n                    </Fab>\n                  </Grid>\n                  <Grid item>\n                    <Fab color=\"info\" aria-label=\"edit\">\n                      <Edit style={{ fontSize: '1.3rem' }} />\n                    </Fab>\n                  </Grid>\n                  <Grid item>\n                    <Fab disabled aria-label=\"like\">\n                      <MicrophoneSlash style={{ fontSize: '1.3rem' }} />\n                    </Fab>\n                  </Grid>\n                  <Grid item>\n                    <Fab color=\"error\" variant=\"extended\">\n                      Extended\n                    </Fab>\n                  </Grid>\n                </Grid>\n              </MainCard>\n\n              <Typography variant=\"h5\" sx={{ mt: 2 }}>\n                Extended Button\n              </Typography>\n              <MainCard title=\"Icon Button\" codeString={iconButtonCodeString}>\n                <>\n                  <Grid container spacing={2}>\n                    <Grid item>\n                      <Tooltip title=\"Home\">\n                        <IconButton variant=\"contained\">\n                          <Home3 />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Profile\">\n                        <IconButton variant=\"contained\" color=\"secondary\">\n                          <EmojiHappy variant=\"Bold\" />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Address\">\n                        <IconButton variant=\"outlined\" color=\"info\">\n                          <Location />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\">\n                        <IconButton variant=\"outlined\" color=\"success\">\n                          <AddCircle />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Send\">\n                        <IconButton variant=\"dashed\" color=\"warning\">\n                          <Send />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Delete\">\n                        <IconButton color=\"error\">\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                  <Grid container spacing={2} sx={{ mt: 2 }}>\n                    <Grid item>\n                      <Tooltip title=\"Home\">\n                        <IconButton shape=\"rounded\" variant=\"contained\">\n                          <Home3 />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Profile\">\n                        <IconButton shape=\"rounded\" variant=\"contained\" color=\"secondary\">\n                          <EmojiHappy variant=\"Bold\" />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Address\">\n                        <IconButton shape=\"rounded\" variant=\"outlined\" color=\"info\">\n                          <Location />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\">\n                        <IconButton shape=\"rounded\" variant=\"outlined\" color=\"success\">\n                          <AddCircle />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Send\">\n                        <IconButton shape=\"rounded\" variant=\"dashed\" color=\"warning\">\n                          <Send />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Delete\">\n                        <IconButton shape=\"rounded\" color=\"error\">\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </IconButton>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                </>\n              </MainCard>\n              <MainCard title=\"Loading Button\" codeString={loadingButtonCodeString}>\n                <>\n                  <Grid container spacing={2}>\n                    <Grid item>\n                      <LoadingButton loading variant=\"contained\" loadingPosition=\"start\" startIcon={<Home3 />}>\n                        Home\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton\n                        loading\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        loadingPosition=\"end\"\n                        endIcon={<EmojiHappy variant=\"Bold\" />}\n                      >\n                        Edit\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton loading color=\"info\" variant=\"dashed\" loadingIndicator=\"Loading...\">\n                        Address\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton loading color=\"success\" variant=\"contained\" shape=\"square\">\n                        <AddCircle />\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton loading color=\"warning\" variant=\"dashed\" shape=\"rounded\">\n                        <Send />\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton loading color=\"error\" shape=\"square\">\n                        <Add style={{ transform: 'rotate(45deg)' }} />\n                      </LoadingButton>\n                    </Grid>\n                  </Grid>\n                  <Grid container spacing={2} sx={{ mt: 2 }}>\n                    <Grid item>\n                      <LoadingButton\n                        loading={loading.home}\n                        variant=\"contained\"\n                        loadingPosition=\"start\"\n                        startIcon={<Home3 />}\n                        onClick={() => loadingHandler('home')}\n                      >\n                        Home\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton\n                        loading={loading.edit}\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        loadingPosition=\"end\"\n                        endIcon={<EmojiHappy variant=\"Bold\" />}\n                        onClick={() => loadingHandler('edit')}\n                      >\n                        Edit\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <LoadingButton\n                        loading={loading.address}\n                        color=\"info\"\n                        variant=\"dashed\"\n                        loadingIndicator=\"Loading...\"\n                        onClick={() => loadingHandler('address')}\n                      >\n                        Address\n                      </LoadingButton>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\">\n                        <LoadingButton\n                          loading={loading.add}\n                          color=\"success\"\n                          variant=\"contained\"\n                          shape=\"square\"\n                          onClick={() => loadingHandler('add')}\n                        >\n                          <AddCircle />\n                        </LoadingButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Send\">\n                        <LoadingButton\n                          loading={loading.submit}\n                          color=\"warning\"\n                          variant=\"dashed\"\n                          shape=\"rounded\"\n                          onClick={() => loadingHandler('submit')}\n                        >\n                          <Send />\n                        </LoadingButton>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Cancel\">\n                        <LoadingButton loading={loading.cancel} color=\"error\" onClick={() => loadingHandler('cancel')} shape=\"square\">\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </LoadingButton>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                </>\n              </MainCard>\n              <MainCard title=\"Animation\" codeString={animationButtonCodeString}>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <AnimateButton>\n                      <Button variant=\"contained\">Default</Button>\n                    </AnimateButton>\n                  </Grid>\n                  <Grid item>\n                    <AnimateButton\n                      scale={{\n                        hover: 1.1,\n                        tap: 0.9\n                      }}\n                    >\n                      <Button variant=\"contained\" color=\"info\">\n                        Scale\n                      </Button>\n                    </AnimateButton>\n                  </Grid>\n                  <Grid item>\n                    <AnimateButton type=\"slide\">\n                      <Button variant=\"contained\" color=\"success\">\n                        Slide\n                      </Button>\n                    </AnimateButton>\n                  </Grid>\n                  <Grid item>\n                    <AnimateButton type=\"rotate\">\n                      <Tooltip title=\"Rotate\">\n                        <IconButton color=\"warning\" variant=\"dashed\" shape=\"rounded\">\n                          <Setting2 />\n                        </IconButton>\n                      </Tooltip>\n                    </AnimateButton>\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":32004},"src/utils/SyntaxHighlight.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { a11yDark, a11yLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| CODE HIGHLIGHTER ||============================== //\n\nexport default function SyntaxHighlight({ children, ...others }) {\n  const theme = useTheme();\n\n  return (\n    <SyntaxHighlighter\n      language=\"javascript\"\n      showLineNumbers\n      style={theme.palette.mode === ThemeMode.DARK ? a11yLight : a11yDark}\n      {...others}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nSyntaxHighlight.propTypes = { children: PropTypes.string };\n","size_bytes":795},"src/themes/overrides/Pagination.js":{"content":"// ==============================|| OVERRIDES - PAGINATION ||============================== //\n\nexport default function Pagination() {\n  return {\n    MuiPagination: {\n      defaultProps: {\n        shape: 'rounded'\n      }\n    }\n  };\n}\n","size_bytes":235},"src/themes/theme/theme5.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME5 ||============================== //\n\nexport default function Theme5(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#fff4e6', '#ffdfb8', '#ffc98f', '#ffb066', '#ff943d', '#f27013', '#cc5206', '#a63a00', '#802800', '#591900'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#32221a', '#4a2b18', '#5e371b', '#7d4319', '#a85317', '#d26415', '#e9883a', '#f4a962', '#f8c48c', '#fbdbb5'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2912},"src/sections/forms/edit-forms/team/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  fullName: yup.string().required('Full Name is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  job: yup.string().required('Job is required'),\n  facebook: yup.string().required('Facebook link is required'),\n  linkedin: yup.string().required('LinkedIn link is required'),\n  twitter: yup.string().required('Twitter link is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      fullName: data.fullName,\n      job: data.job,\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      facebook: data.socialMedia && data.socialMedia.facebook ? data.socialMedia.facebook : '',\n      linkedin: data.socialMedia && data.socialMedia.linkedin ? data.socialMedia.linkedin : '',\n      twitter: data.socialMedia && data.socialMedia.twitter ? data.socialMedia.twitter : ''\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        fullName: values.fullName,\n        job: values.job,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        socialMedia: {\n          facebook: values.facebook,\n          linkedin: values.linkedin,\n          twitter: values.twitter\n        }\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Full Name</InputLabel>\n              <TextField\n                id=\"fullName\"\n                name=\"fullName\"\n                placeholder=\"Full Name *\"\n                value={formik.values.fullName}\n                onChange={formik.handleChange}\n                error={formik.touched.fullName && Boolean(formik.errors.fullName)}\n                helperText={formik.touched.fullName && formik.errors.fullName}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job</InputLabel>\n              <TextField\n                id=\"job\"\n                name=\"job\"\n                placeholder=\"Job *\"\n                value={formik.values.job}\n                onChange={formik.handleChange}\n                error={formik.touched.job && Boolean(formik.errors.job)}\n                helperText={formik.touched.job && formik.errors.job}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Facebook Link</InputLabel>\n              <TextField\n                id=\"facebook\"\n                name=\"facebook\"\n                placeholder=\"Facebook Link *\"\n                value={formik.values.facebook}\n                onChange={formik.handleChange}\n                error={formik.touched.facebook && Boolean(formik.errors.facebook)}\n                helperText={formik.touched.facebook && formik.errors.facebook}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Linkedin link</InputLabel>\n              <TextField\n                id=\"linkedin\"\n                name=\"linkedin\"\n                placeholder=\"Linkedin link *\"\n                value={formik.values.linkedin}\n                onChange={formik.handleChange}\n                error={formik.touched.linkedin && Boolean(formik.errors.linkedin)}\n                helperText={formik.touched.linkedin && formik.errors.linkedin}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Twitter Link</InputLabel>\n              <TextField\n                id=\"twitter\"\n                name=\"twitter\"\n                placeholder=\"Twitter Link *\"\n                value={formik.values.twitter}\n                onChange={formik.handleChange}\n                error={formik.touched.twitter && Boolean(formik.errors.twitter)}\n                helperText={formik.touched.twitter && formik.errors.twitter}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":7275},"src/sections/apps/chat/UserAvatar.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Badge from '@mui/material/Badge';\n\n// project-imports\nimport AvatarStatus from './AvatarStatus';\nimport Avatar from 'components/@extended/Avatar';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| CHAT - USER AVATAR WITH STATUS ICON ||============================== //\n\nexport default function UserAvatar({ user }) {\n  return (\n    <Badge\n      overlap=\"circular\"\n      badgeContent={<AvatarStatus status={user.online_status} />}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      sx={{ '& .MuiBox-root': { width: 6, height: 6 }, padding: 0, minWidth: 12, '& svg': { bgcolor: '#fff', borderRadius: '50%' } }}\n    >\n      <Avatar alt={user.name} src={user.avatar && getImageUrl(`${user.avatar}`, ImagePath.USERS)} />\n    </Badge>\n  );\n}\n\nUserAvatar.propTypes = { user: PropTypes.any };\n","size_bytes":908},"src/api/cart.js":{"content":"import { useMemo } from 'react';\nimport { filter } from 'lodash';\nimport { Chance } from 'chance';\n\nimport useSWR, { mutate } from 'swr';\n\nconst chance = new Chance();\nconst LOCAL_STORAGE = 'mantis-ts-cart';\n\nexport const endpoints = {\n  key: 'cart'\n};\n\nconst initialState = {\n  step: 0,\n  products: [],\n  subtotal: 0,\n  total: 0,\n  discount: 0,\n  shipping: 0,\n  billing: null,\n  payment: {\n    type: 'free',\n    method: 'card',\n    card: ''\n  }\n};\n\nexport function useGetCart() {\n  const localProducts = localStorage.getItem(LOCAL_STORAGE);\n\n  // to update local state based on key\n  const { data, isLoading } = useSWR(endpoints.key, () => (localProducts ? JSON.parse(localProducts) : initialState), {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    onSuccess(data) {\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(data));\n    }\n  });\n\n  const memoizedValue = useMemo(() => ({ cart: data, cartLoading: isLoading }), [data, isLoading]);\n\n  return memoizedValue;\n}\n\nexport function addToCart(product, products) {\n  // to update local state based on key\n  let inCartProduct;\n  let newProduct;\n  let subtotal = 0;\n  let latestProducts;\n\n  newProduct = { ...product, itemId: chance.timestamp() };\n  subtotal = newProduct.quantity * newProduct.offerPrice;\n\n  inCartProduct = filter(products, {\n    id: newProduct.id,\n    color: newProduct.color,\n    size: newProduct.size\n  });\n  if (inCartProduct && inCartProduct.length > 0) {\n    const newProducts = products.map((item) => {\n      if (newProduct.id === item.id && newProduct.color === item.color && newProduct.size === item.size) {\n        return { ...newProduct, quantity: newProduct.quantity + inCartProduct[0].quantity };\n      }\n      return item;\n    });\n    latestProducts = newProducts;\n  } else {\n    latestProducts = [...products, newProduct];\n  }\n\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        products: latestProducts,\n        subtotal: currentCart.subtotal + subtotal,\n        total: currentCart.total + subtotal\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function updateCartProduct(id, quantity, products) {\n  // to update local state based on key\n  let newProduct;\n  let subtotal = 0;\n  let oldSubTotal = 0;\n  let latestProducts;\n\n  newProduct = filter(products, { itemId: id })[0];\n\n  subtotal = quantity * newProduct.offerPrice;\n  oldSubTotal = 0;\n\n  latestProducts = products.map((item) => {\n    if (id === item.itemId) {\n      oldSubTotal = item.quantity * (item.offerPrice || 0);\n      return { ...item, quantity };\n    }\n    return item;\n  });\n\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        products: latestProducts,\n        subtotal: currentCart.subtotal - oldSubTotal + subtotal,\n        total: currentCart.total - oldSubTotal + subtotal\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function removeCartProduct(id, products) {\n  // to update local state based on key\n  let newProduct;\n  let subtotal = 0;\n  let latestProducts;\n\n  newProduct = filter(products, { itemId: id })[0];\n\n  subtotal = newProduct.quantity * newProduct.offerPrice;\n  latestProducts = filter(products, (item) => item.itemId !== id);\n\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        products: latestProducts,\n        subtotal: currentCart.subtotal - subtotal,\n        total: currentCart.total - subtotal\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setCheckoutStep(step) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        step\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setNextStep() {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        step: currentCart.step + 1\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setBackStep() {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        step: currentCart.step - 1\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setBillingAddress(billing) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        billing\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setCartDiscount(code, total) {\n  // to update local state based on key\n  let amount = 0;\n  if (total > 0) {\n    switch (code) {\n      case 'BERRY50':\n        amount = chance.integer({ min: 1, max: total < 49 ? total : 49 });\n        break;\n      case 'FLAT05':\n        amount = total < 5 ? total : 5;\n        break;\n      case 'SUB150':\n        amount = total < 150 ? total : 150;\n        break;\n      case 'UPTO200':\n        amount = chance.integer({ min: 1, max: total < 199 ? total : 199 });\n        break;\n      default:\n        amount = 0;\n    }\n  }\n\n  let difference = 0;\n\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      if (currentCart.discount > 0) {\n        difference = currentCart.discount;\n      }\n\n      const newCart = {\n        ...currentCart,\n        discount: amount,\n        total: currentCart.total + difference - amount\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setShippingCharge(charge, shipping) {\n  // to update local state based on key\n  let newShipping = 0;\n  if (shipping > 0 && charge === 'free') {\n    newShipping = -5;\n  }\n  if (charge === 'fast') {\n    newShipping = 5;\n  }\n\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = {\n        ...currentCart,\n        shipping,\n        total: currentCart.total + newShipping,\n        payment: {\n          ...currentCart.payment,\n          type: charge\n        }\n      };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setPaymentMethod(method) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = { ...currentCart, payment: { ...currentCart.payment, method } };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function setPaymentCard(card) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentCart) => {\n      const newCart = { ...currentCart, payment: { ...currentCart.payment, card } };\n\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(newCart));\n      return newCart;\n    },\n    false\n  );\n}\n\nexport function resetCart() {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    () => {\n      localStorage.setItem(LOCAL_STORAGE, JSON.stringify(initialState));\n      return initialState;\n    },\n    false\n  );\n}\n","size_bytes":7610},"src/sections/components-overview/timeline/AlternateTimeline.jsx":{"content":"// material-ui\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TIMELINE - ALTERNATE ||============================== //\n\nexport default function AlternateTimeline() {\n  const altTimelineCodeString = `<Timeline position=\"alternate\">\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Eat</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Code</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Sleep</TimelineContent>\n  </TimelineItem>\n  <TimelineItem sx={{ minHeight: 'auto' }}>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n    </TimelineSeparator>\n    <TimelineContent>Repeat</TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Alternating Positioned\" codeString={altTimelineCodeString}>\n      <Timeline position=\"alternate\">\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Eat</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Code</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Sleep</TimelineContent>\n        </TimelineItem>\n        <TimelineItem sx={{ minHeight: 'auto' }}>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n          </TimelineSeparator>\n          <TimelineContent>Repeat</TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":2655},"src/api/chat.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// utils\nimport { fetcher, fetcherPost } from 'utils/axios';\n\nexport const endpoints = {\n  key: 'api/chat',\n  list: '/users', // server URL\n  update: '/filter' // server URL\n};\n\nexport function useGetUsers() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      users: data?.users,\n      usersLoading: isLoading,\n      usersError: error,\n      usersValidating: isValidating,\n      usersEmpty: !isLoading && !data?.users?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport function useGetUserChat(userName) {\n  const URL = [endpoints.key + endpoints.update, { user: userName, endpoints: 'chat' }];\n\n  const { data, isLoading, error, isValidating } = useSWR(URL, fetcherPost, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      chat: data || [],\n      chatLoading: isLoading,\n      chatError: error,\n      chatValidating: isValidating,\n      chatEmpty: !isLoading && !data?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function insertChat(userName, newChat) {\n  const URL = [endpoints.key + endpoints.update, { user: userName, endpoints: 'chat' }];\n\n  // to update local state based on key\n  mutate(\n    URL,\n    (currentChat) => {\n      const addedChat = [...currentChat, newChat];\n      return addedChat;\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  // const data = { chat: newChat };\n  // await axios.post(endpoints.key + endpoints.update, data);\n}\n","size_bytes":1912},"src/components/@extended/Dot.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport getColors from 'utils/getColors';\n\n// ==============================|| DOT - EXTENDED ||============================== //\n\nexport default function Dot({ color, size, variant, sx, componentDiv }) {\n  const theme = useTheme();\n  const colors = getColors(theme, color || 'primary');\n  const { main } = colors;\n\n  return (\n    <Box\n      component={componentDiv ? 'div' : 'span'}\n      sx={{\n        width: size || 8,\n        height: size || 8,\n        borderRadius: '50%',\n        bgcolor: variant === 'outlined' ? '' : main,\n        ...(variant === 'outlined' && { border: `1px solid `, borderColor: main }),\n        ...sx\n      }}\n    />\n  );\n}\n\nDot.propTypes = {\n  color: PropTypes.any,\n  size: PropTypes.number,\n  variant: PropTypes.string,\n  sx: PropTypes.any,\n  componentDiv: PropTypes.bool\n};\n","size_bytes":961},"src/sections/tables/react-table/VirtualizedInfiniteScrollTable.jsx":{"content":"import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { flexRender, getCoreRowModel, getSortedRowModel, useReactTable } from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { keepPreviousData, useInfiniteQuery, QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// project-imports\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, HeaderSort } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\nconst fetchSize = 25;\n\nconst queryClient = new QueryClient();\n\nexport const fetchData = (start, size, sorting) => {\n  const dbData = [...makeData(1000)];\n  if (sorting.length) {\n    const sort = sorting[0];\n    const { id, desc } = sort;\n    dbData.sort((a, b) => {\n      if (desc) {\n        return a[id] < b[id] ? 1 : -1;\n      }\n      return a[id] > b[id] ? 1 : -1;\n    });\n  }\n\n  return {\n    data: dbData.slice(start, start + size),\n    meta: {\n      totalRowCount: dbData.length\n    }\n  };\n};\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable() {\n  // we need a reference to the scrolling element for logic down below\n  const tableContainerRef = useRef(null);\n\n  const [sorting, setSorting] = useState([]);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Role',\n        accessorKey: 'role'\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  // react-query has an useInfiniteQuery hook just for this situation!\n  const { data, fetchNextPage, isFetching } = useInfiniteQuery({\n    queryKey: ['table-data', sorting], //adding sorting state as key causes table to reset and fetch from new beginning upon sort\n    queryFn: async ({ pageParam = 0 }) => {\n      const start = pageParam * fetchSize;\n      const fetchedData = fetchData(start, fetchSize, sorting); //pretend api call\n      return fetchedData;\n    },\n    initialPageParam: 1,\n    getNextPageParam: (_lastGroup, groups) => groups.length,\n    placeholderData: keepPreviousData,\n    refetchOnWindowFocus: false\n  });\n\n  // we must flatten the array of arrays from the useInfiniteQuery hook\n  const flatData = useMemo(() => data?.pages?.flatMap((page) => page.data) ?? [], [data]);\n  const totalDBRowCount = data?.pages?.[0]?.meta.totalRowCount ?? 0;\n  const totalFetched = flatData.length;\n\n  // called on scroll and possibly on mount to fetch more data as the user scrolls and reaches bottom of table\n  const fetchMoreOnBottomReached = useCallback(\n    (containerRefElement) => {\n      if (containerRefElement) {\n        const { scrollHeight, scrollTop, clientHeight } = containerRefElement;\n        //once the user has scrolled within 300px of the bottom of the table, fetch more data if there is any\n        if (scrollHeight - scrollTop - clientHeight < 300 && !isFetching && totalFetched < totalDBRowCount) {\n          fetchNextPage();\n        }\n      }\n    },\n    [fetchNextPage, isFetching, totalFetched, totalDBRowCount]\n  );\n\n  //a check on mount and after a fetch to see if the table is already scrolled to the bottom and immediately needs to fetch more data\n  useEffect(() => {\n    fetchMoreOnBottomReached(tableContainerRef.current);\n  }, [fetchMoreOnBottomReached]);\n\n  const table = useReactTable({\n    data: flatData,\n    columns,\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    debugTable: true\n  });\n\n  const { rows } = table.getRowModel();\n\n  // virtualizing is optional, but might be necessary if we are going to potentially have hundreds or thousands of rows\n  const rowVirtualizer = useVirtualizer({\n    count: rows.length,\n    getScrollElement: () => tableContainerRef.current,\n    estimateSize: () => 34,\n    overscan: 10\n  });\n\n  const virtualRows = rowVirtualizer.getVirtualItems();\n  const totalSize = rowVirtualizer.getTotalSize();\n\n  const paddingTop = virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0;\n  const paddingBottom = virtualRows.length > 0 ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0) : 0;\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      content={false}\n      title=\"Virtualized Infinite Scroll\"\n      secondary={\n        <CSVExport\n          {...{ data: virtualRows.map((virtualRow) => rows[virtualRow.index].original), headers, filename: 'virtualized-ininite.csv' }}\n        />\n      }\n    >\n      <ScrollX>\n        <TableContainer\n          component={Paper}\n          ref={tableContainerRef}\n          onScroll={(e) => fetchMoreOnBottomReached(e.target)}\n          sx={{ height: 544, overflow: 'auto' }}\n        >\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {paddingTop > 0 && (\n                <TableRow>\n                  <TableCell sx={{ height: `${paddingTop}px`, whiteSpace: 'nowrap' }} />\n                </TableRow>\n              )}\n              {virtualRows.map((virtualRow) => {\n                const row = rows[virtualRow.index];\n                return (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell sx={{ whiteSpace: 'nowrap' }} key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                );\n              })}\n              {paddingBottom > 0 && (\n                <TableRow>\n                  <TableCell sx={{ height: `${paddingBottom}px`, whiteSpace: 'nowrap' }} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - VIRTUALIZED INFINITE SCROLL ||============================== //\n\nexport default function VirtualizedInfiniteScrollTable() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ReactTable />\n    </QueryClientProvider>\n  );\n}\n","size_bytes":9594},"src/pages/auth/auth1/forgot-password.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport AuthWrapper from 'sections/auth/AuthWrapper';\nimport AuthForgotPassword from 'sections/auth/auth-forms/AuthForgotPassword';\n\n// ================================|| FORGOT PASSWORD ||================================ //\n\nexport default function ForgotPassword() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Forgot Password</Typography>\n            <Typography\n              component={Link}\n              to={isLoggedIn ? '/auth/login' : '/login'}\n              variant=\"body1\"\n              sx={{ textDecoration: 'none' }}\n              color=\"primary\"\n            >\n              Back to Login\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthForgotPassword />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":1268},"src/pages/components-overview/tooltip.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Fab from '@mui/material/Fab';\nimport Zoom from '@mui/material/Zoom';\nimport Grid from '@mui/material/Grid';\nimport Fade from '@mui/material/Fade';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport CustomTooltip from 'components/@extended/Tooltip';\n\n// assets\nimport { Add, Trash } from 'iconsax-react';\n\n// tooltip\nconst LightTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.common.white,\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}));\nLightTooltip.displayName = 'LightTooltip';\n\nconst BootstrapTooltip = styled(({ className, ...props }) => <Tooltip {...props} arrow classes={{ popper: className }} />)(({ theme }) => ({\n  [`& .${tooltipClasses.arrow}`]: {\n    color: theme.palette.common.black\n  },\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.common.black\n  }\n}));\nBootstrapTooltip.displayName = 'BootstrapTooltip';\n\nconst HtmlTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: '#f5f5f9',\n    color: 'rgba(0, 0, 0, 0.87)',\n    maxWidth: 220,\n    fontSize: theme.typography.pxToRem(12),\n    border: '1px solid #dadde9'\n  }\n}));\nHtmlTooltip.displayName = 'HtmlTooltip';\n\nconst CustomWidthTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 500\n  }\n});\nCustomWidthTooltip.displayName = 'CustomWidthTooltip';\n\nconst NoMaxWidthTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 'none'\n  }\n});\nNoMaxWidthTooltip.displayName = 'NoMaxWidthTooltip';\n\n// ==============================|| COMPONENTS - TOOLTIP ||============================== //\n\nexport default function ComponentTooltip() {\n  const [open, setOpen] = useState(false);\n  const handleTooltipClose = () => {\n    setOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    setOpen(true);\n  };\n\n  const longText = `\nAliquam eget finibus ante, non facilisis lectus. Sed vitae dignissim est, vel aliquam tellus.\nPraesent non nunc mollis, fermentum neque at, semper arcu.\nNullam eget est sed sem iaculis gravida eget vitae justo.`;\n\n  const simpleTooltipsCodeString = `<Tooltip title=\"Delete\">\n  <IconButton aria-label=\"delete\" size=\"large\">\n    <Trash variant=\"Bold\" />\n  </IconButton>\n</Tooltip>\n<Tooltip title=\"Add\" aria-label=\"add\">\n  <Fab color=\"primary\" sx={{ m: 2 }}>\n    <Add />\n  </Fab>\n</Tooltip>`;\n\n  const customTooltipsCodeString = `<LightTooltip title=\"Add\">\n  <Button>Light</Button>\n</LightTooltip>\n<BootstrapTooltip title=\"Add\">\n  <Button>Bootstrap</Button>\n</BootstrapTooltip>\n<HtmlTooltip\n  title={\n    <>\n      <Typography color=\"inherit\">Tooltip with HTML</Typography>\n      <em>And here&apos;s</em>{' '}\n      <Typography variant=\"subtitle1\" component=\"span\">\n        some\n      </Typography>{' '}\n      <u>amazing content</u>. it&apos;s very engaging. Right?\n    </>\n  }\n>\n  <Button>HTML</Button>\n</HtmlTooltip>`;\n\n  const arrowTooltipsCodeString = `<Tooltip title=\"Add\" arrow>\n  <Button>Arrow</Button>\n</Tooltip>`;\n\n  const delayTooltipsCodeString = `<Tooltip title=\"Add\" enterDelay={500} leaveDelay={200}>\n  <Button>[500ms, 200ms]</Button>\n</Tooltip>`;\n\n  const disabledTooltipsCodeString = `<Tooltip title=\"You Don't have permission to do this\">\n  <span>\n    <Button disabled>A Disabled Button</Button>\n  </span>\n</Tooltip>`;\n\n  const interactiveTooltipsCodeString = `<Tooltip title=\"Add\" disableInteractive>\n  <Button>Disable Interactive</Button>\n</Tooltip>`;\n\n  const controlledTooltipsCodeString = `<Tooltip disableFocusListener title=\"Add\">\n  <Button>Hover or touch</Button>\n</Tooltip>\n<Tooltip disableFocusListener disableTouchListener title=\"Add\">\n  <Button>Hover</Button>\n</Tooltip>\n<ClickAwayListener onClickAway={handleTooltipClose}>\n  <div>\n    <Tooltip\n      PopperProps={{\n        disablePortal: true\n      }}\n      onClose={handleTooltipClose}\n      open={open}\n      disableFocusListener\n      disableHoverListener\n      disableTouchListener\n      title=\"Add\"\n    >\n      <Button onClick={handleTooltipOpen}>Click</Button>\n    </Tooltip>\n  </div>\n</ClickAwayListener>`;\n\n  const transitionsTooltipsCodeString = `<Tooltip title=\"Add\">\n  <Button>Grow</Button>\n</Tooltip>\n<Tooltip TransitionComponent={Fade} TransitionProps={{ timeout: 600 }} title=\"Add\">\n  <Button>Fade</Button>\n</Tooltip>\n<Tooltip TransitionComponent={Zoom} title=\"Add\">\n  <Button>Zoom</Button>\n</Tooltip>`;\n\n  const variableTooltipsCodeString = `<Tooltip title={longText}>\n  <Button sx={{ m: 1 }}>Default Width [300px]</Button>\n</Tooltip>\n<CustomWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>Custom Width [500px]</Button>\n</CustomWidthTooltip>\n<NoMaxWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>No wrapping</Button>\n</NoMaxWidthTooltip>`;\n\n  const positionedTooltipsCodeString = `<Tooltip title=\"Add\" placement=\"top-start\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    top-start\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"top\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    top\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"top-end\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    top-end\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"right-start\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    right-start\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"right\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    right\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"right-end\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    right-end\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"left-start\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    left-start\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"left\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    left\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"left-end\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    left-end\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"bottom-start\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    bottom-start\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"bottom\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    bottom\n  </Button>\n</Tooltip>\n<Tooltip title=\"Add\" placement=\"bottom-end\">\n  <Button color=\"secondary\" variant=\"outlined\">\n    bottom-end\n  </Button>\n</Tooltip>`;\n  const TooltipsVariantCodeString = `<CustomTooltip title=\"Add\" arrow color=\"primary\">\n  <Button color=\"primary\" variant=\"outlined\">\n   primary\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"secondary\">\n  <Button color=\"secondary\" variant=\"contained\">\n    Secondary\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"success\">\n  <Button color=\"success\" variant=\"contained\">\n    Success\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"info\">\n  <Button color=\"info\" variant=\"contained\">\n    Info\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"warning\">\n  <Button color=\"warning\" variant=\"contained\">\n    Warning\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"error\">\n  <Button color=\"error\" variant=\"contained\">\n    Error\n  </Button>\n</CustomTooltip>\n`;\n\n  const TooltipsCustomColorCodeString = `<CustomTooltip title=\"Add\" arrow color=\"#fff\" bg=\"pink\">\n  <Button color=\"inherit\" variant=\"outlined\">\n    pink\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"#fff\">\n  <Button color=\"inherit\" variant=\"contained\">\n    Orange\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"#000\">\n  <Button color=\"inherit\" variant=\"contained\">\n    Yellow\n  </Button>\n</CustomTooltip>\n<CustomTooltip title=\"Add\" arrow color=\"white\" labelColor='#000'>\n  <Button color=\"inherit\" variant=\"contained\">\n    Black/White\n  </Button>\n</CustomTooltip>\n`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Tooltip\"\n        caption=\"Tooltips display informative text when users hover over, focus on, or tap an element.\"\n        directory=\"src/pages/components-overview/tooltip\"\n        link=\"https://mui.com/material-ui/react-tooltip/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Simple Tooltips\" codeHighlight codeString={simpleTooltipsCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"Delete\">\n                      <IconButton aria-label=\"delete\" size=\"large\" color=\"error\">\n                        <Trash variant=\"Bold\" />\n                      </IconButton>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <Tooltip title=\"Add\" aria-label=\"add\">\n                      <Fab color=\"primary\">\n                        <Add />\n                      </Fab>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Customized Tooltip\" codeString={customTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <LightTooltip title=\"Add\">\n                      <Button>Light</Button>\n                    </LightTooltip>\n                  </Grid>\n                  <Grid item>\n                    <BootstrapTooltip title=\"Add\">\n                      <Button>Bootstrap</Button>\n                    </BootstrapTooltip>\n                  </Grid>\n                  <Grid item>\n                    <HtmlTooltip\n                      title={\n                        <>\n                          <Typography color=\"inherit\">Tooltip with HTML</Typography>\n                          <em>And here&apos;s</em>{' '}\n                          <Typography variant=\"subtitle1\" component=\"span\">\n                            some\n                          </Typography>{' '}\n                          <u>amazing content</u>. it&apos;s very engaging. Right?\n                        </>\n                      }\n                    >\n                      <Button>HTML</Button>\n                    </HtmlTooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Arrow Tooltips\" codeString={arrowTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"Add\" arrow>\n                      <Button>Arrow</Button>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Delay Tooltips\" codeString={delayTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"Add\" enterDelay={500} leaveDelay={200}>\n                      <Button>[500ms, 200ms]</Button>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Disabled Tooltips\" codeString={disabledTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"You Don't have permission to do this\">\n                      <span>\n                        <Button disabled>A Disabled Button</Button>\n                      </span>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Disable Interactive Tooltips\" codeString={interactiveTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"Add\" disableInteractive>\n                      <Button>Disable Interactive</Button>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Triggers/Controlled Tooltips\" codeString={controlledTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip disableFocusListener title=\"Add\">\n                      <Button>Hover or touch</Button>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <Tooltip disableFocusListener disableTouchListener title=\"Add\">\n                      <Button>Hover</Button>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <ClickAwayListener onClickAway={handleTooltipClose}>\n                      <div>\n                        <Tooltip\n                          PopperProps={{\n                            disablePortal: true\n                          }}\n                          onClose={handleTooltipClose}\n                          open={open}\n                          disableFocusListener\n                          disableHoverListener\n                          disableTouchListener\n                          title=\"Add\"\n                        >\n                          <Button onClick={handleTooltipOpen}>Click</Button>\n                        </Tooltip>\n                      </div>\n                    </ClickAwayListener>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Transitions Tooltips\" codeString={transitionsTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title=\"Add\">\n                      <Button>Grow</Button>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <Tooltip TransitionComponent={Fade} TransitionProps={{ timeout: 600 }} title=\"Add\">\n                      <Button>Fade</Button>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <Tooltip TransitionComponent={Zoom} title=\"Add\">\n                      <Button>Zoom</Button>\n                    </Tooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Variable Width Tooltips\" codeString={variableTooltipsCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Tooltip title={longText}>\n                      <Button sx={{ m: 1 }}>Default Width [300px]</Button>\n                    </Tooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomWidthTooltip title={longText}>\n                      <Button sx={{ m: 1 }}>Custom Width [500px]</Button>\n                    </CustomWidthTooltip>\n                  </Grid>\n                  <Grid item>\n                    <NoMaxWidthTooltip title={longText}>\n                      <Button sx={{ m: 1 }}>No wrapping</Button>\n                    </NoMaxWidthTooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Positioned Tooltips\" codeString={positionedTooltipsCodeString}>\n                <>\n                  <Grid container justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"top-start\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          top-start\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"top\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          top\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"top-end\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          top-end\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                  <Grid container justifyContent=\"center\" sx={{ my: 1 }}>\n                    <Grid item xs={6} container alignItems=\"flex-start\" direction=\"column\" spacing={1}>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"right-start\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            right-start\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"right\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            right\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"right-end\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            right-end\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={6} container alignItems=\"flex-end\" direction=\"column\" spacing={1}>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"left-start\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            left-start\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"left\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            left\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                      <Grid item>\n                        <Tooltip title=\"Add\" placement=\"left-end\">\n                          <Button color=\"secondary\" variant=\"outlined\">\n                            left-end\n                          </Button>\n                        </Tooltip>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid container justifyContent=\"center\" spacing={1}>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"bottom-start\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          bottom-start\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"bottom\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          bottom\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title=\"Add\" placement=\"bottom-end\">\n                        <Button color=\"secondary\" variant=\"outlined\">\n                          bottom-end\n                        </Button>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                </>\n              </MainCard>\n              <MainCard title=\"Color Variant Tooltips\" codeString={TooltipsVariantCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"primary\">\n                      <Button color=\"primary\" variant=\"contained\">\n                        Primary\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"secondary\">\n                      <Button color=\"secondary\" variant=\"contained\">\n                        Secondary\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"success\">\n                      <Button color=\"success\" variant=\"contained\">\n                        Success\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"info\">\n                      <Button color=\"info\" variant=\"contained\">\n                        Info\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"warning\">\n                      <Button color=\"warning\" variant=\"contained\">\n                        Warning\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"error\">\n                      <Button color=\"error\" variant=\"contained\">\n                        error\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Custom Color Tooltips\" codeString={TooltipsCustomColorCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"pink\" labelColor=\"#000\">\n                      <Button color=\"inherit\" variant=\"outlined\">\n                        pink\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"orange\">\n                      <Button color=\"inherit\" variant=\"outlined\">\n                        Orange\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"yellow\" labelColor=\"#000\">\n                      <Button color=\"inherit\" variant=\"outlined\">\n                        Yellow\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                  <Grid item>\n                    <CustomTooltip title=\"Add\" arrow color=\"#fff\" labelColor=\"#000\">\n                      <Button color=\"inherit\" variant=\"outlined\">\n                        Black/white\n                      </Button>\n                    </CustomTooltip>\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":24055},"src/sections/apps/kanban/Board/ItemComment.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport Avatar from 'components/@extended/Avatar';\n\nimport { ThemeMode } from 'config';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| KANBAN BOARD - ITEM COMMENT ||============================== //\n\nexport default function ItemComment({ comment, profile }) {\n  const theme = useTheme();\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.lighter',\n        p: 1.5,\n        mt: 1.25\n      }}\n    >\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Grid container wrap=\"nowrap\" alignItems=\"center\" spacing={1}>\n            <Grid item>\n              <Avatar\n                sx={{ width: 24, height: 24 }}\n                size=\"sm\"\n                alt=\"User 1\"\n                src={profile && profile.avatar && getImageUrl(`${profile.avatar}`, ImagePath.USERS)}\n              />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Grid container alignItems=\"center\" spacing={1} justifyContent=\"space-between\">\n                <Grid item>\n                  <Typography variant=\"subtitle1\">{profile.name}</Typography>\n                </Grid>\n                <Grid item>\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                    <Dot size={6} sx={{ mt: -0.25 }} color=\"secondary\" />\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      {profile.time}\n                    </Typography>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sx={{ '&.MuiGrid-root': { pt: 1.5 } }}>\n          <Typography variant=\"body2\">{comment?.comment}</Typography>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nItemComment.propTypes = { comment: PropTypes.any, profile: PropTypes.any };\n","size_bytes":2278},"src/layout/Dashboard/Header/index.jsx":{"content":"import { useMemo } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\n\n// project-imports\nimport AppBarStyled from './AppBarStyled';\nimport HeaderContent from './HeaderContent';\nimport IconButton from 'components/@extended/IconButton';\n\nimport useConfig from 'hooks/useConfig';\nimport { handlerDrawerOpen, useGetMenuMaster } from 'api/menu';\nimport { DRAWER_WIDTH, MINI_DRAWER_WIDTH, MenuOrientation, ThemeMode } from 'config';\n\n// assets\nimport { HambergerMenu } from 'iconsax-react';\n\n// ==============================|| MAIN LAYOUT - HEADER ||============================== //\n\nexport default function Header() {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { mode, menuOrientation } = useConfig();\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;\n\n  // header content\n  const headerContent = useMemo(() => <HeaderContent />, []);\n\n  const iconBackColorOpen = mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  // common header\n  const mainHeader = (\n    <Toolbar sx={{ px: { xs: 2, sm: 4.5, lg: 8 } }}>\n      {!isHorizontal ? (\n        <IconButton\n          aria-label=\"open drawer\"\n          onClick={() => handlerDrawerOpen(!drawerOpen)}\n          edge=\"start\"\n          color=\"secondary\"\n          variant=\"light\"\n          size=\"large\"\n          sx={{ color: 'secondary.main', bgcolor: drawerOpen ? iconBackColorOpen : iconBackColor, ml: { xs: 0, lg: -2 }, p: 1 }}\n        >\n          <HambergerMenu />\n        </IconButton>\n      ) : null}\n      {headerContent}\n    </Toolbar>\n  );\n\n  // app-bar params\n  const appBar = {\n    position: 'fixed',\n    elevation: 0,\n    sx: {\n      bgcolor: alpha(theme.palette.background.default, 0.8),\n      backdropFilter: 'blur(8px)',\n      zIndex: 1200,\n      width: isHorizontal\n        ? '100%'\n        : { xs: '100%', lg: drawerOpen ? `calc(100% - ${DRAWER_WIDTH}px)` : `calc(100% - ${MINI_DRAWER_WIDTH}px)` }\n    }\n  };\n\n  return (\n    <>\n      {!downLG ? (\n        <AppBarStyled open={drawerOpen} {...appBar}>\n          {mainHeader}\n        </AppBarStyled>\n      ) : (\n        <AppBar {...appBar}>{mainHeader}</AppBar>\n      )}\n    </>\n  );\n}\n","size_bytes":2568},"src/pages/edit-form-grids/blogs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport EditBlogPage from 'sections/forms/edit-forms/blogs';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormEditBlog() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <EditBlogPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":430},"src/sections/widget/statistics/WalletProfile.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { ArrowDown2, ArrowUp2 } from 'iconsax-react';\nimport avatar from 'assets/images/users/avatar-6.png';\n\n// ===========================|| STATISTICS - WALLET PROFILE ||=========================== //\n\nexport default function WalletProfile() {\n  const theme = useTheme();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [anchorElProfile, setAnchorElProfile] = useState(null);\n\n  const openProfile = Boolean(anchorElProfile);\n\n  const handleClickProfile = (event) => {\n    setAnchorElProfile(event.currentTarget);\n  };\n\n  const handleCloseProfile = () => {\n    setAnchorElProfile(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Add Fund</Typography>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack alignItems=\"center\">\n            <Typography>Amount</Typography>\n            <Typography variant=\"h3\">$100</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            spacing={1.25}\n            sx={{ '& .MuiChip-root': { borderColor: theme.palette.divider, borderRadius: 1 } }}\n          >\n            <Chip color=\"primary\" label=\"$100\" variant=\"light\" size=\"small\" />\n            <Chip label=\"$150\" variant=\"outlined\" size=\"small\" />\n            <Chip label=\"$200\" variant=\"outlined\" size=\"small\" />\n            <Chip label=\"$250\" variant=\"outlined\" size=\"small\" />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <MainCard content={false}>\n            <Box sx={{ p: 2 }}>\n              <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                  <Avatar alt=\"Jone Doe\" src={avatar} size=\"lg\" />\n                  <Stack>\n                    <Typography variant=\"subtitle1\">Able pro</Typography>\n                    <Typography variant=\"caption\">@ableprodevelop</Typography>\n                  </Stack>\n                </Stack>\n\n                <IconButton\n                  color=\"secondary\"\n                  id=\"profile-button\"\n                  aria-controls={openProfile ? 'profile-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={openProfile ? 'true' : undefined}\n                  onClick={handleClickProfile}\n                >\n                  {openProfile ? <ArrowDown2 /> : <ArrowUp2 />}\n                </IconButton>\n                <Menu\n                  id=\"profile-menu\"\n                  anchorEl={anchorElProfile}\n                  open={openProfile}\n                  onClose={handleCloseProfile}\n                  MenuListProps={{ 'aria-labelledby': 'profile-button', sx: { p: 1.25, minWidth: 150 } }}\n                  anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                  transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                >\n                  <ListItemButton onClick={handleCloseProfile}>Active</ListItemButton>\n                  <ListItemButton onClick={handleCloseProfile}>Disable</ListItemButton>\n                  <ListItemButton onClick={handleCloseProfile}>Remove</ListItemButton>\n                </Menu>\n              </Stack>\n            </Box>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"contained\">\n            Confirm\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":5532},"src/pages/auth/auth1/code-verification.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AuthWrapper from 'sections/auth/AuthWrapper';\nimport AuthCodeVerification from 'sections/auth/auth-forms/AuthCodeVerification';\n\n// ================================|| CODE VERIFICATION ||================================ //\n\nexport default function CodeVerification() {\n  let email = window.localStorage.getItem('email');\n  let finalArr = [];\n\n  if (email) {\n    let emailSplit = email.split('');\n    let len = emailSplit.indexOf('@');\n    emailSplit.forEach((item, pos) => {\n      pos >= 1 && pos <= len - 2 ? finalArr.push('*') : finalArr.push(emailSplit[pos]);\n    });\n  }\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h3\">Enter Verification Code</Typography>\n            <Typography color=\"secondary\">We send you on mail.</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>We`ve send you code on {email && finalArr.length > 0 ? finalArr.join('') : '****@company.com'}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthCodeVerification />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":1348},"src/sections/components-overview/dialogs/FullScreenDialog.jsx":{"content":"import { forwardRef, useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Slide from '@mui/material/Slide';\nimport Avatar from '@mui/material/Avatar';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Divider from '@mui/material/Divider';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nimport avatar1 from 'assets/images/users/avatar-1.png';\nimport avatar2 from 'assets/images/users/avatar-2.png';\n\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\n// ==============================|| DIALOG - FULL SCREEN ||============================== //\n\nexport default function FullScreenDialog() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open full-screen dialog\n      </Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar sx={{ position: 'relative', boxShadow: 'none' }}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <Add style={{ transform: 'rotate(45deg)' }} />\n            </IconButton>\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\">\n              Set Backup Account\n            </Typography>\n            <Button color=\"primary\" variant=\"contained\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List sx={{ p: 3 }}>\n          <ListItemButton>\n            <ListItemAvatar>\n              <Avatar src={avatar1} />\n            </ListItemAvatar>\n            <ListItemText primary=\"Phone ringtone\" secondary=\"Default\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemAvatar>\n              <Avatar src={avatar2} />\n            </ListItemAvatar>\n            <ListItemText primary=\"Default notification ringtone\" secondary=\"Tethys\" />\n          </ListItemButton>\n        </List>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":2595},"src/sections/forms/edit-forms/jobs/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  jobTitle: yup.string().required('Title of page is required'),\n  location: yup.string().required('Location is required'),\n  type: yup.string().required('Type of of job is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  firstSectionHeading: yup.string().required('First section heading is required'),\n  firstSectionList: yup.string().required('First section list is required'),\n  secondSectionHeading: yup.string().required('Second section heading is required'),\n  secondSectionList: yup.string().required('Second section list is required'),\n  thirdSectionHeading: yup.string().required('Third section heading is required'),\n  thirdSectionList: yup.string().required('Third section list is required'),\n  isInternship: yup.boolean().required('Internship status is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      jobTitle: data.jobTitle ?? '', // Match this with form field name\n      location: data.location ?? '',\n      type: data.type ?? '',\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      firstSectionHeading: data.firstSectionHeading ?? '',\n      firstSectionList: data.firstSectionList ? data.firstSectionList.join('\\n') : '',\n      secondSectionHeading: data.secondSectionHeading ?? '',\n      secondSectionList: data.secondSectionList ? data.secondSectionList.join('\\n') : '',\n      thirdSectionHeading: data.thirdSectionHeading ?? '',\n      thirdSectionList: data.thirdSectionList ? data.thirdSectionList.join('\\n') : '',\n      fourthSectionHeading: data.fourthSectionHeading ?? '',\n      fourthSectionList: data.fourthSectionList ? data.fourthSectionList.join('\\n') : '',\n      isInternship: data.isInternship ?? false\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        id: values.id,\n        jobTitle: values.jobTitle,\n        date: new Date().toISOString().split('T')[0],\n        location: values.location,\n        type: values.type,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        firstSectionHeading: values.firstSectionHeading,\n        firstSectionList: values.firstSectionList.split('\\n'),\n        secondSectionHeading: values.secondSectionHeading,\n        secondSectionList: values.secondSectionList.split('\\n'),\n        thirdSectionHeading: values.thirdSectionHeading,\n        thirdSectionList: values.thirdSectionList.split('\\n'),\n        fourthSectionHeading: values.fourthSectionHeading,\n        fourthSectionList: values.fourthSectionList.split('\\n'),\n        isInternship: values.isInternship\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                multiline\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Internship Status</InputLabel>\n              <RadioGroup\n                aria-label=\"internship-status\"\n                name=\"isInternship\"\n                value={formik.values.isInternship ? 'true' : 'false'}\n                onChange={(e) => formik.setFieldValue('isInternship', e.target.value === 'true')}\n              >\n                <FormControlLabel value=\"false\" control={<Radio />} label=\"Full-time Job\" />\n                <FormControlLabel value=\"true\" control={<Radio />} label=\"Internship\" />\n              </RadioGroup>\n              {formik.touched.isInternship && formik.errors.isInternship && (\n                <Typography variant=\"body2\" color=\"error\">\n                  {formik.errors.isInternship}\n                </Typography>\n              )}\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job</InputLabel>\n              <TextField\n                id=\"jobTitle\"\n                name=\"jobTitle\"\n                placeholder=\"Job *\"\n                multiline\n                value={formik.values.jobTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.jobTitle && Boolean(formik.errors.jobTitle)}\n                helperText={formik.touched.jobTitle && formik.errors.jobTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Location</InputLabel>\n              <TextField\n                id=\"location\"\n                name=\"location\"\n                placeholder=\"Location *\"\n                multiline\n                value={formik.values.location}\n                onChange={formik.handleChange}\n                error={formik.touched.location && Boolean(formik.errors.location)}\n                helperText={formik.touched.location && formik.errors.location}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job type</InputLabel>\n              <TextField\n                id=\"type\"\n                name=\"type\"\n                placeholder=\"Job type *\"\n                multiline\n                value={formik.values.type}\n                onChange={formik.handleChange}\n                error={formik.touched.type && Boolean(formik.errors.type)}\n                helperText={formik.touched.type && formik.errors.type}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First section heading</InputLabel>\n              <TextField\n                id=\"firstSectionHeading\"\n                name=\"firstSectionHeading\"\n                multiline\n                placeholder=\"First section heading *\"\n                value={formik.values.firstSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.firstSectionHeading && Boolean(formik.errors.firstSectionHeading)}\n                helperText={formik.touched.firstSectionHeading && formik.errors.firstSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First section list</InputLabel>\n              <TextField\n                id=\"firstSectionList\"\n                name=\"firstSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"First section list (Insert by newline)*\"\n                value={formik.values.firstSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.firstSectionList && Boolean(formik.errors.firstSectionList)}\n                helperText={formik.touched.firstSectionList && formik.errors.firstSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second section heading</InputLabel>\n              <TextField\n                id=\"secondSectionHeading\"\n                name=\"secondSectionHeading\"\n                multiline\n                placeholder=\"Second section heading *\"\n                value={formik.values.secondSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.secondSectionHeading && Boolean(formik.errors.secondSectionHeading)}\n                helperText={formik.touched.secondSectionHeading && formik.errors.secondSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second section list</InputLabel>\n              <TextField\n                id=\"secondSectionList\"\n                name=\"secondSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Second section list (Insert by newline)*\"\n                value={formik.values.secondSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.secondSectionList && Boolean(formik.errors.secondSectionList)}\n                helperText={formik.touched.secondSectionList && formik.errors.secondSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Third section heading</InputLabel>\n              <TextField\n                id=\"thirdSectionHeading\"\n                name=\"thirdSectionHeading\"\n                placeholder=\"Third section heading *\"\n                multiline\n                value={formik.values.thirdSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.thirdSectionHeading && Boolean(formik.errors.thirdSectionHeading)}\n                helperText={formik.touched.thirdSectionHeading && formik.errors.thirdSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Third section list</InputLabel>\n              <TextField\n                id=\"thirdSectionList\"\n                name=\"thirdSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Third section list (Insert by newline)*\"\n                value={formik.values.thirdSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.thirdSectionList && Boolean(formik.errors.thirdSectionList)}\n                helperText={formik.touched.thirdSectionList && formik.errors.thirdSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Fourth section heading</InputLabel>\n              <TextField\n                id=\"fourthSectionHeading\"\n                name=\"fourthSectionHeading\"\n                placeholder=\"Fourth section heading *\"\n                multiline\n                value={formik.values.fourthSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.fourthSectionHeading && Boolean(formik.errors.fourthSectionHeading)}\n                helperText={formik.touched.fourthSectionHeading && formik.errors.fourthSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Fourth section list</InputLabel>\n              <TextField\n                id=\"fourthSectionList\"\n                name=\"fourthSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Fourth section list (Insert by newline)*\"\n                value={formik.values.fourthSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.fourthSectionList && Boolean(formik.errors.fourthSectionList)}\n                helperText={formik.touched.fourthSectionList && formik.errors.fourthSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":15959},"src/pages/components-overview/tabs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicTabs from 'sections/components-overview/tabs/BasicTabs';\nimport ScrollableTabs from 'sections/components-overview/tabs/ScrollableTabs';\nimport IconTabs from 'sections/components-overview/tabs/IconTabs';\nimport CenteredTabs from 'sections/components-overview/tabs/CenteredTabs';\nimport VerticalTabs from 'sections/components-overview/tabs/VerticalTabs';\n\n// ==============================|| COMPONENTS - TABS ||============================== //\n\nexport default function ComponentTabs() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Tabs\"\n        caption=\"Tabs make it easy to explore and switch between different views.\"\n        directory=\"src/pages/components-overview/tabs\"\n        link=\"https://mui.com/material-ui/react-tabs/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={1}>\n              <Typography variant=\"h5\">Basic</Typography>\n              <BasicTabs />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={1}>\n              <Typography variant=\"h5\">Color Tab with Disabled Tab + Scrollable Tabs</Typography>\n              <ScrollableTabs />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={1}>\n              <Typography variant=\"h5\">Icon Tabs</Typography>\n              <IconTabs />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={1}>\n              <Typography variant=\"h5\">Centered Tabs</Typography>\n              <CenteredTabs />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={1}>\n              <Typography variant=\"h5\">Vertical Tabs</Typography>\n              <VerticalTabs />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":2344},"src/sections/tables/react-table/ExpandingUserDetail.jsx":{"content":"import PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\n\n// project import\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport { getImageUrl, ImagePath } from 'utils/getImageUrl';\n\n// assets\nimport { Call, Location, Sms } from 'iconsax-react';\n\n// ==============================|| EXPANDING TABLE - USER DETAILS ||============================== //\n\nexport default function ExpandingUserDetail({ data }) {\n  const matchDownMD = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  return (\n    <Grid container spacing={2.5} sx={{ pl: { xs: 0, sm: 5, md: 6, lg: 10, xl: 12 } }}>\n      <Grid item xs={12} sm={5} md={4} xl={3.5}>\n        <MainCard>\n          <Chip\n            label={data.status}\n            size=\"small\"\n            sx={{\n              position: 'absolute',\n              right: -1,\n              top: -1,\n              borderRadius: '0 4px 0 4px'\n            }}\n          />\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Stack spacing={2.5} alignItems=\"center\">\n                <Avatar alt=\"Avatar 1\" size=\"xl\" src={getImageUrl(`avatar-${data.avatar}.png`, ImagePath.USERS)} />\n                <Stack spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"h5\">\n                    {data.firstName} {data.lastName}\n                  </Typography>\n                  <Typography color=\"secondary\">{data.role}</Typography>\n                </Stack>\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" justifyContent=\"space-around\" alignItems=\"center\">\n                <Stack spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"h5\">{data.age}</Typography>\n                  <Typography color=\"secondary\">Age</Typography>\n                </Stack>\n                <Divider orientation=\"vertical\" flexItem />\n                <Stack spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"h5\">{data.progress}%</Typography>\n                  <Typography color=\"secondary\">Progress</Typography>\n                </Stack>\n                <Divider orientation=\"vertical\" flexItem />\n                <Stack spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"h5\">{data.visits}</Typography>\n                  <Typography color=\"secondary\">Visits</Typography>\n                </Stack>\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <List component=\"nav\" aria-label=\"main mailbox folders\" sx={{ py: 0, '& .MuiListItem-root': { p: 0 } }}>\n                <ListItem>\n                  <ListItemIcon>\n                    <Sms size=\"15\" />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography color=\"secondary\">Email</Typography>} />\n                  <ListItemSecondaryAction>\n                    <Typography align=\"right\">{data.email}</Typography>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    <Call size=\"15\" />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography color=\"secondary\">Phone</Typography>} />\n                  <ListItemSecondaryAction>\n                    <Typography align=\"right\">\n                      <PatternFormat displayType=\"text\" format=\"+1 (###) ###-####\" mask=\"_\" defaultValue={data.contact} />\n                    </Typography>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    <Location size=\"15\" />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography color=\"secondary\">Location</Typography>} />\n                  <ListItemSecondaryAction>\n                    <Typography align=\"right\">{data.country}</Typography>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                <ListItem>\n                  <ListItemIcon>\n                    <Location size=\"15\" />\n                  </ListItemIcon>\n                  <ListItemText primary={<Typography color=\"secondary\">Portfolio</Typography>} />\n                  <ListItemSecondaryAction>\n                    <Link align=\"right\" href=\"https://google.com\" target=\"_blank\">\n                      https://anshan.dh.url\n                    </Link>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              </List>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={7} md={8} xl={8.5}>\n        <Stack spacing={2.5}>\n          <MainCard title=\"Personal Details\">\n            <List sx={{ py: 0 }}>\n              <ListItem divider={!matchDownMD}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Stack spacing={0.5}>\n                      <Typography color=\"secondary\">Full Name</Typography>\n                      <Typography>\n                        {data.firstName} {data.lastName}\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Stack spacing={0.5}>\n                      <Typography color=\"secondary\">Father Name</Typography>\n                      <Typography>Mr. {data.fatherName}</Typography>\n                    </Stack>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem divider={!matchDownMD}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Stack spacing={0.5}>\n                      <Typography color=\"secondary\">Country</Typography>\n                      <Typography>{data.country}</Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Stack spacing={0.5}>\n                      <Typography color=\"secondary\">Zip Code</Typography>\n                      <Typography>\n                        <PatternFormat displayType=\"text\" format=\"### ###\" mask=\"_\" defaultValue={data.contact} />\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                </Grid>\n              </ListItem>\n              <ListItem>\n                <Stack spacing={0.5}>\n                  <Typography color=\"secondary\">Address</Typography>\n                  <Typography>{data.address}</Typography>\n                </Stack>\n              </ListItem>\n            </List>\n          </MainCard>\n          <MainCard title=\"About me\">\n            <Typography color=\"secondary\">\n              Hello, I’m {data.firstName} {data.lastName} {data.role} based in international company, {data.about}\n            </Typography>\n          </MainCard>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n\nExpandingUserDetail.propTypes = { data: PropTypes.any };\n","size_bytes":7784},"src/sections/tables/react-table/RowSelectionTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { flexRender, getCoreRowModel, getPaginationRowModel, useReactTable } from '@tanstack/react-table';\n\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, IndeterminateCheckbox, RowSelection, TablePagination } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE - ROW SELECTION ||============================== //\n\nfunction ReactTable({ data, columns }) {\n  const [rowSelection, setRowSelection] = useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      rowSelection\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    debugTable: true\n  });\n\n  useEffect(() => setRowSelection({ 5: true }), []);\n\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      title=\"Row Selection\"\n      content={false}\n      secondary={\n        <CSVExport\n          {...{\n            data:\n              table.getSelectedRowModel().flatRows.map((row) => row.original).length === 0\n                ? data\n                : table.getSelectedRowModel().flatRows.map((row) => row.original),\n            headers,\n            filename: 'row-selection.csv'\n          }}\n        />\n      }\n      codeHighlight\n      codeString={JSON.stringify(\n        {\n          rowSelection: rowSelection,\n          'flatRows[].original': table.getSelectedRowModel().flatRows.map((row) => row.original)\n        },\n        null,\n        2\n      )}\n    >\n      <ScrollX>\n        <Stack>\n          <RowSelection selected={Object.keys(rowSelection).length} />\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: '58px' } }}>\n                    {headerGroup.headers.map((header) => (\n                      <TableCell key={header.id} {...header.column.columnDef.meta}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount\n                }}\n              />\n            </Box>\n          </>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| ROW SELECTION ||============================== //\n\nexport default function RowSelectionTable() {\n  const data = makeData(100);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'select',\n        header: ({ table }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n              onChange: table.getToggleAllRowsSelectedHandler()\n            }}\n          />\n        ),\n        cell: ({ row }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.getToggleSelectedHandler()\n            }}\n          />\n        )\n      },\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nReactTable.propTypes = { data: PropTypes.array, columns: PropTypes.array };\n","size_bytes":6444},"src/pages/auth/auth1/register.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Logo from 'components/logo';\nimport useAuth from 'hooks/useAuth';\nimport AuthSocButton from 'sections/auth/AuthSocButton';\nimport AuthDivider from 'sections/auth/AuthDivider';\nimport AuthWrapper from 'sections/auth/AuthWrapper';\nimport FirebaseRegister from 'sections/auth/auth-forms/AuthRegister';\n\n// assets\nimport imgFacebook from 'assets/images/auth/facebook.svg';\nimport imgTwitter from 'assets/images/auth/twitter.svg';\nimport imgGoogle from 'assets/images/auth/google.svg';\n\n// ================================|| REGISTER ||================================ //\n\nexport default function Register() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sx={{ textAlign: 'center' }}>\n          <Logo />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgFacebook} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Facebook\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgTwitter} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Twitter\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgGoogle} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Google\n              </AuthSocButton>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthDivider>\n            <Typography variant=\"body1\">OR</Typography>\n          </AuthDivider>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Sign up</Typography>\n            <Typography\n              component={Link}\n              to={isLoggedIn ? '/auth/login' : '/login'}\n              variant=\"body1\"\n              sx={{ textDecoration: 'none' }}\n              color=\"primary\"\n            >\n              Already have an account?\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <FirebaseRegister />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":2575},"src/pages/dashboard/default.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport EcommerceDataCard from 'components/cards/statistics/EcommerceDataCard';\nimport EcommerceDataChart from 'sections/widget/chart/EcommerceDataChart';\n\nimport RepeatCustomerRate from 'sections/widget/chart/RepeatCustomerRate';\nimport ProjectOverview from 'sections/widget/chart/ProjectOverview';\nimport ProjectRelease from 'sections/dashboard/default/ProjectRelease';\nimport AssignUsers from 'sections/widget/statistics/AssignUsers';\n\nimport Transactions from 'sections/widget/data/Transactions';\nimport TotalIncome from 'sections/widget/chart/TotalIncome';\n\n// assets\nimport { ArrowDown, ArrowUp, Book, Calendar, CloudChange, Wallet3 } from 'iconsax-react';\n// import WelcomeBanner from 'sections/dashboard/default/WelcomeBanner';\n\n// ==============================|| DASHBOARD - DEFAULT ||============================== //\n\nexport default function DashboardDefault() {\n  const theme = useTheme();\n\n  return (\n    <Grid container rowSpacing={4.5} columnSpacing={2.75}>\n      {/* row 1 */}\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"All Earnings\"\n          count=\"$3000\"\n          iconPrimary={<Wallet3 />}\n          percentage={\n            <Typography color=\"primary\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowUp size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.primary.main} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Page Views\"\n          count=\"290+\"\n          color=\"warning\"\n          iconPrimary={<Book color={theme.palette.warning.dark} />}\n          percentage={\n            <Typography color=\"warning.dark\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowDown size={16} style={{ transform: 'rotate(-45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.warning.dark} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Total task\"\n          count=\"1,568\"\n          color=\"success\"\n          iconPrimary={<Calendar color={theme.palette.success.darker} />}\n          percentage={\n            <Typography color=\"success.darker\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowUp size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.success.darker} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Download\"\n          count=\"$200\"\n          color=\"error\"\n          iconPrimary={<CloudChange color={theme.palette.error.dark} />}\n          percentage={\n            <Typography color=\"error.dark\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowDown size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.error.dark} />\n        </EcommerceDataCard>\n      </Grid>\n\n      {/* row 2 */}\n      <Grid item xs={12} md={8} lg={9}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <RepeatCustomerRate />\n          </Grid>\n          <Grid item xs={12}>\n            <ProjectOverview />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={4} lg={3}>\n        <Stack spacing={3}>\n          <ProjectRelease />\n          <AssignUsers />\n        </Stack>\n      </Grid>\n\n      {/* row 3 */}\n      <Grid item xs={12} md={6}>\n        <Transactions />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <TotalIncome />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":4105},"src/components/Customization/ColorScheme.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\n\nimport { TickSquare } from 'iconsax-react';\n\n// ==============================|| CUSTOMIZATION - COLOR SCHEME ||============================== //\n\nexport default function ColorScheme() {\n  const theme = useTheme();\n  const { mode, presetColor, onChangePresetColor } = useConfig();\n\n  const colorOptions = [\n    {\n      id: 'default',\n      primary: mode === ThemeMode.DARK ? '#4680FF' : '#4680FF',\n      darker: mode === ThemeMode.DARK ? '#2F63FF' : '#2F63FF'\n    },\n    {\n      id: 'theme1',\n      primary: mode === ThemeMode.DARK ? '#305bdd' : '#3366FF',\n      darker: mode === ThemeMode.DARK ? '#a9c5f8' : '#102693'\n    },\n    {\n      id: 'theme2',\n      primary: mode === ThemeMode.DARK ? '#655ac8' : '#7265E6',\n      darker: mode === ThemeMode.DARK ? '#c3baf4' : '#5549DB'\n    },\n    {\n      id: 'theme3',\n      primary: mode === ThemeMode.DARK ? '#0a7d3e' : '#068e44',\n      darker: mode === ThemeMode.DARK ? '#173123' : '#001c0f'\n    },\n    {\n      id: 'theme4',\n      primary: mode === ThemeMode.DARK ? '#5d7dcb' : '#3c64d0',\n      darker: mode === ThemeMode.DARK ? '#212841' : '#0d1b5e'\n    },\n    {\n      id: 'theme5',\n      primary: mode === ThemeMode.DARK ? '#d26415' : '#f27013',\n      darker: mode === ThemeMode.DARK ? '#f8c48c' : '#802800'\n    },\n    {\n      id: 'theme6',\n      primary: mode === ThemeMode.DARK ? '#288d99' : '#2aa1af',\n      darker: mode === ThemeMode.DARK ? '#96d0d0' : '#06323d'\n    },\n    {\n      id: 'theme7',\n      primary: mode === ThemeMode.DARK ? '#05934c' : '#00a854',\n      darker: mode === ThemeMode.DARK ? '#61ca8b' : '#003620'\n    },\n    {\n      id: 'theme8',\n      primary: mode === ThemeMode.DARK ? '#058478' : '#009688',\n      darker: mode === ThemeMode.DARK ? '#59b8a5' : '#002424'\n    }\n  ];\n\n  const handlePresetColorChange = (event) => {\n    onChangePresetColor(event.target.value);\n  };\n\n  return (\n    <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={presetColor} onChange={handlePresetColorChange}>\n      <Stack direction=\"row\" alignItems=\"center\" sx={{ width: '100%' }} spacing={0.5}>\n        {colorOptions.map((color, index) => (\n          <FormControlLabel\n            key={index}\n            control={<Radio value={color.id} sx={{ display: 'none' }} />}\n            sx={{ m: 0, width: presetColor === color.id ? '100%' : 'auto', display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n            label={\n              <MainCard\n                content={false}\n                sx={{\n                  bgcolor: color.primary,\n                  p: 1,\n                  borderRadius: 0.5,\n                  borderWidth: 4,\n                  borderColor: presetColor === color.id ? color.darker : color.primary,\n                  '&:hover': { borderColor: color.darker }\n                }}\n              >\n                <Stack\n                  direction=\"row\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  sx={{ width: presetColor === color.id ? '100%' : 1, height: 44 }}\n                >\n                  {presetColor === color.id && (\n                    <Stack direction=\"column\" alignItems=\"center\">\n                      <TickSquare variant=\"Bulk\" color={theme.palette.common.white} />\n                      <Typography color=\"white\" variant=\"caption\">\n                        {color.id}\n                      </Typography>\n                    </Stack>\n                  )}\n                </Stack>\n              </MainCard>\n            }\n          />\n        ))}\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":4003},"src/themes/overrides/Autocomplete.js":{"content":"// ==============================|| OVERRIDES - AUTOCOMPLETE ||============================== //\n\nexport default function Autocomplete() {\n  return {\n    MuiAutocomplete: {\n      styleOverrides: {\n        root: {\n          '& .MuiOutlinedInput-root': {\n            padding: '3px 9px'\n          }\n        },\n        popupIndicator: {\n          width: 'auto',\n          height: 'auto'\n        },\n        clearIndicator: {\n          width: 'auto',\n          height: 'auto'\n        }\n      }\n    }\n  };\n}\n","size_bytes":501},"src/assets/third-party/react-table.css":{"content":".cell-center {\n  text-align: center;\n  justify-content: center;\n}\n.cell-center > * {\n  margin: 0 auto;\n  justify-content: center;\n}\n\n.cell-right {\n  text-align: right;\n  justify-content: flex-end;\n}\n.cell-right .MuiOutlinedInput-input {\n  text-align: right;\n}\n.cell-right > * {\n  margin: 0 0 0 auto;\n  justify-content: flex-end;\n}\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.prevent-select {\n  -webkit-user-select: none;\n  /* Safari */\n  -ms-user-select: none;\n  /* IE 10 and IE 11 */\n  user-select: none;\n  /* Standard syntax */\n}\n\n.sticky-header {\n  margin: 0;\n  position: sticky;\n  top: -1px;\n  z-index: 1;\n}\n\n.resizer {\n  position: absolute;\n  right: 0;\n  top: 0;\n  height: 100%;\n  width: 5px;\n  cursor: col-resize;\n  user-select: none;\n  touch-action: none;\n}\n\n.resizer.isResizing {\n  opacity: 1;\n}\n","size_bytes":801},"src/sections/auth/auth-forms/AuthForgotPassword.jsx":{"content":"import { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n// ============================|| FIREBASE - FORGOT PASSWORD ||============================ //\n\nexport default function AuthForgotPassword() {\n  const scriptedRef = useScriptRef();\n  const navigate = useNavigate();\n\n  const { isLoggedIn, resetPassword } = useAuth();\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required')\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            await resetPassword(values.email).then(\n              () => {\n                setStatus({ success: true });\n                setSubmitting(false);\n                openSnackbar({\n                  open: true,\n                  message: 'Check mail for reset password link',\n                  variant: 'alert',\n\n                  alert: {\n                    color: 'success'\n                  }\n                });\n                setTimeout(() => {\n                  navigate(isLoggedIn ? '/auth/check-mail' : '/check-mail', { replace: true });\n                }, 1500);\n\n                // WARNING: do not set any formik state here as formik might be already destroyed here. You may get following error by doing so.\n                // Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.\n                // To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\n                // github issue: https://github.com/formium/formik/issues/2430\n              },\n              (err) => {\n                setStatus({ success: false });\n                setErrors({ submit: err.message });\n                setSubmitting(false);\n              }\n            );\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"email-forgot\">Email Address</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.email && errors.email)}\n                    id=\"email-forgot\"\n                    type=\"email\"\n                    value={values.email}\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"Enter email address\"\n                    inputProps={{}}\n                  />\n                </Stack>\n                {touched.email && errors.email && (\n                  <FormHelperText error id=\"helper-text-email-forgot\">\n                    {errors.email}\n                  </FormHelperText>\n                )}\n              </Grid>\n              {errors.submit && (\n                <Grid item xs={12}>\n                  <FormHelperText error>{errors.submit}</FormHelperText>\n                </Grid>\n              )}\n              <Grid item xs={12} sx={{ mb: -2 }}>\n                <Typography variant=\"caption\">Do not forgot to check SPAM box.</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <AnimateButton>\n                  <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Send Password Reset Email\n                  </Button>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n","size_bytes":4722},"src/sections/components-overview/lists/SelectedList.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Collapse from '@mui/material/Collapse';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowUp2, Element, Grid5, Setting3 } from 'iconsax-react';\n\nconst selectList = {\n  '&.Mui-selected': { bgcolor: 'transparent', color: 'primary.main', '& .MuiListItemIcon-root': { color: 'primary.main' } }\n};\n\n// ==============================|| LIST - SELECTED ||============================== //\n\nexport default function SelectedList() {\n  const [selected, setSelected] = useState('sample');\n  const [open, setOpen] = useState('sample');\n  const [openChild, setOpenChild] = useState('');\n\n  const handleSelect = (page) => {\n    setSelected(page);\n  };\n\n  const handleClick = (page) => {\n    setOpen(open !== page ? page : '');\n    setSelected(selected !== page ? selected : '');\n    setOpenChild('');\n  };\n\n  const handleChildClick = (page) => {\n    setOpenChild(openChild !== page ? page : '');\n    setSelected(selected !== page ? selected : '');\n  };\n\n  const selectedListCodeString = `<List sx={{ p: 0 }}>\n  <ListItem disablePadding divider>\n    <ListItemButton selected={open === 'sample'} onClick={() => handleClick('sample')} sx={selectList}>\n      <ListItemIcon>\n        <Grid5 />\n      </ListItemIcon>\n      <ListItemText primary=\"Sample\" />\n      {open === 'sample' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n    </ListItemButton>\n  </ListItem>\n  <Collapse in={open === 'sample'} timeout=\"auto\" unmountOnExit>\n    <List disablePadding>\n      <ListItemButton\n        sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n        selected={selected === 'list1'}\n        onClick={() => handleSelect('list1')}\n      >\n        <ListItemText primary=\"List item 01\" />\n      </ListItemButton>\n      <ListItemButton\n        sx={{ pl: 5, ...selectList }}\n        onClick={() => handleChildClick('list2')}\n        selected={selected === 'list2' || openChild === 'list2'}\n      >\n        <ListItemText primary=\"List item 02\" />\n        {openChild === 'list1' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n      </ListItemButton>\n      <Collapse in={openChild === 'list2'} timeout=\"auto\" unmountOnExit>\n        <List disablePadding>\n          <ListItemButton\n            sx={{ pl: 7, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n            selected={selected === 'list5'}\n            onClick={() => handleSelect('list5')}\n          >\n            <ListItemText primary=\"List item 05\" />\n          </ListItemButton>\n          <ListItemButton\n            sx={{ pl: 7, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n            selected={selected === 'list6'}\n            onClick={() => handleSelect('list6')}\n          >\n            <ListItemText primary=\"List item 06\" />\n          </ListItemButton>\n        </List>\n      </Collapse>\n    </List>\n  </Collapse>\n  <ListItem disablePadding divider>\n    <ListItemButton onClick={() => handleClick('settings')} selected={selected === 'settings' || open === 'settings'} sx={selectList}>\n      <ListItemIcon>\n        <Setting3 />\n      </ListItemIcon>\n      <ListItemText primary=\"Settings\" />\n      {open === 'settings' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n    </ListItemButton>\n  </ListItem>\n  <Collapse in={open === 'settings'} timeout=\"auto\" unmountOnExit>\n    <List disablePadding>\n      <ListItemButton\n        sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n        selected={selected === 'list3'}\n        onClick={() => handleSelect('list3')}\n      >\n        <ListItemText primary=\"List item 03\" />\n      </ListItemButton>\n      <ListItemButton\n        sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n        selected={selected === 'list4'}\n        onClick={() => handleSelect('list4')}\n      >\n        <ListItemText primary=\"List item 04\" />\n      </ListItemButton>\n    </List>\n  </Collapse>\n  <ListItem disablePadding>\n    <ListItemButton\n      sx={{ '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n      selected={selected === 'ui-elements'}\n      onClick={() => handleSelect('ui-elements')}\n    >\n      <ListItemIcon>\n        <Element />\n      </ListItemIcon>\n      <ListItemText primary=\"UI Elements\" />\n    </ListItemButton>\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={selectedListCodeString}>\n      <List sx={{ p: 0, '& .MuiListItemButton-root': { borderRadius: 0, my: 0 } }}>\n        <ListItem disablePadding divider>\n          <ListItemButton selected={open === 'sample'} onClick={() => handleClick('sample')} sx={selectList}>\n            <ListItemIcon>\n              <Grid5 size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Sample\" />\n            {open === 'sample' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n          </ListItemButton>\n        </ListItem>\n        <Collapse in={open === 'sample'} timeout=\"auto\" unmountOnExit>\n          <List disablePadding>\n            <ListItemButton\n              sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n              selected={selected === 'list1'}\n              onClick={() => handleSelect('list1')}\n            >\n              <ListItemText primary=\"List item 01\" />\n            </ListItemButton>\n            <ListItemButton\n              sx={{ pl: 5, ...selectList }}\n              onClick={() => handleChildClick('list2')}\n              selected={selected === 'list2' || openChild === 'list2'}\n            >\n              <ListItemText primary=\"List item 02\" />\n              {openChild === 'list1' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n            </ListItemButton>\n            <Collapse in={openChild === 'list2'} timeout=\"auto\" unmountOnExit>\n              <List disablePadding>\n                <ListItemButton\n                  sx={{ pl: 7, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n                  selected={selected === 'list5'}\n                  onClick={() => handleSelect('list5')}\n                >\n                  <ListItemText primary=\"List item 05\" />\n                </ListItemButton>\n                <ListItemButton\n                  sx={{ pl: 7, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n                  selected={selected === 'list6'}\n                  onClick={() => handleSelect('list6')}\n                >\n                  <ListItemText primary=\"List item 06\" />\n                </ListItemButton>\n              </List>\n            </Collapse>\n          </List>\n        </Collapse>\n        <ListItem disablePadding divider>\n          <ListItemButton onClick={() => handleClick('settings')} selected={selected === 'settings' || open === 'settings'} sx={selectList}>\n            <ListItemIcon>\n              <Setting3 size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Settings\" />\n            {open === 'settings' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n          </ListItemButton>\n        </ListItem>\n        <Collapse in={open === 'settings'} timeout=\"auto\" unmountOnExit>\n          <List disablePadding>\n            <ListItemButton\n              sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n              selected={selected === 'list3'}\n              onClick={() => handleSelect('list3')}\n            >\n              <ListItemText primary=\"List item 03\" />\n            </ListItemButton>\n            <ListItemButton\n              sx={{ pl: 5, '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n              selected={selected === 'list4'}\n              onClick={() => handleSelect('list4')}\n            >\n              <ListItemText primary=\"List item 04\" />\n            </ListItemButton>\n          </List>\n        </Collapse>\n        <ListItem disablePadding>\n          <ListItemButton\n            sx={{ '&.Mui-selected': { borderRight: '2px solid', borderColor: 'primary.main' } }}\n            selected={selected === 'ui-elements'}\n            onClick={() => handleSelect('ui-elements')}\n          >\n            <ListItemIcon>\n              <Element size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"UI Elements\" />\n          </ListItemButton>\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":8918},"src/sections/apps/kanban/Backlogs/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport TableRow from '@mui/material/TableRow';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport { DragDropContext, Droppable } from '@hello-pangea/dnd';\n\n// project-imports\nimport AddStory from './AddStory';\nimport UserStory from './UserStory';\nimport ItemDetails from '../Board/ItemDetails';\nimport MainCard from 'components/MainCard';\n\nimport { updateStoryItemOrder, updateStoryOrder, useGetBacklogs } from 'api/kanban';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nconst getDropWrapper = (isDraggingOver, theme) => ({\n  bgcolor: isDraggingOver ? alpha(theme.palette.secondary.lighter, 0.65) : 'transparent'\n});\n\n// ==============================|| KANBAN - BACKLOGS ||============================== //\n\nexport default function Backlogs() {\n  const theme = useTheme();\n  const { backlogs } = useGetBacklogs();\n\n  const onDragEnd = (result) => {\n    let newUserStory;\n    const { source, destination, draggableId, type } = result;\n\n    if (!destination) return;\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'user-story') {\n      const newUserStoryOrder = Array.from(backlogs?.userStoryOrder);\n\n      newUserStoryOrder.splice(source.index, 1); // remove dragged column\n      newUserStoryOrder.splice(destination?.index, 0, draggableId); // set column new position\n      updateStoryOrder(newUserStoryOrder);\n      return;\n    }\n\n    // find dragged item's column\n    const sourceUserStory = backlogs?.userStory.filter((story) => story.id === source.droppableId)[0];\n\n    // find dropped item's column\n    const destinationUserStory = backlogs?.userStory.filter((story) => story.id === destination.droppableId)[0];\n\n    // if - moving items in the same list\n    // else - moving items from one list to another\n    if (sourceUserStory === destinationUserStory) {\n      const newItemIds = Array.from(sourceUserStory.itemIds);\n\n      // remove the id of dragged item from its original position\n      newItemIds.splice(source.index, 1);\n\n      // insert the id of dragged item to the new position\n      newItemIds.splice(destination.index, 0, draggableId);\n\n      // updated column\n      const newSourceUserStory = {\n        ...sourceUserStory,\n        itemIds: newItemIds\n      };\n\n      newUserStory = backlogs?.userStory.map((story) => {\n        if (story.id === newSourceUserStory.id) {\n          return newSourceUserStory;\n        }\n        return story;\n      });\n    } else {\n      const newSourceItemIds = Array.from(sourceUserStory.itemIds);\n\n      // remove the id of dragged item from its original column\n      newSourceItemIds.splice(source.index, 1);\n\n      // updated dragged items's column\n      const newSourceUserStory = {\n        ...sourceUserStory,\n        itemIds: newSourceItemIds\n      };\n\n      const newDestinationItemIds = Array.from(destinationUserStory.itemIds);\n\n      // insert the id of dragged item to the new position in dropped column\n      newDestinationItemIds.splice(destination.index, 0, draggableId);\n\n      // updated dropped item's column\n      const newDestinationSourceUserStory = {\n        ...destinationUserStory,\n        itemIds: newDestinationItemIds\n      };\n\n      newUserStory = backlogs?.userStory.map((story) => {\n        if (story.id === newSourceUserStory.id) {\n          return newSourceUserStory;\n        }\n        if (story.id === newDestinationSourceUserStory.id) {\n          return newDestinationSourceUserStory;\n        }\n        return story;\n      });\n    }\n\n    updateStoryItemOrder(newUserStory);\n  };\n\n  // drawer\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const handleDrawerOpen = () => {\n    setOpenDrawer((prevState) => !prevState);\n  };\n\n  const addStory = () => {\n    setOpenDrawer((prevState) => !prevState);\n  };\n\n  return (\n    <MainCard content={false}>\n      <TableContainer sx={{ '& .MuiTableCell-root': { p: 1.25 } }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"user-story\" type=\"user-story\">\n            {(provided, snapshot) => (\n              <Table\n                size=\"small\"\n                aria-label=\"collapsible table\"\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                sx={getDropWrapper(snapshot.isDraggingOver, theme)}\n              >\n                <TableHead\n                  sx={{\n                    bgcolor: theme.palette.background.paper,\n                    borderTop: 'none',\n                    borderBottomWidth: '1px',\n                    '& th,& td': { whiteSpace: 'nowrap' }\n                  }}\n                >\n                  <TableRow>\n                    <TableCell sx={{ pl: 3 }}>\n                      <Tooltip title=\"Add User Story\">\n                        <Button variant=\"dashed\" size=\"extraSmall\" color=\"secondary\" onClick={addStory} endIcon={<Add size={14} />}>\n                          ADD\n                        </Button>\n                      </Tooltip>\n                    </TableCell>\n                    <TableCell>Id</TableCell>\n                    <TableCell>Title</TableCell>\n                    <TableCell />\n                    <TableCell>State</TableCell>\n                    <TableCell>Assigned To</TableCell>\n                    <TableCell>Priority</TableCell>\n                    <TableCell>Due Date</TableCell>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody\n                  sx={{\n                    '& th,& td': { whiteSpace: 'nowrap' },\n                    '& .MuiTableRow-root:last-of-type .MuiTable-root .MuiTableCell-root': {\n                      borderBottom: `1px solid ${theme.palette.divider}`\n                    },\n                    '& .MuiTableRow-root:hover': { bgcolor: 'transparent' }\n                  }}\n                >\n                  {backlogs?.userStoryOrder.map((storyId, index) => {\n                    const story = backlogs?.userStory.filter((item) => item.id === storyId)[0];\n                    return <UserStory key={story.id} story={story} index={index} />;\n                  })}\n                  {provided.placeholder}\n                </TableBody>\n              </Table>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <AddStory open={openDrawer} handleDrawerOpen={handleDrawerOpen} />\n        <ItemDetails />\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":6791},"src/sections/components-overview/date-time-picker/HelperText.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - HELPER TEXT ||============================== //\n\nexport default function HelperText() {\n  const [value, setValue] = useState(null);\n\n  const helperDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <DatePicker  \n    value={value}\n    onChange={(newValue) => {\n      setValue(newValue);\n    }}\n    renderInput={(params) => <TextField {...params} helperText={params?.inputProps?.placeholder} placeholder=\"Helper Text\" />}\n  />\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Helper Text\" codeString={helperDatepickerCodeString}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <DatePicker\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          slotProps={{ textField: { placeholder: 'Helper Text', helperText: 'Helper Text' } }}\n        />\n      </LocalizationProvider>\n    </MainCard>\n  );\n}\n","size_bytes":1283},"src/layout/Component/Drawer/Navigation/NavItem.jsx":{"content":"import PropTypes from 'prop-types';\nimport { matchPath, useLocation, Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Avatar from '@mui/material/Avatar';\nimport Chip from '@mui/material/Chip';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { ThemeMode } from 'config';\nimport { handlerComponentDrawer } from 'api/menu';\n\n// ==============================|| NAVIGATION - ITEM ||============================== //\n\nexport default function NavItem({ item }) {\n  const theme = useTheme();\n  const { pathname } = useLocation();\n  const matchesMD = useMediaQuery(theme.breakpoints.down('md'));\n\n  let itemTarget = '_self';\n  if (item.target) {\n    itemTarget = '_blank';\n  }\n\n  const itemHandler = () => {\n    matchesMD && handlerComponentDrawer(false);\n  };\n\n  const textColor = theme.palette.mode === ThemeMode.DARK ? 'secondary.400' : 'secondary.main';\n  const iconSelectedColor = theme.palette.mode === ThemeMode.DARK ? 'text.primary' : 'primary.main';\n\n  const isSelectedItem = !!matchPath({ path: item.url, end: false }, pathname);\n\n  return (\n    <ListItemButton\n      component={Link}\n      to={item.url}\n      target={itemTarget}\n      disabled={item.disabled}\n      onClick={() => itemHandler()}\n      selected={isSelectedItem}\n      sx={{ pl: 2.5, py: 1, mb: 0.5 }}\n    >\n      <ListItemText\n        primary={\n          <Typography variant=\"h6\" sx={{ color: isSelectedItem ? iconSelectedColor : textColor, fontWeight: 500 }}>\n            {item.title}\n          </Typography>\n        }\n      />\n      {item.chip && (\n        <Chip\n          color={item.chip.color}\n          variant={item.chip.variant}\n          size={item.chip.size}\n          label={item.chip.label}\n          avatar={item.chip.avatar && <Avatar>{item.chip.avatar}</Avatar>}\n        />\n      )}\n    </ListItemButton>\n  );\n}\n\nNavItem.propTypes = { item: PropTypes.any };\n","size_bytes":2099},"src/sections/apps/kanban/Board/Columns.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme, alpha } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Tooltip from '@mui/material/Tooltip';\n\n// third-party\nimport { Droppable, Draggable } from '@hello-pangea/dnd';\n\n// project-imports\nimport EditColumn from './EditColumn';\nimport Items from './Items';\nimport AddItem from './AddItem';\nimport AlertColumnDelete from './AlertColumnDelete';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode } from 'config';\nimport { deleteColumn, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// column drag wrapper\nfunction getDragWrapper(isDragging, draggableStyle, theme, radius) {\n  return {\n    minWidth: 250,\n    border: '1px solid',\n    borderColor: theme.palette.divider,\n    borderRadius: radius,\n    userSelect: 'none',\n    margin: `0 ${16}px 0 0`,\n    height: '100%',\n    ...draggableStyle\n  };\n}\n\n// column drop wrapper\nfunction getDropWrapper(isDraggingOver, theme, radius) {\n  const bgcolor = theme.palette.mode === ThemeMode.DARK ? theme.palette.background.default : theme.palette.secondary[200];\n  const bgcolorDrop = theme.palette.mode === ThemeMode.DARK ? theme.palette.text.disabled : alpha(theme.palette.secondary.light, 0.65);\n\n  return {\n    background: isDraggingOver ? bgcolorDrop : bgcolor,\n    padding: '8px 16px 14px',\n    width: 'auto',\n    borderRadius: radius\n  };\n}\n\n// ==============================|| KANBAN BOARD - COLUMN ||============================== //\n\nexport default function Columns({ column, index }) {\n  const theme = useTheme();\n\n  const { backlogs } = useGetBacklogs();\n  const columnItems = column.itemIds.map((itemId) => backlogs?.items.filter((item) => item.id === itemId)[0]);\n\n  const handleColumnDelete = () => {\n    setOpen(true);\n  };\n\n  const [open, setOpen] = useState(false);\n  const handleClose = (status) => {\n    setOpen(false);\n    if (status) {\n      deleteColumn(column.id);\n      openSnackbar({\n        open: true,\n        message: 'Column deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  };\n\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          style={getDragWrapper(snapshot.isDragging, provided.draggableProps.style, theme, `12px`)}\n        >\n          <Droppable droppableId={column.id} type=\"item\">\n            {(providedDrop, snapshotDrop) => (\n              <div\n                ref={providedDrop.innerRef}\n                {...providedDrop.droppableProps}\n                style={getDropWrapper(snapshotDrop.isDraggingOver, theme, `12px`)}\n              >\n                <Grid container alignItems=\"center\" spacing={3}>\n                  <Grid item xs zeroMinWidth>\n                    <EditColumn column={column} />\n                  </Grid>\n                  <Grid item sx={{ mb: 1.5 }}>\n                    <Tooltip title=\"Delete Column\">\n                      <IconButton\n                        onClick={handleColumnDelete}\n                        aria-controls=\"menu-simple-card\"\n                        aria-haspopup=\"true\"\n                        color=\"error\"\n                        size=\"small\"\n                      >\n                        <Trash variant=\"Bold\" />\n                      </IconButton>\n                    </Tooltip>\n                    <AlertColumnDelete title={column.title} open={open} handleClose={handleClose} />\n                  </Grid>\n                </Grid>\n                {columnItems.map((item, i) => (\n                  <Items key={i} item={item} index={i} />\n                ))}\n                {providedDrop.placeholder}\n                <AddItem columnId={column.id} />\n              </div>\n            )}\n          </Droppable>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nColumns.propTypes = { column: PropTypes.any, index: PropTypes.number };\n","size_bytes":4196},"src/sections/components-overview/lists/UserList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AntAvatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport avatar4 from 'assets/images/users/avatar-4.png';\nimport avatar5 from 'assets/images/users/avatar-5.png';\n\n// ==============================|| LIST - USER ||============================== //\n\nexport default function UserList() {\n  const userListCodeString = `<List sx={{ p: 0 }}>\n  <ListItem\n    divider\n    secondaryAction={\n      <IconButton edge=\"end\" aria-label=\"delete\">\n        <More />\n      </IconButton>\n    }\n  >\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={'/assets/images/users/avatar-4.png'} />\n    </ListItemAvatar>\n    <ListItemText primary=\"Jone Doe\" secondary=\"Developer\" />\n  </ListItem>\n  <ListItem\n    secondaryAction={\n      <IconButton edge=\"end\" aria-label=\"delete\">\n        <More />\n      </IconButton>\n    }\n  >\n    <ListItemAvatar>\n      <AntAvatar alt=\"Avatar\" src={'/assets/images/users/avatar-5.png'} />\n    </ListItemAvatar>\n    <ListItemText primary=\"Aidal Danny\" secondary=\"Project Leader\" />\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={userListCodeString}>\n      <List sx={{ p: 0 }}>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton edge=\"end\" sx={{ transform: 'rotate(90deg)' }} aria-label=\"delete\" color=\"secondary\">\n              <MoreIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar4} />\n          </ListItemAvatar>\n          <ListItemText primary=\"Jone Doe\" secondary=\"Developer\" />\n        </ListItem>\n        <ListItem\n          secondaryAction={\n            <IconButton edge=\"end\" sx={{ transform: 'rotate(90deg)' }} aria-label=\"delete\" color=\"secondary\">\n              <MoreIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <AntAvatar alt=\"Avatar\" src={avatar5} />\n          </ListItemAvatar>\n          <ListItemText primary=\"Aidal Danny\" secondary=\"Project Leader\" />\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":2440},"src/pages/maintenance/error/404.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport error404 from 'assets/images/maintenance/img-error-404.svg';\n\n// ==============================|| ERROR 404 ||============================== //\n\nexport default function Error404() {\n  return (\n    <Grid\n      container\n      spacing={10}\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      sx={{ minHeight: '100vh', pt: 2, pb: 1, overflow: 'hidden' }}\n    >\n      <Grid item xs={12}>\n        <Stack direction=\"row\">\n          <Grid item>\n            <Box sx={{ width: { xs: 250, sm: 590 }, height: { xs: 130, sm: 300 } }}>\n              <img src={error404} alt=\"error 404\" style={{ width: '100%', height: '100%' }} />\n            </Box>\n          </Grid>\n        </Stack>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack spacing={2} justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"h1\">Page Not Found</Typography>\n          <Typography color=\"text.secondary\" align=\"center\" sx={{ width: { xs: '73%', sm: '61%' } }}>\n            The page you are looking was moved, removed, renamed, or might never exist!\n          </Typography>\n          <Button component={Link} to={APP_DEFAULT_PATH} variant=\"contained\">\n            Back To Home\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1618},"src/sections/tables/react-table/EditableRow.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Tooltip from '@mui/material/Tooltip';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\n\n// project-import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport { CSVExport, RowEditable } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// assets\nimport { CloseCircle, Edit2, Send } from 'iconsax-react';\n\nfunction EditAction({ row, table }) {\n  const meta = table?.options?.meta;\n  const setSelectedRow = (e) => {\n    meta?.setSelectedRow((old) => ({\n      ...old,\n      [row.id]: !old[row.id]\n    }));\n\n    // @ts-ignore\n    meta?.revertData(row.index, e?.currentTarget.name === 'cancel');\n  };\n\n  return (\n    <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n      {meta?.selectedRow[row.id] && (\n        <Tooltip title=\"Cancel\">\n          <IconButton color=\"error\" name=\"cancel\" onClick={setSelectedRow}>\n            <CloseCircle size=\"15\" variant=\"Outline\" />\n          </IconButton>\n        </Tooltip>\n      )}\n      <Tooltip title={meta?.selectedRow[row.id] ? 'Save' : 'Edit'}>\n        <IconButton color={meta?.selectedRow[row.id] ? 'success' : 'primary'} onClick={setSelectedRow}>\n          {meta?.selectedRow[row.id] ? <Send size=\"15\" variant=\"Outline\" /> : <Edit2 variant=\"Outline\" />}\n        </IconButton>\n      </Tooltip>\n    </Stack>\n  );\n}\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data, setData }) {\n  const [originalData, setOriginalData] = useState(() => [...data]);\n  const [selectedRow, setSelectedRow] = useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    defaultColumn: {\n      cell: RowEditable\n    },\n    getCoreRowModel: getCoreRowModel(),\n    meta: {\n      selectedRow,\n      setSelectedRow,\n      revertData: (rowIndex, revert) => {\n        if (revert) {\n          setData((old) => old.map((row, index) => (index === rowIndex ? originalData[rowIndex] : row)));\n        } else {\n          setOriginalData((old) => old.map((row, index) => (index === rowIndex ? data[rowIndex] : row)));\n        }\n      },\n      updateData: (rowIndex, columnId, value) => {\n        setData((old) =>\n          old.map((row, index) => {\n            if (index === rowIndex) {\n              return {\n                ...old[rowIndex],\n                [columnId]: value\n              };\n            }\n            return row;\n          })\n        );\n      }\n    },\n    debugTable: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map(\n    (columns) =>\n      // @ts-ignore\n      columns.columnDef.accessorKey &&\n      headers.push({\n        label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n        // @ts-ignore\n        key: columns.columnDef.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      content={false}\n      title=\"Editable Row\"\n      secondary={\n        <CSVExport {...{ data: table.getRowModel().flatRows.map((row) => row.original), headers, filename: 'editable-row.csv' }} />\n      }\n    >\n      <ScrollX>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - EDITABLE ROW ||============================== //\n\nexport default function EditableRow() {\n  const [data, setData] = useState(() => makeData(10));\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName',\n        dataType: 'text'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName',\n        dataType: 'text'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email',\n        dataType: 'text'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        dataType: 'text',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        dataType: 'text',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        dataType: 'select'\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        dataType: 'progress'\n      },\n      {\n        header: 'Actions',\n        id: 'edit',\n        cell: EditAction,\n        meta: {\n          className: 'cell-center'\n        }\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ data, columns, setData }} />;\n}\n\nEditAction.propTypes = { row: PropTypes.object, table: PropTypes.object };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array, setData: PropTypes.any };\n","size_bytes":6179},"src/utils/getShadow.js":{"content":"// ==============================|| CUSTOM FUNCTION - COLOR SHADOWS ||============================== //\n\nexport default function getShadow(theme, shadow) {\n  switch (shadow) {\n    case 'secondary':\n      return theme.customShadows.secondary;\n    case 'error':\n      return theme.customShadows.error;\n    case 'warning':\n      return theme.customShadows.warning;\n    case 'info':\n      return theme.customShadows.info;\n    case 'success':\n      return theme.customShadows.success;\n    case 'primaryButton':\n      return theme.customShadows.primaryButton;\n    case 'secondaryButton':\n      return theme.customShadows.secondaryButton;\n    case 'errorButton':\n      return theme.customShadows.errorButton;\n    case 'warningButton':\n      return theme.customShadows.warningButton;\n    case 'infoButton':\n      return theme.customShadows.infoButton;\n    case 'successButton':\n      return theme.customShadows.successButton;\n    default:\n      return theme.customShadows.primary;\n  }\n}\n","size_bytes":979},"src/sections/apps/kanban/Backlogs/AddStoryComment.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\nimport { addStoryComment } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// third-party\nimport { Chance } from 'chance';\n\n// assets\nimport { Android, Camera, DocumentUpload } from 'iconsax-react';\n\nconst chance = new Chance();\n\n// ==============================|| KANBAN BACKLOGS - ADD STORY COMMENT ||============================== //\n\nexport default function AddStoryComment({ storyId }) {\n  const theme = useTheme();\n\n  const [comment, setComment] = useState('');\n  const [isComment, setIsComment] = useState(false);\n\n  const handleAddStoryComment = (event) => {\n    if (event.key === 'Enter' || event.keyCode === 13) {\n      addNewStoryComment();\n    }\n  };\n\n  const addNewStoryComment = () => {\n    if (comment.length > 0) {\n      const newComment = {\n        id: `${chance.integer({ min: 1000, max: 9999 })}`,\n        comment,\n        profileId: 'profile-3'\n      };\n\n      addStoryComment(storyId, newComment);\n      openSnackbar({\n        open: true,\n        message: 'Comment Added successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n      setComment('');\n    } else {\n      setIsComment(true);\n    }\n  };\n\n  const handleStoryComment = (event) => {\n    const newComment = event.target.value;\n    setComment(newComment);\n    if (newComment.length <= 0) {\n      setIsComment(true);\n    } else {\n      setIsComment(false);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 2, pb: 1.5, border: '1px solid', borderColor: theme.palette.divider }}>\n      <Grid container alignItems=\"center\" spacing={0.5}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            placeholder=\"Add Comment\"\n            value={comment}\n            onChange={handleStoryComment}\n            sx={{\n              mb: 3,\n              '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\n              '& fieldset': { display: 'none' },\n              '& .MuiFormHelperText-root': {\n                ml: 0\n              },\n              '& .MuiOutlinedInput-root': {\n                bgcolor: 'transparent',\n                '&.Mui-focused': {\n                  boxShadow: 'none'\n                }\n              }\n            }}\n            onKeyUp={handleAddStoryComment}\n            helperText={isComment ? 'Comment is required.' : ''}\n            error={isComment}\n          />\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <Camera />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <DocumentUpload />\n          </IconButton>\n        </Grid>\n        <Grid item>\n          <IconButton>\n            <Android />\n          </IconButton>\n        </Grid>\n        <Grid item xs zeroMinWidth />\n        <Grid item>\n          <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={addNewStoryComment}>\n            Comment\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nAddStoryComment.propTypes = { storyId: PropTypes.string };\n","size_bytes":3451},"src/api/address.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// utils\nimport { fetcher } from 'utils/axios';\n\nexport const endpoints = {\n  key: 'api/address',\n  list: '/list', // server URL\n  insert: '/new', // server URL\n  update: '/edit', // server URL\n  delete: '/delete' // server URL\n};\n\nexport function useGetAddress() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      address: data?.address,\n      addressLoading: isLoading,\n      addressError: error,\n      addressValidating: isValidating,\n      addressEmpty: !isLoading && !data?.address?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function insertAddress(newAddress) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentAddress) => {\n      newAddress.id = currentAddress.address.length + 1;\n      const addedAddress = [...currentAddress.address, newAddress];\n\n      return {\n        ...currentAddress,\n        address: addedAddress\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newAddress };\n  //   await axios.post(endpoints.key + endpoints.insert, data);\n}\n\nexport async function updateAddress(addressId, updatedAddress) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentAddress) => {\n      const newAddress = currentAddress.address.map((address) => (address.id === addressId ? { ...address, ...updatedAddress } : address));\n\n      return {\n        ...currentAddress,\n        address: newAddress\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { list: updatedAddress };\n  //   await axios.post(endpoints.key + endpoints.update, data);\n}\n\nexport async function deleteAddress(addressId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentAddress) => {\n      const nonDeletedAddress = currentAddress.address.filter((address) => address.id !== addressId);\n\n      return {\n        ...currentAddress,\n        address: nonDeletedAddress\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { addressId };\n  //   await axios.post(endpoints.key + endpoints.delete, data);\n}\n","size_bytes":2663},"src/sections/forms/edit-forms/works/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { FieldArray, FormikProvider, useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { Box } from '@mui/system';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  title: yup.string().required('Title of page is required'),\n  titleParagraph: yup.string().required('Title paragraph is required'),\n  visitWebsiteLink: yup.string().required('Visit website link is required'),\n  callToActionTitle: yup.string().required('Call to action title is required'),\n  callToActionParagraph: yup.string().required('Call to action paragraph is required'),\n  reviewText: yup.string().required('Review text is required'),\n  reviewAuthor: yup.string().required('Review author name is required'),\n  reviewAuthorPosition: yup.string().required('Review author position is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  workTags: yup\n    .array()\n    .of(\n      yup.string().required('Project text is required') // Validate each item in the array\n    )\n    .min(1, 'At least one project text is required') // Ensure at least one project exists\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      title: data.title ?? '',\n      titleParagraph: data.titleParagraph ?? '',\n      visitWebsiteLink: data.visitWebsiteLink ?? '',\n      callToActionTitle: data.callToActionTitle ?? '',\n      callToActionParagraph: data.callToActionParagraph ?? '',\n      reviewText: data.review && data.review.text ? data.review.text : '',\n      reviewAuthor: data.review && data.review.author ? data.review.author : '',\n      reviewAuthorPosition: data.review && data.review.position ? data.review.position : '',\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      workTags: data.workTags || ['']\n    },\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        id: values.id,\n        baseUrl: 'works',\n        title: values.title,\n        titleParagraph: values.titleParagraph,\n        visitWebsiteLink: values.visitWebsiteLink,\n        callToActionTitle: values.callToActionTitle,\n        callToActionParagraph: values.callToActionParagraph,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        review: {\n          ...data.review,\n          text: values.reviewText,\n          author: values.reviewAuthor,\n          position: values.reviewAuthorPosition\n        },\n        workTags: values.workTags\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                multiline\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title of page</InputLabel>\n              <TextField\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title of page *\"\n                multiline\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                error={formik.touched.title && Boolean(formik.errors.title)}\n                helperText={formik.touched.title && formik.errors.title}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title paragraph</InputLabel>\n              <TextField\n                id=\"titleParagraph\"\n                name=\"titleParagraph\"\n                multiline\n                placeholder=\"Title paragraph *\"\n                value={formik.values.titleParagraph}\n                onChange={formik.handleChange}\n                error={formik.touched.titleParagraph && Boolean(formik.errors.titleParagraph)}\n                helperText={formik.touched.titleParagraph && formik.errors.titleParagraph}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Visit website link</InputLabel>\n              <TextField\n                id=\"visitWebsiteLink\"\n                name=\"visitWebsiteLink\"\n                multiline\n                placeholder=\"Visit website link *\"\n                value={formik.values.visitWebsiteLink}\n                onChange={formik.handleChange}\n                error={formik.touched.visitWebsiteLink && Boolean(formik.errors.visitWebsiteLink)}\n                helperText={formik.touched.visitWebsiteLink && formik.errors.visitWebsiteLink}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Call to action title</InputLabel>\n              <TextField\n                id=\"callToActionTitle\"\n                name=\"callToActionTitle\"\n                multiline\n                placeholder=\"Call to action title *\"\n                value={formik.values.callToActionTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.callToActionTitle && Boolean(formik.errors.callToActionTitle)}\n                helperText={formik.touched.callToActionTitle && formik.errors.callToActionTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Call to action paragraph</InputLabel>\n              <TextField\n                id=\"callToActionParagraph\"\n                name=\"callToActionParagraph\"\n                multiline\n                placeholder=\"Call to action paragraph *\"\n                value={formik.values.callToActionParagraph}\n                onChange={formik.handleChange}\n                error={formik.touched.callToActionParagraph && Boolean(formik.errors.callToActionParagraph)}\n                helperText={formik.touched.callToActionParagraph && formik.errors.callToActionParagraph}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review text</InputLabel>\n              <TextField\n                id=\"reviewText\"\n                name=\"reviewText\"\n                placeholder=\"Review text *\"\n                multiline\n                value={formik.values.reviewText}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewText && Boolean(formik.errors.reviewText)}\n                helperText={formik.touched.reviewText && formik.errors.reviewText}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review author name</InputLabel>\n              <TextField\n                id=\"reviewAuthor\"\n                name=\"reviewAuthor\"\n                placeholder=\"Review author name*\"\n                multiline\n                value={formik.values.reviewAuthor}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewAuthor && Boolean(formik.errors.reviewAuthor)}\n                helperText={formik.touched.reviewAuthor && formik.errors.reviewAuthor}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Review author position</InputLabel>\n              <TextField\n                id=\"reviewAuthorPosition\"\n                name=\"reviewAuthorPosition\"\n                placeholder=\"Review author position *\"\n                multiline\n                value={formik.values.reviewAuthorPosition}\n                onChange={formik.handleChange}\n                error={formik.touched.reviewAuthorPosition && Boolean(formik.errors.reviewAuthorPosition)}\n                helperText={formik.touched.reviewAuthorPosition && formik.errors.reviewAuthorPosition}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sx={{ mb: 1 }}>\n            <InputLabel>Work tags</InputLabel>\n          </Grid>\n          <FormikProvider value={formik}>\n            <Box sx={{ ml: 3, mt: 0, width: '100%' }} fullWidth>\n              <FieldArray\n                name=\"workTags\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.workTags.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" sx={{ mb: 2 }}>\n                        <Grid item xs={9.6} md={6}>\n                          <TextField\n                            id={`workTags[${index}]`}\n                            name={`workTags[${index}]`}\n                            placeholder=\"Text\"\n                            value={formik.values.workTags[index]}\n                            onChange={formik.handleChange}\n                            error={formik.touched.workTags?.[index] && Boolean(formik.errors.workTags?.[index])}\n                            helperText={formik.touched.workTags?.[index] && formik.errors.workTags?.[index]}\n                            fullWidth\n                            sx={{ mb: 1 }}\n                          />\n                        </Grid>\n\n                        <Grid\n                          item\n                          xs={2.4}\n                          sx={{ mb: () => (formik.errors.workTags?.[index] ? 4 : 1) }}\n                          md={2.4}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.workTags.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              ml: 1,\n                              alignSelf: 'center',\n                              backgroundColor: (theme) =>\n                                formik.values.workTags.length === 1 ? theme.palette.action.disabled : 'transparent',\n                              color: (theme) => (formik.values.workTags.length === 1 ? theme.palette.disabled : theme.palette.error.main),\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.workTags.length === 1 ? theme.palette.action.disabled : theme.palette.error.main,\n                                color: (theme) => (formik.values.workTags.length === 1 ? theme.palette.disabled : 'white')\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    <Button type=\"button\" onClick={() => arrayHelpers.push('')} variant=\"outlined\" sx={{ mt: 2 }}>\n                      Add tag\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n          </FormikProvider>\n\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":14946},"src/hooks/useScriptRef.js":{"content":"import { useEffect, useRef } from 'react';\n\n// ==============================|| HOOKS - FORMS REFERENCE  ||============================== //\n\nexport default function useScriptRef() {\n  const scripted = useRef(true);\n\n  useEffect(\n    () => () => {\n      scripted.current = false;\n    },\n    []\n  );\n\n  return scripted;\n}\n","size_bytes":321},"src/sections/maps/HighlightByFilter.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useCallback, useMemo, memo } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { Map, Layer, Source } from 'react-map-gl';\n\n// project-import\nimport MapControl from 'components/third-party/map/MapControl';\nimport MapPopup from 'components/third-party/map/MapPopup';\n\n// ==============================|| HIGHLIGHT BY FILTER ||============================== //\n\nfunction HighlightByFilter({ ...other }) {\n  const theme = useTheme();\n\n  // @ts-ignore\n  const countiesLayer = {\n    id: 'counties',\n    type: 'fill',\n    'source-layer': 'original',\n    paint: {\n      'fill-outline-color': theme.palette.grey[900],\n      'fill-color': theme.palette.grey[900],\n      'fill-opacity': 0.12\n    }\n  };\n\n  const highlightLayer = {\n    id: 'counties-highlighted',\n    type: 'fill',\n    source: 'counties',\n    'source-layer': 'original',\n    paint: {\n      'fill-outline-color': theme.palette.error.main,\n      'fill-color': theme.palette.error.main,\n      'fill-opacity': 0.48\n    }\n  };\n\n  const [hoverInfo, setHoverInfo] = useState(null);\n\n  const onHover = useCallback((event) => {\n    const county = event.features && event.features[0];\n\n    setHoverInfo({\n      longitude: event.lngLat.lng,\n      latitude: event.lngLat.lat,\n      countyName: county && county.properties?.COUNTY\n    });\n  }, []);\n\n  const selectedCounty = (hoverInfo && hoverInfo.countyName) || '';\n\n  const filter = useMemo(() => ['in', 'COUNTY', selectedCounty], [selectedCounty]);\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 38.88,\n        longitude: -98,\n        zoom: 3\n      }}\n      minZoom={2}\n      onMouseMove={onHover}\n      interactiveLayerIds={['counties']}\n      {...other}\n    >\n      <MapControl />\n      <Source type=\"vector\" url=\"mapbox://mapbox.82pkq93d\">\n        <Layer beforeId=\"waterway-label\" {...countiesLayer} />\n        {/* @ts-ignore */}\n        <Layer beforeId=\"waterway-label\" {...highlightLayer} filter={filter} />\n      </Source>\n\n      {selectedCounty && hoverInfo && (\n        <MapPopup longitude={hoverInfo.longitude} latitude={hoverInfo.latitude} closeButton={false}>\n          <Typography variant=\"body2\" color=\"secondary.lighter\">\n            {selectedCounty}\n          </Typography>\n        </MapPopup>\n      )}\n    </Map>\n  );\n}\n\nexport default memo(HighlightByFilter);\n\nHighlightByFilter.propTypes = { other: PropTypes.any };\n","size_bytes":2507},"src/pages/forms/plugins/re-captcha.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// third-party\nimport ReCAPTCHA from 'react-google-recaptcha';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| PLUGIN - RECAPTCHA ||============================== //\n\nexport default function RecaptchaPage() {\n  const handleOnChange = () => {};\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={12} lg={6}>\n        <MainCard title=\"ReCaptcha Example\">\n          <ReCAPTCHA sitekey=\"6LdzqbcaAAAAALrGEZWQHIHUhzJZc8O-KSTdTTh_\" onChange={handleOnChange} />\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":636},"src/sections/apps/chat/UserList.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment, useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport List from '@mui/material/List';\nimport Skeleton from '@mui/material/Skeleton';\nimport Typography from '@mui/material/Typography';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport { Chance } from 'chance';\n\n// project-imports\nimport UserAvatar from './UserAvatar';\nimport Dot from 'components/@extended/Dot';\nimport { useGetUsers } from 'api/chat';\n\n// assets\nimport { TickCircle } from 'iconsax-react';\n\nconst chance = new Chance();\n\n// ==============================|| CHAT - USER LIST ||============================== //\n\nexport default function UserList({ setUser, search, selectedUser }) {\n  const theme = useTheme();\n\n  const [data, setData] = useState([]);\n\n  const { usersLoading, users } = useGetUsers();\n\n  useEffect(() => {\n    if (!usersLoading) {\n      let result = users;\n      if (search) {\n        result = users.filter((row) => {\n          let matches = true;\n\n          const properties = ['name'];\n          let containsQuery = false;\n\n          properties.forEach((property) => {\n            if (row[property].toString().toLowerCase().includes(search.toString().toLowerCase())) {\n              containsQuery = true;\n            }\n          });\n\n          if (!containsQuery) {\n            matches = false;\n          }\n          return matches;\n        });\n      }\n      setData(result);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [usersLoading, search]);\n\n  if (usersLoading)\n    return (\n      <List>\n        {[1, 2, 3, 4, 5].map((index) => (\n          <ListItem key={index} divider>\n            <ListItemAvatar>\n              <Skeleton variant=\"circular\" width={40} height={40} />\n            </ListItemAvatar>\n            <ListItemText\n              primary={<Skeleton animation=\"wave\" height={24} />}\n              secondary={<Skeleton animation=\"wave\" height={16} width=\"60%\" />}\n            />\n          </ListItem>\n        ))}\n      </List>\n    );\n\n  return (\n    <List component=\"nav\">\n      {data.map((user) => (\n        <Fragment key={user.id}>\n          <ListItemButton\n            sx={{ pl: 1, borderRadius: 0, '&:hover': { borderRadius: 1 } }}\n            onClick={() => {\n              setUser(user);\n            }}\n            selected={user.id === selectedUser}\n          >\n            <ListItemAvatar>\n              <UserAvatar user={user} />\n            </ListItemAvatar>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n                  <Typography\n                    variant=\"subtitle1\"\n                    color=\"text.primary\"\n                    sx={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                  >\n                    {user.name}\n                  </Typography>\n                  <Typography color=\"text.secondary\" variant=\"caption\">\n                    {user.lastMessage}\n                  </Typography>\n                </Stack>\n              }\n              secondary={\n                <Typography\n                  color=\"text.secondary\"\n                  sx={{\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    whiteSpace: 'nowrap',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  }}\n                >\n                  <>{user.status}</>\n                  <>\n                    {user.unReadChatCount ? (\n                      <Dot />\n                    ) : (\n                      // chance.bool() - use for last send msg was read or unread\n                      <TickCircle size={16} style={{ color: chance.bool() ? theme.palette.secondary[400] : theme.palette.primary.main }} />\n                    )}\n                  </>\n                </Typography>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n        </Fragment>\n      ))}\n    </List>\n  );\n}\n\nUserList.propTypes = {\n  setUser: PropTypes.func,\n  search: PropTypes.string,\n  selectedUser: PropTypes.oneOfType([PropTypes.any, PropTypes.string])\n};\n","size_bytes":4565},"src/sections/maps/draggable-marker/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport Typography from '@mui/material/Typography';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\nconst EVENT_LIST = ['onDragStart', 'onDrag', 'onDragEnd'];\n\nfunction round5(value) {\n  return (Math.round(value * 1e5) / 1e5).toFixed(5);\n}\n\n// ==============================|| CONTROL - DRAGGABLE MARKER ||============================== //\n\nfunction ControlPanel({ events = {} }) {\n  return (\n    <ControlPanelStyled>\n      {EVENT_LIST.map((event) => {\n        const lngLat = events[event];\n\n        return (\n          <div key={event}>\n            <Typography variant=\"subtitle2\">{event}:</Typography>\n\n            {lngLat ? (\n              <Typography variant=\"subtitle2\">{`${round5(lngLat.lng)}, ${round5(lngLat.lat)}`}</Typography>\n            ) : (\n              <Typography variant=\"body2\" component=\"em\">\n                -\n              </Typography>\n            )}\n          </div>\n        );\n      })}\n    </ControlPanelStyled>\n  );\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = { events: PropTypes.object };\n","size_bytes":1169},"src/components/@extended/progress/LinearWithIcon.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// ==============================|| PROGRESS - LINEAR ICON ||============================== //\n\nexport default function LinearWithIcon({ icon, value, ...others }) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <LinearProgress variant=\"determinate\" value={value} {...others} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>{icon}</Box>\n    </Box>\n  );\n}\n\nLinearWithIcon.propTypes = { icon: PropTypes.any, value: PropTypes.any, others: PropTypes.any };\n","size_bytes":674},"src/sections/apps/profiles/user/ProfileCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ProfileRadialChart from './ProfileRadialChart';\nimport { ThemeMode } from 'config';\n\n// assets\nimport BackLeft from 'assets/images/profile/UserProfileBackLeft';\nimport BackRight from 'assets/images/profile/UserProfileBackRight';\n\n// ==============================|| USER PROFILE - TOP CARD ||============================== //\n\nexport default function ProfileCard({ focusInput }) {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <MainCard\n      border={false}\n      content={false}\n      sx={{ bgcolor: theme.palette.mode === ThemeMode.DARK ? 'primary.700' : 'primary.lighter', position: 'relative' }}\n    >\n      <Box sx={{ position: 'absolute', bottom: '-7px', left: 0, zIndex: 1 }}>\n        <BackLeft />\n      </Box>\n      <Grid container justifyContent=\"space-between\" alignItems=\"center\" sx={{ position: 'relative', zIndex: 5 }}>\n        <Grid item>\n          <Stack direction=\"row\" spacing={matchDownSM ? 1 : 2} alignItems=\"center\">\n            <Box sx={{ ml: matchDownSM ? 0 : 1 }}>\n              <ProfileRadialChart />\n            </Box>\n            <Stack spacing={0.75}>\n              <Typography variant=\"h5\">Edit Your Profile</Typography>\n              <Typography variant=\"body2\" color=\"secondary\">\n                Complete your profile to unlock all features\n              </Typography>\n            </Stack>\n          </Stack>\n        </Grid>\n        <Grid item sx={{ mx: matchDownSM ? 2 : 3, my: matchDownSM ? 1 : 0, mb: matchDownSM ? 2 : 0 }} xs={matchDownSM ? 12 : 'auto'}>\n          <Button variant=\"contained\" fullWidth={matchDownSM} component={Link} to=\"/apps/profiles/user/personal\" onClick={focusInput}>\n            Edit Your Profile\n          </Button>\n        </Grid>\n      </Grid>\n      <Box sx={{ position: 'absolute', top: 0, right: 0, zIndex: 1 }}>\n        <BackRight />\n      </Box>\n    </MainCard>\n  );\n}\n\nProfileCard.propTypes = { focusInput: PropTypes.func };\n","size_bytes":2436},"src/pages/forms/validation.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport LoginForms from 'sections/forms/validation/LoginForms';\nimport InstantFeedback from 'sections/forms/validation/InstantFeedback';\nimport RadioGroupForms from 'sections/forms/validation/RadioGroupForms';\nimport CheckboxForms from 'sections/forms/validation/CheckboxForms';\nimport SelectForms from 'sections/forms/validation/SelectForms';\nimport AutoCompleteForm from 'sections/forms/validation/AutoCompleteForm';\nimport GoogleMapAutocomplete from 'sections/forms/validation/google-map-autocomplete';\n\n// ==============================|| FORMS VALIDATION - FORMIK ||============================== //\n\nexport default function FormsValidation() {\n  return (\n    <Grid container spacing={2.5}>\n      <Grid item xs={12} md={6}>\n        <LoginForms />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <InstantFeedback />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <RadioGroupForms />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <CheckboxForms />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Stack spacing={2.5}>\n          <SelectForms />\n          <AutoCompleteForm />\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <GoogleMapAutocomplete />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1354},"src/components/@extended/AnimateButton.jsx":{"content":"import PropTypes from 'prop-types';\n\n// third-party\nimport { motion, useCycle } from 'framer-motion';\n\nexport default function AnimateButton({ children, type = 'scale', direction = 'right', offset = 10, scale = { hover: 1.05, tap: 0.954 } }) {\n  let offset1;\n  let offset2;\n  switch (direction) {\n    case 'up':\n    case 'left':\n      offset1 = offset;\n      offset2 = 0;\n      break;\n    case 'right':\n    case 'down':\n    default:\n      offset1 = 0;\n      offset2 = offset;\n      break;\n  }\n\n  const [x, cycleX] = useCycle(offset1, offset2);\n  const [y, cycleY] = useCycle(offset1, offset2);\n\n  switch (type) {\n    case 'rotate':\n      return (\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{\n            repeat: Infinity,\n            repeatType: 'loop',\n            duration: 2,\n            repeatDelay: 0\n          }}\n        >\n          {children}\n        </motion.div>\n      );\n    case 'slide':\n      if (direction === 'up' || direction === 'down') {\n        return (\n          <motion.div animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n            {children}\n          </motion.div>\n        );\n      }\n      return (\n        <motion.div animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n          {children}\n        </motion.div>\n      );\n\n    case 'scale':\n    default:\n      if (typeof scale === 'number') {\n        scale = {\n          hover: scale,\n          tap: scale\n        };\n      }\n      return (\n        <motion.div whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n          {children}\n        </motion.div>\n      );\n  }\n}\n\nAnimateButton.propTypes = {\n  children: PropTypes.node,\n  type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n  offset: PropTypes.number,\n  scale: PropTypes.object\n};\n","size_bytes":1933},"src/App.jsx":{"content":"import { RouterProvider } from 'react-router-dom';\n\n// project import\nimport router from 'routes';\nimport ThemeCustomization from 'themes';\n\nimport Locales from 'components/Locales';\nimport RTLLayout from 'components/RTLLayout';\nimport ScrollTop from 'components/ScrollTop';\nimport Customization from 'components/Customization';\nimport Snackbar from 'components/@extended/Snackbar';\nimport Notistack from 'components/third-party/Notistack';\n\n// auth-provider\nimport { JWTProvider as AuthProvider } from 'contexts/JWTContext';\n// import { FirebaseProvider as AuthProvider } from 'contexts/FirebaseContext';\n// import { AWSCognitoProvider as AuthProvider } from 'contexts/AWSCognitoContext';\n// import { Auth0Provider as AuthProvider } from 'contexts/Auth0Context';\n\n// ==============================|| APP - THEME, ROUTER, LOCAL  ||============================== //\n\nexport default function App() {\n  return (\n    <ThemeCustomization>\n      <RTLLayout>\n        <Locales>\n          <ScrollTop>\n            <AuthProvider>\n              <>\n                <Notistack>\n                  <RouterProvider router={router} />\n                  <Customization />\n                  <Snackbar />\n                </Notistack>\n              </>\n            </AuthProvider>\n          </ScrollTop>\n        </Locales>\n      </RTLLayout>\n    </ThemeCustomization>\n  );\n}\n","size_bytes":1353},"src/components/third-party/react-table/SelectColumnSorting.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\nimport Typography from '@mui/material/Typography';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 200\n    }\n  }\n};\n\n// ==============================|| COLUMN SORTING - SELECT ||============================== //\n\nexport default function SelectColumnSorting({ getState, getAllColumns, setSorting, size = 'medium' }) {\n  return (\n    <FormControl sx={{ width: 200 }}>\n      <Select\n        id=\"column-sorting\"\n        multiple\n        displayEmpty\n        value={getState().sorting.length > 0 ? getState().sorting : []}\n        input={<OutlinedInput id=\"select-column-sorting\" placeholder=\"select column\" />}\n        renderValue={(selected) => {\n          const selectedColumn = getAllColumns().filter((column) => selected.length > 0 && column.id === selected[0].id)[0];\n          if (selectedColumn) {\n            return (\n              <Typography variant=\"subtitle2\">\n                Sort by ({typeof selectedColumn.columnDef.header === 'string' ? selectedColumn.columnDef.header : '#'})\n              </Typography>\n            );\n          }\n          return <Typography variant=\"subtitle2\">Sort By</Typography>;\n        }}\n        MenuProps={MenuProps}\n        size={size}\n      >\n        {getAllColumns().map(\n          (column) =>\n            // @ts-ignore\n            column.columnDef.accessorKey &&\n            column.getCanSort() && (\n              <MenuItem\n                key={column.id}\n                value={column.id}\n                onClick={() =>\n                  setSorting(\n                    getState().sorting.length > 0 && column.id === getState().sorting[0].id ? [] : [{ id: column.id, desc: false }]\n                  )\n                }\n              >\n                <Checkbox checked={getState().sorting.length > 0 && column.id === getState().sorting[0].id} color=\"success\" />\n                <ListItemText primary={column.columnDef.header} />\n              </MenuItem>\n            )\n        )}\n      </Select>\n    </FormControl>\n  );\n}\n\nSelectColumnSorting.propTypes = {\n  getState: PropTypes.func,\n  getAllColumns: PropTypes.func,\n  setSorting: PropTypes.func,\n  size: PropTypes.string\n};\n","size_bytes":2597},"src/sections/apps/calendar/ColorPalette.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport Tooltip from '@mui/material/Tooltip';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { TickSquare } from 'iconsax-react';\n\n// ==============================|| CALENDAR - COLOR PALETTE ||============================== //\n\nexport default function ColorPalette({ color, value, isLight }) {\n  const theme = useTheme();\n\n  return (\n    <Tooltip title={color}>\n      <FormControlLabel\n        value={value}\n        label=\"\"\n        control={\n          <Radio\n            icon={\n              <Avatar variant=\"rounded\" type=\"combined\" size=\"xs\" sx={{ backgroundColor: color, borderColor: 'divider' }}>\n                <Box sx={{ display: 'none' }} />\n              </Avatar>\n            }\n            checkedIcon={\n              <Avatar\n                variant=\"rounded\"\n                type=\"combined\"\n                size=\"xs\"\n                sx={{\n                  backgroundColor: color,\n                  color: isLight ? 'secondary.dark' : 'secondary.lighter',\n                  ...(theme.palette.mode === ThemeMode.DARK && {\n                    color: 'secondary.lighter'\n                  }),\n                  borderColor: 'divider',\n                  '& svg': { width: 20, height: 20 }\n                }}\n              >\n                <TickSquare variant=\"Bold\" />\n              </Avatar>\n            }\n            sx={{ '&:hover': { bgcolor: 'transparent' } }}\n          />\n        }\n      />\n    </Tooltip>\n  );\n}\n\nColorPalette.propTypes = { color: PropTypes.string, value: PropTypes.string, isLight: PropTypes.bool };\n","size_bytes":1852},"src/themes/theme/theme6.js":{"content":"//\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME6 ||============================== //\n\nexport default function Theme6(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#e1f0ef', '#c8e3e2', '#9ad6d6', '#71c6c9', '#4bb5bd', '#2aa1af', '#1a7b8a', '#0e5563', '#06323d', '#021217'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1c2628', '#1d3539', '#22454a', '#23595f', '#26737c', '#288d99', '#47a6ad', '#6dbec0', '#96d0d0', '#c5dfde'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2896},"src/sections/components-overview/lists/AlignList.jsx":{"content":"// material-ui\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AntAvatar from 'components/@extended/Avatar';\n\n//assets\nimport avatar1 from 'assets/images/users/avatar-1.png';\nimport avatar2 from 'assets/images/users/avatar-2.png';\nimport avatar3 from 'assets/images/users/avatar-3.png';\n\n// ==============================|| LIST - ALIGN ||============================== //\n\nexport default function AlignList() {\n  const alignListCodeString = `<List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n  <ListItem alignItems=\"flex-start\">\n    <ListItemAvatar>\n      <AntAvatar alt=\"Remy Sharp\" src={'/src/assets/images/users/avatar-1.png'} />\n    </ListItemAvatar>\n    <ListItemText\n      primary=\"Brunch this weekend?\"\n      secondary={\n        <>\n          <Typography sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n            Ali Connors\n          </Typography>\n          {\" — I'll be in your neighborhood doing errands this…\"}\n        </>\n      }\n    />\n  </ListItem>\n  <Divider variant=\"inset\" component=\"li\" />\n  <ListItem alignItems=\"flex-start\">\n    <ListItemAvatar>\n      <AntAvatar alt=\"Travis Howard\" src={'/src/assets/images/users/avatar-2.png'} />\n    </ListItemAvatar>\n    <ListItemText\n      primary=\"Summer BBQ\"\n      secondary={\n        <>\n          <Typography sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n            to Scott, Alex, Jennifer\n          </Typography>\n          {\" — Wish I could come, but I'm out of town this…\"}\n        </>\n      }\n    />\n  </ListItem>\n  <Divider variant=\"inset\" component=\"li\" />\n  <ListItem alignItems=\"flex-start\">\n    <ListItemAvatar>\n      <AntAvatar alt=\"Cindy Baker\" src={'/src/assets/images/users/avatar-3.png'} />\n    </ListItemAvatar>\n    <ListItemText\n      primary=\"Oui Oui\"\n      secondary={\n        <>\n          <Typography sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n            Sandra Adams\n          </Typography>\n          {' — Do you have Paris recommendations? Have you ever…'}\n        </>\n      }\n    />\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={alignListCodeString}>\n      <List sx={{ width: '100%', bgcolor: 'background.paper' }}>\n        <ListItem alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <AntAvatar alt=\"Remy Sharp\" src={avatar1} />\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Brunch this weekend?\"\n            secondary={\n              <>\n                {/* component='span' is required for fixed console log error */}\n                <Typography component=\"span\" sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n                  Ali Connors\n                </Typography>\n                {\" — I'll be in your neighborhood doing errands this…\"}\n              </>\n            }\n          />\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n        <ListItem alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <AntAvatar alt=\"Travis Howard\" src={avatar2} />\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Summer BBQ\"\n            secondary={\n              <>\n                <Typography component=\"span\" sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n                  to Scott, Alex, Jennifer\n                </Typography>\n                {\" — Wish I could come, but I'm out of town this…\"}\n              </>\n            }\n          />\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n        <ListItem alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <AntAvatar alt=\"Cindy Baker\" src={avatar3} />\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Oui Oui\"\n            secondary={\n              <>\n                <Typography component=\"span\" sx={{ display: 'inline' }} variant=\"body2\" color=\"text.primary\">\n                  Sandra Adams\n                </Typography>\n                {' — Do you have Paris recommendations? Have you ever…'}\n              </>\n            }\n          />\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":4467},"src/sections/maps/interaction-map/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useCallback, memo } from 'react';\n\n// third-party\nimport Map from 'react-map-gl';\n\n// project-import\nimport ControlPanel from './control-panel';\nimport MapControl from 'components/third-party/map/MapControl';\n\n// ==============================|| MAP BOX - INTERATION MAP ||============================== //\n\nfunction InteractionMap({ ...other }) {\n  const [settings, setSettings] = useState({\n    minZoom: 0,\n    maxZoom: 20,\n    minPitch: 0,\n    maxPitch: 85,\n    dragPan: true,\n    boxZoom: true,\n    keyboard: true,\n    touchZoom: true,\n    dragRotate: true,\n    scrollZoom: true,\n    touchPitch: true,\n    touchRotate: true,\n    doubleClickZoom: true,\n    touchZoomRotate: true\n  });\n\n  const updateSettings = useCallback(\n    (name, value) =>\n      setSettings((prevSettings) => ({\n        ...prevSettings,\n        [name]: value\n      })),\n    []\n  );\n\n  return (\n    <Map\n      {...settings}\n      initialViewState={{\n        latitude: 37.729,\n        longitude: -122.36,\n        zoom: 11,\n        bearing: 0,\n        pitch: 50\n      }}\n      {...other}\n    >\n      <MapControl />\n      <ControlPanel settings={settings} onChange={updateSettings} />\n    </Map>\n  );\n}\n\nexport default memo(InteractionMap);\n\nInteractionMap.propTypes = { other: PropTypes.any };\n","size_bytes":1321},"src/sections/components-overview/tree-view/CustomizedTreeView.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha, styled } from '@mui/material/styles';\nimport Collapse from '@mui/material/Collapse';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport { TreeItem, SimpleTreeView, treeItemClasses } from '@mui/x-tree-view';\n\n// third-party\nimport { useSpring, animated } from 'react-spring';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nfunction MinusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\n    </SvgIcon>\n  );\n}\n\nfunction PlusSquare(props) {\n  return (\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\n    </SvgIcon>\n  );\n}\n\nfunction CloseSquare(props) {\n  return (\n    <SvgIcon className=\"close\" fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\n      {/* tslint:disable-next-line: max-line-length */}\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\n    </SvgIcon>\n  );\n}\n\nfunction TransitionComponent({ ...others }) {\n  const style = useSpring({\n    from: {\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      opacity: others.in ? 1 : 0,\n      transform: `translate3d(${others.in ? 0 : 20}px,0,0)`\n    }\n  });\n\n  return (\n    <animated.div style={style}>\n      <Collapse {...others} />\n    </animated.div>\n  );\n}\n\nconst StyledTreeItem = styled((props) => <TreeItem {...props} slots={{ groupTransition: TransitionComponent }} />)(({ theme }) => ({\n  [`& .${treeItemClasses.iconContainer}`]: {\n    '& .close': {\n      opacity: 0.3\n    }\n  },\n  [`& .${treeItemClasses.groupTransition}`]: {\n    marginLeft: 15,\n    paddingLeft: 18,\n    borderLeft: `1px dashed ${alpha(theme.palette.text.primary, 0.4)}`\n  }\n}));\n\nStyledTreeItem.displayName = 'StyledTreeItem';\n\n// ==============================|| TREE VIEW - CUSTOMIZED ||============================== //\n\nexport default function CustomizedTreeView() {\n  const customTreeviewCodeString = `// CustomizedTreeView.tsx\n<SimpleTreeView\n  aria-label=\"customized\"\n  defaultExpandedItems={['1']}\n  slots={{ collapseIcon: MinusSquare, expandIcon: PlusSquare, endIcon: CloseSquare }}\n  sx={{ height: 320, flexGrow: 1, overflowY: 'auto' }}\n>\n  <StyledTreeItem itemId=\"1\" label=\"Main\">\n    <StyledTreeItem itemId=\"2\" label=\"Hello\" />\n    <StyledTreeItem itemId=\"3\" label=\"Subtree with children\">\n      <StyledTreeItem itemId=\"6\" label=\"Hello\" />\n      <StyledTreeItem itemId=\"7\" label=\"Sub-subtree with children\">\n        <StyledTreeItem itemId=\"9\" label=\"Child 1\" />\n        <StyledTreeItem itemId=\"10\" label=\"Child 2\" />\n        <StyledTreeItem itemId=\"11\" label=\"Child 3\" />\n      </StyledTreeItem>\n      <StyledTreeItem itemId=\"8\" label=\"Hello\" />\n    </StyledTreeItem>\n    <StyledTreeItem itemId=\"4\" label=\"World\" />\n    <StyledTreeItem itemId=\"5\" label=\"Something something\" />\n  </StyledTreeItem>\n</SimpleTreeView>`;\n\n  return (\n    <MainCard title=\"Customized\" codeString={customTreeviewCodeString}>\n      <SimpleTreeView\n        aria-label=\"customized\"\n        defaultExpandedItems={['1']}\n        slots={{ collapseIcon: MinusSquare, expandIcon: PlusSquare, endIcon: CloseSquare }}\n        sx={{ height: 320, flexGrow: 1, overflowY: 'auto' }}\n      >\n        <StyledTreeItem itemId=\"1\" label=\"Main\">\n          <StyledTreeItem itemId=\"2\" label=\"Hello\" />\n          <StyledTreeItem itemId=\"3\" label=\"Subtree with children\">\n            <StyledTreeItem itemId=\"6\" label=\"Hello\" />\n            <StyledTreeItem itemId=\"7\" label=\"Sub-subtree with children\">\n              <StyledTreeItem itemId=\"9\" label=\"Child 1\" />\n              <StyledTreeItem itemId=\"10\" label=\"Child 2\" />\n              <StyledTreeItem itemId=\"11\" label=\"Child 3\" />\n            </StyledTreeItem>\n            <StyledTreeItem itemId=\"8\" label=\"Hello\" />\n          </StyledTreeItem>\n          <StyledTreeItem itemId=\"4\" label=\"World\" />\n          <StyledTreeItem itemId=\"5\" label=\"Something something\" />\n        </StyledTreeItem>\n      </SimpleTreeView>\n    </MainCard>\n  );\n}\n\nTransitionComponent.propTypes = { others: PropTypes.any };\n","size_bytes":5549},"src/sections/forms/wizard/works-validation-wizard/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function AddWorkPage() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNext = () => {\n    setActiveStep((prevStep) => prevStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevStep) => prevStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.post('works', data);\n      console.log('response:', response.statusText);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n      setData({});\n    }\n  };\n\n  return (\n    <MainCard title=\"Add work page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully added a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setData({});\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5958},"src/pages/charts/org-chart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { Tree, TreeNode } from 'react-organizational-chart';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Card from 'sections/charts/org-chart/Card';\nimport DataCard from 'sections/charts/org-chart/DataCard';\nimport { data } from 'data/org-chart';\n\n// ==============================|| ORGANIZATION CHARTS ||============================== //\n\nfunction SimpleTree({ name }) {\n  const theme = useTheme();\n\n  return (\n    <Typography\n      sx={{\n        p: 1.25,\n        border: '1px solid ',\n        borderColor: theme.palette.primary.light,\n        width: 'max-content',\n        m: 'auto',\n        color: 'primary.main',\n        bgcolor: alpha(theme.palette.secondary.lighter, 0.6),\n        borderRadius: 1\n      }}\n    >\n      {name}\n    </Typography>\n  );\n}\n\nfunction TreeCard({ items }) {\n  return (\n    <>\n      {items.map((item, id) => (\n        <Fragment key={id}>\n          {item.children ? (\n            <TreeNode label={<SimpleTree name={item.name} />}>\n              <TreeCard items={item.children} />\n            </TreeNode>\n          ) : (\n            <TreeNode label={<SimpleTree name={item.name} />} />\n          )}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nexport default function OrgChartPage() {\n  const theme = useTheme();\n\n  return (\n    <Grid container rowSpacing={2} justifyContent=\"center\">\n      <Grid item xs={12}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <MainCard title=\"Simple Chart\" contentSX={{ overflow: 'auto', direction: theme.direction }}>\n              <Tree\n                lineWidth=\"1px\"\n                lineColor={theme.palette.primary.main}\n                lineBorderRadius=\"4px\"\n                label={<SimpleTree name={data[0].name} />}\n              >\n                <TreeCard items={data[0].children} />\n              </Tree>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Styled Chart\" contentSX={{ overflow: 'auto', direction: theme.direction }}>\n              <Tree\n                lineWidth=\"1px\"\n                lineColor={theme.palette.primary.main}\n                lineBorderRadius=\"4px\"\n                label={\n                  <DataCard\n                    name={data[0].name}\n                    role={data[0].role}\n                    avatar={data[0].avatar}\n                    linkedin={data[0].linkedin}\n                    facebook={data[0].facebook}\n                    skype={data[0].skype}\n                    root\n                  />\n                }\n              >\n                <Card items={data[0].children} />\n              </Tree>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nSimpleTree.propTypes = { name: PropTypes.any };\n\nTreeCard.propTypes = { items: PropTypes.any };\n","size_bytes":3061},"src/assets/third-party/apex-chart.css":{"content":".apexcharts-legend-series .apexcharts-legend-marker {\n  left: -4px !important;\n  right: -4px !important;\n}\n\n.apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series,\n.apexcharts-legend.apx-legend-position-top .apexcharts-legend-series {\n  gap: 8px;\n}\n.apexcharts-legend-series {\n  display: flex;\n  gap: 8px;\n}\n\nhtml[dir='rtl'] .apexcharts-tooltip .apexcharts-tooltip-marker {\n  margin-left: 10px;\n  margin-right: 0px;\n}\n","size_bytes":435},"src/pages/dashboard/analytics.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\n\nimport NewOrders from 'sections/widget/chart/NewOrders';\nimport NewUsers from 'sections/widget/chart/NewUsers';\nimport Visitors from 'sections/widget/chart/Visitors';\n\nimport DropboxStorage from 'sections/widget/statistics/DropboxStorage';\nimport SwitchBalanace from 'sections/widget/statistics/SwitchBalanace';\n\nimport ProjectAnalytics from 'sections/widget/chart/ProjectAnalytics';\n\nimport EcommerceIncome from 'sections/widget/chart/EcommerceIncome';\nimport LanguagesSupport from 'sections/widget/chart/LanguagesSupport';\n\nimport ProductOverview from 'sections/widget/chart/ProductOverview';\n\nimport PaymentHistory from 'sections/widget/data/PaymentHistory';\nimport EcommerceRadial from 'sections/widget/chart/EcommerceRadial';\n\n// ==============================|| DASHBOARD - ANALYTICS ||============================== //\n\nexport default function DashboardAnalytics() {\n  const theme = useTheme();\n\n  return (\n    <Grid container rowSpacing={4.5} columnSpacing={3}>\n      {/* row 1 */}\n      <Grid item xs={12} md={4} lg={3}>\n        <NewOrders />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3}>\n        <NewUsers />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3}>\n        <Visitors />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <DropboxStorage />\n          </Grid>\n          <Grid item xs={12}>\n            <SwitchBalanace />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {/* row 2 */}\n      <Grid item xs={12}>\n        <ProjectAnalytics />\n      </Grid>\n\n      {/* row 3 */}\n      <Grid item xs={12} lg={3}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6} lg={12}>\n            <EcommerceIncome />\n          </Grid>\n          <Grid item xs={12} md={6} lg={12}>\n            <LanguagesSupport />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <ProductOverview />\n      </Grid>\n      <Grid item xs={12} lg={3}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6} lg={12}>\n            <PaymentHistory />\n          </Grid>\n          <Grid item xs={12} md={6} lg={12}>\n            <Stack spacing={3}>\n              <EcommerceRadial color={theme.palette.primary.main} />\n              <EcommerceRadial color={theme.palette.error.dark} />\n            </Stack>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":2588},"src/components/third-party/dropzone/FilesPreview.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItem from '@mui/material/ListItem';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport { DropzopType } from 'config';\n\n// utils\nimport getDropzoneData from 'utils/getDropzoneData';\n\n// type\n\n// assets\nimport { CloseCircle, Document } from 'iconsax-react';\n\n// ==============================|| MULTI UPLOAD - PREVIEW ||============================== //\n\nexport default function FilesPreview({ showList = false, files, onRemove, type }) {\n  const hasFile = files.length > 0;\n  const layoutType = type;\n\n  return (\n    <List\n      disablePadding\n      sx={{\n        ...(hasFile && type !== DropzopType.STANDARD && { my: 3 }),\n        ...(type === DropzopType.STANDARD && { width: 'calc(100% - 84px)' })\n      }}\n    >\n      {files.map((file, index) => {\n        const { key, name, size, preview, type } = getDropzoneData(file, index);\n\n        if (showList) {\n          return (\n            <ListItem\n              key={key}\n              sx={{\n                p: 0,\n                m: 0.5,\n                width: layoutType === DropzopType.STANDARD ? 64 : 80,\n                height: layoutType === DropzopType.STANDARD ? 64 : 80,\n                borderRadius: 1.25,\n                position: 'relative',\n                display: 'inline-flex',\n                verticalAlign: 'text-top',\n                border: '1px solid',\n                borderColor: 'divider',\n                overflow: 'hidden'\n              }}\n            >\n              {type?.includes('image') && <img alt=\"preview\" src={preview} style={{ width: '100%' }} />}\n              {!type?.includes('image') && <Document variant=\"Bold\" style={{ width: '100%', fontSize: '1.5rem' }} />}\n\n              {onRemove && (\n                <IconButton\n                  size=\"small\"\n                  color=\"error\"\n                  shape=\"rounded\"\n                  onClick={() => onRemove(file)}\n                  sx={{\n                    fontSize: '0.875rem',\n                    bgcolor: 'background.paper',\n                    p: 0,\n                    width: 'auto',\n                    height: 'auto',\n                    top: 2,\n                    right: 2,\n                    position: 'absolute'\n                  }}\n                >\n                  <CloseCircle variant=\"Bold\" />\n                </IconButton>\n              )}\n            </ListItem>\n          );\n        }\n\n        return (\n          <ListItem\n            key={key}\n            sx={{\n              my: 1,\n              px: 2,\n              py: 0.75,\n              borderRadius: 0.75,\n              border: ' 1px solid',\n              borderColor: 'divider'\n            }}\n          >\n            <Document variant=\"Bold\" style={{ width: '30px', height: '30px', fontSize: '1.15rem', marginRight: 4 }} />\n\n            <ListItemText\n              primary={typeof file === 'string' ? file : name}\n              secondary={typeof file === 'string' ? '' : size}\n              primaryTypographyProps={{ variant: 'subtitle2' }}\n              secondaryTypographyProps={{ variant: 'caption' }}\n            />\n\n            {onRemove && (\n              <IconButton edge=\"end\" size=\"small\" onClick={() => onRemove(file)}>\n                <CloseCircle variant=\"Bold\" style={{ fontSize: '1.15rem' }} />\n              </IconButton>\n            )}\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n\nFilesPreview.propTypes = { showList: PropTypes.bool, files: PropTypes.any, onRemove: PropTypes.any, type: PropTypes.any };\n","size_bytes":3650},"src/menu-items/pages.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { Book1, I24Support, Security, MessageProgramming, DollarSquare, Airplane } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  page: Book1,\n  authentication: Security,\n  maintenance: MessageProgramming,\n  pricing: DollarSquare,\n  contactus: I24Support,\n  landing: Airplane\n};\n\n// ==============================|| MENU ITEMS - PAGES ||============================== //\n\nconst pages = {\n  id: 'group-pages',\n  title: <FormattedMessage id=\"pages\" />,\n  type: 'group',\n  icon: icons.page,\n  children: [\n    {\n      id: 'authentication',\n      title: <FormattedMessage id=\"authentication\" />,\n      type: 'collapse',\n      icon: icons.authentication,\n      children: [\n        {\n          id: 'authentication1',\n          title: (\n            <>\n              <FormattedMessage id=\"authentication\" /> 1\n            </>\n          ),\n          type: 'collapse',\n          children: [\n            {\n              id: 'login',\n              title: <FormattedMessage id=\"login\" />,\n              type: 'item',\n              url: '/auth/login',\n              target: true\n            },\n            {\n              id: 'register',\n              title: <FormattedMessage id=\"register\" />,\n              type: 'item',\n              url: '/auth/register',\n              target: true\n            },\n            {\n              id: 'forgot-password',\n              title: <FormattedMessage id=\"forgot-password\" />,\n              type: 'item',\n              url: '/auth/forgot-password',\n              target: true\n            },\n            {\n              id: 'reset-password',\n              title: <FormattedMessage id=\"reset-password\" />,\n              type: 'item',\n              url: '/auth/reset-password',\n              target: true\n            },\n            {\n              id: 'check-mail',\n              title: <FormattedMessage id=\"check-mail\" />,\n              type: 'item',\n              url: '/auth/check-mail',\n              target: true\n            },\n            {\n              id: 'code-verification',\n              title: <FormattedMessage id=\"code-verification\" />,\n              type: 'item',\n              url: '/auth/code-verification',\n              target: true\n            }\n          ]\n        },\n        {\n          id: 'authentication2',\n          title: (\n            <>\n              <FormattedMessage id=\"authentication\" /> 2\n            </>\n          ),\n          type: 'collapse',\n          children: [\n            {\n              id: 'login2',\n              title: <FormattedMessage id=\"login\" />,\n              type: 'item',\n              url: '/auth/login2',\n              target: true\n            },\n            {\n              id: 'register2',\n              title: <FormattedMessage id=\"register\" />,\n              type: 'item',\n              url: '/auth/register2',\n              target: true\n            },\n            {\n              id: 'forgot-password2',\n              title: <FormattedMessage id=\"forgot-password\" />,\n              type: 'item',\n              url: '/auth/forgot-password2',\n              target: true\n            },\n            {\n              id: 'reset-password2',\n              title: <FormattedMessage id=\"reset-password\" />,\n              type: 'item',\n              url: '/auth/reset-password2',\n              target: true\n            },\n            {\n              id: 'check-mail2',\n              title: <FormattedMessage id=\"check-mail\" />,\n              type: 'item',\n              url: '/auth/check-mail2',\n              target: true\n            },\n            {\n              id: 'code-verification2',\n              title: <FormattedMessage id=\"code-verification\" />,\n              type: 'item',\n              url: '/auth/code-verification2',\n              target: true\n            }\n          ]\n        },\n        {\n          id: 'authentication3',\n          title: (\n            <>\n              <FormattedMessage id=\"authentication\" /> 3\n            </>\n          ),\n          type: 'item',\n          url: '/auth/login3',\n          target: true\n        }\n      ]\n    },\n    {\n      id: 'maintenance',\n      title: <FormattedMessage id=\"maintenance\" />,\n      type: 'collapse',\n      icon: icons.maintenance,\n      isDropdown: true,\n      children: [\n        {\n          id: 'error-404',\n          title: <FormattedMessage id=\"error-404\" />,\n          type: 'item',\n          url: '/maintenance/404',\n          target: true\n        },\n        {\n          id: 'error-500',\n          title: <FormattedMessage id=\"error-500\" />,\n          type: 'item',\n          url: '/maintenance/500',\n          target: true\n        },\n        {\n          id: 'coming-soon-collapse',\n          title: <FormattedMessage id=\"coming-soon\" />,\n          type: 'collapse',\n          children: [\n            {\n              id: 'coming-soon-1',\n              title: (\n                <>\n                  <FormattedMessage id=\"coming-soon\" /> 1\n                </>\n              ),\n              type: 'item',\n              url: '/maintenance/coming-soon',\n              target: true\n            },\n            {\n              id: 'coming-soon-2',\n              title: (\n                <>\n                  <FormattedMessage id=\"coming-soon\" /> 2\n                </>\n              ),\n              type: 'item',\n              url: '/maintenance/coming-soon2',\n              target: true\n            }\n          ]\n        },\n        {\n          id: 'under-construction-collapse',\n          title: <FormattedMessage id=\"under-construction\" />,\n          type: 'collapse',\n          children: [\n            {\n              id: 'under-construction-1',\n              title: (\n                <>\n                  <FormattedMessage id=\"under-construction\" /> 1\n                </>\n              ),\n              type: 'item',\n              url: '/maintenance/under-construction',\n              target: true\n            },\n            {\n              id: 'under-construction-2',\n              title: (\n                <>\n                  <FormattedMessage id=\"under-construction\" /> 2\n                </>\n              ),\n              type: 'item',\n              url: '/maintenance/under-construction2',\n              target: true\n            }\n          ]\n        }\n      ]\n    },\n    {\n      id: 'price',\n      title: <FormattedMessage id=\"price\" />,\n      type: 'collapse',\n      icon: icons.pricing,\n      children: [\n        {\n          id: 'price1',\n          title: (\n            <>\n              <FormattedMessage id=\"price\" /> 1\n            </>\n          ),\n          type: 'item',\n          url: '/price/price1'\n        },\n        {\n          id: 'price2',\n          title: (\n            <>\n              <FormattedMessage id=\"price\" /> 2\n            </>\n          ),\n          type: 'item',\n          url: '/price/price2'\n        }\n      ]\n    },\n    {\n      id: 'contact-us',\n      title: <FormattedMessage id=\"contact-us\" />,\n      type: 'item',\n      url: '/contact-us',\n      icon: icons.contactus,\n      target: true\n    },\n    {\n      id: 'landing',\n      title: <FormattedMessage id=\"landing\" />,\n      type: 'item',\n      icon: icons.landing,\n      url: '/landing'\n    }\n  ]\n};\n\nexport default pages;\n","size_bytes":7244},"src/sections/components-overview/tabs/IconTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Book, Image, Profile, Profile2User } from 'iconsax-react';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return { id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}` };\n}\n\n// ==============================|| TABS - ICON ||============================== //\n\nexport default function IconTabs() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const iconTabCodeString = `// IconTabs.tsx\n<Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n  <Tab label=\"Profile\" icon={<Profile />} iconPosition=\"start\" {...a11yProps(0)} />\n  <Tab label=\"Followers\" icon={<Book />} iconPosition=\"start\" {...a11yProps(1)} />\n  <Tab label=\"Friends\" icon={<Profile2User />} iconPosition=\"start\" {...a11yProps(2)} />\n  <Tab label=\"Gallery\" icon={<Image />} iconPosition=\"start\" {...a11yProps(3)} />\n</Tabs>\n<TabPanel value={value} index={0}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n    purus sem, sagittis eu mauris et, viverra lobortis urna.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={1}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={2}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={3}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>`;\n\n  return (\n    <MainCard codeString={iconTabCodeString}>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n            <Tab label=\"Profile\" icon={<Profile />} iconPosition=\"start\" {...a11yProps(0)} />\n            <Tab label=\"Followers\" icon={<Book />} iconPosition=\"start\" {...a11yProps(1)} />\n            <Tab label=\"Friends\" icon={<Profile2User />} iconPosition=\"start\" {...a11yProps(2)} />\n            <Tab label=\"Gallery\" icon={<Image />} iconPosition=\"start\" {...a11yProps(3)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={value} index={0}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n            purus sem, sagittis eu mauris et, viverra lobortis urna.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":4923},"src/sections/components-overview/autocomplete/CountryAutocomplete.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport countries from 'data/countries';\nimport MainCard from 'components/MainCard';\n\n// ==============================|| AUTOCOMPLETE - COUNTRY ||============================== //\n\nexport default function CountryAutocomplete() {\n  const countryAutocompleteCodeString = `<Autocomplete\n  id=\"country-select-demo\"\n  fullWidth\n  options={countries}\n  autoHighlight\n  getOptionLabel={(option) => option.label}\n  renderOption={(props, option) => (\n    <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n      {option.code && (\n        <img\n          loading=\"lazy\"\n          width=\"20\"\n          src={https://flagcdn.com/w20/{option.code.toLowerCase()}.png}\n          srcSet={https://flagcdn.com/w40/{option.code.toLowerCase()}.png 2x}\n          alt=\"\"\n        />\n      )}\n      {option.label} ({option.code}) +{option.phone}\n    </Box>\n  )}\n  renderInput={(params) => (\n    <TextField\n      {...params}\n      placeholder=\"Choose a country\"\n      inputProps={{\n        ...params.inputProps,\n        autoComplete: 'new-password' // disable autocomplete and autofill\n      }}\n    />\n  )}\n/>`;\n\n  return (\n    <MainCard title=\"With Image\" codeString={countryAutocompleteCodeString}>\n      <Autocomplete\n        id=\"country-select-demo\"\n        fullWidth\n        options={countries}\n        autoHighlight\n        getOptionLabel={(option) => option.label}\n        renderOption={(props, option) => (\n          <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n            {option.code && (\n              <img\n                loading=\"lazy\"\n                width=\"20\"\n                src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                alt=\"\"\n              />\n            )}\n            {option.label} ({option.code}) +{option.phone}\n          </Box>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            placeholder=\"Choose a country\"\n            inputProps={{\n              ...params.inputProps,\n              autoComplete: 'new-password' // disable autocomplete and autofill\n            }}\n          />\n        )}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":2430},"src/sections/components-overview/timeline/OppositeContentTimeline.jsx":{"content":"// material-ui\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\nimport TimelineOppositeContent from '@mui/lab/TimelineOppositeContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TIMELINE - OPPOSITE CONTENT ||============================== //\n\nexport default function OppositeContentTimeline() {\n  const oppositeTimelineCodeString = `<Timeline position=\"alternate\">\n  <TimelineItem>\n    <TimelineOppositeContent color=\"text.secondary\">09:30 am</TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Eat</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineOppositeContent color=\"text.secondary\">10:00 am</TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Code</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineOppositeContent color=\"text.secondary\">12:00 am</TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Sleep</TimelineContent>\n  </TimelineItem>\n  <TimelineItem sx={{ minHeight: 'auto' }}>\n    <TimelineOppositeContent color=\"text.secondary\">9:00 am</TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Repeat</TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Opposite Content\" codeString={oppositeTimelineCodeString}>\n      <Timeline position=\"alternate\">\n        <TimelineItem>\n          <TimelineOppositeContent color=\"text.secondary\">09:30 am</TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Eat</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineOppositeContent color=\"text.secondary\">10:00 am</TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Code</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineOppositeContent color=\"text.secondary\">12:00 am</TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Sleep</TimelineContent>\n        </TimelineItem>\n        <TimelineItem sx={{ minHeight: 'auto' }}>\n          <TimelineOppositeContent color=\"text.secondary\">9:00 am</TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Repeat</TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":3524},"src/sections/tables/react-table/RSPControl.jsx":{"content":"import { useEffect, useMemo, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport { keepPreviousData, useQuery, QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// project imports\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, IndeterminateCheckbox, RowSelection, TablePagination } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\nconst queryClient = new QueryClient();\n\nasync function fetchData(options) {\n  // simulate some network latency\n  await new Promise((r) => setTimeout(r, 500));\n\n  const data = makeData(100);\n\n  return {\n    rows: data.slice(options.pageIndex * options.pageSize, (options.pageIndex + 1) * options.pageSize),\n    pageCount: Math.ceil(data.length / options.pageSize)\n  };\n}\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable() {\n  const columns = useMemo(\n    () => [\n      {\n        id: 'select',\n        header: ({ table }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n              onChange: table.getToggleAllRowsSelectedHandler()\n            }}\n          />\n        ),\n        cell: ({ row }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.getToggleSelectedHandler()\n            }}\n          />\n        )\n      },\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  const [rowSelection, setRowSelection] = useState({});\n  const [{ pageIndex, pageSize }, setPagination] = useState({ pageIndex: 0, pageSize: 10 });\n\n  const fetchDataOptions = { pageIndex, pageSize };\n\n  const { data } = useQuery({\n    queryKey: ['data', fetchDataOptions],\n    queryFn: () => fetchData(fetchDataOptions),\n    placeholderData: keepPreviousData\n  });\n\n  const defaultData = useMemo(() => [], []);\n\n  const pagination = useMemo(\n    () => ({\n      pageIndex,\n      pageSize\n    }),\n    [pageIndex, pageSize]\n  );\n\n  const table = useReactTable({\n    data: data?.rows ?? defaultData,\n    columns,\n    pageCount: data?.pageCount ?? -1,\n    state: {\n      pagination,\n      rowSelection\n    },\n    getRowId: (row) => row.id.toString(),\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    manualPagination: true,\n    debugTable: true\n  });\n\n  useEffect(() => setRowSelection({ 1: true, 5: true, 7: true }), []);\n\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      title=\"Row Selection (Pagination Control)\"\n      content={false}\n      secondary={\n        <CSVExport\n          {...{\n            data:\n              table.getSelectedRowModel().flatRows.map((row) => row.original).length === 0\n                ? table.getRowModel().rows.map((row) => row.original)\n                : table.getSelectedRowModel().flatRows.map((row) => row.original),\n            headers,\n            filename: 'rsp-control.csv'\n          }}\n        />\n      }\n      codeHighlight\n      codeString={JSON.stringify({ rowSelection: rowSelection }, null, 2)}\n    >\n      <ScrollX>\n        <Stack>\n          <RowSelection selected={Object.keys(rowSelection).length} />\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: '58px' } }}>\n                    {headerGroup.headers.map((header) => (\n                      <TableCell key={header.id} {...header.column.columnDef.meta}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount\n                }}\n              />\n            </Box>\n          </>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| ROW SELECTION - PAGINATION CONTROL ||============================== //\n\nexport default function RSPControl() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ReactTable />\n    </QueryClientProvider>\n  );\n}\n","size_bytes":7361},"src/menu-items/support.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { OceanProtocol, Level, ShieldCross, InfoCircle, I24Support, Driving } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  menuLevel: OceanProtocol,\n  menuLevelSubtitle: Level,\n  disabledMenu: ShieldCross,\n  chipMenu: InfoCircle,\n  documentation: I24Support,\n  roadmap: Driving\n};\n\n// ==============================|| MENU ITEMS - SUPPORT ||============================== //\n\nconst support = {\n  id: 'other',\n  type: 'group',\n  children: [\n    {\n      id: 'menu-level',\n      title: <FormattedMessage id=\"menu-level\" />,\n      type: 'collapse',\n      icon: icons.menuLevel,\n      children: [\n        {\n          id: 'menu-level-1.1',\n          title: (\n            <>\n              <FormattedMessage id=\"level\" /> 1\n            </>\n          ),\n          type: 'item',\n          url: '#'\n        },\n        {\n          id: 'menu-level-1.2',\n          title: (\n            <>\n              <FormattedMessage id=\"level\" /> 1\n            </>\n          ),\n          type: 'collapse',\n          children: [\n            {\n              id: 'menu-level-2.1',\n              title: (\n                <>\n                  <FormattedMessage id=\"level\" /> 2\n                </>\n              ),\n              type: 'item',\n              url: '#'\n            },\n            {\n              id: 'menu-level-2.2',\n              title: (\n                <>\n                  <FormattedMessage id=\"level\" /> 2\n                </>\n              ),\n              type: 'collapse',\n              children: [\n                {\n                  id: 'menu-level-3.1',\n                  title: (\n                    <>\n                      <FormattedMessage id=\"level\" /> 3\n                    </>\n                  ),\n                  type: 'item',\n                  url: '#'\n                },\n                {\n                  id: 'menu-level-3.2',\n                  title: (\n                    <>\n                      <FormattedMessage id=\"level\" /> 3\n                    </>\n                  ),\n                  type: 'item',\n                  url: '#'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      id: 'menu-level-subtitle',\n      title: <FormattedMessage id=\"menu-level-subtitle\" />,\n      caption: <FormattedMessage id=\"menu-level-subtitle-caption\" />,\n      type: 'collapse',\n      icon: icons.menuLevelSubtitle,\n      children: [\n        {\n          id: 'sub-menu-level-1.1',\n          title: (\n            <>\n              <FormattedMessage id=\"level\" /> 1\n            </>\n          ),\n          caption: <FormattedMessage id=\"menu-level-subtitle-item\" />,\n          type: 'item',\n          url: '#'\n        },\n        {\n          id: 'sub-menu-level-1.2',\n          title: (\n            <>\n              <FormattedMessage id=\"level\" /> 1\n            </>\n          ),\n          caption: <FormattedMessage id=\"menu-level-subtitle-collapse\" />,\n          type: 'collapse',\n          children: [\n            {\n              id: 'sub-menu-level-2.1',\n              title: (\n                <>\n                  <FormattedMessage id=\"level\" /> 2\n                </>\n              ),\n              caption: <FormattedMessage id=\"menu-level-subtitle-sub-item\" />,\n              type: 'item',\n              url: '#'\n            }\n          ]\n        }\n      ]\n    },\n    {\n      id: 'disabled-menu',\n      title: <FormattedMessage id=\"disabled-menu\" />,\n      type: 'item',\n      url: '#',\n      icon: icons.disabledMenu,\n      disabled: true\n    },\n    {\n      id: 'oval-chip-menu',\n      title: <FormattedMessage id=\"oval-chip-menu\" />,\n      type: 'item',\n      url: '#',\n      icon: icons.chipMenu,\n      chip: {\n        label: 'Fire',\n        color: 'error',\n        variant: 'outlined',\n        size: 'small'\n      }\n    },\n    {\n      id: 'documentation',\n      title: <FormattedMessage id=\"documentation\" />,\n      type: 'item',\n      url: 'https://phoenixcoded.gitbook.io/able-pro/v/react/',\n      icon: icons.documentation,\n      external: true,\n      target: true,\n      chip: {\n        label: 'gitbook',\n        color: 'info',\n        size: 'small'\n      }\n    },\n    {\n      id: 'roadmap',\n      title: <FormattedMessage id=\"roadmap\" />,\n      type: 'item',\n      url: 'https://phoenixcoded.gitbook.io/able-pro/v/react/roadmap',\n      icon: icons.roadmap,\n      external: true,\n      target: true\n    }\n  ]\n};\n\nexport default support;\n","size_bytes":4474},"src/sections/apps/e-commerce/checkout/PaymentCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport visa from 'assets/images/e-commerce/visa.png';\nimport mastercard from 'assets/images/e-commerce/mastercard.png';\n\n// ==============================|| CHECKOUT - PAYMENT CARD ||============================== //\n\nexport default function PaymentCard({ type, paymentType, cardHandler }) {\n  const theme = useTheme();\n  const card = type === 'visa' ? visa : mastercard;\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        overflow: 'hidden',\n        opacity: paymentType === 'cod' ? 0.5 : 1,\n        bgcolor: theme.palette.secondary.lighter,\n        maxWidth: 380,\n        '&:hover': {\n          boxShadow: paymentType === 'cod' ? 'none' : theme.customShadows.primary,\n          cursor: paymentType === 'cod' ? 'text' : 'pointer'\n        }\n      }}\n    >\n      <Stack spacing={8} sx={{ p: 2 }} onClick={() => cardHandler(type)}>\n        <Stack direction=\"row\" alignItems=\"flex-start\" justifyContent=\"space-between\">\n          <Stack spacing={0}>\n            <Typography variant=\"h5\">{type === 'visa' ? 'Jennifer winget' : 'John Smith'}</Typography>\n            <Stack direction=\"row\" alignItems=\"flex-start\" spacing={1}>\n              <Typography variant=\"h2\" color=\"inherit\" sx={{ lineHeight: '0.5rem', fontFamily: 'auto' }}>\n                .... .... ....\n              </Typography>\n              <Typography variant=\"h5\" color=\"inherit\">\n                {type === 'visa' ? 5674 : 6790}\n              </Typography>\n            </Stack>\n          </Stack>\n          <Box\n            sx={{\n              backgroundImage: `url(${card})`,\n              backgroundSize: 'contain',\n              backgroundPosition: 'right',\n              width: type === 'visa' ? 24 : 42,\n              height: type === 'visa' ? 24 : 36.5\n            }}\n          />\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Stack spacing={1} direction=\"row\">\n            <Typography variant=\"caption\" color=\"inherit\" sx={{ opacity: 0.3 }}>\n              CVV\n            </Typography>\n            <Typography variant=\"body2\" color=\"inherit\">\n              {type === 'visa' ? 678 : 760}\n            </Typography>\n          </Stack>\n          <Stack spacing={1} direction=\"row\">\n            <Typography variant=\"caption\" color=\"inherit\" sx={{ opacity: 0.3 }}>\n              Expire Date\n            </Typography>\n            <Typography variant=\"body2\" color=\"inherit\">\n              {type === 'visa' ? '3 / 25' : '10 / 22'}\n            </Typography>\n          </Stack>\n        </Stack>\n      </Stack>\n    </MainCard>\n  );\n}\n\nPaymentCard.propTypes = { type: PropTypes.string, paymentType: PropTypes.string, cardHandler: PropTypes.func };\n","size_bytes":2992},"src/sections/apps/e-commerce/checkout/OrderComplete.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { Chance } from 'chance';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport completed from 'assets/images/e-commerce/completed.png';\n\nconst chance = new Chance();\n\n// ==============================|| CHECKOUT - ORDER COMPLETE ||============================== //\n\nexport default function OrderComplete({ open }) {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n\n  return (\n    <Dialog\n      open={open}\n      fullScreen\n      TransitionComponent={PopupTransition}\n      sx={{ '& .MuiDialog-paper': { bgcolor: 'background.paper', backgroundImage: 'none' } }}\n    >\n      <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ minHeight: '100vh' }}>\n        <Grid item>\n          <MainCard border={false}>\n            <Stack spacing={2} alignItems=\"center\">\n              <Box sx={{ position: 'relative', width: { xs: 320, sm: 500 } }}>\n                <img src={completed} alt=\"Order Complete\" style={{ width: 'inherit' }} />\n              </Box>\n              <Typography variant={matchDownMD ? 'h3' : 'h1'} align=\"center\">\n                Thank you for Purchase!\n              </Typography>\n              <Box sx={{ px: 2.5 }}>\n                <Typography align=\"center\" color=\"text.secondary\">\n                  We will send a process notification, before it delivered.\n                </Typography>\n                <Typography align=\"center\" color=\"text.secondary\">\n                  Your order id:{' '}\n                  <Typography variant=\"subtitle1\" component=\"span\" color=\"primary\">\n                    {chance.guid()}\n                  </Typography>\n                </Typography>\n              </Box>\n              <Typography variant=\"h5\" sx={{ py: { xs: 1, sm: 3 } }}>\n                (219) 404-5468\n              </Typography>\n              <Stack direction=\"row\" justifyContent=\"center\" spacing={3}>\n                <Button\n                  component={Link}\n                  to=\"/apps/e-commerce/products\"\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  size={matchDownMD ? 'small' : 'medium'}\n                >\n                  Continue Shopping\n                </Button>\n                <Button\n                  component={Link}\n                  to=\"/apps/e-commerce/products\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size={matchDownMD ? 'small' : 'medium'}\n                >\n                  Download Invoice\n                </Button>\n              </Stack>\n            </Stack>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </Dialog>\n  );\n}\n\nOrderComplete.propTypes = { open: PropTypes.bool };\n","size_bytes":3253},"src/themes/overrides/Fab.js":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport getShadow from 'utils/getShadow';\n\n// ==============================|| BUTTON - COLORS ||============================== //\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { main, dark, contrastText } = colors;\n\n  const buttonShadow = `${color}Button`;\n  const shadows = getShadow(theme, buttonShadow);\n\n  return {\n    color: contrastText,\n    backgroundColor: main,\n    boxShadow: shadows,\n    '&:hover': {\n      boxShadow: 'none',\n      backgroundColor: dark\n    },\n    '&:focus-visible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: 2\n    },\n    '&::after': {\n      borderRadius: '50px',\n      boxShadow: `0 0 5px 5px ${alpha(main, 0.9)}`\n    },\n    '&:active::after': {\n      borderRadius: '50px',\n      boxShadow: `0 0 0 0 ${alpha(main, 0.9)}`\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - FAB BUTTON ||============================== //\n\nexport default function Fab(theme) {\n  return {\n    MuiFab: {\n      styleOverrides: {\n        root: {\n          '& svg': {\n            width: 20,\n            height: 20\n          },\n          fontWeight: 400,\n          '&.Mui-disabled': {\n            backgroundColor: theme.palette.secondary[200]\n          },\n          '&.MuiFab-primary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiFab-secondary': getColorStyle({ color: 'secondary', theme }),\n          '&.Mui-error': getColorStyle({ color: 'error', theme }),\n          '&.MuiFab-success': getColorStyle({ color: 'success', theme }),\n          '&.MuiFab-info': getColorStyle({ color: 'info', theme }),\n          '&.MuiFab-warning': getColorStyle({ color: 'warning', theme }),\n          '&::after': {\n            content: '\"\"',\n            display: 'block',\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: '100%',\n            height: '100%',\n            borderRadius: 4,\n            opacity: 0,\n            transition: 'all 0.5s'\n          },\n\n          '&:active::after': {\n            position: 'absolute',\n            borderRadius: 4,\n            left: 0,\n            top: 0,\n            opacity: 1,\n            transition: '0s'\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":2336},"src/sections/components-overview/notistack/TransitionBar.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Fade from '@mui/material/Fade';\nimport Grow from '@mui/material/Grow';\nimport Zoom from '@mui/material/Zoom';\nimport Slide from '@mui/material/Slide';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - TRANSITIONS ||============================== //\n\nexport default function TransitionBar() {\n  const [value, setValue] = useState('slide');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const handleClick = () => {\n    switch (value) {\n      case 'slide':\n        enqueueSnackbar('Your notification here', { TransitionComponent: Slide });\n        break;\n      case 'grow':\n        enqueueSnackbar('Your notification here', { TransitionComponent: Grow });\n        break;\n      case 'fade':\n        enqueueSnackbar('Your notification here', { TransitionComponent: Fade });\n        break;\n      case 'zoom':\n        enqueueSnackbar('Your notification here', { TransitionComponent: Zoom });\n        break;\n      default:\n        enqueueSnackbar('Your notification here', { TransitionComponent: Slide });\n        break;\n    }\n  };\n\n  const NotiStackSnackbarCodeString = `<Button variant=\"contained\" \n  onClick={() => enqueueSnackbar('Your notification here', { TransitionComponent: Slide })>\n  Slide\n</Button>\n<Button variant=\"contained\" \n  onClick={() => enqueueSnackbar('Your notification here', { TransitionComponent: Grow })>\n  Grow\n</Button>\n<Button variant=\"contained\" \n  onClick={() => enqueueSnackbar('Your notification here', { TransitionComponent: Fade })>\n  Fade\n</Button>\n<Button variant=\"contained\" \n  onClick={() => enqueueSnackbar('Your notification here', { TransitionComponent: Zoom })>\n  Zoom\n</Button>`;\n\n  return (\n    <MainCard title=\"Animation\" codeString={NotiStackSnackbarCodeString}>\n      <FormControl>\n        <RadioGroup\n          row\n          aria-labelledby=\"demo-row-radio-buttons-group-label\"\n          value={value}\n          onChange={handleChange}\n          name=\"row-radio-buttons-group\"\n        >\n          <FormControlLabel value=\"slide\" control={<Radio />} label=\"Slide\" />\n          <FormControlLabel value=\"grow\" control={<Radio />} label=\"Grow\" />\n          <FormControlLabel value=\"fade\" control={<Radio />} label=\"Fade\" />\n          <FormControlLabel value=\"zoom\" control={<Radio />} label=\"Zoom\" />\n        </RadioGroup>\n      </FormControl>\n      <Button variant=\"contained\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => handleClick()}>\n        Show Snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":2911},"src/pages/auth/auth3/login3.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Alert from '@mui/material/Alert';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\n\n// third-party\nimport OtpInput from 'react18-input-otp';\n\n// project-imports\nimport Logo from 'components/logo';\nimport AuthCard from 'sections/auth/AuthCard';\nimport AuthSocButton from 'sections/auth/AuthSocButton';\nimport AuthWrapper3 from 'sections/auth/AuthWrapper3';\n\nimport useAuth from 'hooks/useAuth';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { User, Home3 } from 'iconsax-react';\nimport imgSms from 'assets/images/auth/sms.svg';\nimport imgFacebook from 'assets/images/auth/facebook.svg';\nimport imgTwitter from 'assets/images/auth/twitter.svg';\nimport imgGoogle from 'assets/images/auth/google.svg';\n\nconst steps = ['1', '2', '3', '4', '5'];\n\nfunction StepWrapper({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\n// ================================|| LOGIN ||================================ //\n\nexport default function Login3() {\n  const theme = useTheme();\n  const { isLoggedIn } = useAuth();\n  const [activeStep, setActiveStep] = useState(0);\n  const [skipped, setSkipped] = useState(new Set());\n  const [selectedValue, setSelectedValue] = useState('Personal');\n  const [otp, setOtp] = useState();\n\n  const borderColor = theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary.light;\n\n  const isStepSkipped = (step) => skipped.has(step);\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleChange = (event) => {\n    setSelectedValue(event.target.value);\n  };\n  return (\n    <AuthWrapper3>\n      <Grid container spacing={3} sx={{ minHeight: '100%', alignContent: 'space-between' }}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Logo />\n            <Typography color=\"secondary\">\n              Step\n              <Typography variant=\"subtitle1\" sx={{ display: 'inline-block', margin: '0 5px' }}>\n                {activeStep + 1}\n              </Typography>\n              to {steps.length}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12} sx={{ '& > div': { margin: '24px auto' } }}>\n          <AuthCard border={false}>\n            {activeStep === steps.length ? (\n              <>\n                <Alert sx={{ my: 3 }}>All steps completed - you can now Login</Alert>\n                <Button component={Link} to={isLoggedIn ? '/auth/login' : '/login'} color=\"primary\" variant=\"contained\" fullWidth>\n                  Login\n                </Button>\n              </>\n            ) : (\n              <>\n                <StepWrapper value={activeStep} index={0}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                      <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                          <Typography variant=\"h3\">Welcome to the Able Pro</Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <Typography>Sign up or login with your work email.</Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                          <AuthSocButton onClick={handleNext}>\n                            <img src={imgSms} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Continue with work email\n                          </AuthSocButton>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <AuthSocButton>\n                            <img src={imgFacebook} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Facebook\n                          </AuthSocButton>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <AuthSocButton>\n                            <img src={imgTwitter} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Twitter\n                          </AuthSocButton>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <AuthSocButton>\n                            <img src={imgGoogle} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Google\n                          </AuthSocButton>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </StepWrapper>\n                <StepWrapper value={activeStep} index={1}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h3\">Welcome to the Able Pro</Typography>\n                        <Typography>Sign up or login with your work email.</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={3}>\n                        <Stack spacing={1}>\n                          <InputLabel htmlFor=\"email-login\">Enter your work email to continue</InputLabel>\n                          <OutlinedInput id=\"email-login\" type=\"email\" name=\"email\" placeholder=\"Enter email address\" fullWidth />\n                        </Stack>\n                        <Stack direction=\"row\" spacing={1}>\n                          <Button color=\"secondary\" variant=\"outlined\" onClick={handleBack} fullWidth>\n                            Back\n                          </Button>\n                          <Button onClick={handleNext} variant=\"contained\" color=\"primary\" fullWidth>\n                            Continue\n                          </Button>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </StepWrapper>\n                <StepWrapper value={activeStep} index={2}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h3\">What’s your purpose for use Able</Typography>\n                        <Typography>Your setup experience will be streamlined accordingly</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid\n                        container\n                        spacing={2}\n                        sx={{\n                          '& .MuiFormLabel-root': {\n                            cursor: 'pointer',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            height: 180,\n                            width: '100%',\n                            border: '1px solid',\n                            bporderColor: 'divider',\n                            borderRadius: 1\n                          },\n                          '& .MuiRadio-root.Mui-checked + .MuiFormLabel-root': {\n                            boxShadow: `0 0 0 1px ${theme.palette.primary.main}, 0px 8px 24px rgba(27, 46, 94, 0.12)`,\n                            borderColor: theme.palette.primary.main,\n                            color: 'primary.main',\n                            bgcolor: 'primary.lighter'\n                          }\n                        }}\n                      >\n                        <Grid item sm={6}>\n                          <Radio\n                            id=\"radioPersonal\"\n                            checked={selectedValue === 'Personal'}\n                            onChange={handleChange}\n                            value=\"Personal\"\n                            name=\"radio-buttons\"\n                            inputProps={{ 'aria-label': 'A' }}\n                            sx={{ display: 'none' }}\n                          />\n                          <InputLabel htmlFor=\"radioPersonal\" sx={{ ml: '0 !im' }}>\n                            <User variant=\"Bulk\" size={48} />\n                            <Typography variant=\"h5\" sx={{ mt: 1 }}>\n                              Personal\n                            </Typography>\n                          </InputLabel>\n                        </Grid>\n                        <Grid item sm={6}>\n                          <Radio\n                            id=\"radioBusiness\"\n                            checked={selectedValue === 'Business'}\n                            onChange={handleChange}\n                            value=\"Business\"\n                            name=\"radio-buttons\"\n                            inputProps={{ 'aria-label': 'B' }}\n                            sx={{ display: 'none' }}\n                          />\n                          <InputLabel htmlFor=\"radioBusiness\">\n                            <Home3 variant=\"Bulk\" size={48} />\n                            <Typography variant=\"h5\" sx={{ mt: 1 }}>\n                              Business\n                            </Typography>\n                          </InputLabel>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack direction=\"row\" spacing={1}>\n                        <Button color=\"secondary\" variant=\"outlined\" onClick={handleBack} fullWidth>\n                          Back\n                        </Button>\n                        <Button onClick={handleNext} variant=\"contained\" color=\"primary\" fullWidth>\n                          Continue\n                        </Button>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </StepWrapper>\n                <StepWrapper value={activeStep} index={3}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h3\">Tell us About Yourself</Typography>\n                        <Typography>Tell us a bit about yourself</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid container spacing={3}>\n                        <Grid item sm={6}>\n                          <Stack spacing={1}>\n                            <InputLabel htmlFor=\"First-name\">First name</InputLabel>\n                            <OutlinedInput id=\"First-name\" type=\"text\" placeholder=\"First name\" fullWidth />\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={6}>\n                          <Stack spacing={1}>\n                            <InputLabel htmlFor=\"Last-name\">Last name</InputLabel>\n                            <OutlinedInput id=\"Last-name\" type=\"text\" placeholder=\"Last name\" fullWidth />\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12}>\n                          <Stack spacing={1}>\n                            <InputLabel htmlFor=\"email-login1\">Email id</InputLabel>\n                            <OutlinedInput id=\"email-login1\" type=\"email\" name=\"email\" placeholder=\"Email id\" fullWidth />\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12}>\n                          <Stack spacing={1}>\n                            <InputLabel htmlFor=\"Password\">Password</InputLabel>\n                            <OutlinedInput id=\"Password\" type=\"password\" placeholder=\"Password\" fullWidth />\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12}>\n                          <Stack spacing={1}>\n                            <InputLabel htmlFor=\"Confirm-Password\">Confirm Password</InputLabel>\n                            <OutlinedInput id=\"Confirm-Password\" type=\"password\" placeholder=\"Confirm Password\" fullWidth />\n                          </Stack>\n                        </Grid>\n                        <Grid item sm={12}>\n                          <Stack direction=\"row\" spacing={1}>\n                            <Button color=\"secondary\" variant=\"outlined\" onClick={handleBack} fullWidth>\n                              Back\n                            </Button>\n                            <Button onClick={handleNext} variant=\"contained\" color=\"primary\" fullWidth>\n                              Continue\n                            </Button>\n                          </Stack>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </StepWrapper>\n                <StepWrapper value={activeStep} index={4}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                      <Stack spacing={1}>\n                        <Typography variant=\"h3\">Please confirm your email id</Typography>\n                        <Typography>Lorem Ipsum is simply dummy text of the printing and typesetting industry of Lorem Ipsum.</Typography>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={3}>\n                        <OtpInput\n                          value={otp}\n                          onChange={(otp) => setOtp(otp)}\n                          numInputs={4}\n                          containerStyle={{ justifyContent: 'space-between' }}\n                          inputStyle={{\n                            width: '100%',\n                            margin: '8px',\n                            padding: '10px',\n                            border: '1px solid',\n                            borderColor: { borderColor },\n                            borderRadius: 4,\n                            ':hover': {\n                              borderColor: theme.palette.primary.main\n                            }\n                          }}\n                          focusStyle={{\n                            outline: 'none',\n                            boxShadow: theme.customShadows.primary,\n                            border: '1px solid ',\n                            borderColor: theme.palette.primary.main\n                          }}\n                        />\n                        <Stack direction=\"row\" spacing={1}>\n                          <Button color=\"secondary\" variant=\"outlined\" onClick={handleBack} fullWidth>\n                            Back\n                          </Button>\n                          <Button onClick={handleNext} variant=\"contained\" color=\"primary\" fullWidth>\n                            Continue\n                          </Button>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </StepWrapper>\n              </>\n            )}\n          </AuthCard>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography align=\"center\">\n              By signing up, you confirm to have read Able pro\n              <Typography component={Link} to={'#'} sx={{ textDecoration: 'none', px: 0.5 }} color=\"primary\">\n                Privacy Policy\n              </Typography>\n              and agree to the\n              <Typography component={Link} to={'#'} sx={{ textDecoration: 'none', pl: 0.5 }} color=\"primary\">\n                Terms of Service\n              </Typography>\n              .\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </AuthWrapper3>\n  );\n}\n\nStepWrapper.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":17031},"src/sections/components-overview/tabs/BasicTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| TABS - BASIC ||============================== //\n\nexport default function BasicTabs() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const basicTabCodeString = `// BasicTabs.tsx\n<Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n  <Tab\n    label=\"Tab1\"\n    icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n    iconPosition=\"end\"\n    {...a11yProps(0)}\n  />\n  <Tab label=\"Tab2\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(1)} />\n  <Tab label=\"Tab3\" {...a11yProps(2)} />\n</Tabs>\n<TabPanel value={value} index={0}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n    purus sem, sagittis eu mauris et, viverra lobortis urna.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={1}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={2}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>`;\n\n  return (\n    <MainCard codeString={basicTabCodeString}>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n            <Tab\n              label=\"Tab1\"\n              icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n              iconPosition=\"end\"\n              {...a11yProps(0)}\n            />\n            <Tab label=\"Tab2\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(1)} />\n            <Tab label=\"Tab3\" {...a11yProps(2)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={value} index={0}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n            purus sem, sagittis eu mauris et, viverra lobortis urna.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":4190},"src/themes/overrides/Switch.js":{"content":"function getSizeStyle(size) {\n  switch (size) {\n    case 'small':\n      return { width: 28, height: 16, base: 12, thumb: 10, trackRadius: 8 };\n    case 'large':\n      return { width: 60, height: 28, base: 32, thumb: 22, trackRadius: 24 };\n    case 'medium':\n    default:\n      return { width: 44, height: 22, base: 22, thumb: 16, trackRadius: 16 };\n  }\n}\n\nfunction switchStyle(theme, size) {\n  const sizes = getSizeStyle(size);\n\n  return {\n    width: sizes.width,\n    height: sizes.height,\n    '& .MuiSwitch-switchBase': {\n      padding: 3,\n      '&.Mui-checked': {\n        transform: `translateX(${sizes.base}px)`\n      }\n    },\n    '& .MuiSwitch-thumb': {\n      width: sizes.thumb,\n      height: sizes.thumb\n    },\n    '& .MuiSwitch-track': {\n      borderRadius: sizes.trackRadius\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - SWITCH ||============================== //\n\nexport default function Switch(theme) {\n  return {\n    MuiSwitch: {\n      styleOverrides: {\n        track: {\n          opacity: 1,\n          backgroundColor: theme.palette.secondary[400],\n          boxSizing: 'border-box'\n        },\n        thumb: {\n          borderRadius: '50%',\n          transition: theme.transitions.create(['width'], {\n            duration: 200\n          })\n        },\n        switchBase: {\n          '&.Mui-checked': {\n            color: '#fff',\n            '& + .MuiSwitch-track': {\n              opacity: 1\n            },\n            '&.Mui-disabled': {\n              color: theme.palette.background.paper\n            }\n          },\n          '&.Mui-disabled': {\n            color: theme.palette.background.paper,\n            '+.MuiSwitch-track': {\n              opacity: 0.3\n            }\n          }\n        },\n        root: {\n          color: theme.palette.text.primary,\n          padding: 0,\n          margin: 8,\n          display: 'flex',\n          '& ~ .MuiFormControlLabel-label': {\n            margin: 6\n          },\n          ...switchStyle(theme, 'medium')\n        },\n        sizeLarge: { ...switchStyle(theme, 'large') },\n        sizeSmall: {\n          ...switchStyle(theme, 'small')\n        }\n      }\n    }\n  };\n}\n","size_bytes":2140},"src/pages/auth/auth2/code-verification2.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\nimport AuthCodeVerification from 'sections/auth/auth-forms/AuthCodeVerification';\n\n// ================================|| CODE VERIFICATION ||================================ //\n\nexport default function CodeVerification() {\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h3\">Enter Verification Code</Typography>\n            <Typography color=\"secondary\">We send you on mail.</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>We`ve send you code on jone. ****@company.com</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthCodeVerification />\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":997},"src/sections/components-overview/lists/ScrollableList.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// third-party\nimport { FixedSizeList } from 'react-window';\n\n// ==============================|| SCROLLABLE - ITEMS ||============================== //\n\nfunction renderRow({ index, style }) {\n  return (\n    <ListItem style={style} key={index} disablePadding divider>\n      <ListItemButton>\n        <ListItemText primary={`Item ${index + 1}`} />\n      </ListItemButton>\n    </ListItem>\n  );\n}\n\n// ==============================|| LIST - SCROLLABLE ||============================== //\n\nexport default function ScrollableList() {\n  const scrollListCodeString = `<Box sx={{ width: '100%', height: 400, bgcolor: 'background.paper' }}>\n  <FixedSizeList height={400} width=\"100%\" itemSize={46} itemCount={200} overscanCount={5}>\n    <ListItem style={style} key={index} disablePadding divider>\n      <ListItemButton>\n        <ListItemText primary={'Item {index + 1}'} />\n      </ListItemButton>\n    </ListItem>\n  </FixedSizeList>\n</Box>`;\n\n  return (\n    <MainCard content={false} codeString={scrollListCodeString}>\n      <Box sx={{ width: '100%', height: 400, bgcolor: 'background.paper', '& .MuiListItemButton-root': { borderRadius: 0, my: 0 } }}>\n        <FixedSizeList height={400} width=\"100%\" itemSize={46} itemCount={200} overscanCount={5}>\n          {renderRow}\n        </FixedSizeList>\n      </Box>\n    </MainCard>\n  );\n}\n\nrenderRow.propTypes = { index: PropTypes.any, style: PropTypes.any };\n","size_bytes":1709},"src/components/@extended/progress/CircularWithLabel.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| PROGRESS - CIRCULAR LABEL ||============================== //\n\nexport default function CircularWithLabel({ value, ...others }) {\n  return (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      <CircularProgress variant=\"determinate\" value={value} {...others} />\n      <Box\n        sx={{\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n      >\n        <Typography variant=\"caption\" color=\"text.secondary\">{`${Math.round(value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nCircularWithLabel.propTypes = { value: PropTypes.any, others: PropTypes.any };\n","size_bytes":977},"src/sections/widget/data/MonthlyRevenue.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport { useTable } from 'react-table';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport makeData from 'data/react-table';\n\n// assets\nimport { ArrowDown, ArrowUp, Star1, Wallet3 } from 'iconsax-react';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data\n  });\n\n  return (\n    <Table {...getTableProps()}>\n      <TableHead>\n        {headerGroups.map((headerGroup, index) => (\n          <TableRow {...headerGroup.getHeaderGroupProps()} key={index}>\n            {headerGroup.headers.map((column, index) => (\n              <TableCell {...column.getHeaderProps([{ className: column.className }])} key={index}>\n                {column.render('Header')}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableHead>\n      <TableBody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <TableRow {...row.getRowProps()} key={i}>\n              {row.cells.map((cell, index) => (\n                <TableCell {...cell.getCellProps([{ className: cell.column.className }])} key={index}>\n                  {cell.render('Cell')}\n                </TableCell>\n              ))}\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n  );\n}\n\n// ==============================|| DATA - MONTHLY REVENUE ||============================== //\n\nexport default function MonthlyRevenue() {\n  const data = useMemo(() => makeData(5), []);\n\n  const icons = [Star1, ArrowDown, Wallet3, ArrowUp];\n\n  function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Customer',\n        accessor: 'fatherName',\n        Cell: ({ value }) => {\n          const Icons = icons[randomIntFromInterval(0, 3)];\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1.5}>\n              <Avatar variant=\"rounded\" color=\"secondary\" size=\"sm\">\n                <Icons />\n              </Avatar>\n              <Typography color=\"text.secondary\">{value}</Typography>\n            </Stack>\n          );\n        }\n      },\n      {\n        Header: 'Plan',\n        accessor: 'status',\n        Cell: ({ value }) => {\n          switch (value) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Team\" size=\"small\" variant=\"light\" sx={{ borderRadius: 1 }} />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Premium\" size=\"small\" variant=\"light\" sx={{ borderRadius: 1 }} />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Free\" size=\"small\" variant=\"light\" sx={{ borderRadius: 1 }} />;\n          }\n        }\n      },\n      {\n        Header: 'MRR',\n        accessor: 'progress',\n        className: 'cell-right',\n        Cell: ({ value }) => {\n          return (\n            <>\n              {value > 50 ? (\n                <Typography variant=\"subtitle1\">${value}</Typography>\n              ) : (\n                <Typography color=\"error\" variant=\"subtitle1\">\n                  -${value}\n                </Typography>\n              )}\n            </>\n          );\n        }\n      }\n    ], // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Stack sx={{ p: 3 }} spacing={3}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">Monthly Revenue</Typography>\n          <IconButton\n            color=\"secondary\"\n            id=\"wallet-button\"\n            aria-controls={open ? 'wallet-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >\n            <MoreIcon />\n          </IconButton>\n          <Menu\n            id=\"wallet-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          >\n            <ListItemButton onClick={handleClose}>Today</ListItemButton>\n            <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n            <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n          </Menu>\n        </Stack>\n        <Stack>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={0.75}>\n            <Typography variant=\"h5\">$746.5k</Typography>\n            <Typography variant=\"caption\" color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.25 }}>\n              +20.6\n              <ArrowUp size={12} />\n            </Typography>\n            <Typography></Typography>\n          </Stack>\n          <Typography color=\"text.secondary\">Past 30 days</Typography>\n        </Stack>\n      </Stack>\n      <ScrollX>\n        <ReactTable columns={columns} data={data} />\n      </ScrollX>\n    </MainCard>\n  );\n}\n\nMonthlyRevenue.propTypes = { value: PropTypes.array };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":6444},"src/sections/components-overview/notistack/ColorVariants.jsx":{"content":"// material-ul\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - COLOR VARIANTS ||============================== //\n\nexport default function ColorVariants() {\n  const NotiStackSnackbarCodeString = `<Button variant=\"contained\" onClick={() => enqueueSnackbar('This is default message.')}>\n  Default\n</Button>\n<Button variant=\"contained\" onClick={() => enqueueSnackbar('This is success message', { variant: 'success' })}>\n  success\n</Button>\n<Button variant=\"contained\" onClick={() => enqueueSnackbar('This is warning message', { variant: 'warning' })}>\n  Warning\n</Button>\n<Button variant=\"contained\" onClick={() => enqueueSnackbar('This is info message', { variant: 'info' })}>\n  Info\n</Button>\n<Button variant=\"contained\" onClick={() => enqueueSnackbar('This is error message', { variant: 'error' })}>\n  Error\n</Button>\n`;\n\n  return (\n    <MainCard title=\"Color Variants\" codeString={NotiStackSnackbarCodeString}>\n      <Grid container spacing={2}>\n        <Grid item>\n          <Button variant=\"contained\" onClick={() => enqueueSnackbar('This is default message.')}>\n            Default\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"success\" onClick={() => enqueueSnackbar('This is success message', { variant: 'success' })}>\n            Success\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"warning\" onClick={() => enqueueSnackbar('This is warning message', { variant: 'warning' })}>\n            Warning\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"info\" onClick={() => enqueueSnackbar('This is info message', { variant: 'info' })}>\n            Info\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"error\" onClick={() => enqueueSnackbar('This is info message', { variant: 'error' })}>\n            Error\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2202},"src/data/react-table.js":{"content":"// project-imports\nimport { Gender } from 'config';\nimport mockData, { range } from 'utils/mock-data';\n\nconst newPerson = (index) => {\n  const tempData = mockData(index);\n  const statusCode = tempData.number.status(0, 2);\n  let status;\n  switch (statusCode) {\n    case 2:\n      status = 'Complicated';\n      break;\n    case 1:\n      status = 'Relationship';\n      break;\n    case 0:\n    default:\n      status = 'Single';\n      break;\n  }\n\n  const orderStatusCode = tempData.number.status(0, 7);\n  let orderStatus;\n  switch (orderStatusCode) {\n    case 7:\n      orderStatus = 'Refunded';\n      break;\n    case 6:\n      orderStatus = 'Completed';\n      break;\n    case 5:\n      orderStatus = 'Delivered';\n      break;\n    case 4:\n      orderStatus = 'Dispatched';\n      break;\n    case 3:\n      orderStatus = 'Cancelled';\n      break;\n    case 2:\n      orderStatus = 'Shipped';\n      break;\n    case 1:\n      orderStatus = 'Processing';\n      break;\n    case 0:\n    default:\n      orderStatus = 'Pending';\n      break;\n  }\n\n  const firstName = tempData.name.first;\n  const lastName = tempData.name.last;\n\n  return {\n    id: index,\n    firstName,\n    lastName,\n    fullName: firstName + ' ' + lastName,\n    email: tempData.email,\n    age: tempData.number.age,\n    gender: tempData.number.status(0, 1) === 1 ? Gender.FEMALE : Gender.MALE,\n    role: tempData.role,\n    visits: tempData.number.amount,\n    progress: tempData.number.percentage,\n    status,\n    orderStatus,\n    contact: tempData.contact,\n    country: tempData.address.country,\n    address: tempData.address.full,\n    fatherName: tempData.name.full,\n    about: tempData.text.sentence,\n    avatar: tempData.number.status(1, 10),\n    skills: tempData.skill,\n    time: tempData.time\n  };\n};\n\n// ===========================|| TABLE - USERS ||=========================== //\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map((d, index) => ({\n      ...newPerson(index + 1),\n      subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n    }));\n  };\n\n  return makeDataLevel();\n}\n","size_bytes":2130},"src/themes/overrides/Dialog.js":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// ==============================|| OVERRIDES - DIALOG ||============================== //\n\nexport default function Dialog() {\n  return {\n    MuiDialog: {\n      styleOverrides: {\n        root: {\n          '& .MuiBackdrop-root': {\n            backgroundColor: alpha('#000', 0.5)\n          }\n        },\n        paper: {\n          backgroundImage: 'none'\n        }\n      }\n    }\n  };\n}\n","size_bytes":445},"src/sections/components-overview/autocomplete/SizesAutocomplete.jsx":{"content":"// material-ui\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - SIZES ||============================== //\n\nexport default function SizesAutocomplete() {\n  const sizeAutocompleteCodeString = `<Autocomplete\n  id=\"size-small-outlined\"\n  size=\"small\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={data[13]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>\n<Autocomplete\n  id=\"size-small-outlined\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={data[13]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>\n<Autocomplete\n  multiple\n  id=\"size-small-outlined-multi\"\n  size=\"small\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={[data[13], data[3]]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>\n<Autocomplete\n  multiple\n  id=\"size-default-outlined-multi\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={[data[13], data[3]]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Size Medium\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>\n<Autocomplete\n  multiple\n  size=\"medium\"\n  id=\"size-large-outlined-multi\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={[data[13], data[3]]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Size Large\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Sizes\" codeString={sizeAutocompleteCodeString}>\n      <Stack spacing={2}>\n        <Autocomplete\n          id=\"size-small-outlined\"\n          size=\"small\"\n          options={data}\n          getOptionLabel={(option) => option.label}\n          defaultValue={data[13]}\n          renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              p: 1\n            },\n            '& .MuiAutocomplete-tag': {\n              bgcolor: 'primary.lighter',\n              border: '1px solid',\n              borderColor: 'primary.light',\n              '& .MuiSvgIcon-root': {\n                color: 'primary.main',\n                '&:hover': {\n                  color: 'primary.dark'\n                }\n              }\n            }\n          }}\n        />\n        <Autocomplete\n          id=\"size-small-outlined\"\n          options={data}\n          getOptionLabel={(option) => option.label}\n          defaultValue={data[13]}\n          renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              p: 1\n            },\n            '& .MuiAutocomplete-tag': {\n              bgcolor: 'primary.lighter',\n              border: '1px solid',\n              borderColor: 'primary.light',\n              '& .MuiSvgIcon-root': {\n                color: 'primary.main',\n                '&:hover': {\n                  color: 'primary.dark'\n                }\n              }\n            }\n          }}\n        />\n        <Autocomplete\n          multiple\n          id=\"size-small-outlined-multi\"\n          size=\"small\"\n          options={data}\n          getOptionLabel={(option) => option.label}\n          defaultValue={[data[13], data[3]]}\n          renderInput={(params) => <TextField {...params} placeholder=\"Size Small\" />}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              p: 1\n            },\n            '& .MuiAutocomplete-tag': {\n              bgcolor: 'primary.lighter',\n              border: '1px solid',\n              borderColor: 'primary.light',\n              '& .MuiSvgIcon-root': {\n                color: 'primary.main',\n                '&:hover': {\n                  color: 'primary.dark'\n                }\n              }\n            }\n          }}\n        />\n        <Autocomplete\n          multiple\n          id=\"size-default-outlined-multi\"\n          options={data}\n          getOptionLabel={(option) => option.label}\n          defaultValue={[data[13], data[3]]}\n          renderInput={(params) => <TextField {...params} placeholder=\"Size Medium\" />}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              p: 1\n            },\n            '& .MuiAutocomplete-tag': {\n              bgcolor: 'primary.lighter',\n              border: '1px solid',\n              borderColor: 'primary.light',\n              '& .MuiSvgIcon-root': {\n                color: 'primary.main',\n                '&:hover': {\n                  color: 'primary.dark'\n                }\n              }\n            }\n          }}\n        />\n        <Autocomplete\n          multiple\n          size=\"medium\"\n          id=\"size-large-outlined-multi\"\n          options={data}\n          getOptionLabel={(option) => option.label}\n          defaultValue={[data[13], data[3]]}\n          renderInput={(params) => <TextField {...params} placeholder=\"Size Large\" />}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              p: 1\n            },\n            '& .MuiAutocomplete-tag': {\n              bgcolor: 'primary.lighter',\n              border: '1px solid',\n              borderColor: 'primary.light',\n              '& .MuiSvgIcon-root': {\n                color: 'primary.main',\n                '&:hover': {\n                  color: 'primary.dark'\n                }\n              }\n            }\n          }}\n        />\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":7236},"src/sections/apps/e-commerce/products/ProductFilterView.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ColorOptions from './ColorOptions';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nfunction getColor(color) {\n  return ColorOptions.filter((item) => item.value === color);\n}\n\n// ==============================|| PRODUCT - FILTER VIEW ||============================== //\n\nexport default function ProductFilterView({ filter, filterIsEqual, handelFilter, initialState }) {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('lg'));\n\n  return (\n    <>\n      {!filterIsEqual(initialState, filter) && (\n        <Stack spacing={2}>\n          <Typography variant=\"h5\">Active Filters</Typography>\n          {!(initialState.search === filter.search) && (\n            <Grid item>\n              <Stack direction=\"row\" alignItems=\"center\" sx={{ ml: '-10px' }}>\n                <Chip\n                  size={matchDownMD ? 'small' : undefined}\n                  label={filter.search}\n                  sx={{\n                    borderRadius: '4px',\n                    textTransform: 'capitalize',\n                    color: 'secondary.main',\n                    bgcolor: 'inherit',\n                    '& .MuiSvgIcon-root': { color: `grey` }\n                  }}\n                />\n                <IconButton\n                  color=\"secondary\"\n                  size=\"small\"\n                  sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                  onClick={() => handelFilter('search', '')}\n                >\n                  <Add style={{ transform: 'rotate(45deg)' }} />\n                </IconButton>\n              </Stack>\n            </Grid>\n          )}\n          {!(initialState.sort === filter.sort) && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Sort</Typography>\n                <Stack direction=\"row\" alignItems=\"center\" sx={{ ml: '-10px' }}>\n                  <Chip\n                    size={matchDownMD ? 'small' : undefined}\n                    label={filter.sort}\n                    sx={{\n                      borderRadius: '4px',\n                      textTransform: 'capitalize',\n                      color: 'secondary.main',\n                      bgcolor: 'inherit',\n                      '& .MuiSvgIcon-root': { color: `grey` }\n                    }}\n                  />\n                  <IconButton\n                    color=\"secondary\"\n                    size=\"small\"\n                    sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                    onClick={() => handelFilter('sort', initialState.sort)}\n                  >\n                    <Add style={{ transform: 'rotate(45deg)' }} />\n                  </IconButton>\n                </Stack>\n              </Stack>\n            </Grid>\n          )}\n          {!(JSON.stringify(initialState.gender) === JSON.stringify(filter.gender)) && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Gender</Typography>\n                <Grid container item sx={{ ml: '-10px' }}>\n                  {filter.gender.map((item, index) => (\n                    <Stack direction=\"row\" alignItems=\"center\" key={index}>\n                      <Chip\n                        size={matchDownMD ? 'small' : undefined}\n                        label={item}\n                        sx={{\n                          borderRadius: '4px',\n                          textTransform: 'capitalize',\n                          color: 'secondary.main',\n                          bgcolor: 'inherit',\n                          '& .MuiSvgIcon-root': { color: `grey` }\n                        }}\n                      />\n                      <IconButton\n                        color=\"secondary\"\n                        size=\"small\"\n                        sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                        onClick={() => handelFilter('gender', item)}\n                      >\n                        <Add style={{ transform: 'rotate(45deg)' }} />\n                      </IconButton>\n                    </Stack>\n                  ))}\n                </Grid>\n              </Stack>\n            </Grid>\n          )}\n          {!(JSON.stringify(initialState.categories) === JSON.stringify(filter.categories)) && filter.categories.length > 0 && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Categories</Typography>\n                <Grid container item sx={{ ml: '-10px' }}>\n                  {filter.categories.map((item, index) => (\n                    <Stack direction=\"row\" alignItems=\"center\" key={index}>\n                      <Chip\n                        size={matchDownMD ? 'small' : undefined}\n                        label={item}\n                        sx={{\n                          borderRadius: '4px',\n                          textTransform: 'capitalize',\n                          color: 'secondary.main',\n                          bgcolor: 'inherit',\n                          '& .MuiSvgIcon-root': { color: `grey` }\n                        }}\n                      />\n                      <IconButton\n                        color=\"secondary\"\n                        size=\"small\"\n                        sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                        onClick={() => handelFilter('categories', item)}\n                      >\n                        <Add style={{ transform: 'rotate(45deg)' }} />\n                      </IconButton>\n                    </Stack>\n                  ))}\n                </Grid>\n              </Stack>\n            </Grid>\n          )}\n          {!(JSON.stringify(initialState.colors) === JSON.stringify(filter.colors)) && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Colors</Typography>\n                <Grid container item sx={{ ml: '-10px' }}>\n                  {filter.colors.map((item, index) => {\n                    const colorsData = getColor(item);\n                    return (\n                      <Stack direction=\"row\" alignItems=\"center\" key={index}>\n                        <Chip\n                          size={matchDownMD ? 'small' : undefined}\n                          label={colorsData[0].label}\n                          sx={{\n                            borderRadius: '4px',\n                            textTransform: 'capitalize',\n                            color: 'secondary.main',\n                            bgcolor: 'inherit',\n                            '& .MuiSvgIcon-root': { color: `grey` }\n                          }}\n                        />\n                        <IconButton\n                          color=\"secondary\"\n                          size=\"small\"\n                          sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                          onClick={() => handelFilter('colors', item)}\n                        >\n                          <Add style={{ transform: 'rotate(45deg)' }} />\n                        </IconButton>\n                      </Stack>\n                    );\n                  })}\n                </Grid>\n              </Stack>\n            </Grid>\n          )}\n          {!(initialState.price === filter.price) && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Price</Typography>\n                <Grid item sx={{ ml: '-10px' }}>\n                  <Chip\n                    size={matchDownMD ? 'small' : undefined}\n                    label={filter.price}\n                    sx={{\n                      borderRadius: '4px',\n                      textTransform: 'capitalize',\n                      color: 'secondary.main',\n                      bgcolor: 'inherit',\n                      '& .MuiSvgIcon-root': { color: `grey` }\n                    }}\n                  />\n                </Grid>\n              </Stack>\n            </Grid>\n          )}\n          {!(initialState.rating === filter.rating) && (\n            <Grid item>\n              <Stack>\n                <Typography variant=\"subtitle1\">Rating</Typography>\n                <Grid item sx={{ ml: '-10px' }}>\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    <Chip\n                      size={matchDownMD ? 'small' : undefined}\n                      label={String(filter.rating)}\n                      sx={{\n                        borderRadius: '4px',\n                        textTransform: 'capitalize',\n                        color: 'secondary.main',\n                        bgcolor: 'inherit',\n                        '& .MuiSvgIcon-root': { color: `grey` }\n                      }}\n                    />\n                    <IconButton\n                      color=\"secondary\"\n                      size=\"small\"\n                      sx={{ '&:hover': { bgcolor: 'transparent' }, ml: -1.5 }}\n                      onClick={() => handelFilter('rating', '', 0)}\n                    >\n                      <Add style={{ transform: 'rotate(45deg)' }} />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n              </Stack>\n            </Grid>\n          )}\n          <Grid item>\n            <Button variant=\"text\" color=\"primary\" sx={{ ml: '-10px' }} onClick={() => handelFilter('reset', '')}>\n              Reset all filters\n            </Button>\n          </Grid>\n          <Grid item>\n            <Divider sx={{ ml: '-8%', mr: '-8%' }} />\n          </Grid>\n        </Stack>\n      )}\n    </>\n  );\n}\n\nProductFilterView.propTypes = {\n  filter: PropTypes.any,\n  filterIsEqual: PropTypes.func,\n  handelFilter: PropTypes.func,\n  initialState: PropTypes.any\n};\n","size_bytes":10127},"src/sections/forms/wizard/blog-validation-wizard/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport MultiLanguageTabs from 'components/forms/MultiLanguageTabs';\nimport GooglePreview from 'components/seo/GooglePreview';\nimport CharacterCounter from 'components/seo/CharacterCounter';\nimport ArticleImporter from 'components/blog/ArticleImporter';\nimport TemplateDownloader from 'components/blog/TemplateDownloader';\nimport { generateBlogUrl } from 'utils/url-helpers';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  label: yup.string().required('Label is required'),\n  titleImagePath: yup.string(),\n  titleImageAltTextEn: yup.string(),\n  titleImageAltTextRo: yup.string(),\n  titleImageAltTextRu: yup.string(),\n  blogTitleEn: yup.string().required('English title is required'),\n  blogTitleRo: yup.string().required('Romanian title is required'),\n  blogTitleRu: yup.string().required('Russian title is required'),\n  blogIntroEn: yup.string().required('English intro is required'),\n  blogIntroRo: yup.string().required('Romanian intro is required'),\n  blogIntroRu: yup.string().required('Russian intro is required'),\n  firstSubheadingTitleEn: yup.string(),\n  firstSubheadingTitleRo: yup.string(),\n  firstSubheadingTitleRu: yup.string(),\n  firstSubheadingTextEn: yup.string(),\n  firstSubheadingTextRo: yup.string(),\n  firstSubheadingTextRu: yup.string(),\n  secondSubheadingTitleEn: yup.string(),\n  secondSubheadingTitleRo: yup.string(),\n  secondSubheadingTitleRu: yup.string(),\n  secondSubheadingTextEn: yup.string(),\n  secondSubheadingTextRo: yup.string(),\n  secondSubheadingTextRu: yup.string(),\n  thirdSubheadingTitleEn: yup.string(),\n  thirdSubheadingTitleRo: yup.string(),\n  thirdSubheadingTitleRu: yup.string(),\n  thirdSubheadingTextEn: yup.string(),\n  thirdSubheadingTextRo: yup.string(),\n  thirdSubheadingTextRu: yup.string(),\n  conclusionEn: yup.string(),\n  conclusionRo: yup.string(),\n  conclusionRu: yup.string(),\n  metaDescriptionEn: yup.string().max(160, 'Meta description should be max 160 characters').required('English meta description is required'),\n  metaDescriptionRo: yup.string().max(160, 'Meta description should be max 160 characters').required('Romanian meta description is required'),\n  metaDescriptionRu: yup.string().max(160, 'Meta description should be max 160 characters').required('Russian meta description is required'),\n  metaKeywordsEn: yup.string().required('English keywords are required'),\n  metaKeywordsRo: yup.string().required('Romanian keywords are required'),\n  metaKeywordsRu: yup.string().required('Russian keywords are required')\n});\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const [currentLang, setCurrentLang] = useState('en');\n\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      publishingDate: data.publishingDate ?? new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' }),\n      label: data.label ?? '',\n      titleImagePath: data.titleImagePath ?? '',\n      titleImageAltTextEn: data.titleImageAltTextEn ?? '',\n      titleImageAltTextRo: data.titleImageAltTextRo ?? '',\n      titleImageAltTextRu: data.titleImageAltTextRu ?? '',\n      blogTitleEn: data.blogTitleEn ?? '',\n      blogTitleRo: data.blogTitleRo ?? '',\n      blogTitleRu: data.blogTitleRu ?? '',\n      blogIntroEn: data.blogIntroEn ?? '',\n      blogIntroRo: data.blogIntroRo ?? '',\n      blogIntroRu: data.blogIntroRu ?? '',\n      firstSubheadingTitleEn: data.firstSubheadingTitleEn ?? '',\n      firstSubheadingTitleRo: data.firstSubheadingTitleRo ?? '',\n      firstSubheadingTitleRu: data.firstSubheadingTitleRu ?? '',\n      firstSubheadingTextEn: data.firstSubheadingTextEn ?? '',\n      firstSubheadingTextRo: data.firstSubheadingTextRo ?? '',\n      firstSubheadingTextRu: data.firstSubheadingTextRu ?? '',\n      secondSubheadingTitleEn: data.secondSubheadingTitleEn ?? '',\n      secondSubheadingTitleRo: data.secondSubheadingTitleRo ?? '',\n      secondSubheadingTitleRu: data.secondSubheadingTitleRu ?? '',\n      secondSubheadingTextEn: data.secondSubheadingTextEn ?? '',\n      secondSubheadingTextRo: data.secondSubheadingTextRo ?? '',\n      secondSubheadingTextRu: data.secondSubheadingTextRu ?? '',\n      thirdSubheadingTitleEn: data.thirdSubheadingTitleEn ?? '',\n      thirdSubheadingTitleRo: data.thirdSubheadingTitleRo ?? '',\n      thirdSubheadingTitleRu: data.thirdSubheadingTitleRu ?? '',\n      thirdSubheadingTextEn: data.thirdSubheadingTextEn ?? '',\n      thirdSubheadingTextRo: data.thirdSubheadingTextRo ?? '',\n      thirdSubheadingTextRu: data.thirdSubheadingTextRu ?? '',\n      conclusionEn: data.conclusionEn ?? '',\n      conclusionRo: data.conclusionRo ?? '',\n      conclusionRu: data.conclusionRu ?? '',\n      metaDescriptionEn: data.metaDescriptionEn ?? '',\n      metaDescriptionRo: data.metaDescriptionRo ?? '',\n      metaDescriptionRu: data.metaDescriptionRu ?? '',\n      metaKeywordsEn: data.metaKeywordsEn ?? '',\n      metaKeywordsRo: data.metaKeywordsRo ?? '',\n      metaKeywordsRu: data.metaKeywordsRu ?? ''\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        ...values,\n        blogTitle: values.blogTitleEn,\n        metaDescription: values.metaDescriptionEn,\n        metaKeywords: values.metaKeywordsEn,\n        baseUrl: 'blogs'\n      });\n      handleNext();\n    }\n  });\n\n  // Auto-generate Blog URL from English title\n  useEffect(() => {\n    if (formik.values.blogTitleEn && !data.id) {\n      const blogUrl = generateBlogUrl(formik.values.blogTitleEn);\n      if (blogUrl) {\n        formik.setFieldValue('id', blogUrl);\n      }\n    }\n  }, [formik.values.blogTitleEn]);\n\n  const handleImport = (importedData) => {\n    Object.keys(importedData).forEach(key => {\n      if (formik.values.hasOwnProperty(key)) {\n        formik.setFieldValue(key, importedData[key]);\n      }\n    });\n  };\n\n  const handleLangChange = (event, newValue) => {\n    setCurrentLang(newValue);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Blog Article - Multi-Language Content\n      </Typography>\n\n      <Box sx={{ mb: 3, display: 'flex', gap: 2 }}>\n        <TemplateDownloader />\n        <ArticleImporter onImport={handleImport} />\n      </Box>\n\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>Global Fields</Typography>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Page URL (Auto-generated from EN title)</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Blog/your-article-title\"\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id ? formik.errors.id : 'Automatically generated as Blog/title-slug from English title'}\n                fullWidth\n                InputProps={{\n                  readOnly: !data.id, // Read-only for new articles, editable for existing\n                }}\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label</InputLabel>\n              <TextField\n                id=\"label\"\n                name=\"label\"\n                placeholder=\"Category or tag\"\n                value={formik.values.label}\n                onChange={formik.handleChange}\n                error={formik.touched.label && Boolean(formik.errors.label)}\n                helperText={formik.touched.label && formik.errors.label}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title Image Path</InputLabel>\n              <TextField\n                id=\"titleImagePath\"\n                name=\"titleImagePath\"\n                placeholder=\"/images/blog/article.jpg\"\n                value={formik.values.titleImagePath}\n                onChange={formik.handleChange}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>Multi-Language Content</Typography>\n            <MultiLanguageTabs value={currentLang} onChange={handleLangChange} />\n          </Grid>\n\n          {currentLang === 'en' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (EN)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextEn\"\n                    value={formik.values.titleImageAltTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (EN) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleEn\"\n                    multiline\n                    value={formik.values.blogTitleEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleEn && Boolean(formik.errors.blogTitleEn)}\n                    helperText={formik.touched.blogTitleEn && formik.errors.blogTitleEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (EN) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroEn && Boolean(formik.errors.blogIntroEn)}\n                    helperText={formik.touched.blogIntroEn && formik.errors.blogIntroEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleEn\"\n                    value={formik.values.firstSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleEn\"\n                    value={formik.values.secondSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleEn\"\n                    value={formik.values.thirdSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (EN)</InputLabel>\n                  <TextField\n                    name=\"conclusionEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (EN) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionEn\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionEn && Boolean(formik.errors.metaDescriptionEn)}\n                    helperText={formik.touched.metaDescriptionEn && formik.errors.metaDescriptionEn}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionEn.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (EN) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsEn\"\n                    value={formik.values.metaKeywordsEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsEn && Boolean(formik.errors.metaKeywordsEn)}\n                    helperText={formik.touched.metaKeywordsEn && formik.errors.metaKeywordsEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleEn}\n                  description={formik.values.metaDescriptionEn}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          {currentLang === 'ro' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (RO)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextRo\"\n                    value={formik.values.titleImageAltTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (RO) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleRo\"\n                    multiline\n                    value={formik.values.blogTitleRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleRo && Boolean(formik.errors.blogTitleRo)}\n                    helperText={formik.touched.blogTitleRo && formik.errors.blogTitleRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (RO) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroRo && Boolean(formik.errors.blogIntroRo)}\n                    helperText={formik.touched.blogIntroRo && formik.errors.blogIntroRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleRo\"\n                    value={formik.values.firstSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleRo\"\n                    value={formik.values.secondSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleRo\"\n                    value={formik.values.thirdSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (RO)</InputLabel>\n                  <TextField\n                    name=\"conclusionRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (RO) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionRo\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionRo && Boolean(formik.errors.metaDescriptionRo)}\n                    helperText={formik.touched.metaDescriptionRo && formik.errors.metaDescriptionRo}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionRo.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (RO) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsRo\"\n                    value={formik.values.metaKeywordsRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsRo && Boolean(formik.errors.metaKeywordsRo)}\n                    helperText={formik.touched.metaKeywordsRo && formik.errors.metaKeywordsRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleRo}\n                  description={formik.values.metaDescriptionRo}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          {currentLang === 'ru' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (RU)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextRu\"\n                    value={formik.values.titleImageAltTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (RU) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleRu\"\n                    multiline\n                    value={formik.values.blogTitleRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleRu && Boolean(formik.errors.blogTitleRu)}\n                    helperText={formik.touched.blogTitleRu && formik.errors.blogTitleRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (RU) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroRu && Boolean(formik.errors.blogIntroRu)}\n                    helperText={formik.touched.blogIntroRu && formik.errors.blogIntroRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleRu\"\n                    value={formik.values.firstSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleRu\"\n                    value={formik.values.secondSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleRu\"\n                    value={formik.values.thirdSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (RU)</InputLabel>\n                  <TextField\n                    name=\"conclusionRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (RU) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionRu\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionRu && Boolean(formik.errors.metaDescriptionRu)}\n                    helperText={formik.touched.metaDescriptionRu && formik.errors.metaDescriptionRu}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionRu.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (RU) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsRu\"\n                    value={formik.values.metaKeywordsRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsRu && Boolean(formik.errors.metaKeywordsRu)}\n                    helperText={formik.touched.metaKeywordsRu && formik.errors.metaKeywordsRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleRu}\n                  description={formik.values.metaDescriptionRu}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":30102},"src/sections/tables/react-table/ExpandingDetails.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment, useMemo } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { flexRender, useReactTable, getExpandedRowModel, getCoreRowModel } from '@tanstack/react-table';\n\n// project import\nimport ExpandingUserDetail from './ExpandingUserDetail';\n\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// assets\nimport { ArrowDown2, ArrowRight2, MinusCirlce } from 'iconsax-react';\n\nfunction ReactTable({ columns, data }) {\n  const theme = useTheme();\n\n  const table = useReactTable({\n    data,\n    columns,\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel()\n  });\n\n  const backColor = alpha(theme.palette.primary.lighter, 0.1);\n\n  let headers = [];\n  table.getAllColumns().map(\n    (columns) =>\n      // @ts-ignore\n      columns.columnDef.accessorKey &&\n      headers.push({\n        label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n        // @ts-ignore\n        key: columns.columnDef.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      title=\"Expanding User Details\"\n      content={false}\n      secondary={<CSVExport {...{ data, headers, filename: 'expanding-details.csv' }} />}\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: '58px' } }}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <Fragment key={row.id}>\n                  <TableRow>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                  {row.getIsExpanded() && (\n                    <TableRow sx={{ bgcolor: backColor, '&:hover': { bgcolor: `${backColor} !important` } }}>\n                      <TableCell colSpan={row.getVisibleCells().length}>\n                        <ExpandingUserDetail data={row.original} />\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - EXPANDING USER DETAILS ||============================== //\n\nexport default function ExpandingDetails() {\n  const data = makeData(10);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'expander',\n        header: () => null,\n        cell: ({ row }) => {\n          return row.getCanExpand() ? (\n            <IconButton color={row.getIsExpanded() ? 'primary' : 'secondary'} onClick={row.getToggleExpandedHandler()} size=\"small\">\n              {row.getIsExpanded() ? <ArrowDown2 size=\"32\" variant=\"Outline\" /> : <ArrowRight2 size=\"32\" variant=\"Outline\" />}\n            </IconButton>\n          ) : (\n            <IconButton color=\"secondary\" size=\"small\" disabled>\n              <MinusCirlce />\n            </IconButton>\n          );\n        }\n      },\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ columns, data }} />;\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5765},"src/themes/theme/theme1.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME1 ||============================== //\n\nexport default function Theme1(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#D6E4FF', '#D6E4FF', '#ADC8FF', '#84A9FF', '#6690FF', '#3366FF', '#254EDB', '#1939B7', '#102693', '#102693'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FFE7D3', '#FF805D', '#FF4528', '#DB271D', '#930C1A'];\n  let warningColors = ['#FFF6D0', '#FFCF4E', '#FFB814', '#DB970E', '#935B06'];\n  let infoColors = ['#DCF0FF', '#7EB9FF', '#549BFF', '#3D78DB', '#1A3D93'];\n  let successColors = ['#EAFCD4', '#8AE65B', '#58D62A', '#3DB81E', '#137C0D'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1c2134', '#1f294d', '#243462', '#273e83', '#2c4db0', '#305bdd', '#567fe9', '#80a4f4', '#a9c5f8', '#d2e2fb'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#341d1b', '#b03725', '#dd3f27', '#e9664d', '#fbd6c9'];\n    warningColors = ['#342a1a', '#83631a', '#dda116', '#e9ba3a', '#fbefb5'];\n    infoColors = ['#202734', '#416fb0', '#4c88dd', '#74a8e9', '#ecf4fb'];\n    successColors = ['#1f2e1c', '#449626', '#4fba28', '#74cf4d', '#e3fbd2'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2912},"src/pages/components-overview/radio.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ==============================|| COMPONENTS - RADIO ||============================== //\n\nexport default function ComponentRadio() {\n  const basicRadioCodeString = `<FormControl component=\"fieldset\">\n  <RadioGroup aria-label=\"gender\" defaultValue=\"female\" name=\"radio-buttons-group\" row>\n    <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n    <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n    <FormControlLabel value=\"other\" control={<Radio disabled />} label=\"Other\" />\n  </RadioGroup>\n</FormControl>`;\n\n  const sizeRadioCodeString = `<FormControl component=\"fieldset\">\n  <RadioGroup aria-label=\"size\" defaultValue=\"small\" name=\"radio-buttons-group\" row>\n    <FormControlLabel value=\"small\" control={<Radio />} label=\"Default\" />\n    <FormControlLabel value=\"medium\" control={<Radio className=\"size-medium\" />} label=\"Medium\" />\n    <FormControlLabel value=\"large\" control={<Radio className=\"size-large\" />} label=\"Large\" />\n  </RadioGroup>\n</FormControl>`;\n\n  const colorRadioCodeString = `<FormControl component=\"fieldset\">\n  <RadioGroup aria-label=\"size\" defaultValue=\"success\" name=\"radio-buttons-group\" row>\n    <FormControlLabel value=\"primary\" control={<Radio />} label=\"Primary\" />\n    <FormControlLabel value=\"secondary\" control={<Radio color=\"secondary\" />} label=\"Secondary\" />\n    <FormControlLabel value=\"success\" control={<Radio color=\"success\" />} label=\"Success\" />\n    <FormControlLabel value=\"warning\" control={<Radio color=\"warning\" />} label=\"Warning\" />\n    <FormControlLabel value=\"info\" control={<Radio color=\"info\" />} label=\"Info\" />\n    <FormControlLabel value=\"error\" control={<Radio color=\"error\" />} label=\"Error\" />\n  </RadioGroup>\n</FormControl>`;\n\n  const labelRadioCodeString = `<FormControl component=\"fieldset\">\n  <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n    <FormControlLabel value=\"top\" control={<Radio />} label=\"Top\" labelPlacement=\"top\" />\n    <FormControlLabel value=\"start\" control={<Radio />} label=\"Start\" labelPlacement=\"start\" sx={{ mr: 1 }} />\n    <FormControlLabel value=\"bottom\" control={<Radio />} label=\"Bottom\" labelPlacement=\"bottom\" />\n    <FormControlLabel value=\"end\" control={<Radio />} label=\"End\" sx={{ ml: 1 }} />\n  </RadioGroup>\n</FormControl>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Radio\"\n        caption=\"Radio buttons allow the user to select one option from a set.\"\n        directory=\"src/pages/components-overview/radio\"\n        link=\"https://mui.com/material-ui/react-radio-button/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicRadioCodeString}>\n                <FormControl>\n                  <RadioGroup row aria-labelledby=\"gender\" name=\"gender\">\n                    <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\n                    <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n                    <FormControlLabel value=\"other\" control={<Radio disabled />} label=\"Other\" />\n                  </RadioGroup>\n                </FormControl>\n              </MainCard>\n              <MainCard title=\"Size\" codeString={sizeRadioCodeString}>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup aria-label=\"size\" defaultValue=\"small\" name=\"size\" row>\n                    <FormControlLabel value=\"small\" control={<Radio className=\"size-small\" />} label=\"Default\" />\n                    <FormControlLabel value=\"medium\" control={<Radio />} label=\"Medium\" />\n                    <FormControlLabel value=\"large\" control={<Radio className=\"size-large\" />} label=\"Large\" />\n                  </RadioGroup>\n                </FormControl>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Colors\" codeString={colorRadioCodeString}>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup aria-label=\"size\" defaultValue=\"success\" name=\"colors\" row>\n                    <FormControlLabel value=\"primary\" control={<Radio />} label=\"Primary\" />\n                    <FormControlLabel value=\"secondary\" control={<Radio color=\"secondary\" />} label=\"Secondary\" />\n                    <FormControlLabel value=\"success\" control={<Radio color=\"success\" />} label=\"Success\" />\n                    <FormControlLabel value=\"warning\" control={<Radio color=\"warning\" />} label=\"Warning\" />\n                    <FormControlLabel value=\"info\" control={<Radio color=\"info\" />} label=\"Info\" />\n                    <FormControlLabel value=\"error\" control={<Radio color=\"error\" />} label=\"Error\" />\n                  </RadioGroup>\n                </FormControl>\n              </MainCard>\n              <MainCard title=\"Label Placement\" codeString={labelRadioCodeString}>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                    <FormControlLabel value=\"top\" control={<Radio />} label=\"Top\" labelPlacement=\"top\" />\n                    <FormControlLabel value=\"start\" control={<Radio />} label=\"Start\" labelPlacement=\"start\" sx={{ mr: 1 }} />\n                    <FormControlLabel value=\"bottom\" control={<Radio />} label=\"Bottom\" labelPlacement=\"bottom\" />\n                    <FormControlLabel value=\"end\" control={<Radio />} label=\"End\" sx={{ ml: 1 }} />\n                  </RadioGroup>\n                </FormControl>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":6385},"src/sections/components-overview/notistack/CustomComponent.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, forwardRef, useCallback } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport Collapse from '@mui/material/Collapse';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport CardActions from '@mui/material/CardActions';\n\n// third-party\nimport { enqueueSnackbar, useSnackbar, SnackbarContent } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Add, ArrowDown2, TickCircle } from 'iconsax-react';\n\nconst SnackbarBox = styled(SnackbarContent)({\n  '@media (min-width:600px)': {\n    minWidth: '344px !important'\n  }\n});\n\n// ==============================|| NOTISTACK - CUSTOM ||============================== //\n\nfunction CustomNotistackExtended({ id, message }, ref) {\n  const { closeSnackbar } = useSnackbar();\n  const [expanded, setExpanded] = useState(false);\n\n  const handleExpandClick = useCallback(() => {\n    setExpanded((prevState) => !prevState);\n  }, []);\n\n  const handleDismiss = useCallback(() => {\n    closeSnackbar(id);\n  }, [id, closeSnackbar]);\n\n  return (\n    <SnackbarBox ref={ref}>\n      <Card sx={{ bgcolor: 'warning.light', width: '100%' }}>\n        <CardActions sx={{ padding: '8px 8px 8px 16px', justifyContent: 'space-between' }}>\n          <Typography variant=\"subtitle2\">{message}</Typography>\n          <Box sx={{ marginLeft: 'auto' }}>\n            <IconButton\n              aria-label=\"Show more\"\n              sx={{ p: 1, transition: 'all .2s', transform: expanded ? 'rotate(180deg)' : 'rotate(0deg)' }}\n              onClick={handleExpandClick}\n            >\n              <ArrowDown2 />\n            </IconButton>\n            <IconButton sx={{ p: 1, transition: 'all .2s' }} onClick={handleDismiss}>\n              <Add style={{ transform: 'rotate(45deg)' }} />\n            </IconButton>\n          </Box>\n        </CardActions>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Paper sx={{ padding: 2, borderTopLeftRadius: 0, borderTopRightRadius: 0, bgcolor: 'warning.lighter' }}>\n            <Typography gutterBottom>PDF ready</Typography>\n            <Button\n              size=\"small\"\n              startIcon={<TickCircle variant=\"Bold\" style={{ fontSize: 16, marginTop: -2 }} />}\n              sx={{ '&:hover': { bgcolor: 'transparent' } }}\n            >\n              Download now\n            </Button>\n          </Paper>\n        </Collapse>\n      </Card>\n    </SnackbarBox>\n  );\n}\n\nconst CustomNotistack = forwardRef(CustomNotistackExtended);\n\n// ==============================|| NOTISTACK - CUSTOM STYLE ||============================== //\n\nexport default function CustomComponent() {\n  const NotistackCustomCodeString = `<Button\n  variant=\"outlined\"\n  fullWidth\n  sx={{ marginBlockStart: 2 }}\n  onClick={() => {\n    // third party\n    enqueueSnackbar(\"You're report is ready\", {\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      content: (key: SnackbarKey, message: SnackbarMessage) => <CustomNotistack id={key} message={message} />\n    });\n  }}\n>\n  Show snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"Custom Component\" codeString={NotistackCustomCodeString}>\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        sx={{ marginBlockStart: 2 }}\n        onClick={() => {\n          enqueueSnackbar(\"You're report is ready\", {\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            content: (key, message) => <CustomNotistack id={key} message={message} />\n          });\n        }}\n      >\n        Show snackbar\n      </Button>\n    </MainCard>\n  );\n}\n\nCustomNotistackExtended.propTypes = { id: PropTypes.any, message: PropTypes.any };\n","size_bytes":3969},"src/sections/widget/data/AddTask.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { Add, Link1, Task } from 'iconsax-react';\n\n// =========================|| DATA WIDGET - ADD NEW TASK ||========================= //\n\nexport default function AddTask() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1} sx={{ mb: 2 }}>\n        <Typography variant=\"h5\">Add new task</Typography>\n        <IconButton\n          color=\"secondary\"\n          id=\"wallet-button\"\n          aria-controls={open ? 'wallet-menu' : undefined}\n          aria-haspopup=\"true\"\n          aria-expanded={open ? 'true' : undefined}\n          onClick={handleClick}\n        >\n          <MoreIcon />\n        </IconButton>\n        <Menu\n          id=\"wallet-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <ListItemButton onClick={handleClose}>Today</ListItemButton>\n          <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n          <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n        </Menu>\n      </Stack>\n      <Grid container spacing={1.5}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <Avatar color=\"success\" variant=\"rounded\">\n              <Task />\n            </Avatar>\n            <Typography variant=\"h5\">New Task</Typography>\n            <Chip label=\"20\" size=\"small\" />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n              <Typography>Tasks done</Typography>\n              <Typography>42%</Typography>\n            </Stack>\n            <LinearProgress variant=\"determinate\" value={42} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            <ListItemButton>\n              <ListItemIcon>\n                <Dot color=\"warning\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Introduction for client\" />\n              <Chip\n                label={\n                  <Typography sx={{ display: 'flex', alignItems: 'center', gap: 0.5, '& svg': { width: 12, height: 12 } }}>\n                    <Link1 />2\n                  </Typography>\n                }\n                size=\"small\"\n                sx={{ borderRadius: 1 }}\n              />\n            </ListItemButton>\n            <ListItemButton>\n              <ListItemIcon>\n                <Dot />\n              </ListItemIcon>\n              <ListItemText primary=\"Creating wireframes\" />\n              <Chip\n                label={\n                  <Typography sx={{ display: 'flex', alignItems: 'center', gap: 0.5, '& svg': { width: 12, height: 12 } }}>\n                    <Link1 />8\n                  </Typography>\n                }\n                size=\"small\"\n                sx={{ borderRadius: 1 }}\n              />\n            </ListItemButton>\n          </List>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"contained\" startIcon={<Add />}>\n            Add task\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4463},"src/themes/overrides/InputLabel.js":{"content":"// ==============================|| OVERRIDES - INPUT LABEL ||============================== //\n\nexport default function InputLabel(theme) {\n  return {\n    MuiInputLabel: {\n      styleOverrides: {\n        root: {\n          color: theme.palette.secondary.main\n        },\n        outlined: {\n          lineHeight: '0.8em',\n          '&.MuiInputLabel-sizeSmall': {\n            lineHeight: '1em'\n          },\n          '&.MuiInputLabel-shrink': {\n            background: theme.palette.background.paper,\n            padding: '0 8px',\n            marginLeft: -6,\n            lineHeight: '1.4375em'\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":635},"src/pages/components-overview/switch.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Switch from '@mui/material/Switch';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport CustomizedSwitches from 'sections/components-overview/switch/CustomizedSwitches';\n\n// ==============================|| COMPONENTS - SWITCH ||============================== //\n\nexport default function ComponentSwitch() {\n  const basicSwitchCodeString = `<Switch defaultChecked />\n<Switch />\n<Switch defaultChecked disabled />\n<Switch disabled />`;\n\n  const colorSwitchCodeString = `<Switch defaultChecked />\n<Switch defaultChecked color=\"secondary\" />\n<Switch defaultChecked color=\"success\" />\n<Switch defaultChecked color=\"warning\" />\n<Switch defaultChecked color=\"info\" />\n<Switch defaultChecked color=\"error\" />`;\n\n  const sizeSwitchCodeString = `<Switch defaultChecked size=\"small\" />\n<Switch defaultChecked />\n<Switch defaultChecked size=\"large\" />`;\n\n  const groupSwitchCodeString = `<FormControl component=\"fieldset\">\n  <FormGroup aria-label=\"position\" row>\n    <FormControlLabel control={<Switch defaultChecked />} label=\"Primary\" labelPlacement=\"end\" />\n    <FormControlLabel control={<Switch defaultChecked disabled />} label=\"Disabled\" />\n    <FormControlLabel control={<Switch defaultChecked color=\"secondary\" />} label=\"Secondary\" />\n  </FormGroup>\n</FormControl>`;\n\n  const labelSwitchCodeString = `<FormControl component=\"fieldset\">\n  <FormGroup aria-label=\"position\" row sx={{ justifyContent: 'space-between' }}>\n    <FormControlLabel value=\"top\" control={<Switch color=\"primary\" />} label=\"Top\" labelPlacement=\"top\" />\n    <FormControlLabel\n      value=\"start\"\n      control={<Switch color=\"primary\" />}\n      label=\"Start\"\n      labelPlacement=\"start\"\n      sx={{ mr: 1 }}\n    />\n    <FormControlLabel value=\"bottom\" control={<Switch color=\"primary\" />} label=\"Bottom\" labelPlacement=\"bottom\" />\n\n    <FormControlLabel value=\"end\" control={<Switch color=\"primary\" />} label=\"End\" labelPlacement=\"end\" sx={{ ml: 1 }} />\n  </FormGroup>\n</FormControl>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Switch\"\n        caption=\"Switches toggle the state of a single setting on or off.\"\n        directory=\"src/pages/components-overview/switch\"\n        link=\"https://mui.com/material-ui/react-switch/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeHighlight codeString={basicSwitchCodeString}>\n              <Grid container spacing={0.5}>\n                <Grid item>\n                  <Switch defaultChecked />\n                </Grid>\n                <Grid item>\n                  <Switch />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked disabled />\n                </Grid>\n                <Grid item>\n                  <Switch disabled />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Color\" codeString={colorSwitchCodeString}>\n              <Grid container spacing={0.5}>\n                <Grid item>\n                  <Switch defaultChecked />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked color=\"secondary\" />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked color=\"success\" />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked color=\"warning\" />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked color=\"info\" />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked color=\"error\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Sizes\" codeString={sizeSwitchCodeString}>\n              <Grid container spacing={0.5} alignItems=\"center\">\n                <Grid item>\n                  <Switch defaultChecked size=\"small\" />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked />\n                </Grid>\n                <Grid item>\n                  <Switch defaultChecked size=\"large\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"With Form Group\" codeString={groupSwitchCodeString}>\n              <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                  <FormControlLabel control={<Switch defaultChecked />} label=\"Primary\" labelPlacement=\"end\" />\n                  <FormControlLabel control={<Switch defaultChecked disabled />} label=\"Disabled\" />\n                  <FormControlLabel control={<Switch defaultChecked color=\"secondary\" />} label=\"Secondary\" />\n                </FormGroup>\n              </FormControl>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Label Placement\" codeString={labelSwitchCodeString}>\n              <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row sx={{ justifyContent: 'space-between' }}>\n                  <FormControlLabel value=\"top\" control={<Switch color=\"primary\" />} label=\"Top\" labelPlacement=\"top\" />\n                  <FormControlLabel\n                    value=\"start\"\n                    control={<Switch color=\"primary\" />}\n                    label=\"Start\"\n                    labelPlacement=\"start\"\n                    sx={{ mr: 1 }}\n                  />\n                  <FormControlLabel value=\"bottom\" control={<Switch color=\"primary\" />} label=\"Bottom\" labelPlacement=\"bottom\" />\n\n                  <FormControlLabel value=\"end\" control={<Switch color=\"primary\" />} label=\"End\" labelPlacement=\"end\" sx={{ ml: 1 }} />\n                </FormGroup>\n              </FormControl>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <CustomizedSwitches />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":6612},"src/components/cards/invoice/InvoiceChart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| INVOICE - CHART ||============================== //\n\nexport default function InvoiceChart({ color, data }) {\n  const theme = useTheme();\n  const downMD = useMediaQuery(theme.breakpoints.down('md'));\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      height: 100,\n      type: 'area',\n      toolbar: {\n        show: false\n      },\n      sparkline: {\n        enabled: true\n      }\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 1,\n        type: 'vertical',\n        inverseColors: false,\n        opacityFrom: 0.5,\n        opacityTo: 0\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 0\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    },\n    stroke: {\n      width: 1,\n      curve: 'smooth'\n    },\n    grid: {\n      show: false\n    },\n    yaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      }\n    },\n    tooltip: {\n      x: {\n        show: false\n      },\n      y: {\n        formatter(val) {\n          return `$ ${val}`;\n        }\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      chart: {\n        ...prevState.chart,\n        offsetX: downMD ? -2 : 8\n      },\n      colors: [color.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme, color, downMD]);\n\n  const [series] = useState([\n    {\n      name: 'Sales',\n      data: data\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={80} />;\n}\n\nInvoiceChart.propTypes = { color: PropTypes.any, data: PropTypes.array };\n","size_bytes":2500},"src/sections/maps/viewport-animation/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\n// ==============================|| VIEWPORT ANIMATION - CONTROL ||============================== //\n\nfunction ControlPanel({ data, selectedCity, onSelectCity }) {\n  return (\n    <ControlPanelStyled>\n      {data.map((city) => (\n        <RadioGroup key={city.city} value={selectedCity} onChange={(event) => onSelectCity(event, city)}>\n          <FormControlLabel value={city.city} label={city.city} control={<Radio size=\"small\" />} />\n        </RadioGroup>\n      ))}\n    </ControlPanelStyled>\n  );\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = { data: PropTypes.array, selectedCity: PropTypes.string, onSelectCity: PropTypes.func };\n","size_bytes":987},"src/pages/auth/auth1/reset-password.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AuthWrapper from 'sections/auth/AuthWrapper';\nimport AuthResetPassword from 'sections/auth/auth-forms/AuthResetPassword';\n\n// ================================|| RESET PASSWORD ||================================ //\n\nexport default function ResetPassword() {\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack sx={{ mb: { xs: -0.5, sm: 0.5 } }} spacing={1}>\n            <Typography variant=\"h3\">Reset Password</Typography>\n            <Typography color=\"secondary\">Please choose your new password</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthResetPassword />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":890},"src/layout/Dashboard/Footer.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\n\n// ==============================|| MAIN LAYOUT - FOOTER ||============================== //\n\nexport default function Footer() {\n  return (\n    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ p: '24px 16px 0px', mt: 'auto' }}>\n      <Stack spacing={1.5} direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Link\n          component={RouterLink}\n          to=\"https://phoenixcoded.gitbook.io/able-pro/v/react/\"\n          target=\"_blank\"\n          variant=\"caption\"\n          color=\"text.primary\"\n        >\n          Documentation\n        </Link>\n      </Stack>\n    </Stack>\n  );\n}\n","size_bytes":788},"src/pages/contact-us.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\n\n// project imports\nimport ContactForm from 'sections/extra-pages/contact/ContactForm';\nimport ContactHeader from 'sections/extra-pages/contact/ContactHeader';\nimport ContactEmail from 'sections/extra-pages/contact/ContactEmail';\n\n// ==============================|| CONTACT US - MAIN ||============================== //\n\nexport default function contactUS() {\n  return (\n    <Grid container spacing={12} justifyContent=\"center\" alignItems=\"center\" sx={{ mb: 12 }}>\n      <Grid item xs={12} md={12}>\n        <ContactHeader />\n      </Grid>\n      <Grid item xs={12} sm={10} lg={9}>\n        <Container maxWidth=\"lg\" sx={{ px: { xs: 0, sm: 2 } }}>\n          <ContactForm />\n        </Container>\n      </Grid>\n      <Grid item xs={12} md={12}>\n        <ContactEmail />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":900},"src/api/customer.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// utils\nimport { fetcher } from 'utils/axios';\n\nconst initialState = {\n  modal: false\n};\n\nexport const endpoints = {\n  key: 'api/customer',\n  list: '/list', // server URL\n  modal: '/modal', // server URL\n  insert: '/insert', // server URL\n  update: '/update', // server URL\n  delete: '/delete' // server URL\n};\n\nexport function useGetCustomer() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      customers: data?.customers,\n      customersLoading: isLoading,\n      customersError: error,\n      customersValidating: isValidating,\n      customersEmpty: !isLoading && !data?.customers?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function insertCustomer(newCustomer) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentCustomer) => {\n      newCustomer.id = currentCustomer.customers.length + 1;\n      const addedCustomer = [...currentCustomer.customers, newCustomer];\n\n      return {\n        ...currentCustomer,\n        customers: addedCustomer\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newCustomer };\n  //   await axios.post(endpoints.key + endpoints.insert, data);\n}\n\nexport async function updateCustomer(customerId, updatedCustomer) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentCustomer) => {\n      const newCustomer = currentCustomer.customers.map((customer) =>\n        customer.id === customerId ? { ...customer, ...updatedCustomer } : customer\n      );\n\n      return {\n        ...currentCustomer,\n        customers: newCustomer\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { list: updatedCustomer };\n  //   await axios.post(endpoints.key + endpoints.update, data);\n}\n\nexport async function deleteCustomer(customerId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentCustomer) => {\n      const nonDeletedCustomer = currentCustomer.customers.filter((customer) => customer.id !== customerId);\n\n      return {\n        ...currentCustomer,\n        customers: nonDeletedCustomer\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { customerId };\n  //   await axios.post(endpoints.key + endpoints.delete, data);\n}\n\nexport function useGetCustomerMaster() {\n  const { data, isLoading } = useSWR(endpoints.key + endpoints.modal, () => initialState, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      customerMaster: data,\n      customerMasterLoading: isLoading\n    }),\n    [data, isLoading]\n  );\n\n  return memoizedValue;\n}\n\nexport function handlerCustomerDialog(modal) {\n  // to update local state based on key\n\n  mutate(\n    endpoints.key + endpoints.modal,\n    (currentCustomermaster) => {\n      return { ...currentCustomermaster, modal };\n    },\n    false\n  );\n}\n","size_bytes":3475},"src/themes/overrides/DialogTitle.js":{"content":"// ==============================|| OVERRIDES - DIALOG TITLE ||============================== //\n\nexport default function DialogTitle() {\n  return {\n    MuiDialogTitle: {\n      styleOverrides: {\n        root: {\n          fontSize: '1rem',\n          fontWeight: 500\n        }\n      }\n    }\n  };\n}\n","size_bytes":296},"src/pages/apps/e-commerce/checkout.jsx":{"content":"// material ui\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport CircularLoader from 'components/CircularLoader';\nimport CheckoutTab from 'sections/apps/e-commerce/checkout/CheckoutTab';\nimport { useGetCart } from 'api/cart';\n\n// ==============================|| ECOMMERCE - CHECKOUT ||============================== //\n\nexport default function Checkout() {\n  const { cartLoading, cart } = useGetCart();\n\n  const loader = (\n    <MainCard>\n      <Box sx={{ height: 'calc(100vh - 310px)' }}>\n        <CircularLoader />\n      </Box>\n    </MainCard>\n  );\n\n  return cartLoading ? loader : <CheckoutTab cart={cart} />;\n}\n","size_bytes":673},"src/pages/components-overview/lists.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicList from 'sections/components-overview/lists/BasicList';\nimport InteractiveList from 'sections/components-overview/lists/InteractiveList';\nimport NestedList from 'sections/components-overview/lists/NestedList';\nimport SelectedList from 'sections/components-overview/lists/SelectedList';\nimport AlignList from 'sections/components-overview/lists/AlignList';\nimport ScrollableList from 'sections/components-overview/lists/ScrollableList';\nimport FolderList from 'sections/components-overview/lists/FolderList';\nimport TransactionList from 'sections/components-overview/lists/TransactionList';\nimport NotificationList from 'sections/components-overview/lists/NotificationList';\nimport UserList from 'sections/components-overview/lists/UserList';\n\n// ==============================|| COMPONENTS - LIST ||============================== //\n\nexport default function ComponentList() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Lists\"\n        caption=\"Lists are continuous, vertical indexes of text or images.\"\n        directory=\"src/pages/components-overview/lists\"\n        link=\"https://mui.com/material-ui/react-list/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Basic</Typography>\n                <BasicList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Interactive</Typography>\n                <InteractiveList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Scrollable</Typography>\n                <ScrollableList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Notification</Typography>\n                <NotificationList />\n              </Stack>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Nested</Typography>\n                <NestedList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Selected</Typography>\n                <SelectedList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Align Item</Typography>\n                <AlignList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Folder</Typography>\n                <FolderList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Transaction History</Typography>\n                <TransactionList />\n              </Stack>\n              <Stack spacing={1}>\n                <Typography variant=\"h5\">Users</Typography>\n                <UserList />\n              </Stack>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":3446},"src/themes/theme/default.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - DEFAULT ||============================== //\n\nexport default function Default(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#E9F0FF', '#C8D9FF', '#A3C0FF', '#7EA6FF', '#6293FF', '#4680FF', '#3F78FF', '#376DFF', '#2F63FF', '#2050FF'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#f5bebe', '#e76767', '#dc2626', '#d31c1c', '#c50d0d'];\n  let warningColors = ['#f7dcb3', '#edad4d', '#e58a00', '#de7700', '#d35a00'];\n  let infoColors = ['#c5eff3', '#78d9e2', '#3ec9d6', '#30bccc', '#1ba9bc'];\n  let successColors = ['#c0e5d9', '#6bc2a5', '#2ca87f', '#21976c', '#107d4f'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#2050FF', '#2F63FF', '#376DFF', '#3F78FF', '#4680FF', '#6293FF', '#7EA6FF', '#A3C0FF', '#C8D9FF', '#E9F0FF'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#c50d0d', '#d31c1c', '#dc2626', '#e76767', '#f5bebe'];\n    warningColors = ['#d35a00', '#de7700', '#e58a00', '#edad4d', '#f7dcb3'];\n    infoColors = ['#1ba9bc', '#30bccc', '#3ec9d6', '#78d9e2', '#c5eff3'];\n    successColors = ['#107d4f', '#21976c', '#2ca87f', '#6bc2a5', '#c0e5d9'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2894},"src/pages/map.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\n\n// project-import\nimport MainCard from 'components/MainCard';\nimport MapContainerStyled from 'components/third-party/map/MapContainerStyled';\n\nimport ClustersMap from 'sections/maps/clusters-map';\nimport ChangeTheme from 'sections/maps/change-theme';\nimport DraggableMarker from 'sections/maps/draggable-marker';\nimport GeoJSONAnimation from 'sections/maps/GeoJSONAnimation';\nimport Heatmap from 'sections/maps/heatmap';\nimport HighlightByFilter from 'sections/maps/HighlightByFilter';\nimport InteractionMap from 'sections/maps/interaction-map';\nimport MarkersPopups from 'sections/maps/MarkersPopups';\nimport SideBySide from 'sections/maps/side-by-side';\nimport ViewportAnimation from 'sections/maps/viewport-animation';\n\nimport { ThemeMode } from 'config';\nimport { cities, countries } from 'data/location';\n\nconst MAPBOX_THEMES = {\n  light: 'mapbox://styles/mapbox/light-v10',\n  dark: 'mapbox://styles/mapbox/dark-v10',\n  streets: 'mapbox://styles/mapbox/streets-v11',\n  outdoors: 'mapbox://styles/mapbox/outdoors-v11',\n  satellite: 'mapbox://styles/mapbox/satellite-v9',\n  satelliteStreets: 'mapbox://styles/mapbox/satellite-streets-v11'\n};\n\nconst mapConfiguration = {\n  mapboxAccessToken: import.meta.env.VITE_APP_MAPBOX_ACCESS_TOKEN,\n  minZoom: 1\n};\n\n// ==============================|| MAP ||============================== //\n\nexport default function Map() {\n  const theme = useTheme();\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard title=\"Theme Variants\">\n          <MapContainerStyled>\n            <ChangeTheme {...mapConfiguration} themes={MAPBOX_THEMES} />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Markers & Popups\">\n          <MapContainerStyled>\n            <MarkersPopups\n              {...mapConfiguration}\n              data={countries}\n              mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Draggable Marker\">\n          <MapContainerStyled>\n            <DraggableMarker\n              {...mapConfiguration}\n              mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Geo JSON Animation\">\n          <MapContainerStyled>\n            <GeoJSONAnimation {...mapConfiguration} mapStyle={MAPBOX_THEMES.satelliteStreets} />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Clusters\">\n          <MapContainerStyled>\n            <ClustersMap\n              {...mapConfiguration}\n              mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Interaction\">\n          <MapContainerStyled>\n            <InteractionMap\n              {...mapConfiguration}\n              mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Viewport Animation\">\n          <MapContainerStyled>\n            <ViewportAnimation\n              {...mapConfiguration}\n              data={cities.filter((city) => city.state === 'Gujarat')}\n              mapStyle={MAPBOX_THEMES.outdoors}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Highlight By Filter\">\n          <MapContainerStyled>\n            <HighlightByFilter\n              {...mapConfiguration}\n              mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light}\n            />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Heatmap\">\n          <MapContainerStyled>\n            <Heatmap {...mapConfiguration} mapStyle={theme.palette.mode === ThemeMode.DARK ? MAPBOX_THEMES.dark : MAPBOX_THEMES.light} />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Side By Side\">\n          <MapContainerStyled>\n            <SideBySide {...mapConfiguration} />\n          </MapContainerStyled>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":4753},"src/sections/forms/wizard/team-validation-wizard/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  fullName: yup.string().required('Full Name is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  job: yup.string().required('Job is required'),\n  facebook: yup.string().required('Facebook link is required'),\n  linkedin: yup.string().required('LinkedIn link is required'),\n  twitter: yup.string().required('Twitter link is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      fullName: data.fullName,\n      job: data.job,\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      facebook: data.socialMedia && data.socialMedia.facebook ? data.socialMedia.facebook : '',\n      linkedin: data.socialMedia && data.socialMedia.linkedin ? data.socialMedia.linkedin : '',\n      twitter: data.socialMedia && data.socialMedia.twitter ? data.socialMedia.twitter : ''\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        fullName: values.fullName,\n        job: values.job,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        socialMedia: {\n          facebook: values.facebook,\n          linkedin: values.linkedin,\n          twitter: values.twitter\n        }\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Full Name</InputLabel>\n              <TextField\n                id=\"fullName\"\n                name=\"fullName\"\n                placeholder=\"Full Name *\"\n                value={formik.values.fullName}\n                onChange={formik.handleChange}\n                error={formik.touched.fullName && Boolean(formik.errors.fullName)}\n                helperText={formik.touched.fullName && formik.errors.fullName}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job</InputLabel>\n              <TextField\n                id=\"job\"\n                name=\"job\"\n                placeholder=\"Job *\"\n                value={formik.values.job}\n                onChange={formik.handleChange}\n                error={formik.touched.job && Boolean(formik.errors.job)}\n                helperText={formik.touched.job && formik.errors.job}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Facebook Link</InputLabel>\n              <TextField\n                id=\"facebook\"\n                name=\"facebook\"\n                placeholder=\"Facebook Link *\"\n                value={formik.values.facebook}\n                onChange={formik.handleChange}\n                error={formik.touched.facebook && Boolean(formik.errors.facebook)}\n                helperText={formik.touched.facebook && formik.errors.facebook}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Linkedin link</InputLabel>\n              <TextField\n                id=\"linkedin\"\n                name=\"linkedin\"\n                placeholder=\"Linkedin link *\"\n                value={formik.values.linkedin}\n                onChange={formik.handleChange}\n                error={formik.touched.linkedin && Boolean(formik.errors.linkedin)}\n                helperText={formik.touched.linkedin && formik.errors.linkedin}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Twitter Link</InputLabel>\n              <TextField\n                id=\"twitter\"\n                name=\"twitter\"\n                placeholder=\"Twitter Link *\"\n                value={formik.values.twitter}\n                onChange={formik.handleChange}\n                error={formik.touched.twitter && Boolean(formik.errors.twitter)}\n                helperText={formik.touched.twitter && formik.errors.twitter}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":7245},"src/sections/forms/validation/SelectForms.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Stack from '@mui/material/Stack';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n/**\n * 'Enter your age'\n * yup.number Expected 0 arguments, but got 1 */\nconst validationSchema = yup.object({\n  age: yup.number().required('Age selection is required.')\n});\n\n// ==============================|| FORM VALIDATION - SELECT  ||============================== //\n\nexport default function SelectForms() {\n  const formik = useFormik({\n    initialValues: {\n      age: ''\n    },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'Select - Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n    }\n  });\n\n  return (\n    <MainCard title=\"Select\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel htmlFor=\"age\">Age</InputLabel>\n              <FormControl sx={{ m: 1, minWidth: 120 }}>\n                <Select id=\"age\" name=\"age\" value={formik.values.age} onChange={formik.handleChange}>\n                  <MenuItem value=\"\">\n                    <em>Select age</em>\n                  </MenuItem>\n                  <MenuItem value={10}>Ten</MenuItem>\n                  <MenuItem value={20}>Twenty</MenuItem>\n                  <MenuItem value={30}>Thirty</MenuItem>\n                </Select>\n                {formik.errors.age && (\n                  <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                    {' '}\n                    {formik.errors.age}{' '}\n                  </FormHelperText>\n                )}\n              </FormControl>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":2640},"src/pages/maintenance/coming-soon/coming-soon2.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useTimer } from 'react-timer-hook';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Facebook, Google, Notification } from 'iconsax-react';\nimport coming from 'assets/images/maintenance/img-soon-2.svg';\n\n// ==============================|| COMING SOON ||============================== //\n\nfunction TimerBox({ count }) {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <MainCard content={false} sx={{ width: { xs: 60, sm: 80 } }}>\n      <Stack justifyContent=\"center\" alignItems=\"center\">\n        <Box sx={{ py: 1.75 }}>\n          <Typography variant={matchDownSM ? 'h4' : 'h2'}>{count}</Typography>\n        </Box>\n      </Stack>\n    </MainCard>\n  );\n}\n\nexport default function ComingSoon() {\n  const time = new Date();\n  time.setSeconds(time.getSeconds() + 3600 * 24 * 2 - 3600 * 15.5);\n\n  const { seconds, minutes, hours, days } = useTimer({ expiryTimestamp: time });\n\n  return (\n    <>\n      <Container fixed>\n        <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\" sx={{ minHeight: '100vh', py: 2 }}>\n          <Grid item md={6}>\n            <Box sx={{ height: { xs: 310, sm: 420 }, width: { xs: 360, sm: 'auto' } }}>\n              <img src={coming} alt=\"coming soon 1\" style={{ height: '100%', width: '100%' }} />\n            </Box>\n          </Grid>\n          <Grid item md={6}>\n            <Grid container spacing={3} direction=\"column\" alignItems=\"center\">\n              <Grid item xs={12}>\n                <Stack spacing={1} justifyContent=\"center\" alignItems=\"center\">\n                  <Typography align=\"center\" variant=\"h1\">\n                    Coming Soon\n                  </Typography>\n                  <Typography align=\"center\" color=\"text.secondary\">\n                    Something new is on its way\n                  </Typography>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={{ xs: 1, sm: 2 }}>\n                  <TimerBox count={days} />\n                  <TimerBox count={hours} />\n                  <TimerBox count={minutes} />\n                  <TimerBox count={seconds} />\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sx={{ width: { xs: 380, md: 380, lg: 380 } }}>\n                <Stack spacing={3} sx={{ mt: 2 }}>\n                  <Stack direction=\"row\" spacing={1}>\n                    <TextField fullWidth placeholder=\"Email Address\" />\n                    <Button variant=\"contained\" sx={{ width: '50%' }} startIcon={<Notification variant=\"Bold\" />}>\n                      Notify Me\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" spacing={2} alignItems=\"center\" justifyContent=\"center\">\n                    <IconButton shape=\"rounded\" color=\"secondary\">\n                      <Facebook variant=\"Bulk\" size={20} />\n                    </IconButton>\n                    <IconButton shape=\"rounded\" color=\"secondary\">\n                      <Google variant=\"Bulk\" size={20} />\n                    </IconButton>\n                  </Stack>\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nTimerBox.propTypes = { count: PropTypes.number };\n","size_bytes":3935},"src/sections/widget/data/ProjectTable.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport Avatar from '@mui/material/Avatar';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport Avatar1 from 'assets/images/users/avatar-1.png';\nimport Avatar2 from 'assets/images/users/avatar-2.png';\nimport Avatar3 from 'assets/images/users/avatar-3.png';\nimport Avatar4 from 'assets/images/users/avatar-4.png';\nimport Avatar6 from 'assets/images/users/avatar-6.png';\n\n// table data\nconst createData = (avtar, name, designation, product, date, badgeText, badgeType) => ({\n  avtar,\n  name,\n  designation,\n  product,\n  date,\n  badgeText,\n  badgeType\n});\n\nconst rows = [\n  createData(Avatar1, 'John Deo', 'Graphics Designer', 'Materially', 'Jun, 26', 'Low', 'warning'),\n  createData(Avatar2, 'Jenifer Vintage', 'Web Designer', 'Mashable', 'March, 31', 'Lower', 'error'),\n  createData(Avatar3, 'William Jem', 'Developer', 'Flatable', 'Aug, 02', 'Medium', 'primary'),\n  createData(Avatar4, 'David Jones', 'Developer', 'Guruable', 'Sep, 22', 'High', 'info'),\n  createData(Avatar6, 'Stebin Ben', 'Leader', 'Able Pro', 'Sep, 22', 'Higher', 'success')\n];\n\n// ===========================|| DATA WIDGET - PROJECT TABLE ||=========================== //\n\nexport default function ProjectTable() {\n  return (\n    <MainCard\n      title=\"Projects\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pl: 3 }}>Assigned</TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell>Due Date</TableCell>\n              <TableCell align=\"right\" sx={{ pr: 3 }}>\n                Priority\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => (\n              <TableRow hover key={index}>\n                <TableCell sx={{ pl: 3 }}>\n                  <Grid container spacing={2} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\n                    <Grid item>\n                      <Avatar alt=\"User 1\" src={row.avtar} />\n                    </Grid>\n                    <Grid item xs zeroMinWidth>\n                      <Typography variant=\"subtitle1\">{row.name}</Typography>\n                      <Typography variant=\"caption\" color=\"secondary\">\n                        {row.designation}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </TableCell>\n                <TableCell>{row.product}</TableCell>\n                <TableCell>{row.date}</TableCell>\n                <TableCell align=\"right\" sx={{ pr: 3 }}>\n                  <Chip color={row.badgeType} label={row.badgeText} size=\"small\" />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":3456},"src/components/third-party/react-table/SelectColumnVisibility.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\nimport Typography from '@mui/material/Typography';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 200\n    }\n  }\n};\n\n// ==============================|| COLUMN VISIBILITY - SELECT ||============================== //\n\nexport default function SelectColumnVisibility({\n  getVisibleLeafColumns,\n  getIsAllColumnsVisible,\n  getToggleAllColumnsVisibilityHandler,\n  getAllColumns\n}) {\n  return (\n    <FormControl sx={{ width: 200 }}>\n      <Select\n        id=\"column-hiding\"\n        multiple\n        displayEmpty\n        value={getVisibleLeafColumns()}\n        input={<OutlinedInput id=\"select-column-hiding\" placeholder=\"select column\" />}\n        renderValue={() => {\n          if (getIsAllColumnsVisible()) {\n            return <Typography variant=\"subtitle1\">All columns visible</Typography>;\n          }\n\n          if (getVisibleLeafColumns().length === 0) {\n            return <Typography variant=\"subtitle1\">All columns hidden</Typography>;\n          }\n\n          return <Typography variant=\"subtitle1\">{getVisibleLeafColumns().length} column(s) visible</Typography>;\n        }}\n        MenuProps={MenuProps}\n        size=\"small\"\n      >\n        <MenuItem value=\"all\" onClick={getToggleAllColumnsVisibilityHandler()}>\n          <Checkbox checked={getIsAllColumnsVisible()} color=\"success\" />\n          <ListItemText primary=\"All Column\" />\n        </MenuItem>\n        {getAllColumns().map(\n          (column) =>\n            // @ts-ignore\n            column.columnDef.accessorKey && (\n              <MenuItem key={column.id} value={column.id} onClick={column.getToggleVisibilityHandler()}>\n                <Checkbox checked={column.getIsVisible()} color=\"success\" />\n                <ListItemText primary={column.columnDef.header} />\n              </MenuItem>\n            )\n        )}\n      </Select>\n    </FormControl>\n  );\n}\n\nSelectColumnVisibility.propTypes = {\n  getVisibleLeafColumns: PropTypes.func,\n  getIsAllColumnsVisible: PropTypes.func,\n  getToggleAllColumnsVisibilityHandler: PropTypes.func,\n  getAllColumns: PropTypes.func\n};\n","size_bytes":2513},"src/sections/widget/chart/Visitors.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-importds\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowDown } from 'iconsax-react';\n\n// ==============================|| CHART ||============================== //\n\nfunction DataChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-users-chart',\n      type: 'rangeBar',\n      sparkline: { enabled: true },\n      toolbar: {\n        show: false\n      },\n      offsetX: -2\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: '30%',\n        borderRadius: 5,\n        horizontal: false\n      }\n    },\n    yaxis: {\n      show: false\n    },\n    grid: {\n      show: false,\n      padding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    },\n    dataLabels: {\n      enabled: false\n    }\n  };\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.warning.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      data: [\n        {\n          x: 'Rejected',\n          y: [1, 6]\n        },\n        {\n          x: 'Pending',\n          y: [3, 7]\n        },\n        {\n          x: 'New',\n          y: [4, 8]\n        },\n        {\n          x: 'Verified',\n          y: [5, 9]\n        },\n        {\n          x: 'Store',\n          y: [4, 8]\n        },\n        {\n          x: 'Deleted',\n          y: [4, 7]\n        },\n        {\n          x: 'Block',\n          y: [2, 5]\n        }\n      ]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"rangeBar\" height={80} />;\n}\n\n// ==============================|| CHART WIDGETS - VISITORS ||============================== //\n\nexport default function Visitors() {\n  const [age, setAge] = useState('30');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">New Users</Typography>\n            <Box sx={{ minWidth: 120 }}>\n              <FormControl fullWidth size=\"small\">\n                <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n                  <MenuItem value={10}>Today</MenuItem>\n                  <MenuItem value={20}>Weekly</MenuItem>\n                  <MenuItem value={30}>Monthly</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <DataChart />\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n            <Typography variant=\"subtitle1\">$30,200</Typography>\n            <Typography color=\"error.dark\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5, fontWeight: 500 }}>\n              <ArrowDown size={14} style={{ transform: 'rotate(-45deg)' }} />\n              30.6%\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            View more\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4105},"src/components/third-party/react-table/DraggableColumnHeader.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport TableCell from '@mui/material/TableCell';\n\n// third-party\nimport { useDrag, useDrop } from 'react-dnd';\n\nconst reorderColumn = (draggedColumnId, targetColumnId, columnOrder) => {\n  columnOrder.splice(columnOrder.indexOf(targetColumnId), 0, columnOrder.splice(columnOrder.indexOf(draggedColumnId), 1)[0]);\n  return [...columnOrder];\n};\n\n// ==============================|| DRAGGABLE COLUMN ||============================== //\n\nexport default function DraggableColumnHeader({ header, table, children }) {\n  const { getState, setColumnOrder } = table;\n  const { columnOrder } = getState();\n  const { column } = header;\n\n  const [{ isOverCurrent }, dropRef] = useDrop({\n    accept: 'column',\n    drop: (draggedColumn) => {\n      const newColumnOrder = reorderColumn(draggedColumn.id, column.id, columnOrder);\n      setColumnOrder(newColumnOrder);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      isOverCurrent: monitor.isOver({ shallow: true })\n    })\n  });\n\n  const [{ isDragging }, dragRef, previewRef] = useDrag({\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    }),\n    item: () => column,\n    type: 'column'\n  });\n\n  return (\n    <TableCell ref={dropRef} colSpan={header.colSpan} sx={{ cursor: 'move' }} {...header.column.columnDef.meta}>\n      <Box ref={previewRef}>\n        <Box ref={dragRef} sx={{ color: isOverCurrent ? 'primary.main' : 'text.primary', opacity: isDragging ? 0.9 : 1 }}>\n          {children}\n        </Box>\n      </Box>\n    </TableCell>\n  );\n}\n\nDraggableColumnHeader.propTypes = { header: PropTypes.object, table: PropTypes.object, children: PropTypes.node };\n","size_bytes":1725},"src/sections/apps/chat/ChatHistory.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useRef } from 'react';\n\nimport Stack from '@mui/material/Stack';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport UserAvatar from './UserAvatar';\nimport ChatMessageAction from './ChatMessageAction';\nimport IconButton from 'components/@extended/IconButton';\nimport CircularLoader from 'components/CircularLoader';\n\nimport { useGetUserChat } from 'api/chat';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Edit } from 'iconsax-react';\n\n// ==============================|| CHAT - HISTORY ||============================== //\n\nexport default function ChatHistory({ theme, user }) {\n  const bottomRef = useRef(null);\n  const { chat, chatLoading } = useGetUserChat(user.name);\n\n  useEffect(() => {\n    // @ts-ignore\n    bottomRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    // eslint-disable-next-line\n  }, [chat]);\n\n  if (chatLoading) <CircularLoader />;\n\n  return (\n    <Grid container spacing={2.5}>\n      {chat.map((history, index) => (\n        <Grid item xs={12} key={index}>\n          {history.from !== user.name ? (\n            <Stack spacing={1.25} direction=\"row\" alignItems=\"flex-start\">\n              <Grid container justifyContent=\"flex-end\">\n                <Grid item xs={2} md={3} xl={4} />\n\n                <Grid item xs={10} md={9} xl={8}>\n                  <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"flex-start\">\n                    <ChatMessageAction index={index} />\n                    <IconButton size=\"small\" color=\"secondary\">\n                      <Edit />\n                    </IconButton>\n                    <Card\n                      sx={{\n                        display: 'inline-block',\n                        float: 'right',\n                        bgcolor: theme.palette.primary.main,\n                        boxShadow: 'none',\n                        ml: 1\n                      }}\n                    >\n                      <CardContent sx={{ p: 1, pb: '8px !important', width: 'fit-content', ml: 'auto' }}>\n                        <Grid container spacing={1}>\n                          <Grid item xs={12}>\n                            <Typography variant=\"h6\" color={theme.palette.common.white} sx={{ overflowWrap: 'anywhere' }}>\n                              {history.text}\n                            </Typography>\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sx={{ mt: 1 }}>\n                  <Typography align=\"right\" variant=\"subtitle2\" color=\"text.secondary\">\n                    {history.time}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <UserAvatar user={{ online_status: 'available', avatar: 'avatar-1.png', name: 'User 1' }} />\n            </Stack>\n          ) : (\n            <Stack direction=\"row\" spacing={1.25} alignItems=\"flex-start\">\n              <UserAvatar user={{ online_status: user.online_status, avatar: user.avatar, name: user.name }} />\n\n              <Grid container>\n                <Grid item xs={12} sm={7}>\n                  <Card\n                    sx={{\n                      display: 'inline-block',\n                      float: 'left',\n                      bgcolor: theme.palette.mode === ThemeMode.DARK ? 'background.background' : 'common.white',\n                      boxShadow: 'none'\n                    }}\n                  >\n                    <CardContent sx={{ p: 1, pb: '8px !important' }}>\n                      <Grid container spacing={1}>\n                        <Grid item xs={12}>\n                          <Typography variant=\"h6\" color=\"text.primary\" sx={{ overflowWrap: 'anywhere' }}>\n                            {history.text}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} sx={{ mt: 1 }}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    {history.time}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Stack>\n          )}\n        </Grid>\n      ))}\n      <Grid item ref={bottomRef} />\n    </Grid>\n  );\n}\n\nChatHistory.propTypes = { theme: PropTypes.any, user: PropTypes.any };\n","size_bytes":4611},"src/components/cards/invoice/InvoiceCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// assets\nimport { ArrowDown3, ArrowUp3 } from 'iconsax-react';\n\n// ==============================|| INVOICE - CARD  ||============================== //\n\nexport default function TableWidgetCard({ color, title, count, percentage, isLoss, children, invoice }) {\n  return (\n    <Grid container direction=\"row\" spacing={2} justifyContent=\"space-between\">\n      <Grid item xs={12} md={5}>\n        <Stack direction=\"column\" spacing={2}>\n          <Typography variant=\"subtitle1\">{title}</Typography>\n          <Stack direction=\"column\" spacing={1}>\n            <Typography variant=\"h4\" color=\"inherit\">\n              {count}\n            </Typography>\n            <Stack direction=\"row\" spacing={1}>\n              <Typography variant=\"subtitle1\">{invoice}</Typography>\n              <Typography color=\"secondary\">invoices</Typography>\n            </Stack>\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={7}>\n        <Box>\n          <Stack direction=\"column\" alignItems=\"flex-end\" justifyContent=\"space-evenly\">\n            {percentage && (\n              <Stack sx={{ ml: 1.25, pl: 1 }} direction=\"row\" alignItems=\"center\" spacing={1}>\n                {!isLoss && <ArrowUp3 variant=\"Bold\" style={{ fontSize: '0.75rem', color: `${color}` }} />}\n                {isLoss && <ArrowDown3 variant=\"Bold\" style={{ fontSize: '0.75rem', color: `${color}` }} />}\n                <Typography color=\"secondary\">{percentage}%</Typography>\n              </Stack>\n            )}\n            {children}\n          </Stack>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nTableWidgetCard.propTypes = {\n  color: PropTypes.any,\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.number,\n  isLoss: PropTypes.bool,\n  children: PropTypes.any,\n  invoice: PropTypes.string\n};\n","size_bytes":2022},"src/sections/maps/interaction-map/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport { alpha, styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport InputBase from '@mui/material/InputBase';\nimport Switch from '@mui/material/Switch';\nimport Typography from '@mui/material/Typography';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\nconst RowStyled = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  textTransform: 'capitalize',\n  justifyContent: 'space-between',\n  '&:not(:last-of-type)': {\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst camelPattern = /(^|[A-Z])[a-z]*/g;\n\nfunction formatSettingName(name) {\n  return name.match(camelPattern)?.join(' ');\n}\n\n// ==============================|| CONTROL - INTERATION MAP ||============================== //\n\nfunction ControlPanel({ settings, onChange }) {\n  const renderSetting = (name, value) => {\n    switch (typeof value) {\n      case 'boolean':\n        return (\n          <RowStyled key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <Switch size=\"small\" checked={value} onChange={(event) => onChange(name, event.target.checked)} />\n          </RowStyled>\n        );\n      case 'number':\n        return (\n          <RowStyled key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <InputBase\n              value={value}\n              onChange={(event) => onChange(name, Number(event.target.value))}\n              inputProps={{ type: 'number' }}\n              sx={{\n                '& input': {\n                  py: 0.25,\n                  width: 40,\n                  fontSize: 14,\n                  borderRadius: 1,\n                  textAlign: 'center',\n                  bgcolor: (theme) => alpha(theme.palette.grey[500], 0.12)\n                }\n              }}\n            />\n          </RowStyled>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return <ControlPanelStyled>{Object.keys(settings).map((name) => renderSetting(name, settings[name]))}</ControlPanelStyled>;\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = { settings: PropTypes.any, onChange: PropTypes.func };\n","size_bytes":2275},"src/sections/components-overview/date-time-picker/LandscapeDatePicker.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';\n\n// third-party\nimport isWeekend from 'date-fns/isWeekend';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - LANDSCAPE ||============================== //\n\nexport default function LandscapeDatePicker() {\n  const [value, setValue] = useState(new Date());\n\n  const landscapDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <StaticDatePicker<Date>\n    orientation=\"landscape\"\n    openTo=\"day\"\n    value={value}\n    shouldDisableDate={isWeekend}\n    onChange={(newValue) => {\n      setValue(newValue);\n    }}\n    renderInput={(params) => <TextField {...params} />}\n  />\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Landscape\" codeString={landscapDatepickerCodeString}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <StaticDatePicker\n          orientation=\"landscape\"\n          openTo=\"day\"\n          value={value}\n          shouldDisableDate={isWeekend}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n        />\n      </LocalizationProvider>\n    </MainCard>\n  );\n}\n","size_bytes":1396},"src/utils/getColors.js":{"content":"// ==============================|| CUSTOM FUNCTION - COLORS ||============================== //\n\nexport default function getColors(theme, color) {\n  switch (color) {\n    case 'secondary':\n      return theme.palette.secondary;\n    case 'error':\n      return theme.palette.error;\n    case 'warning':\n      return theme.palette.warning;\n    case 'info':\n      return theme.palette.info;\n    case 'success':\n      return theme.palette.success;\n    default:\n      return theme.palette.primary;\n  }\n}\n","size_bytes":496},"src/layout/Dashboard/index.jsx":{"content":"import { useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\n// import Button from '@mui/material/Button';\n// import ListItemIcon from '@mui/material/ListItemIcon';\n// import Link from '@mui/material/Link';\n\n// project-imports\nimport Drawer from './Drawer';\nimport Header from './Header';\nimport Footer from './Footer';\nimport HorizontalBar from './Drawer/HorizontalBar';\nimport Loader from 'components/Loader';\nimport AddCustomer from 'sections/apps/customer/AddCustomer';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport AuthGuard from 'utils/route-guard/AuthGuard';\n\nimport { DRAWER_WIDTH, MenuOrientation } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport { handlerDrawerOpen, useGetMenuMaster } from 'api/menu';\n\n// assets\n// import { ShoppingCart } from 'iconsax-react';\n\n// ==============================|| MAIN LAYOUT ||============================== //\n\n// let value = window.location.search;\n// const params = new URLSearchParams(value);\n// const ispValue = params.get('isp');\n// const ispValueAvailable = ispValue !== null && parseInt(ispValue) === 1;\n\n// const url = ispValueAvailable ? 'https://1.envato.market/OrJ5nn' : 'https://1.envato.market/zNkqj6';\n\nexport default function MainLayout() {\n  const theme = useTheme();\n\n  const { menuMasterLoading } = useGetMenuMaster();\n  const downXL = useMediaQuery(theme.breakpoints.down('xl'));\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { container, miniDrawer, menuOrientation } = useConfig();\n\n  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;\n\n  // set media wise responsive drawer\n  useEffect(() => {\n    if (!miniDrawer) {\n      handlerDrawerOpen(!downXL);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [downXL]);\n\n  if (menuMasterLoading) return <Loader />;\n\n  return (\n    <AuthGuard>\n      <Box sx={{ display: 'flex', width: '100%' }}>\n        <Header />\n        {!isHorizontal ? <Drawer /> : <HorizontalBar />}\n\n        <Box component=\"main\" sx={{ width: `calc(100% - ${DRAWER_WIDTH}px)`, flexGrow: 1, p: { xs: 2, md: 3 } }}>\n          <Toolbar sx={{ mt: isHorizontal ? 8 : 'inherit', mb: isHorizontal ? 2 : 'inherit' }} />\n          <Container\n            maxWidth={container ? 'xl' : false}\n            sx={{\n              xs: 0,\n              ...(container && { px: { xs: 0, md: 2 } }),\n              position: 'relative',\n              minHeight: 'calc(100vh - 110px)',\n              display: 'flex',\n              flexDirection: 'column'\n            }}\n          >\n            <Breadcrumbs />\n            <Outlet />\n            <Footer />\n          </Container>\n        </Box>\n        <AddCustomer />\n      </Box>\n    </AuthGuard>\n  );\n}\n","size_bytes":2996},"src/sections/apps/e-commerce/product-details/ProductImages.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport CardMedia from '@mui/material/CardMedia';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode } from 'config';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// third-party\nimport Slider from 'react-slick';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n\n// assets\nimport { ArrowLeft2, ArrowRight2, ArrowRotateRight, Heart, SearchZoomIn, SearchZoomOut } from 'iconsax-react';\n\nimport prod1 from 'assets/images/e-commerce/prod-1.png';\nimport prod2 from 'assets/images/e-commerce/prod-2.png';\nimport prod3 from 'assets/images/e-commerce/prod-3.png';\nimport prod4 from 'assets/images/e-commerce/prod-4.png';\nimport prod5 from 'assets/images/e-commerce/prod-5.png';\nimport prod6 from 'assets/images/e-commerce/prod-6.png';\nimport prod7 from 'assets/images/e-commerce/prod-7.png';\nimport prod8 from 'assets/images/e-commerce/prod-8.png';\nimport prod9 from 'assets/images/e-commerce/prod-9.png';\n\n// ==============================|| PRODUCT DETAILS - IMAGES ||============================== //\n\nexport default function ProductImages({ product }) {\n  const theme = useTheme();\n  const products = [prod1, prod2, prod3, prod4, prod5, prod6, prod7, prod8, prod9];\n\n  const matchDownLG = useMediaQuery(theme.breakpoints.up('lg'));\n\n  const [selected, setSelected] = useState('');\n  const [modal, setModal] = useState(false);\n\n  useEffect(() => {\n    setSelected(product && product?.image ? getImageUrl(`${product.image}`, ImagePath.ECOMMERCE) : '');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [product]);\n\n  const [wishlisted, setWishlisted] = useState(false);\n  const addToFavourite = () => {\n    setWishlisted(!wishlisted);\n    openSnackbar({\n      open: true,\n      message: 'Added to favourites',\n      variant: 'alert',\n      alert: { color: 'success' }\n    });\n  };\n\n  const lgNo = matchDownLG ? 5 : 4;\n\n  const ArrowUp = ({ currentSlide, slideCount, ...props }) => (\n    <Box\n      {...props}\n      className={'prev' + (currentSlide === 0 ? ' slick-disabled' : '')}\n      aria-hidden=\"true\"\n      aria-disabled={currentSlide === 0 && slideCount !== 0 ? true : false}\n      color=\"secondary\"\n      sx={{ cursor: 'pointer', borderRadius: 1 }}\n    >\n      <ArrowLeft2 style={{ color: theme.palette.secondary.light }} />\n    </Box>\n  );\n\n  const ArrowDown = ({ currentSlide, slideCount, ...props }) => (\n    <Box\n      {...props}\n      color=\"secondary\"\n      className={'next' + (currentSlide === slideCount - 1 ? ' slick-disabled' : '')}\n      aria-hidden=\"true\"\n      aria-disabled={currentSlide === slideCount - 1 ? true : false}\n      sx={{ cursor: 'pointer', borderRadius: 1, p: 0.75 }}\n    >\n      <ArrowRight2 size={18} style={{ color: theme.palette.secondary[400] }} />\n    </Box>\n  );\n\n  const settings = {\n    rows: 1,\n    // vertical: !matchDownMD,\n    // verticalSwiping: !matchDownMD,\n    dots: false,\n    centerMode: true,\n    swipeToSlide: true,\n    focusOnSelect: true,\n    centerPadding: '0px',\n    slidesToShow: products.length > 3 ? lgNo : products.length,\n    prevArrow: <ArrowUp />,\n    nextArrow: <ArrowDown />\n  };\n\n  return (\n    <>\n      <Grid container spacing={0.5}>\n        <Grid item xs={12}>\n          <MainCard\n            content={false}\n            border={false}\n            boxShadow={false}\n            sx={{\n              m: '0 auto',\n              height: '100%',\n              display: 'flex',\n              alignItems: 'center',\n              bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.lighter' : 'secondary.200',\n              '& .react-transform-wrapper': { cursor: 'crosshair', height: '100%' },\n              '& .react-transform-component': { height: '100%' }\n            }}\n          >\n            <TransformWrapper initialScale={1}>\n              {({ zoomIn, zoomOut, resetTransform }) => (\n                <>\n                  <TransformComponent>\n                    <CardMedia\n                      onClick={() => setModal(!modal)}\n                      component=\"img\"\n                      image={selected}\n                      title=\"Scroll Zoom\"\n                      sx={{ borderRadius: `4px`, position: 'relative' }}\n                    />\n                  </TransformComponent>\n                  <Stack direction=\"row\" className=\"tools\" sx={{ position: 'absolute', bottom: 10, right: 10, zIndex: 1 }}>\n                    <IconButton color=\"secondary\" onClick={() => zoomIn()}>\n                      <SearchZoomIn style={{ fontSize: '1.15rem' }} />\n                    </IconButton>\n                    <IconButton color=\"secondary\" onClick={() => zoomOut()}>\n                      <SearchZoomOut style={{ fontSize: '1.15rem' }} />\n                    </IconButton>\n                    <IconButton color=\"secondary\" onClick={() => resetTransform()}>\n                      <ArrowRotateRight style={{ fontSize: '1.15rem' }} />\n                    </IconButton>\n                  </Stack>\n                </>\n              )}\n            </TransformWrapper>\n            <IconButton\n              color=\"secondary\"\n              sx={{ ml: 'auto', position: 'absolute', top: 12, right: 12, '&:hover': { bgcolor: 'transparent' } }}\n              onClick={addToFavourite}\n            >\n              {wishlisted ? <Heart variant=\"Bold\" style={{ color: theme.palette.error.main }} /> : <Heart />}\n            </IconButton>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12}>\n          <Box sx={{ '& .slick-slider': { display: 'flex', alignItems: 'center', mt: 2 } }}>\n            <Slider {...settings}>\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((item, index) => (\n                <Box key={index} onClick={() => setSelected(getImageUrl(`prod-${item}.png`, ImagePath.ECOMMERCE))} sx={{ p: 1 }}>\n                  <Avatar\n                    size={matchDownLG ? 'xl' : 'md'}\n                    src={getImageUrl(`thumbs/prod-${item}.png`, ImagePath.ECOMMERCE)}\n                    variant=\"rounded\"\n                    sx={{ m: '0 auto', cursor: 'pointer', bgcolor: theme.palette.secondary[200] }}\n                  />\n                </Box>\n              ))}\n            </Slider>\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nProductImages.propTypes = { product: PropTypes.any };\n","size_bytes":6754},"src/sections/components-overview/dialogs/DraggableDialog.jsx":{"content":"import { forwardRef, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport TextField from '@mui/material/TextField';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Paper from '@mui/material/Paper';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// third-party\nimport Draggable from 'react-draggable';\n\nconst PaperComponent = forwardRef((props, ref) => (\n  <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n    <Paper ref={ref} {...props} />\n  </Draggable>\n));\n\n// ==============================|| DIALOG - DRAGGABLED ||============================== //\n\nexport default function DraggableDialog() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open draggable dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} PaperComponent={PaperComponent} aria-labelledby=\"draggable-dialog-title\">\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n            Subscribe\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText sx={{ mb: 2 }}>\n              To subscribe to this website, please enter your email address here. We will send updates occasionally.\n            </DialogContentText>\n            <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"error\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Subscribe\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":2133},"src/themes/overrides/Checkbox.jsx":{"content":"import PropTypes from 'prop-types';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Stop, TickSquare, MinusSquare } from 'iconsax-react';\n\n// ==============================|| RADIO - COLORS ||============================== //\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { lighter, main, dark } = colors;\n\n  return {\n    '&:hover': {\n      backgroundColor: color === 'secondary' ? lighter : lighter + 50,\n      ...(theme.palette.mode === ThemeMode.DARK && {\n        backgroundColor: color === 'secondary' ? lighter + 50 : lighter + 20\n      }),\n      '& .icon': {\n        borderColor: main\n      }\n    },\n    '&.Mui-focusVisible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: -4\n    }\n  };\n}\n\nfunction getSizeStyle(size) {\n  switch (size) {\n    case 'small':\n      return { size: 20 };\n    case 'large':\n      return { size: 28 };\n    case 'medium':\n    default:\n      return { size: 24 };\n  }\n}\n\n// ==============================|| CHECKBOX - STYLE ||============================== //\n\nfunction checkboxStyle(size) {\n  const sizes = getSizeStyle(size);\n\n  return {\n    '& svg': {\n      width: sizes.size,\n      height: sizes.size\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - CHECKBOX ||============================== //\n\nexport default function Checkbox(theme) {\n  const { palette } = theme;\n\n  return {\n    MuiCheckbox: {\n      defaultProps: {\n        className: 'size-medium',\n        icon: <Stop />,\n        checkedIcon: <TickSquare variant=\"Bold\" />,\n        indeterminateIcon: <MinusSquare variant=\"Bold\" />\n      },\n      styleOverrides: {\n        root: {\n          borderRadius: 0,\n          color: palette.secondary[300],\n          '&.size-small': {\n            ...checkboxStyle('small')\n          },\n          '&.size-medium': {\n            ...checkboxStyle('medium')\n          },\n          '&.size-large': {\n            ...checkboxStyle('large')\n          }\n        },\n        colorPrimary: getColorStyle({ color: 'primary', theme }),\n        colorSecondary: getColorStyle({ color: 'secondary', theme }),\n        colorSuccess: getColorStyle({ color: 'success', theme }),\n        colorWarning: getColorStyle({ color: 'warning', theme }),\n        colorInfo: getColorStyle({ color: 'info', theme }),\n        colorError: getColorStyle({ color: 'error', theme })\n      }\n    }\n  };\n}\n\ngetColorStyle.propTypes = { color: PropTypes.any, theme: PropTypes.any };\n","size_bytes":2514},"src/sections/auth/auth-forms/AuthLogin.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport Stack from '@mui/material/Stack';\nimport Link from '@mui/material/Link';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\n// assets\nimport { Eye, EyeSlash } from 'iconsax-react';\n\n// ============================|| JWT - LOGIN ||============================ //\n\nexport default function AuthLogin({ forgot }) {\n  const [checked, setChecked] = useState(false);\n\n  const { isLoggedIn, login } = useAuth();\n  const scriptedRef = useScriptRef();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: 'info@phoenixcoded.co',\n          password: '123456',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          password: Yup.string().max(255).required('Password is required')\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            await login(values.email, values.password);\n            if (scriptedRef.current) {\n              setStatus({ success: true });\n              setSubmitting(false);\n            }\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\n                  <OutlinedInput\n                    id=\"email-login\"\n                    type=\"email\"\n                    value={values.email}\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"Enter email address\"\n                    fullWidth\n                    error={Boolean(touched.email && errors.email)}\n                  />\n                </Stack>\n                {touched.email && errors.email && (\n                  <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                    {errors.email}\n                  </FormHelperText>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"password-login\">Password</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.password && errors.password)}\n                    id=\"-password-login\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                          color=\"secondary\"\n                        >\n                          {showPassword ? <Eye /> : <EyeSlash />}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    placeholder=\"Enter password\"\n                  />\n                </Stack>\n                {touched.password && errors.password && (\n                  <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                    {errors.password}\n                  </FormHelperText>\n                )}\n              </Grid>\n\n              <Grid item xs={12} sx={{ mt: -1 }}>\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={checked}\n                        onChange={(event) => setChecked(event.target.checked)}\n                        name=\"checked\"\n                        color=\"primary\"\n                        size=\"small\"\n                      />\n                    }\n                    label={<Typography variant=\"h6\">Keep me sign in</Typography>}\n                  />\n\n                  <Link variant=\"h6\" component={RouterLink} to={isLoggedIn && forgot ? forgot : '/forgot-password'} color=\"text.primary\">\n                    Forgot Password?\n                  </Link>\n                </Stack>\n              </Grid>\n              {errors.submit && (\n                <Grid item xs={12}>\n                  <FormHelperText error>{errors.submit}</FormHelperText>\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <AnimateButton>\n                  <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Login\n                  </Button>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nAuthLogin.propTypes = { forgot: PropTypes.string };\n","size_bytes":6555},"src/sections/widget/data/PaymentHistory.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nimport paypal from 'assets/images/widget/img-paypal.png';\nimport gpay from 'assets/images/widget/img-gpay.png';\nimport phonePay from 'assets/images/widget/img-phonepay.png';\n\n// ==============================|| DATA WIDGET - PAYMENT HISTORY ||============================== //\n\nexport default function PaymentHistory() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 3, pb: 1 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">Payment History</Typography>\n          <IconButton color=\"secondary\" sx={{ color: 'secondary.darker' }}>\n            <Add />\n          </IconButton>\n        </Stack>\n      </Box>\n      <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <Avatar variant=\"rounded\" color=\"secondary\">\n              <CardMedia component=\"img\" alt=\"Paypal\" src={paypal} sx={{ width: 24 }} />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Paypal\"\n            secondary={\n              <Typography variant=\"subtitle1\">\n                +2,10,000{' '}\n                <Typography variant=\"caption\" color=\"success.main\">\n                  +30.6%\n                </Typography>\n              </Typography>\n            }\n          />\n        </ListItem>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <Avatar variant=\"rounded\" color=\"secondary\">\n              <CardMedia component=\"img\" alt=\"Gpay\" src={gpay} sx={{ width: 24 }} />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Gpay\"\n            secondary={\n              <Typography variant=\"subtitle1\">\n                -2000{' '}\n                <Typography variant=\"caption\" color=\"error.dark\">\n                  - 30.6%\n                </Typography>\n              </Typography>\n            }\n          />\n        </ListItem>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <Avatar variant=\"rounded\" color=\"secondary\">\n              <CardMedia component=\"img\" alt=\"phone-pay\" src={phonePay} sx={{ width: 24 }} />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary=\"Phone Pay\"\n            secondary={\n              <Typography variant=\"subtitle1\">\n                -2000{' '}\n                <Typography variant=\"caption\" color=\"error.dark\">\n                  - 30.6%\n                </Typography>\n              </Typography>\n            }\n          />\n        </ListItem>\n      </List>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={1.25} sx={{ p: 3 }}>\n        <Button variant=\"outlined\" fullWidth color=\"secondary\">\n          View all\n        </Button>\n      </Stack>\n      <Menu\n        id=\"wallet-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'wallet-button',\n          sx: { p: 1.25, minWidth: 150 }\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right'\n        }}\n      >\n        <ListItemButton onClick={handleClose}>Name</ListItemButton>\n        <ListItemButton onClick={handleClose}>Date</ListItemButton>\n        <ListItemButton onClick={handleClose}>Rating</ListItemButton>\n        <ListItemButton onClick={handleClose}>Unread</ListItemButton>\n      </Menu>\n    </MainCard>\n  );\n}\n","size_bytes":5826},"src/routes/MainRoutes.jsx":{"content":"import { lazy } from 'react';\n\n// project-imports\nimport ErrorBoundary from './ErrorBoundary';\nimport Loadable from 'components/Loadable';\nimport DashboardLayout from 'layout/Dashboard';\nimport PagesLayout from 'layout/Pages';\nimport { loader as productsLoader, productLoader } from 'api/products';\nimport FormJobs from 'pages/forms/jobs';\nimport FormEditJobs from 'pages/edit-form-grids/jobs';\nimport FormEditTeam from 'pages/edit-form-grids/team';\nimport FormEditWorks from 'pages/edit-form-grids/works';\n\n// // render - dashboard\n// const DashboardDefault = Loadable(lazy(() => import('pages/dashboard/default')));\n// const DashboardAnalytics = Loadable(lazy(() => import('pages/dashboard/analytics')));\n\n// // render - widget\n// const WidgetStatistics = Loadable(lazy(() => import('pages/widget/statistics')));\n// const WidgetData = Loadable(lazy(() => import('pages/widget/data')));\n// const WidgetChart = Loadable(lazy(() => import('pages/widget/chart')));\n\n// render - applications\nconst AppChat = Loadable(lazy(() => import('pages/apps/chat')));\nconst AppCalendar = Loadable(lazy(() => import('pages/apps/calendar')));\n\nconst AppKanban = Loadable(lazy(() => import('pages/apps/kanban')));\nconst AppKanbanBacklogs = Loadable(lazy(() => import('sections/apps/kanban/Backlogs')));\nconst AppKanbanBoard = Loadable(lazy(() => import('sections/apps/kanban/Board')));\n\nconst AppCustomerList = Loadable(lazy(() => import('pages/apps/customer/list')));\nconst AppCustomerCard = Loadable(lazy(() => import('pages/apps/customer/card')));\n\nconst AppInvoiceCreate = Loadable(lazy(() => import('pages/apps/invoice/create')));\nconst AppInvoiceDashboard = Loadable(lazy(() => import('pages/apps/invoice/dashboard')));\nconst AppInvoiceList = Loadable(lazy(() => import('pages/apps/invoice/list')));\nconst AppInvoiceDetails = Loadable(lazy(() => import('pages/apps/invoice/details')));\nconst AppInvoiceEdit = Loadable(lazy(() => import('pages/apps/invoice/edit')));\n\nconst UserProfile = Loadable(lazy(() => import('pages/apps/profiles/user')));\nconst UserTabPersonal = Loadable(lazy(() => import('sections/apps/profiles/user/TabPersonal')));\nconst UserTabPayment = Loadable(lazy(() => import('sections/apps/profiles/user/TabPayment')));\nconst UserTabPassword = Loadable(lazy(() => import('sections/apps/profiles/user/TabPassword')));\nconst UserTabSettings = Loadable(lazy(() => import('sections/apps/profiles/user/TabSettings')));\n\nconst AccountProfile = Loadable(lazy(() => import('pages/apps/profiles/account')));\nconst AccountTabProfile = Loadable(lazy(() => import('sections/apps/profiles/account/TabProfile')));\nconst AccountTabPersonal = Loadable(lazy(() => import('sections/apps/profiles/account/TabPersonal')));\nconst AccountTabPassword = Loadable(lazy(() => import('sections/apps/profiles/account/TabPassword')));\nconst AccountTabSettings = Loadable(lazy(() => import('sections/apps/profiles/account/TabSettings')));\n\nconst AppECommProducts = Loadable(lazy(() => import('pages/apps/e-commerce/product')));\nconst AppECommProductDetails = Loadable(lazy(() => import('pages/apps/e-commerce/product-details')));\nconst AppECommProductList = Loadable(lazy(() => import('pages/apps/e-commerce/products-list')));\nconst AppECommCheckout = Loadable(lazy(() => import('pages/apps/e-commerce/checkout')));\nconst AppECommAddProduct = Loadable(lazy(() => import('pages/apps/e-commerce/add-product')));\n\n// render - forms & tables\nconst FormServices = Loadable(lazy(() => import('pages/forms/services')));\nconst FormTeam = Loadable(lazy(() => import('pages/forms/team')));\nconst FormBlog = Loadable(lazy(() => import('pages/forms/blogs')));\nconst FormWork = Loadable(lazy(() => import('pages/forms/work')));\nconst FormSpecialOffer = Loadable(lazy(() => import('pages/forms/special-offer')));\nconst FormEditBlog = Loadable(lazy(() => import('pages/edit-form-grids/blogs.jsx')));\nconst FormEditServices = Loadable(lazy(() => import('pages/edit-form-grids/services.jsx')));\n\nconst ReactTableServices = Loadable(lazy(() => import('pages/tables/services-sorting')));\nconst ReactTableJobs = Loadable(lazy(() => import('pages/tables/jobs-sorting')));\nconst ReactTableTeam = Loadable(lazy(() => import('pages/tables/team-sorting')));\nconst ReactTableBlogs = Loadable(lazy(() => import('pages/tables/blogs-sorting')));\nconst ReactTableWorks = Loadable(lazy(() => import('pages/tables/works-sorting')));\n\n// render - charts & map\nconst ChartApexchart = Loadable(lazy(() => import('pages/charts/apexchart')));\nconst ChartOrganization = Loadable(lazy(() => import('pages/charts/org-chart')));\nconst Map = Loadable(lazy(() => import('pages/map')));\n\n// pages routing\nconst AuthLogin = Loadable(lazy(() => import('pages/auth/auth1/login')));\nconst AuthRegister = Loadable(lazy(() => import('pages/auth/auth1/register')));\nconst AuthForgotPassword = Loadable(lazy(() => import('pages/auth/auth1/forgot-password')));\nconst AuthResetPassword = Loadable(lazy(() => import('pages/auth/auth1/reset-password')));\nconst AuthCheckMail = Loadable(lazy(() => import('pages/auth/auth1/check-mail')));\nconst AuthCodeVerification = Loadable(lazy(() => import('pages/auth/auth1/code-verification')));\n\nconst AuthLogin2 = Loadable(lazy(() => import('pages/auth/auth2/login2')));\nconst AuthRegister2 = Loadable(lazy(() => import('pages/auth/auth2/register2')));\nconst AuthForgotPassword2 = Loadable(lazy(() => import('pages/auth/auth2/forgot-password2')));\nconst AuthResetPassword2 = Loadable(lazy(() => import('pages/auth/auth2/reset-password2')));\nconst AuthCheckMail2 = Loadable(lazy(() => import('pages/auth/auth2/check-mail2')));\nconst AuthCodeVerification2 = Loadable(lazy(() => import('pages/auth/auth2/code-verification2')));\n\nconst AuthLogin3 = Loadable(lazy(() => import('pages/auth/auth3/login3')));\n\nconst MaintenanceError = Loadable(lazy(() => import('pages/maintenance/error/404')));\nconst MaintenanceError500 = Loadable(lazy(() => import('pages/maintenance/error/500')));\nconst MaintenanceUnderConstruction = Loadable(lazy(() => import('pages/maintenance/under-construction/under-construction')));\nconst MaintenanceUnderConstruction2 = Loadable(lazy(() => import('pages/maintenance/under-construction/under-construction2')));\nconst MaintenanceComingSoon = Loadable(lazy(() => import('pages/maintenance/coming-soon/coming-soon')));\nconst MaintenanceComingSoon2 = Loadable(lazy(() => import('pages/maintenance/coming-soon/coming-soon2')));\n\n// render - sample page\nconst SamplePage = Loadable(lazy(() => import('pages/extra-pages/sample-page')));\nconst PricingPage = Loadable(lazy(() => import('pages/extra-pages/price/price1')));\nconst PricingPage2 = Loadable(lazy(() => import('pages/extra-pages/price/price2')));\n\n// ==============================|| MAIN ROUTES ||============================== //\n\nconst MainRoutes = {\n  path: '/',\n  children: [\n    {\n      path: '/',\n      element: <DashboardLayout />,\n      children: [\n        {\n          path: 'apps',\n          children: [\n            {\n              path: 'chat',\n              element: <AppChat />\n            },\n            {\n              path: 'calendar',\n              element: <AppCalendar />\n            },\n            {\n              path: 'kanban',\n              element: <AppKanban />,\n              children: [\n                {\n                  path: 'backlogs',\n                  element: <AppKanbanBacklogs />\n                },\n                {\n                  path: 'board',\n                  element: <AppKanbanBoard />\n                }\n              ]\n            },\n            {\n              path: 'customer',\n              children: [\n                {\n                  path: 'customer-list',\n                  element: <AppCustomerList />\n                },\n                {\n                  path: 'customer-card',\n                  element: <AppCustomerCard />\n                }\n              ]\n            },\n            {\n              path: 'invoice',\n              children: [\n                {\n                  path: 'dashboard',\n                  element: <AppInvoiceDashboard />\n                },\n                {\n                  path: 'create',\n                  element: <AppInvoiceCreate />\n                },\n                {\n                  path: 'details/:id',\n                  element: <AppInvoiceDetails />\n                },\n                {\n                  path: 'edit/:id',\n                  element: <AppInvoiceEdit />\n                },\n                {\n                  path: 'list',\n                  element: <AppInvoiceList />\n                }\n              ]\n            },\n            {\n              path: 'profiles',\n              children: [\n                {\n                  path: 'account',\n                  element: <AccountProfile />,\n                  children: [\n                    {\n                      path: 'basic',\n                      element: <AccountTabProfile />\n                    },\n                    {\n                      path: 'personal',\n                      element: <AccountTabPersonal />\n                    },\n                    // {\n                    //   path: 'my-account',\n                    //   element: <AccountTabAccount />\n                    // },\n                    {\n                      path: 'password',\n                      element: <AccountTabPassword />\n                    },\n                    // {\n                    //   path: 'role',\n                    //   element: <AccountTabRole />\n                    // },\n                    {\n                      path: 'settings',\n                      element: <AccountTabSettings />\n                    }\n                  ]\n                },\n                {\n                  path: 'user',\n                  element: <UserProfile />,\n                  children: [\n                    {\n                      path: 'personal',\n                      element: <UserTabPersonal />\n                    },\n                    {\n                      path: 'payment',\n                      element: <UserTabPayment />\n                    },\n                    {\n                      path: 'password',\n                      element: <UserTabPassword />\n                    },\n                    {\n                      path: 'settings',\n                      element: <UserTabSettings />\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              path: 'e-commerce',\n              children: [\n                {\n                  path: 'products',\n                  element: <AppECommProducts />,\n                  loader: productsLoader,\n                  errorElement: <ErrorBoundary />\n                },\n                {\n                  path: 'product-details/:id',\n                  element: <AppECommProductDetails />,\n                  loader: productLoader,\n                  errorElement: <ErrorBoundary />\n                },\n                {\n                  path: 'product-list',\n                  element: <AppECommProductList />,\n                  loader: productsLoader,\n                  errorElement: <ErrorBoundary />\n                },\n                {\n                  path: 'add-new-product',\n                  element: <AppECommAddProduct />\n                },\n                {\n                  path: 'checkout',\n                  element: <AppECommCheckout />\n                }\n              ]\n            }\n          ]\n        },\n        {\n          path: 'forms',\n          children: [\n            {\n              path: 'services',\n              element: <FormServices />\n            },\n            {\n              path: 'jobs',\n              element: <FormJobs />\n            },\n            {\n              path: 'blog',\n              element: <FormBlog />\n            },\n            {\n              path: 'work',\n              element: <FormWork />\n            },\n            {\n              path: 'team',\n              element: <FormTeam />\n            },\n            {\n              path: 'special-offer',\n              element: <FormSpecialOffer />\n            },\n            {\n              path: 'edit',\n              children: [\n                {\n                  path: 'blog/:id',\n                  element: <FormEditBlog />\n                },\n                {\n                  path: 'jobs/:id',\n                  element: <FormEditJobs />\n                },\n                {\n                  path: 'team/:id',\n                  element: <FormEditTeam />\n                },\n                {\n                  path: 'works/:id',\n                  element: <FormEditWorks />\n                },\n                {\n                  path: 'services/:id',\n                  element: <FormEditServices />\n                }\n              ]\n            }\n          ]\n        },\n        {\n          path: 'tables',\n          children: [\n            {\n              path: 'services',\n              element: <ReactTableServices />\n            },\n            {\n              path: 'jobs',\n              element: <ReactTableJobs />\n            },\n            {\n              path: 'team',\n              element: <ReactTableTeam />\n            },\n            {\n              path: 'blogs',\n              element: <ReactTableBlogs />\n            },\n            {\n              path: 'works',\n              element: <ReactTableWorks />\n            }\n          ]\n        },\n        {\n          path: 'charts',\n          children: [\n            {\n              path: 'apexchart',\n              element: <ChartApexchart />\n            },\n            {\n              path: 'org-chart',\n              element: <ChartOrganization />\n            }\n          ]\n        },\n        {\n          path: 'map',\n          element: <Map />\n        },\n        {\n          path: 'sample-page',\n          element: <SamplePage />\n        },\n        {\n          path: 'price',\n          children: [\n            {\n              path: 'price1',\n              element: <PricingPage />\n            },\n            {\n              path: 'price2',\n              element: <PricingPage2 />\n            }\n          ]\n        }\n      ]\n    },\n    {\n      path: '/maintenance',\n      element: <PagesLayout />,\n      children: [\n        {\n          path: '404',\n          element: <MaintenanceError />\n        },\n        {\n          path: '500',\n          element: <MaintenanceError500 />\n        },\n        {\n          path: 'under-construction',\n          element: <MaintenanceUnderConstruction />\n        },\n        {\n          path: 'under-construction2',\n          element: <MaintenanceUnderConstruction2 />\n        },\n        {\n          path: 'coming-soon',\n          element: <MaintenanceComingSoon />\n        },\n        {\n          path: 'coming-soon2',\n          element: <MaintenanceComingSoon2 />\n        }\n      ]\n    },\n    {\n      path: '/auth',\n      element: <PagesLayout />,\n      children: [\n        {\n          path: 'login',\n          element: <AuthLogin />\n        },\n        {\n          path: 'register',\n          element: <AuthRegister />\n        },\n        {\n          path: 'forgot-password',\n          element: <AuthForgotPassword />\n        },\n        {\n          path: 'reset-password',\n          element: <AuthResetPassword />\n        },\n        {\n          path: 'check-mail',\n          element: <AuthCheckMail />\n        },\n        {\n          path: 'code-verification',\n          element: <AuthCodeVerification />\n        },\n        {\n          path: 'login2',\n          element: <AuthLogin2 />\n        },\n        {\n          path: 'register2',\n          element: <AuthRegister2 />\n        },\n        {\n          path: 'forgot-password2',\n          element: <AuthForgotPassword2 />\n        },\n        {\n          path: 'reset-password2',\n          element: <AuthResetPassword2 />\n        },\n        {\n          path: 'check-mail2',\n          element: <AuthCheckMail2 />\n        },\n        {\n          path: 'code-verification2',\n          element: <AuthCodeVerification2 />\n        },\n        {\n          path: 'login3',\n          element: <AuthLogin3 />\n        }\n      ]\n    },\n    {\n      path: '*',\n      element: <MaintenanceError />\n    }\n  ]\n};\n\nexport default MainRoutes;\n","size_bytes":16184},"src/sections/widget/statistics/DropboxStorage.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Cloud } from 'iconsax-react';\nimport cardBack from 'assets/images/widget/img-dropbox-bg.svg';\n\n// ===========================|| STATISTICS - DROPBOX ||=========================== //\n\nexport default function DropboxStorage() {\n  const theme = useTheme();\n\n  return (\n    <MainCard\n      sx={{\n        color: 'common.white',\n        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.800',\n        '&:after': {\n          content: '\"\"',\n          background: `url(\"${cardBack}\") 100% / cover no-repeat`,\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 1,\n          opacity: 0.5\n        }\n      }}\n    >\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Dropbox Storage</Typography>\n            <Typography variant=\"h4\">150GB</Typography>\n          </Stack>\n          <Avatar color=\"secondary\" variant=\"rounded\" sx={{ mt: 0.75, bgcolor: 'secondary.dark' }}>\n            <Cloud color={theme.palette.secondary.light} />\n          </Avatar>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={0.75}>\n            <Typography variant=\"caption\">1,342GB of 150GB Users</Typography>\n            <Box sx={{ display: 'flex' }}>\n              <LinearProgress variant=\"determinate\" value={100} color=\"error\" sx={{ width: '15%' }} />\n              <LinearProgress variant=\"determinate\" value={100} color=\"warning\" sx={{ width: '18%', right: 2 }} />\n              <LinearProgress variant=\"determinate\" value={100} color=\"secondary\" sx={{ width: '20%', right: 4 }} />\n              <LinearProgress variant=\"determinate\" value={100} color=\"success\" sx={{ width: '28%', right: 8 }} />\n            </Box>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2388},"src/components/logo/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport ButtonBase from '@mui/material/ButtonBase';\n\n// project-imports\nimport Logo from './LogoMain';\nimport LogoIcon from './LogoIcon';\nimport useAuth from 'hooks/useAuth';\nimport { APP_DEFAULT_PATH } from 'config';\n\n// ==============================|| MAIN LOGO ||============================== //\n\nexport default function LogoSection({ isIcon, sx, to }) {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <ButtonBase disableRipple {...(isLoggedIn && { component: Link, to: !to ? APP_DEFAULT_PATH : to, sx })}>\n      {isIcon ? <LogoIcon /> : <Logo />}\n    </ButtonBase>\n  );\n}\n\nLogoSection.propTypes = { isIcon: PropTypes.bool, sx: PropTypes.any, to: PropTypes.any };\n","size_bytes":766},"src/sections/tables/react-table/ColumnDragDrop.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { DndProvider } from 'react-dnd';\nimport { isMobile } from 'react-device-detect';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\n\n// project-import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, DraggableColumnHeader } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ defaultColumns, data }) {\n  const [columns] = useState(() => [...defaultColumns]);\n\n  const [columnOrder, setColumnOrder] = useState(\n    // must start out with populated columnOrder so we can splice\n    columns.map((column) => column.id)\n  );\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      columnOrder\n    },\n    onColumnOrderChange: setColumnOrder,\n    getCoreRowModel: getCoreRowModel(),\n    debugTable: true,\n    debugHeaders: true,\n    debugColumns: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title=\"Column Drag & Drop (Ordering)\"\n      content={false}\n      secondary={<CSVExport {...{ data, headers, filename: 'column-dragable.csv' }} />}\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DraggableColumnHeader key={header.id} header={header} table={table}>\n                      <>{header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}</>\n                    </DraggableColumnHeader>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| COLUMN - DRAG & DROP ||============================== //\n\nexport default function ColumnDragDrop() {\n  const data = useMemo(() => makeData(9), []);\n\n  const defaultColumns = [\n    {\n      id: 'firstName',\n      header: 'First Name',\n      footer: 'First Name',\n      accessorKey: 'firstName'\n    },\n    {\n      id: 'lastName',\n      header: 'Last Name',\n      footer: 'Last Name',\n      accessorKey: 'lastName'\n    },\n    {\n      id: 'email',\n      header: 'Email',\n      footer: 'Email',\n      accessorKey: 'email'\n    },\n    {\n      id: 'age',\n      header: 'Age',\n      footer: 'Age',\n      accessorKey: 'age',\n      meta: {\n        className: 'cell-right'\n      }\n    },\n    {\n      id: 'visits',\n      header: 'Visits',\n      footer: 'Visits',\n      accessorKey: 'visits',\n      meta: {\n        className: 'cell-right'\n      }\n    },\n    {\n      id: 'status',\n      header: 'Status',\n      footer: 'Status',\n      accessorKey: 'status',\n      cell: (props) => {\n        switch (props.getValue()) {\n          case 'Complicated':\n            return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n          case 'Relationship':\n            return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n          case 'Single':\n          default:\n            return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n        }\n      }\n    },\n    {\n      id: 'progress',\n      header: 'Profile Progress',\n      footer: 'Profile Progress',\n      accessorKey: 'progress',\n      cell: (props) => <LinearWithLabel value={props.getValue()} sx={{ minWidth: 75 }} />\n    }\n  ];\n\n  return (\n    <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n      <ReactTable {...{ defaultColumns, data }} />\n    </DndProvider>\n  );\n}\n\nColumnDragDrop.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { defaultColumns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5250},"src/pages/apps/kanban/index.jsx":{"content":"import { useState } from 'react';\nimport { useLocation, Link, Outlet } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport { APP_DEFAULT_PATH } from 'config';\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| APPLICATION - KANBAN ||============================== //\n\nexport default function KanbanPage() {\n  const { pathname } = useLocation();\n\n  let selectedTab = 0;\n  let breadcrumbTitle = '';\n  let breadcrumbHeading = '';\n  switch (pathname) {\n    case '/apps/kanban/backlogs':\n      breadcrumbTitle = 'Backlogs';\n      breadcrumbHeading = 'Backlogs';\n      selectedTab = 1;\n      break;\n    case '/apps/kanban/board':\n    default:\n      breadcrumbTitle = 'Board';\n      breadcrumbHeading = 'Taskboard';\n      selectedTab = 0;\n  }\n\n  const [value, setValue] = useState(selectedTab);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  let breadcrumbLinks = [\n    { title: 'Home', to: APP_DEFAULT_PATH },\n    { title: 'Kanban', to: '/apps/kanban/board' },\n    { title: breadcrumbTitle }\n  ];\n  if (selectedTab === 0) {\n    breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Kanban' }];\n  }\n\n  return (\n    <>\n      <Breadcrumbs custom heading={breadcrumbHeading} links={breadcrumbLinks} />\n      <Box sx={{ display: 'flex' }}>\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <Tabs value={value} variant=\"scrollable\" onChange={handleChange}>\n              <Tab component={Link} to=\"/apps/kanban/board\" label={value === 0 ? 'Board' : 'View as Board'} {...a11yProps(0)} />\n              <Tab component={Link} to=\"/apps/kanban/backlogs\" label={value === 1 ? 'Backlogs' : 'View as Backlog'} {...a11yProps(1)} />\n            </Tabs>\n          </Grid>\n          <Grid item xs={12}>\n            <Outlet />\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","size_bytes":2180},"src/sections/charts/org-chart/Card.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\n\n// third-party\nimport { TreeNode } from 'react-organizational-chart';\n\n// project-imports\nimport DataCard from './DataCard';\n\n// ==============================|| ORGANIZATION CHART - CARD ||============================== //\n\nexport default function Card({ items }) {\n  return (\n    <>\n      {items.map((item, id) => (\n        <Fragment key={id}>\n          {item.children ? (\n            <TreeNode\n              label={\n                <DataCard\n                  name={item.name}\n                  role={item.role}\n                  avatar={item.avatar}\n                  linkedin={item.linkedin}\n                  facebook={item.facebook}\n                  skype={item.skype}\n                  root={false}\n                />\n              }\n            >\n              <Card items={item.children} />\n            </TreeNode>\n          ) : (\n            <TreeNode\n              label={\n                <DataCard\n                  name={item.name}\n                  role={item.role}\n                  avatar={item.avatar}\n                  linkedin={item.linkedin}\n                  facebook={item.facebook}\n                  skype={item.skype}\n                  root={false}\n                />\n              }\n            />\n          )}\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\nCard.propTypes = { items: PropTypes.any };\n","size_bytes":1398},"src/sections/extra-pages/contact/ContactEmail.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| CONTACT US - EMAIL SECTION ||============================== //\n\nexport default function ContactUsPage() {\n  return (\n    <Box sx={{ bgcolor: 'secondary.200', pb: { md: 10, xs: 7 }, pt: { md: 0.25, xs: 2.5 }, mb: -12 }}>\n      <Container>\n        <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 10, xs: 2.5 } }}>\n          <Grid item xs={12} md={8}>\n            <Grid container spacing={2} justifyContent=\"center\">\n              <Grid item xs={12}>\n                <Typography variant=\"h2\">Be the first to know</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography>\n                  SLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s\n                  standard dummy text ever since the 1500s\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Grid container spacing={2} justifyContent={{ md: 'end', xs: 'center' }} alignItems=\"center\">\n              <Grid item>\n                <TextField id=\"firstNameBasic\" name=\"firstName\" placeholder=\"Enter your email\" fullWidth />\n              </Grid>\n              <Grid item>\n                <Button variant=\"contained\" color=\"primary\" size=\"large\">\n                  Submit\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":1815},"src/themes/theme/theme8.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME8 ||============================== //\n\nexport default function Theme8(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#c1d6d066', '#81c9b9', '#5bbda9', '#38b09c', '#1aa391', '#009688', '#007069', '#004a47', '#002424', '#000000'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1a2524', '#173331', '#15423e', '#11544e', '#0b6c63', '#058478', '#1a9686', '#37a996', '#59b8a5', '#7fc6b6'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2914},"src/components/Customization/ThemeWidth.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport CardMedia from '@mui/material/CardMedia';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport defaultLayout from 'assets/images/customization/fluid.svg';\nimport containerLayout from 'assets/images/customization/container.svg';\n\n// ==============================|| CUSTOMIZATION - CONTAINER ||============================== //\n\nexport default function ThemeWidth() {\n  const theme = useTheme();\n\n  const { container, onChangeContainer } = useConfig();\n\n  const handleContainerChange = () => {\n    onChangeContainer();\n  };\n\n  return (\n    <RadioGroup\n      row\n      aria-label=\"payment-card\"\n      name=\"payment-card\"\n      value={container ? 'container' : 'fluid'}\n      onChange={handleContainerChange}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value=\"fluid\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(!container && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={defaultLayout} alt=\"defaultLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">Fluid</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value=\"container\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(container && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={containerLayout} alt=\"defaultLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">Container</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":2480},"src/themes/overrides/TableCell.js":{"content":"// ==============================|| OVERRIDES - TABLE CELL ||============================== //\n\nexport default function TableCell(theme) {\n  const commonCell = {\n    '&:not(:last-of-type)': {\n      position: 'relative',\n      '&:after': {\n        position: 'absolute',\n        content: '\"\"',\n        backgroundColor: theme.palette.divider,\n        width: 1,\n        height: 'calc(100% - 30px)',\n        right: 0,\n        top: 16\n      }\n    }\n  };\n\n  return {\n    MuiTableCell: {\n      styleOverrides: {\n        root: {\n          fontSize: '0.875rem',\n          padding: 12,\n          borderColor: theme.palette.divider\n        },\n        sizeSmall: {\n          padding: 8\n        },\n        head: {\n          fontSize: '0.75rem',\n          fontWeight: 700,\n          textTransform: 'uppercase',\n          ...commonCell\n        },\n        footer: {\n          fontSize: '0.75rem',\n          textTransform: 'uppercase',\n          ...commonCell\n        }\n      }\n    }\n  };\n}\n","size_bytes":973},"src/sections/charts/apexchart/ApexLineChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst lineChartOptions = {\n  chart: {\n    height: 350,\n    type: 'line',\n    zoom: {\n      enabled: false\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    curve: 'straight'\n  },\n  xaxis: {\n    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep']\n  }\n};\n\n// ==============================|| APEXCHART - LINE ||============================== //\n\nexport default function ApexLineChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const line = theme.palette.divider;\n  const { primary } = theme.palette.text;\n  const grey200 = theme.palette.secondary[200];\n  const secondary = theme.palette.primary[700];\n\n  const [series] = useState([\n    {\n      name: 'Desktops',\n      data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n    }\n  ]);\n\n  const [options, setOptions] = useState(lineChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, secondary]);\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"line\" height={350} />\n    </div>\n  );\n}\n","size_bytes":1818},"src/themes/overrides/OutlinedInput.js":{"content":"// project-imports\nimport getColors from 'utils/getColors';\nimport getShadow from 'utils/getShadow';\nimport { ThemeMode } from 'config';\n\n// ==============================|| OVERRIDES - INPUT BORDER & SHADOWS ||============================== //\n\nfunction getColor({ variant, theme }) {\n  const colors = getColors(theme, variant);\n  const { light } = colors;\n\n  const shadows = getShadow(theme, `${variant}`);\n\n  return {\n    '&:hover .MuiOutlinedInput-notchedOutline': {\n      borderColor: light\n    },\n    '&.Mui-focused': {\n      boxShadow: shadows,\n      '& .MuiOutlinedInput-notchedOutline': {\n        border: '1px solid',\n        borderColor: light\n      }\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - OUTLINED INPUT ||============================== //\n\nexport default function OutlinedInput(theme) {\n  return {\n    MuiOutlinedInput: {\n      styleOverrides: {\n        input: {\n          padding: 14\n        },\n        notchedOutline: {\n          borderColor: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary[400]\n        },\n        root: {\n          '& svg': {\n            color: theme.palette.secondary.main\n          },\n          ...getColor({ variant: 'primary', theme }),\n          '&.Mui-error': {\n            ...getColor({ variant: 'error', theme })\n          }\n        },\n        inputSizeSmall: {\n          padding: '10px 10px 10px 12px'\n        },\n        inputMultiline: {\n          padding: 0\n        },\n        colorSecondary: getColor({ variant: 'secondary', theme }),\n        colorError: getColor({ variant: 'error', theme }),\n        colorWarning: getColor({ variant: 'warning', theme }),\n        colorInfo: getColor({ variant: 'info', theme }),\n        colorSuccess: getColor({ variant: 'success', theme })\n      }\n    }\n  };\n}\n","size_bytes":1812},"src/components/cards/statistics/EcommerceMetrix.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| STATISTICS - REPORT CARD ||============================== //\n\nexport default function EcommerceMetrix({ primary, secondary, content, iconPrimary, color }) {\n  const IconPrimary = iconPrimary;\n  const primaryIcon = iconPrimary ? <IconPrimary size={52} variant=\"Bulk\" /> : null;\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        bgcolor: color,\n        position: 'relative',\n        '&:before, &:after': {\n          content: '\"\"',\n          width: 1,\n          height: 1,\n          position: 'absolute',\n          background: 'linear-gradient(90deg, rgba(255, 255, 255, 0.0001) 22.07%, rgba(255, 255, 255, 0.15) 83.21%)',\n          transform: 'matrix(0.9, 0.44, -0.44, 0.9, 0, 0)'\n        },\n        '&:after': { top: '50%', right: '-20px' },\n        '&:before': { right: '-70px', bottom: '80%' }\n      }}\n    >\n      <Box sx={{ px: 4.5, py: 4 }}>\n        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <Box sx={{ color: 'common.white', opacity: 0.5 }}>{primaryIcon}</Box>\n          </Grid>\n          <Grid item>\n            <Stack spacing={1} alignItems=\"flex-end\">\n              <Typography variant=\"h5\" color=\"common.white\" sx={{ fontWeight: 500 }}>\n                {primary}\n              </Typography>\n              <Typography variant=\"h3\" color=\"common.white\">\n                {secondary}\n              </Typography>\n            </Stack>\n          </Grid>\n        </Grid>\n        <Stack spacing={1} direction=\"row\" justifyContent=\"flex-end\" sx={{ pt: 1.25 }}>\n          <Typography variant=\"h5\" color=\"common.white\" sx={{ fontWeight: 400 }}>\n            {content}\n          </Typography>\n        </Stack>\n      </Box>\n    </MainCard>\n  );\n}\n\nEcommerceMetrix.propTypes = {\n  primary: PropTypes.any,\n  secondary: PropTypes.any,\n  content: PropTypes.any,\n  iconPrimary: PropTypes.any,\n  color: PropTypes.any\n};\n","size_bytes":2206},"src/layout/Dashboard/Drawer/DrawerContent/Navigation/NavItem.jsx":{"content":"import PropTypes from 'prop-types';\nimport { matchPath, useLocation, Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Dot from 'components/@extended/Dot';\nimport IconButton from 'components/@extended/IconButton';\n\nimport useConfig from 'hooks/useConfig';\nimport { MenuOrientation, ThemeMode, NavActionType } from 'config';\nimport { handlerDrawerOpen, useGetMenuMaster } from 'api/menu';\n\n// ==============================|| NAVIGATION - ITEM ||============================== //\n\nexport default function NavItem({ item, level, isParents = false }) {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n  const { mode, menuOrientation } = useConfig();\n\n  let itemTarget = '_self';\n  if (item.target) {\n    itemTarget = '_blank';\n  }\n\n  const Icon = item.icon;\n  const itemIcon = item.icon ? (\n    <Icon\n      variant=\"Bulk\"\n      size={drawerOpen ? 20 : 22}\n      style={{ ...(menuOrientation === MenuOrientation.HORIZONTAL && isParents && { fontSize: 20, stroke: '1.5' }) }}\n    />\n  ) : (\n    false\n  );\n\n  const { pathname } = useLocation();\n  const isSelected = !!matchPath({ path: item?.link ? item.link : item.url, end: false }, pathname);\n\n  const textColor = mode === ThemeMode.DARK ? 'secondary.400' : 'secondary.main';\n  const iconSelectedColor = 'primary.main';\n\n  return (\n    <>\n      {menuOrientation === MenuOrientation.VERTICAL || downLG ? (\n        <Box sx={{ position: 'relative' }}>\n          <ListItemButton\n            component={Link}\n            to={item.url}\n            target={itemTarget}\n            disabled={item.disabled}\n            selected={isSelected}\n            sx={{\n              zIndex: 1201,\n              pl: drawerOpen ? `${level * 20}px` : 1.5,\n              py: !drawerOpen && level === 1 ? 1.25 : 1,\n              ...(drawerOpen && {\n                '&:hover': { bgcolor: 'transparent' },\n                '&.Mui-selected': { '&:hover': { bgcolor: 'transparent' }, bgcolor: 'transparent' }\n              }),\n              ...(drawerOpen &&\n                level === 1 && {\n                  mx: 1.25,\n                  my: 0.5,\n                  borderRadius: 1,\n                  '&:hover': { bgcolor: mode === ThemeMode.DARK ? 'divider' : 'secondary.200' },\n                  '&.Mui-selected': { color: iconSelectedColor, '&:hover': { color: iconSelectedColor } }\n                }),\n              ...(!drawerOpen && {\n                px: 2.75,\n                justifyContent: 'center',\n                '&:hover': { bgcolor: 'transparent' },\n                '&.Mui-selected': { '&:hover': { bgcolor: 'transparent' }, bgcolor: 'transparent' }\n              })\n            }}\n            {...(downLG && { onClick: () => handlerDrawerOpen(false) })}\n          >\n            {itemIcon && (\n              <ListItemIcon\n                sx={{\n                  minWidth: 38,\n                  color: isSelected ? iconSelectedColor : textColor,\n                  ...(!drawerOpen &&\n                    level === 1 && {\n                      borderRadius: 1,\n                      width: 46,\n                      height: 46,\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      '&:hover': { bgcolor: mode === ThemeMode.DARK ? 'secondary.light' : 'secondary.200' }\n                    }),\n                  ...(!drawerOpen &&\n                    isSelected && {\n                      bgcolor: mode === ThemeMode.DARK ? 'secondary.100' : 'primary.lighter',\n                      '&:hover': {\n                        bgcolor: mode === ThemeMode.DARK ? 'secondary.200' : 'primary.lighter'\n                      }\n                    })\n                }}\n              >\n                {itemIcon}\n              </ListItemIcon>\n            )}\n\n            {!itemIcon && drawerOpen && (\n              <ListItemIcon\n                sx={{\n                  minWidth: 30\n                }}\n              >\n                <Dot size={isSelected ? 6 : 5} color={isSelected ? 'primary' : 'secondary'} />\n              </ListItemIcon>\n            )}\n\n            {(drawerOpen || (!drawerOpen && level !== 1)) && (\n              <ListItemText\n                primary={\n                  <Typography variant=\"h6\" sx={{ color: isSelected ? iconSelectedColor : textColor, fontWeight: isSelected ? 500 : 400 }}>\n                    {item.title}\n                  </Typography>\n                }\n              />\n            )}\n            {(drawerOpen || (!drawerOpen && level !== 1)) && item.chip && (\n              <Chip\n                color={item.chip.color}\n                variant={item.chip.variant}\n                size={item.chip.size}\n                label={item.chip.label}\n                avatar={item.chip.avatar && <Avatar>{item.chip.avatar}</Avatar>}\n              />\n            )}\n          </ListItemButton>\n          {(drawerOpen || (!drawerOpen && level !== 1)) &&\n            item?.actions &&\n            item?.actions.map((action, index) => {\n              const ActionIcon = action?.icon;\n              const callAction = action?.function;\n              return (\n                <IconButton\n                  key={index}\n                  {...(action.type === NavActionType.FUNCTION && {\n                    onClick: (event) => {\n                      event.stopPropagation();\n                      callAction();\n                    }\n                  })}\n                  {...(action.type === NavActionType.LINK && {\n                    component: Link,\n                    to: action.url,\n                    target: action.target ? '_blank' : '_self'\n                  })}\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                  sx={{\n                    position: 'absolute',\n                    top: 12,\n                    right: 20,\n                    zIndex: 1202,\n                    width: 20,\n                    height: 20,\n                    p: 0.25,\n                    color: 'secondary.dark',\n                    borderColor: isSelected ? 'primary.light' : 'secondary.light',\n                    '&:hover': { borderColor: isSelected ? 'primary.main' : 'secondary.main' }\n                  }}\n                >\n                  <ActionIcon\n                    size={12}\n                    color={mode === ThemeMode.DARK ? theme.palette.secondary[400] : theme.palette.secondary.main}\n                    style={{ marginLeft: 1 }}\n                  />\n                </IconButton>\n              );\n            })}\n        </Box>\n      ) : (\n        <ListItemButton\n          component={Link}\n          to={item.url}\n          target={itemTarget}\n          disabled={item.disabled}\n          selected={isSelected}\n          sx={{\n            zIndex: 1201,\n            '&:hover': { bgcolor: 'transparent' },\n            ...(isParents && { color: textColor, p: 1, mr: 1 }),\n            '&.Mui-selected': {\n              bgcolor: 'transparent',\n              color: iconSelectedColor,\n              '&:hover': { color: iconSelectedColor, bgcolor: 'transparent' }\n            }\n          }}\n        >\n          {itemIcon && (\n            <ListItemIcon\n              sx={{\n                minWidth: 36,\n                ...(!drawerOpen && {\n                  borderRadius: 1,\n                  width: 36,\n                  height: 26,\n                  alignItems: 'center',\n                  justifyContent: 'flex-start',\n                  '&:hover': { bgcolor: 'transparent' }\n                }),\n                ...(!drawerOpen && isSelected && { bgcolor: 'transparent', '&:hover': { bgcolor: 'transparent' } })\n              }}\n            >\n              {itemIcon}\n            </ListItemIcon>\n          )}\n\n          <ListItemText\n            primary={\n              <Typography variant=\"h6\" sx={{ color: isSelected ? iconSelectedColor : textColor, fontWeight: isSelected ? 500 : 400 }}>\n                {item.title}\n              </Typography>\n            }\n          />\n          {(drawerOpen || (!drawerOpen && level !== 1)) && item.chip && (\n            <Chip\n              color={item.chip.color}\n              variant={item.chip.variant}\n              size={item.chip.size}\n              label={item.chip.label}\n              avatar={item.chip.avatar && <Avatar>{item.chip.avatar}</Avatar>}\n              sx={{ ml: 1 }}\n            />\n          )}\n        </ListItemButton>\n      )}\n    </>\n  );\n}\n\nNavItem.propTypes = { item: PropTypes.any, level: PropTypes.number, isParents: PropTypes.bool };\n","size_bytes":9071},"src/setupTests.js":{"content":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n","size_bytes":241},"src/components/third-party/map/MapPopup.jsx":{"content":"import PropTypes from 'prop-types';\n\n// project-import\nimport PopupStyled from './PopupStyled';\n\n// ==============================|| MAP BOX - MODAL ||============================== //\n\nexport default function MapPopup({ sx, children, ...other }) {\n  return (\n    <PopupStyled anchor=\"bottom\" sx={sx} {...other}>\n      {children}\n    </PopupStyled>\n  );\n}\n\nMapPopup.propTypes = { sx: PropTypes.object, children: PropTypes.any, other: PropTypes.any };\n","size_bytes":451},"src/themes/overrides/Link.js":{"content":"// ==============================|| OVERRIDES - LINK ||============================== //\n\nexport default function Link() {\n  return {\n    MuiLink: {\n      defaultProps: {\n        underline: 'hover'\n      }\n    }\n  };\n}\n","size_bytes":219},"src/hooks/useConfig.js":{"content":"import { useContext } from 'react';\nimport { ConfigContext } from 'contexts/ConfigContext';\n\n// ==============================|| HOOKS - CONFIG  ||============================== //\n\nexport default function useConfig() {\n  return useContext(ConfigContext);\n}\n","size_bytes":258},"src/themes/overrides/ToggleButton.js":{"content":"// ==============================|| OVERRIDES - TOGGLE BUTTON ||============================== //\n\nexport default function ToggleButton(theme) {\n  return {\n    MuiToggleButton: {\n      styleOverrides: {\n        root: {\n          '& svg': {\n            width: 18,\n            height: 18\n          },\n          '&.Mui-disabled': {\n            borderColor: theme.palette.divider,\n            color: theme.palette.text.disabled\n          },\n          '&:focus-visible': {\n            outline: `2px solid ${theme.palette.secondary.dark}`,\n            outlineOffset: 2\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":606},"src/sections/components-overview/date-time-picker/LocalizedPicker.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateField } from '@mui/x-date-pickers/DateField';\nimport { TimeField } from '@mui/x-date-pickers/TimeField';\n\n// third-party\nimport de from 'date-fns/locale/de';\nimport enGB from 'date-fns/locale/en-GB';\nimport zhCN from 'date-fns/locale/zh-CN';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst locales = { 'en-us': undefined, 'en-gb': enGB, 'zh-cn': zhCN, de };\n\n// ==============================|| DATE PICKER - LOCALIZED ||============================== //\n\nexport default function LocalizedPicker() {\n  const [locale, setLocale] = useState('en-us');\n\n  const selectLocale = (newLocale) => {\n    setLocale(newLocale);\n  };\n\n  const localizeDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={localeMap[locale]}>\n  <div>\n    <ToggleButtonGroup value={locale} exclusive sx={{ mb: 2, display: 'block' }}>\n      {Object.keys(localeMap).map((localeItem) => (\n        <ToggleButton key={localeItem} value={localeItem} onClick={() => selectLocale(localeItem)}>\n          {localeItem}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n    <DatePicker\n      mask={maskMap[locale]}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n      renderInput={(params) => <TextField {...params} />}\n    />\n  </div>\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Localization Picker\" codeString={localizeDatepickerCodeString}>\n      <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={locales[locale]}>\n        <Stack spacing={3} sx={{ width: 300 }}>\n          <ToggleButtonGroup value={locale} exclusive fullWidth>\n            {Object.keys(locales).map((localeItem) => (\n              <ToggleButton key={localeItem} value={localeItem} onClick={() => selectLocale(localeItem)}>\n                {localeItem}\n              </ToggleButton>\n            ))}\n          </ToggleButtonGroup>\n          <DateField label=\"Date\" defaultValue={new Date('2022-04-17')} />\n          <TimeField label=\"Time\" defaultValue={new Date('2022-04-17T18:30')} />\n        </Stack>\n      </LocalizationProvider>\n    </MainCard>\n  );\n}\n","size_bytes":2478},"src/components/third-party/react-table/CSVExport.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Tooltip from '@mui/material/Tooltip';\n\n// third-party\nimport { CSVLink } from 'react-csv';\n\nimport { DocumentDownload } from 'iconsax-react';\n\n// ==============================|| CSV EXPORT ||============================== //\n\nexport default function CSVExport({ data, filename, headers }) {\n  const theme = useTheme();\n\n  return (\n    <CSVLink data={data} filename={filename} headers={headers}>\n      <Tooltip title=\"CSV Export\">\n        <DocumentDownload\n          size={28}\n          variant=\"Outline\"\n          style={{ color: theme.palette.text.secondary, marginTop: 4, marginRight: 4, marginLeft: 4 }}\n        />\n      </Tooltip>\n    </CSVLink>\n  );\n}\n\nCSVExport.propTypes = { data: PropTypes.array, filename: PropTypes.string, headers: PropTypes.any };\n","size_bytes":867},"src/utils/password-validation.js":{"content":"// ==============================|| CUSTOM FUNCTION - PASSWORD VALIDATION ||============================== //\n\nfunction isNumber(value) {\n  return new RegExp('^(?=.*[0-9]).+$').test(value);\n}\n\nfunction isLowercaseChar(value) {\n  return new RegExp('^(?=.*[a-z]).+$').test(value);\n}\n\nfunction isUppercaseChar(value) {\n  return new RegExp('^(?=.*[A-Z]).+$').test(value);\n}\n\nfunction isSpecialChar(value) {\n  return new RegExp('^(?=.*[-+_!@#$%^&*.,?]).+$').test(value);\n}\n\nfunction minLength(value) {\n  return value.length > 7;\n}\n\nexport { isNumber, isLowercaseChar, isUppercaseChar, isSpecialChar, minLength };\n","size_bytes":608},"src/sections/components-overview/autocomplete/BasicAutocomplete.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - BASIC ||============================== //\n\nexport default function BasicAutocomplete() {\n  const basicAutocompleteCodeString = `<Autocomplete\n  fullWidth\n  disablePortal\n  id=\"basic-autocomplete-label\"\n  options={data}\n  renderInput={(params) => <TextField {...params} label=\"Label\" />}\n/>\n<Autocomplete\n  fullWidth\n  disablePortal\n  id=\"basic-autocomplete\"\n  options={data}\n  renderInput={(params) => <TextField {...params} placeholder=\"Placeholder\" />}\n/>`;\n\n  return (\n    <MainCard title=\"Basic\" sx={{ overflow: 'visible' }} codeHighlight codeString={basicAutocompleteCodeString}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} lg={6}>\n          <Autocomplete\n            fullWidth\n            disablePortal\n            id=\"basic-autocomplete-label\"\n            options={data}\n            renderInput={(params) => <TextField {...params} label=\"Label\" />}\n          />\n        </Grid>\n        <Grid item xs={12} lg={6}>\n          <Autocomplete\n            fullWidth\n            disablePortal\n            id=\"basic-autocomplete\"\n            options={data}\n            renderInput={(params) => <TextField {...params} placeholder=\"Placeholder\" />}\n          />\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":1535},"src/sections/widget/data/TotalRevenue.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\n// assets\nimport { ArrowDown2, ArrowUp2 } from 'iconsax-react';\n\n// ===========================|| DATA WIDGET - TOTAL REVENUE ||=========================== //\n\nexport default function TotalRevenue() {\n  const theme = useTheme();\n\n  const successSX = { color: theme.palette.success.main };\n  const errorSX = { color: theme.palette.error.main };\n\n  return (\n    <MainCard title=\"Total Revenue\" content={false}>\n      <SimpleBar sx={{ height: 334 }}>\n        <List\n          disablePadding\n          component=\"nav\"\n          aria-label=\"main mailbox folders\"\n          sx={{\n            '& .MuiListItemButton-root': { borderRadius: 0, my: 0, py: 1.5 },\n            '& .MuiListItemText-root': { color: 'text.primary' },\n            '& svg': { mr: { xs: 1, sm: 4, md: 8, lg: 12 } }\n          }}\n        >\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowUp2 variant=\"Bold\" size={20} style={successSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Bitcoin</span>\n                  <Typography variant=\"subtitle1\" sx={successSX}>\n                    + $145.85\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ethereum</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $6.368\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowUp2 variant=\"Bold\" size={20} style={successSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ripple</span>\n                  <Typography variant=\"subtitle1\" sx={successSX}>\n                    + $458.63\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Neo</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $5.631\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ethereum</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $6.368\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowUp2 variant=\"Bold\" size={20} style={successSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ripple</span>\n                  <Typography variant=\"subtitle1\" sx={successSX}>\n                    + $458.63\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Neo</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $5.631\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ethereum</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $6.368\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowUp2 variant=\"Bold\" size={20} style={successSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Ripple</span>\n                  <Typography variant=\"subtitle1\" sx={successSX}>\n                    + $458.63\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemIcon>\n              <ArrowDown2 variant=\"Bold\" size={20} style={errorSX} />\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <span>Neo</span>\n                  <Typography variant=\"subtitle1\" sx={errorSX}>\n                    - $5.631\n                  </Typography>\n                </Stack>\n              }\n            />\n          </ListItemButton>\n        </List>\n      </SimpleBar>\n    </MainCard>\n  );\n}\n","size_bytes":6999},"src/sections/widget/data/RecentTickets.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// table data\nconst createData = (badgeText, badgeType, subject, dept, date) => ({\n  badgeText,\n  badgeType,\n  subject,\n  dept,\n  date\n});\n\nconst rows = [\n  createData('Open', 'default', 'Website down for one week', 'Support', 'Today 2:00'),\n  createData('Progress', 'primary', 'Loosing control on server', 'Support', 'Yesterday'),\n  createData('Closed', 'secondary', 'Authorizations keys', 'Support', '27, Aug'),\n  createData('Open', 'default', 'Restoring default settings', 'Support', 'Today 9:00'),\n  createData('Progress', 'primary', 'Loosing control on server', 'Support', 'Yesterday'),\n  createData('Closed', 'secondary', 'Authorizations keys', 'Support', '27, Aug'),\n  createData('Open', 'default', 'Restoring default settings', 'Support', 'Today 9:00'),\n  createData('Closed', 'secondary', 'Authorizations keys', 'Support', '27, Aug')\n];\n\n// ==========================|| DATA WIDGET - RECENT TICKETS ||========================== //\n\nexport default function RecentTickets() {\n  return (\n    <MainCard\n      title=\"Recent Tickets\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pl: 3 }}>Subject</TableCell>\n              <TableCell>Department</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell align=\"right\" sx={{ pr: 3 }}>\n                Status\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => {\n              let color = 'secondary';\n              switch (row.badgeText.toLowerCase()) {\n                case 'open':\n                  color = 'success';\n                  break;\n                case 'progress':\n                  color = 'primary';\n                  break;\n                case 'error':\n                default:\n                  color = 'error';\n              }\n              return (\n                <TableRow hover key={index} sx={{ '& .MuiTableCell-root': { borderBottom: 'none' } }}>\n                  <TableCell sx={{ pl: 3 }}>{row.subject}</TableCell>\n                  <TableCell>{row.dept}</TableCell>\n                  <TableCell>{row.date}</TableCell>\n                  <TableCell align=\"right\" sx={{ pr: 3 }}>\n                    <Chip color={color} label={row.badgeText.toLowerCase()} size=\"small\" variant=\"light\" sx={{ borderRadius: 1 }} />\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":3198},"src/sections/components-overview/select/BasicSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| SELECT - BASIC ||============================== //\n\nexport default function BasicSelect() {\n  const [age, setAge] = useState('');\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const basicSelectCodeString = `<FormControl fullWidth>\n  <InputLabel id=\"demo-simple-select-label\">Select Age</InputLabel>\n  <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={age} placeholder=\"Age\" onChange={handleChange}>\n    <MenuItem value={10}>Ten</MenuItem>\n    <MenuItem value={20}>Twenty</MenuItem>\n    <MenuItem value={30}>Thirty</MenuItem>\n  </Select>\n</FormControl>\n<FormControl sx={{ m: 1, minWidth: 120 }}>\n  <FormHelperText>Without label</FormHelperText>\n  <Select value={age} onChange={handleChange} displayEmpty inputProps={{ 'aria-label': 'Without label' }}>\n    <MenuItem value=\"\" sx={{ color: 'text.secondary' }}>\n      Select Age\n    </MenuItem>\n    <MenuItem value={10}>Ten</MenuItem>\n    <MenuItem value={20}>Twenty</MenuItem>\n    <MenuItem value={30}>Thirty</MenuItem>\n  </Select>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"Basic\" codeHighlight codeString={basicSelectCodeString}>\n      <Grid container spacing={2.5}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <InputLabel>Age</InputLabel>\n            <FormControl fullWidth>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                displayEmpty\n                id=\"demo-simple-select\"\n                value={age}\n                placeholder=\"Age\"\n                onChange={handleChange}\n              >\n                <MenuItem disabled value=\"\" sx={{ color: 'text.secondary' }}>\n                  Select Age\n                </MenuItem>\n                <MenuItem value={10}>Ten</MenuItem>\n                <MenuItem value={20}>Twenty</MenuItem>\n                <MenuItem value={30}>Thirty</MenuItem>\n              </Select>\n            </FormControl>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <Select value={age} onChange={handleChange} displayEmpty inputProps={{ 'aria-label': 'Without label' }}>\n              <MenuItem disabled value=\"\" sx={{ color: 'text.secondary' }}>\n                Without label\n              </MenuItem>\n              <MenuItem value={10}>Ten</MenuItem>\n              <MenuItem value={20}>Twenty</MenuItem>\n              <MenuItem value={30}>Thirty</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2948},"src/themes/typography.js":{"content":"// ==============================|| DEFAULT THEME - TYPOGRAPHY  ||============================== //\n\nexport default function Typography(fontFamily) {\n  return {\n    htmlFontSize: 16,\n    fontFamily,\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500,\n    fontWeightBold: 600,\n    h1: {\n      fontWeight: 600,\n      fontSize: '2.375rem',\n      lineHeight: 1.21\n    },\n    h2: {\n      fontWeight: 600,\n      fontSize: '1.875rem',\n      lineHeight: 1.27\n    },\n    h3: {\n      fontWeight: 600,\n      fontSize: '1.5rem',\n      lineHeight: 1.33\n    },\n    h4: {\n      fontWeight: 600,\n      fontSize: '1.25rem',\n      lineHeight: 1.4\n    },\n    h5: {\n      fontWeight: 600,\n      fontSize: '1rem',\n      lineHeight: 1.5\n    },\n    h6: {\n      fontWeight: 400,\n      fontSize: '0.875rem',\n      lineHeight: 1.57\n    },\n    caption: {\n      fontWeight: 400,\n      fontSize: '0.75rem',\n      lineHeight: 1.66\n    },\n    body1: {\n      fontSize: '0.875rem',\n      lineHeight: 1.57\n    },\n    body2: {\n      fontSize: '0.75rem',\n      lineHeight: 1.66\n    },\n    subtitle1: {\n      fontSize: '0.875rem',\n      fontWeight: 600,\n      lineHeight: 1.57\n    },\n    subtitle2: {\n      fontSize: '0.75rem',\n      fontWeight: 500,\n      lineHeight: 1.66\n    },\n    overline: {\n      lineHeight: 1.66\n    },\n    button: {\n      textTransform: 'capitalize'\n    }\n  };\n}\n","size_bytes":1380},"src/sections/apps/profiles/account/TabRole.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// table data\nfunction createData(name, avatar, email, role, status) {\n  return { name, avatar, email, role, status };\n}\n\nconst rows = [\n  createData('Frozen Tek', 'avatar-1.png', 'owner@company.com', 1, true),\n  createData('Eclair Dues', 'avatar-3.png', 'manager@company.com', 2, true),\n  createData('Schem Lein', 'avatar-2.png', 'sl@company.com', 3, false),\n  createData('Jhon Doe', 'avatar-4.png', 'jd@company.com', 3, true),\n  createData('Tevoni Wug', 'avatar-5.png', 'tw@company.com', 0, false)\n];\n\n// ==============================|| ACCOUNT PROFILE - ROLE ||============================== //\n\nexport default function TabRole() {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard title=\"Invite Team Members\" content={false}>\n          <Stack spacing={2.5} sx={{ p: 2.5 }}>\n            <Typography variant=\"h4\">\n              5/10{' '}\n              <Typography variant=\"subtitle1\" component=\"span\">\n                members available in your plan.\n              </Typography>\n            </Typography>\n            <Divider />\n            <Stack\n              spacing={3}\n              direction=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-end\"\n              sx={{ width: { xs: 1, md: '80%', lg: '60%' } }}\n            >\n              <Stack spacing={1} sx={{ width: `calc(100% - 110px)` }}>\n                <InputLabel htmlFor=\"outlined-email\">Email Address</InputLabel>\n                <TextField fullWidth id=\"outlined-email\" variant=\"outlined\" placeholder=\"Enter your email address\" />\n              </Stack>\n              <Button variant=\"contained\" size=\"large\">\n                Send\n              </Button>\n            </Stack>\n          </Stack>\n          <TableContainer>\n            <Table sx={{ minWidth: 350 }} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell sx={{ pl: 3 }}>Member</TableCell>\n                  <TableCell>Role</TableCell>\n                  <TableCell align=\"right\">Status</TableCell>\n                  <TableCell align=\"right\" />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows.map((row) => (\n                  <TableRow hover key={row.name}>\n                    <TableCell sx={{ pl: 3 }} component=\"th\">\n                      <Stack direction=\"row\" alignItems=\"center\" spacing={1.25}>\n                        <Avatar alt=\"Avatar 1\" src={getImageUrl(`${row.avatar}`, ImagePath.USERS)} />\n                        <Stack spacing={0}>\n                          <Typography variant=\"subtitle1\">{row.name}</Typography>\n                          <Typography variant=\"caption\" color=\"secondary\">\n                            {row.email}\n                          </Typography>\n                        </Stack>\n                      </Stack>\n                    </TableCell>\n                    <TableCell>\n                      {row.role === 1 && <Chip size=\"small\" color=\"primary\" label=\"Owner\" />}\n                      {row.role === 2 && <Chip size=\"small\" variant=\"light\" color=\"info\" label=\"Manager\" />}\n                      {row.role === 3 && <Chip size=\"small\" variant=\"light\" color=\"warning\" label=\"Staff\" />}\n                      {row.role === 0 && <Chip size=\"small\" variant=\"light\" color=\"success\" label=\"Customer\" />}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {!row.status && (\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={1.25} justifyContent=\"flex-end\">\n                          <Button size=\"small\" color=\"error\">\n                            Resend\n                          </Button>\n                          <Chip size=\"small\" color=\"info\" variant=\"outlined\" label=\"Invited\" />\n                        </Stack>\n                      )}\n                      {row.status && <Chip size=\"small\" color=\"success\" label=\"Joined\" />}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton size=\"small\" color=\"secondary\">\n                        <MoreIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n          <Button color=\"error\">Cancel</Button>\n          <Button variant=\"contained\">Update Profile</Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":5597},"src/sections/forms/edit-forms/services/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  title: yup.string().required('Title is required'),\n  firstIconTitle: yup.string().required('Icon title is required'),\n  firstIconDescription: yup.string().required('Icon description is required'),\n  secondIconDescription: yup.string().required('Icon description is required'),\n  secondIconTitle: yup.string().required('Icon title is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  imageTitle: yup.string().required('Principal image description is required'),\n  imageTitleDescription: yup.string().required('Principal image description is required'),\n  titleDescription: yup.string().required('Subheading is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id,\n      title: data.title,\n      metaDescription: data.metaDescription,\n      metaKeywords: data.metaKeywords,\n      firstIconTitle: data.firstIconTitle,\n      firstIconDescription: data.firstIconDescription,\n      secondIconTitle: data.secondIconTitle,\n      secondIconDescription: data.secondIconDescription,\n      imageTitle: data.imageTitle,\n      imageTitleDescription: data.imageTitleDescription,\n      titleDescription: data.titleDescription\n    },\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        id: values.id,\n        title: values.title,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        firstIconTitle: values.firstIconTitle,\n        firstIconDescription: values.firstIconDescription,\n        secondIconTitle: values.secondIconTitle,\n        secondIconDescription: values.secondIconDescription,\n        imageTitle: values.imageTitle,\n        imageTitleDescription: values.imageTitleDescription,\n        titleDescription: values.titleDescription\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title of the page</InputLabel>\n              <TextField\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title of the page *\"\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                error={formik.touched.title && Boolean(formik.errors.title)}\n                helperText={formik.touched.title && formik.errors.title}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Subheading</InputLabel>\n              <TextField\n                id=\"titleDescription\"\n                name=\"titleDescription\"\n                multiline\n                minRows={2}\n                placeholder=\"Subheading *\"\n                value={formik.values.titleDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.titleDescription && Boolean(formik.errors.titleDescription)}\n                helperText={formik.touched.titleDescription && formik.errors.titleDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First icon title</InputLabel>\n              <TextField\n                id=\"firstIconTitle\"\n                name=\"firstIconTitle\"\n                placeholder=\"First icon title *\"\n                value={formik.values.firstIconTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.firstIconTitle && Boolean(formik.errors.firstIconTitle)}\n                helperText={formik.touched.firstIconTitle && formik.errors.firstIconTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First icon description</InputLabel>\n              <TextField\n                id=\"firstIconDescription\"\n                name=\"firstIconDescription\"\n                placeholder=\"First icon description *\"\n                multiline\n                minRows={2}\n                value={formik.values.firstIconDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.firstIconDescription && Boolean(formik.errors.firstIconDescription)}\n                helperText={formik.touched.firstIconDescription && formik.errors.firstIconDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second icon title</InputLabel>\n              <TextField\n                id=\"secondIconTitle\"\n                name=\"secondIconTitle\"\n                placeholder=\"Second icon title *\"\n                value={formik.values.secondIconTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.secondIconTitle && Boolean(formik.errors.secondIconTitle)}\n                helperText={formik.touched.secondIconTitle && formik.errors.secondIconTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second icon description</InputLabel>\n              <TextField\n                id=\"secondIconDescription\"\n                name=\"secondIconDescription\"\n                placeholder=\"Second icon description *\"\n                multiline\n                minRows={2}\n                value={formik.values.secondIconDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.secondIconDescription && Boolean(formik.errors.secondIconDescription)}\n                helperText={formik.touched.secondIconDescription && formik.errors.secondIconDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Principal image title</InputLabel>\n              <TextField\n                id=\"imageTitle\"\n                name=\"imageTitle\"\n                placeholder=\"Principal image title *\"\n                value={formik.values.imageTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.imageTitle && Boolean(formik.errors.imageTitle)}\n                helperText={formik.touched.imageTitle && formik.errors.imageTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Main image description</InputLabel>\n              <TextField\n                id=\"imageTitleDescription\"\n                name=\"imageTitleDescription\"\n                placeholder=\"Main image description *\"\n                value={formik.values.imageTitleDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.imageTitleDescription && Boolean(formik.errors.imageTitleDescription)}\n                helperText={formik.touched.imageTitleDescription && formik.errors.imageTitleDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":11023},"src/api/axios-instance.js":{"content":"import axios from 'axios';\n// Create an axios instance with a base URL\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8000/',\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n});\n\nexport default axiosInstance;\n","size_bytes":239},"src/sections/components-overview/dialogs/ResponsiveDialog.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// ==============================|| DIALOG - RESPONSIVE ||============================== //\n\nexport default function ResponsiveDialog() {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));\n\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle id=\"responsive-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"error\" onClick={handleClose}>\n              Disagree\n            </Button>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Agree\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":1847},"src/sections/widget/chart/EcommerceDataChart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| CHART - ECOMMERCE DATA CHART ||============================== //\n\nexport default function EcommerceDataChart({ color, height }) {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      type: 'bar',\n      sparkline: {\n        enabled: true\n      },\n      toolbar: {\n        show: false\n      },\n      offsetX: -2\n    },\n    dataLabels: {\n      enabled: false\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 2,\n        columnWidth: '80%'\n      }\n    },\n    xaxis: {\n      crosshairs: {\n        width: 1\n      }\n    },\n    tooltip: {\n      fixed: {\n        enabled: false\n      },\n      x: {\n        show: false\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [color],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [color, mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      name: 'Users',\n      data: [10, 30, 40, 20, 60, 50, 20, 15, 20, 25, 30, 25]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={height ? height : 50} />;\n}\n\nEcommerceDataChart.propTypes = { color: PropTypes.string, height: PropTypes.number };\n","size_bytes":1766},"src/pages/forms/layouts/basic.jsx":{"content":"// material-ui\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Divider from '@mui/material/Divider';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| LAYOUTS - BASIC ||============================== //\n\nexport default function Layouts() {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} lg={6}>\n        <MainCard title=\"Simple Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Name</InputLabel>\n                <TextField fullWidth placeholder=\"Enter full name\" />\n              </Stack>\n              <FormHelperText>Please enter your full name</FormHelperText>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Email</InputLabel>\n                <TextField fullWidth placeholder=\"Enter email\" />\n              </Stack>\n              <FormHelperText>Please enter your Email</FormHelperText>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Password</InputLabel>\n                <TextField type=\"password\" fullWidth placeholder=\"Enter Password\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Language</InputLabel>\n                <FormGroup>\n                  <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                  <FormControlLabel control={<Checkbox />} label=\"French\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                </FormGroup>\n              </Stack>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} lg={6}>\n        <MainCard title=\"Horizontal Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                A. Personal Info:\n              </Typography>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel>Name</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter full name\" />\n                  <FormHelperText>Please enter your full name</FormHelperText>\n                </Grid>\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel>Email</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter email\" />\n                  <FormHelperText>Please enter your Email</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                B. Educational Info:\n              </Typography>\n              <Grid container spacing={2} alignItems=\"baseline\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel>Degree Name</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter Degree name\" />\n                  <FormHelperText>Please enter your Degree name</FormHelperText>\n                </Grid>\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel>Passing Year</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter Passing Year\" />\n                  <FormHelperText>Please enter Passing Year</FormHelperText>\n                </Grid>\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel>Language</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                  <FormControlLabel control={<Checkbox />} label=\"French\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} lg={6}>\n        <MainCard title=\"Control Divider\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Name</InputLabel>\n                <TextField fullWidth placeholder=\"Enter full name\" />\n              </Stack>\n              <FormHelperText>Please enter your full name</FormHelperText>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Email</InputLabel>\n                <TextField fullWidth placeholder=\"Enter email\" />\n              </Stack>\n              <FormHelperText>Please enter your Email</FormHelperText>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <Stack spacing={1}>\n                  <InputLabel>Password</InputLabel>\n                  <TextField type=\"password\" fullWidth placeholder=\"Enter Password\" />\n                </Stack>\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel>Language</InputLabel>\n                <FormGroup>\n                  <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                  <FormControlLabel control={<Checkbox />} label=\"French\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                </FormGroup>\n              </Stack>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} lg={6}>\n        <MainCard title=\"Input Label Alignment\">\n          <Grid container spacing={3} alignItems=\"center\">\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                A. Personal Info:\n              </Typography>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter full name\" />\n                  <FormHelperText>Please enter your full name</FormHelperText>\n                </Grid>\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter email\" />\n                  <FormHelperText>Please enter your Email</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"h5\" sx={{ mb: 3 }}>\n                B. Educational Info:\n              </Typography>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Degree Name :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter Degree name\" />\n                  <FormHelperText>Please enter your Degree name</FormHelperText>\n                </Grid>\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Passing Year :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={6}>\n                  <TextField fullWidth placeholder=\"Enter Passing Year\" />\n                  <FormHelperText>Please enter Passing Year</FormHelperText>\n                </Grid>\n                <Grid item xs={12}>\n                  <Grid container spacing={{ xs: 0.5, sm: 2 }} justifyContent=\"center\" alignItems=\"center\">\n                    <Grid item xs={12} sm={3} lg={4}>\n                      <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Language :</InputLabel>\n                    </Grid>\n                    <Grid item xs={12} sm={9} lg={8}>\n                      <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                      <FormControlLabel control={<Checkbox />} label=\"French\" />\n                      <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":10082},"src/components/third-party/dropzone/MultiFile.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useDropzone } from 'react-dropzone';\n\n// project-imports\nimport RejectionFiles from './RejectionFiles';\nimport PlaceholderContent from './PlaceholderContent';\nimport FilesPreview from './FilesPreview';\nimport { DropzopType } from 'config';\n\nconst DropzoneWrapper = styled('div')(({ theme }) => ({\n  outline: 'none',\n  padding: theme.spacing(5, 1),\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: theme.palette.background.paper,\n  border: '1px dashed ',\n  borderColor: theme.palette.secondary.main,\n  '&:hover': { opacity: 0.72, cursor: 'pointer' }\n}));\n\n// ==============================|| UPLOAD - MULTIPLE FILE ||============================== //\n\nexport default function MultiFileUpload({ error, showList = false, files, type, setFieldValue, sx, onUpload }) {\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    multiple: true,\n    onDrop: (acceptedFiles) => {\n      if (files) {\n        setFieldValue('files', [...files, ...acceptedFiles.map((file) => Object.assign(file, { preview: URL.createObjectURL(file) }))]);\n      } else {\n        setFieldValue(\n          'files',\n          acceptedFiles.map((file) => Object.assign(file, { preview: URL.createObjectURL(file) }))\n        );\n      }\n    }\n  });\n\n  const onRemoveAll = () => {\n    setFieldValue('files', null);\n  };\n\n  const onRemove = (file) => {\n    const filteredItems = files && files.filter((_file) => _file !== file);\n    setFieldValue('files', filteredItems);\n  };\n\n  return (\n    <>\n      <Box sx={{ width: '100%', ...(type === DropzopType.STANDARD && { width: 'auto', display: 'flex' }), ...sx }}>\n        <Stack {...(type === DropzopType.STANDARD && { alignItems: 'center' })}>\n          <DropzoneWrapper\n            {...getRootProps()}\n            sx={{\n              ...(type === DropzopType.STANDARD && { p: 0, m: 1, width: 64, height: 64 }),\n              ...(isDragActive && { opacity: 0.72 }),\n              ...((isDragReject || error) && { color: 'error.main', borderColor: 'error.light', bgcolor: 'error.lighter' })\n            }}\n          >\n            <input {...getInputProps()} />\n            <PlaceholderContent type={type} />\n          </DropzoneWrapper>\n          {type === DropzopType.STANDARD && files && files.length > 1 && (\n            <Button variant=\"contained\" color=\"error\" size=\"extraSmall\" onClick={onRemoveAll}>\n              Remove all\n            </Button>\n          )}\n        </Stack>\n        {fileRejections.length > 0 && <RejectionFiles fileRejections={fileRejections} />}\n        {files && files.length > 0 && <FilesPreview files={files} showList={showList} onRemove={onRemove} type={type} />}\n      </Box>\n\n      {type !== DropzopType.STANDARD && files && files.length > 0 && (\n        <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1.5} sx={{ mt: 1.5 }}>\n          <Button color=\"inherit\" size=\"small\" onClick={onRemoveAll}>\n            Remove all\n          </Button>\n          <Button size=\"small\" variant=\"contained\" onClick={onUpload}>\n            Upload files\n          </Button>\n        </Stack>\n      )}\n    </>\n  );\n}\n\nMultiFileUpload.propTypes = {\n  error: PropTypes.any,\n  showList: PropTypes.bool,\n  files: PropTypes.any,\n  type: PropTypes.any,\n  setFieldValue: PropTypes.any,\n  sx: PropTypes.any,\n  onUpload: PropTypes.any\n};\n","size_bytes":3565},"src/routes/LoginRoutes.jsx":{"content":"import { lazy } from 'react';\n\n// project-imports\nimport AuthLayout from 'layout/Auth';\nimport Loadable from 'components/Loadable';\n\nimport { Navigate } from 'react-router-dom';\n\n// render - login\nconst AuthLogin = Loadable(lazy(() => import('pages/auth/auth1/login')));\nconst AuthForgotPassword = Loadable(lazy(() => import('pages/auth/auth1/forgot-password')));\nconst AuthCheckMail = Loadable(lazy(() => import('pages/auth/auth1/check-mail')));\nconst AuthResetPassword = Loadable(lazy(() => import('pages/auth/auth1/reset-password')));\nconst AuthCodeVerification = Loadable(lazy(() => import('pages/auth/auth1/code-verification')));\n\n// ==============================|| AUTH ROUTES ||============================== //\n\nconst LoginRoutes = {\n  path: '/',\n  children: [\n    {\n      path: '/',\n      element: <AuthLayout />,\n      children: [\n        {\n          path: 'login',\n          element: <AuthLogin />\n        },\n        {\n          path: 'forgot-password',\n          element: <AuthForgotPassword />\n        },\n        {\n          path: 'check-mail',\n          element: <AuthCheckMail />\n        },\n        {\n          path: 'reset-password',\n          element: <AuthResetPassword />\n        },\n        {\n          path: 'code-verification',\n          element: <AuthCodeVerification />\n        }\n      ]\n    },\n    {\n      index: true,\n      element: <Navigate to=\"login\" replace />\n    }\n  ]\n};\n\nexport default LoginRoutes;\n","size_bytes":1433},"src/utils/react-table.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport FormControl from '@mui/material/FormControl';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\nimport Stack from '@mui/material/Stack';\nimport Slider from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport { useAsyncDebounce } from 'react-table';\nimport { matchSorter } from 'match-sorter';\nimport { format } from 'date-fns';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Add, Minus, SearchNormal1 } from 'iconsax-react';\n\n// ==============================|| CUSTOM FUNCTION - REACT TABLE ||============================== //\n\nexport function GlobalFilter({ preGlobalFilteredRows, globalFilter, setGlobalFilter, ...other }) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <OutlinedInput\n      value={value || ''}\n      onChange={(e) => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      }}\n      placeholder={`Search ${count} records...`}\n      id=\"start-adornment-email\"\n      startAdornment={<SearchNormal1 size={18} />}\n      {...other}\n    />\n  );\n}\n\nexport function DefaultColumnFilter({ column: { filterValue, Header, setFilter } }) {\n  return (\n    <TextField\n      fullWidth\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n      placeholder={Header}\n      size=\"small\"\n    />\n  );\n}\n\nexport function DateColumnFilter({ column: { filterValue, Header, setFilter } }) {\n  return (\n    <FormControl sx={{ width: '100%' }}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <DatePicker\n          format=\"dd/MM/yyyy\"\n          value={filterValue && new Date(filterValue)}\n          onChange={(newValue) => {\n            let formatDateFn = undefined;\n            try {\n              formatDateFn = format(newValue, 'M/d/yyyy');\n            } catch (error) {\n              console.log('error - ', error);\n            }\n            setFilter(formatDateFn || undefined);\n          }}\n          slotProps={{ textField: { placeholder: `Select ${Header}` } }}\n        />\n      </LocalizationProvider>\n    </FormControl>\n  );\n}\n\nexport function SelectColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n  const options = useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  return (\n    <Select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n      displayEmpty\n      size=\"small\"\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((option, i) => (\n        <MenuItem key={i} value={option}>\n          {option}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n}\n\nexport function SliderColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n  const [min, max] = useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ pl: 1, minWidth: 120 }}>\n      <Slider\n        value={filterValue || min}\n        min={min}\n        max={max}\n        step={1}\n        onChange={(event, newValue) => {\n          setFilter(newValue);\n        }}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"non-linear-slider\"\n      />\n      <Tooltip title=\"Reset\">\n        <IconButton size=\"small\" color=\"error\" onClick={() => setFilter(undefined)}>\n          <Add style={{ transform: 'rotate(45deg)' }} />\n        </IconButton>\n      </Tooltip>\n    </Stack>\n  );\n}\n\nexport function NumberRangeColumnFilter({ column: { filterValue = [], preFilteredRows, setFilter, id } }) {\n  const [min, max] = useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ minWidth: 168, maxWidth: 250 }}>\n      <TextField\n        fullWidth\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n        }}\n        placeholder={`Min (${min})`}\n        size=\"small\"\n      />\n      <Minus />\n      <TextField\n        fullWidth\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n        }}\n        placeholder={`Max (${max})`}\n        size=\"small\"\n      />\n    </Stack>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\nexport const renderFilterTypes = () => ({\n  fuzzyText: fuzzyTextFilterFn,\n  text: (rows, id, filterValue) => {\n    rows.filter((row) => {\n      const rowValue = row.values[id];\n      return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n    });\n  }\n});\n\nexport function filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number';\n\nexport function useControlledState(state) {\n  return useMemo(() => {\n    if (state.groupBy.length) {\n      return {\n        ...state,\n        hiddenColumns: [...state.hiddenColumns, ...state.groupBy].filter((d, i, all) => all.indexOf(d) === i)\n      };\n    }\n    return state;\n  }, [state]);\n}\n\nexport function roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n\n  leafValues.forEach((value) => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n\n  return Math.round((min + max) / 2);\n}\n\nGlobalFilter.propTypes = {\n  preGlobalFilteredRows: PropTypes.object,\n  globalFilter: PropTypes.string,\n  setGlobalFilter: PropTypes.func,\n  other: PropTypes.any\n};\n\nDefaultColumnFilter.propTypes = { column: PropTypes.object };\n\nDateColumnFilter.propTypes = { column: PropTypes.object };\n\nSelectColumnFilter.propTypes = { column: PropTypes.any };\n\nSliderColumnFilter.propTypes = { column: PropTypes.any };\n\nNumberRangeColumnFilter.propTypes = { column: PropTypes.any };\n","size_bytes":7446},"src/sections/apps/e-commerce/checkout/OrderSummery.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport currency from 'currency.js';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| CHECKOUT - ORDER SUMMARY ||============================== //\n\nexport default function OrderSummary({ checkout, show }) {\n  return (\n    <Stack spacing={3}>\n      <MainCard content={false} sx={{ borderRadius: show ? '12px' : '0 0 12px 12px', borderTop: show ? '1px inherit' : 'none' }}>\n        <TableContainer>\n          <Table sx={{ minWidth: 'auto' }} size=\"small\" aria-label=\"simple table\">\n            <TableBody>\n              {show && (\n                <TableRow>\n                  <TableCell>\n                    <Typography variant=\"subtitle1\">Order Summary</Typography>\n                  </TableCell>\n                  <TableCell />\n                </TableRow>\n              )}\n              <TableRow>\n                <TableCell sx={{ borderBottom: 'none' }}>Sub Total</TableCell>\n                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}>\n                  {checkout.subtotal && <Typography variant=\"subtitle1\">{currency(checkout.subtotal).format()}</Typography>}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell sx={{ borderBottom: 'none' }}>Estimated Delivery</TableCell>\n                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}>\n                  {checkout.shipping && (\n                    <Typography variant=\"subtitle1\">{checkout.shipping <= 0 ? '-' : currency(checkout.shipping).format()}</Typography>\n                  )}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell sx={{ borderBottom: 'none' }}>Voucher</TableCell>\n                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}>\n                  {checkout.discount && (\n                    <Typography variant=\"subtitle1\" sx={{ color: 'success.main' }}>\n                      {checkout.discount <= 0 ? '-' : currency(checkout.discount).format()}\n                    </Typography>\n                  )}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </MainCard>\n      <MainCard>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"subtitle1\">Total</Typography>\n          {checkout.total && (\n            <Typography variant=\"subtitle1\" align=\"right\">\n              {currency(checkout.total).format()}\n            </Typography>\n          )}\n        </Stack>\n      </MainCard>\n    </Stack>\n  );\n}\n\nOrderSummary.propTypes = { checkout: PropTypes.any, show: PropTypes.bool };\n","size_bytes":3084},"src/sections/apps/e-commerce/product-details/ProductSpecifications.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| PRODUCT DETAILS - SPECIFICATIONS ||============================== //\n\nexport default function ProductSpecifications() {\n  return (\n    <Grid container spacing={2.5}>\n      <Grid item xs={12} md={6}>\n        <Grid container spacing={2.5}>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\">Product Category</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Wearable Device Type:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>Smart Band</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Compatible Devices:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>Smartphones</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Ideal For:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>Unisex</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <Grid container spacing={2.5}>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\">Manufacturer Details</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Brand:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>Apple</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Model Series:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>Watch SE</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography color=\"text.secondary\">Model Number:</Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography>MYDT2HN/A</Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":2243},"src/sections/auth/auth-forms/AuthRegister.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport Stack from '@mui/material/Stack';\nimport Link from '@mui/material/Link';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nimport { openSnackbar } from 'api/snackbar';\nimport { strengthColor, strengthIndicator } from 'utils/password-strength';\n\n// assets\nimport { Eye, EyeSlash } from 'iconsax-react';\n\n// ============================|| JWT - REGISTER ||============================ //\n\nexport default function AuthRegister() {\n  const { register } = useAuth();\n  const scriptedRef = useScriptRef();\n  const navigate = useNavigate();\n\n  const [level, setLevel] = useState();\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const changePassword = (value) => {\n    const temp = strengthIndicator(value);\n    setLevel(strengthColor(temp));\n  };\n\n  useEffect(() => {\n    changePassword('');\n  }, []);\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          firstname: '',\n          lastname: '',\n          email: '',\n          company: '',\n          password: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          firstname: Yup.string().max(255).required('First Name is required'),\n          lastname: Yup.string().max(255).required('Last Name is required'),\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          password: Yup.string().max(255).required('Password is required')\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            await register(values.email, values.password, values.firstname, values.lastname);\n            if (scriptedRef.current) {\n              setStatus({ success: true });\n              setSubmitting(false);\n              openSnackbar({\n                open: true,\n                message: 'Your registration has been successfully completed.',\n                variant: 'alert',\n\n                alert: {\n                  color: 'success'\n                }\n              });\n\n              setTimeout(() => {\n                navigate('/login', { replace: true });\n              }, 1500);\n            }\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"firstname-signup\">First Name*</InputLabel>\n                  <OutlinedInput\n                    id=\"firstname-login\"\n                    type=\"firstname\"\n                    value={values.firstname}\n                    name=\"firstname\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"John\"\n                    fullWidth\n                    error={Boolean(touched.firstname && errors.firstname)}\n                  />\n                </Stack>\n                {touched.firstname && errors.firstname && (\n                  <FormHelperText error id=\"helper-text-firstname-signup\">\n                    {errors.firstname}\n                  </FormHelperText>\n                )}\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"lastname-signup\">Last Name*</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.lastname && errors.lastname)}\n                    id=\"lastname-signup\"\n                    type=\"lastname\"\n                    value={values.lastname}\n                    name=\"lastname\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"Doe\"\n                    inputProps={{}}\n                  />\n                </Stack>\n                {touched.lastname && errors.lastname && (\n                  <FormHelperText error id=\"helper-text-lastname-signup\">\n                    {errors.lastname}\n                  </FormHelperText>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"company-signup\">Company</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.company && errors.company)}\n                    id=\"company-signup\"\n                    value={values.company}\n                    name=\"company\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"Demo Inc.\"\n                    inputProps={{}}\n                  />\n                </Stack>\n                {touched.company && errors.company && (\n                  <FormHelperText error id=\"helper-text-company-signup\">\n                    {errors.company}\n                  </FormHelperText>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"email-signup\">Email Address*</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.email && errors.email)}\n                    id=\"email-login\"\n                    type=\"email\"\n                    value={values.email}\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"demo@company.com\"\n                    inputProps={{}}\n                  />\n                </Stack>\n                {touched.email && errors.email && (\n                  <FormHelperText error id=\"helper-text-email-signup\">\n                    {errors.email}\n                  </FormHelperText>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"password-signup\">Password</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.password && errors.password)}\n                    id=\"password-signup\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                      changePassword(e.target.value);\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                          color=\"secondary\"\n                        >\n                          {showPassword ? <Eye /> : <EyeSlash />}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    placeholder=\"******\"\n                    inputProps={{}}\n                  />\n                </Stack>\n                {touched.password && errors.password && (\n                  <FormHelperText error id=\"helper-text-password-signup\">\n                    {errors.password}\n                  </FormHelperText>\n                )}\n                <FormControl fullWidth sx={{ mt: 2 }}>\n                  <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item>\n                      <Box sx={{ bgcolor: level?.color, width: 85, height: 8, borderRadius: '7px' }} />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"subtitle1\" fontSize=\"0.75rem\">\n                        {level?.label}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"body2\">\n                  By Signing up, you agree to our &nbsp;\n                  <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\n                    Terms of Service\n                  </Link>\n                  &nbsp; and &nbsp;\n                  <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\n                    Privacy Policy\n                  </Link>\n                </Typography>\n              </Grid>\n              {errors.submit && (\n                <Grid item xs={12}>\n                  <FormHelperText error>{errors.submit}</FormHelperText>\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <AnimateButton>\n                  <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Create Account\n                  </Button>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n","size_bytes":10345},"src/sections/forms/wizard/team-validation-wizard/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport { CircularProgress } from '@mui/material';\nimport axiosInstance from 'api/axios-instance';\n// import { InputLabel, Switch } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function AddTeamMember() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.post('team', data);\n      console.log('response:', response.statusText);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  return (\n    <MainCard title=\"Add team member\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully added a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5940},"src/sections/apps/invoice/AlertProductDelete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project import\nimport Avatar from 'components/@extended/Avatar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| INVOICE - PRODUCT DELETE ||============================== //\n\nexport default function AlertProductDelete({ title, open, handleClose }) {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => handleClose(false)}\n      TransitionComponent={PopupTransition}\n      keepMounted\n      maxWidth=\"xs\"\n      aria-labelledby=\"item-delete-title\"\n      aria-describedby=\"item-delete-description\"\n    >\n      <DialogContent sx={{ mt: 2, my: 1 }}>\n        <Stack alignItems=\"center\" spacing={3.5}>\n          <Avatar color=\"error\" sx={{ width: 72, height: 72, fontSize: '1.75rem' }}>\n            <Trash />\n          </Avatar>\n          <Stack spacing={2}>\n            <Typography variant=\"h4\" align=\"center\">\n              Are you sure you want to delete?\n            </Typography>\n            <Typography align=\"center\">\n              By deleting\n              <Typography variant=\"subtitle1\" component=\"span\">\n                {' '}\n                &quot;{title}&quot;{' '}\n              </Typography>\n              product, Its details will also be removed from invoice.\n            </Typography>\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2} sx={{ width: 1 }}>\n            <Button fullWidth onClick={() => handleClose(false)} color=\"secondary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button fullWidth color=\"error\" variant=\"contained\" onClick={() => handleClose(true)} autoFocus>\n              Delete\n            </Button>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nAlertProductDelete.propTypes = { title: PropTypes.string, open: PropTypes.bool, handleClose: PropTypes.func };\n","size_bytes":2176},"src/pages/tables/works-sorting.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n// import Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\n// import makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\n// import LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { HeaderSort, SelectColumnSorting } from 'components/third-party/react-table';\nimport axiosInstance from 'api/axios-instance';\nimport { useNavigate } from 'react-router-dom';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const navigate = useNavigate();\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [sorting, setSorting] = useState([{ id: 'id', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={matchDownSM ? 'Works' : 'Works Table'}\n      content={false}\n      secondary={\n        <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1, sm: 2 }}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n        </Stack>\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  onClick={() => navigate(`/forms/edit/works/${row.original.id}`)} // Handle row click navigation\n                  style={{ cursor: 'pointer' }} // Make the row look clickable\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - SORTING ||============================== //\n\nexport default function SortingTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveWorks = await axiosInstance.get('admin/works/list');\n        if (retrieveWorks.status === 200) {\n          setData(retrieveWorks.data);\n        } else {\n          console.error('Failed to retrieve works');\n        }\n      } catch (error) {\n        console.error('Error fetching works:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'Page Name',\n        accessorKey: 'title'\n      },\n      {\n        header: 'Page ID',\n        accessorKey: 'id'\n      }\n    ],\n    []\n  );\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5849},"src/pages/maintenance/under-construction/under-construction2.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport construction from 'assets/images/maintenance/img-construction-2.svg';\n\n// ==============================|| UNDER CONSTRUCTION ||============================== //\n\nexport default function UnderConstruction() {\n  return (\n    <Grid container spacing={3} direction=\"column\" alignItems=\"center\" justifyContent=\"center\" sx={{ minHeight: '100vh', py: 2 }}>\n      <Grid item xs={12}>\n        <Box sx={{ width: { xs: 300, sm: 374 } }}>\n          <img src={construction} alt=\"under construction\" style={{ width: '100%', height: 'auto' }} />\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack spacing={2} justifyContent=\"center\" alignItems=\"center\">\n          <Typography align=\"center\" variant=\"h1\">\n            Under Construction\n          </Typography>\n          <Typography color=\"text.secondary\" align=\"center\" sx={{ width: '85%' }}>\n            Hey! Please check out this site later. We are doing some maintenance on it right now.\n          </Typography>\n          <Button component={Link} to={APP_DEFAULT_PATH} variant=\"contained\">\n            Back To Home\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":1492},"src/sections/apps/customer/FormCustomerAdd.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport Tooltip from '@mui/material/Tooltip';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport FormLabel from '@mui/material/FormLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogContent from '@mui/material/DialogContent';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport DialogActions from '@mui/material/DialogActions';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Select from '@mui/material/Select';\n\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third party\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useFormik, Form, FormikProvider } from 'formik';\n\n// project imports\nimport AlertCustomerDelete from './AlertCustomerDelete';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport CircularWithPath from 'components/@extended/progress/CircularWithPath';\n\nimport { ThemeMode, Gender } from 'config';\nimport { openSnackbar } from 'api/snackbar';\nimport { insertCustomer, updateCustomer } from 'api/customer';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Camera, CloseCircle, Trash } from 'iconsax-react';\n\nconst skills = [\n  'Adobe XD',\n  'After Effect',\n  'Angular',\n  'Animation',\n  'ASP.Net',\n  'Bootstrap',\n  'C#',\n  'CC',\n  'Corel Draw',\n  'CSS',\n  'DIV',\n  'Dreamweaver',\n  'Figma',\n  'Graphics',\n  'HTML',\n  'Illustrator',\n  'J2Ee',\n  'Java',\n  'Javascript',\n  'JQuery',\n  'Logo Design',\n  'Material UI',\n  'Motion',\n  'MVC',\n  'MySQL',\n  'NodeJS',\n  'npm',\n  'Photoshop',\n  'PHP',\n  'React',\n  'Redux',\n  'Reduxjs & tooltit',\n  'SASS',\n  'SCSS',\n  'SQL Server',\n  'SVG',\n  'UI/UX',\n  'User Interface Designing',\n  'Wordpress'\n];\n\n// CONSTANT\nconst getInitialValues = (customer) => {\n  const newCustomer = {\n    firstName: '',\n    lastName: '',\n    name: '',\n    email: '',\n    age: 18,\n    avatar: 1,\n    gender: Gender.FEMALE,\n    role: '',\n    fatherName: '',\n    orders: 0,\n    progress: 50,\n    status: 2,\n    orderStatus: '',\n    contact: '',\n    country: '',\n    location: '',\n    about: '',\n    skills: [],\n    time: ['just now'],\n    date: ''\n  };\n\n  if (customer) {\n    return _.merge({}, newCustomer, customer);\n  }\n\n  return newCustomer;\n};\n\nconst allStatus = [\n  { value: 3, label: 'Rejected' },\n  { value: 1, label: 'Verified' },\n  { value: 2, label: 'Pending' }\n];\n\n// ==============================|| CUSTOMER ADD / EDIT - FORM ||============================== //\n\nexport default function FormCustomerAdd({ customer, closeModal }) {\n  const theme = useTheme();\n\n  const [loading, setLoading] = useState(true);\n  const [selectedImage, setSelectedImage] = useState(undefined);\n  const [avatar, setAvatar] = useState(\n    getImageUrl(`avatar-${customer && customer !== null && customer?.avatar ? customer.avatar : 1}.png`, ImagePath.USERS)\n  );\n\n  useEffect(() => {\n    if (selectedImage) {\n      setAvatar(URL.createObjectURL(selectedImage));\n    }\n  }, [selectedImage]);\n\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  const CustomerSchema = Yup.object().shape({\n    firstName: Yup.string().max(255).required('First Name is required'),\n    lastName: Yup.string().max(255).required('Last Name is required'),\n    email: Yup.string().max(255).required('Email is required').email('Must be a valid email'),\n    status: Yup.string().required('Status is required'),\n    location: Yup.string().max(500),\n    about: Yup.string().max(500)\n  });\n\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const handleAlertClose = () => {\n    setOpenAlert(!openAlert);\n    closeModal();\n  };\n\n  const formik = useFormik({\n    initialValues: getInitialValues(customer),\n    validationSchema: CustomerSchema,\n    enableReinitialize: true,\n    onSubmit: async (values, { setSubmitting }) => {\n      try {\n        let newCustomer = values;\n        newCustomer.name = newCustomer.firstName + ' ' + newCustomer.lastName;\n\n        if (customer) {\n          updateCustomer(newCustomer.id, newCustomer).then(() => {\n            openSnackbar({\n              open: true,\n              message: 'Customer update successfully.',\n              variant: 'alert',\n\n              alert: {\n                color: 'success'\n              }\n            });\n            setSubmitting(false);\n            closeModal();\n          });\n        } else {\n          await insertCustomer(newCustomer).then(() => {\n            openSnackbar({\n              open: true,\n              message: 'Customer added successfully.',\n              variant: 'alert',\n\n              alert: {\n                color: 'success'\n              }\n            });\n            setSubmitting(false);\n            closeModal();\n          });\n        }\n      } catch (error) {\n        // console.error(error);\n      }\n    }\n  });\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps, setFieldValue } = formik;\n\n  if (loading)\n    return (\n      <Box sx={{ p: 5 }}>\n        <Stack direction=\"row\" justifyContent=\"center\">\n          <CircularWithPath />\n        </Stack>\n      </Box>\n    );\n\n  return (\n    <>\n      <FormikProvider value={formik}>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n            <DialogTitle>{customer ? 'Edit Customer' : 'New Customer'}</DialogTitle>\n            <Divider />\n            <DialogContent sx={{ p: 2.5 }}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={3}>\n                  <Stack direction=\"row\" justifyContent=\"center\" sx={{ mt: 3 }}>\n                    <FormLabel\n                      htmlFor=\"change-avtar\"\n                      sx={{\n                        position: 'relative',\n                        borderRadius: '50%',\n                        overflow: 'hidden',\n                        '&:hover .MuiBox-root': { opacity: 1 },\n                        cursor: 'pointer'\n                      }}\n                    >\n                      <Avatar alt=\"Avatar 1\" src={avatar} sx={{ width: 72, height: 72, border: '1px dashed' }} />\n                      <Box\n                        sx={{\n                          position: 'absolute',\n                          top: 0,\n                          left: 0,\n                          backgroundColor: theme.palette.mode === ThemeMode.DARK ? 'rgba(255, 255, 255, .75)' : 'rgba(0,0,0,.65)',\n                          width: '100%',\n                          height: '100%',\n                          opacity: 0,\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center'\n                        }}\n                      >\n                        <Stack spacing={0.5} alignItems=\"center\">\n                          <Camera style={{ color: theme.palette.secondary.lighter, fontSize: '2rem' }} />\n                          <Typography sx={{ color: 'secondary.lighter' }}>Upload</Typography>\n                        </Stack>\n                      </Box>\n                    </FormLabel>\n                    <TextField\n                      type=\"file\"\n                      id=\"change-avtar\"\n                      placeholder=\"Outlined\"\n                      variant=\"outlined\"\n                      sx={{ display: 'none' }}\n                      onChange={(e) => setSelectedImage(e.target.files?.[0])}\n                    />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} md={8}>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-firstName\">First Name</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-firstName\"\n                          placeholder=\"Enter First Name\"\n                          {...getFieldProps('firstName')}\n                          error={Boolean(touched.firstName && errors.firstName)}\n                          helperText={touched.firstName && errors.firstName}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-lastName\">Last Name</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-lastName\"\n                          placeholder=\"Enter Last Name\"\n                          {...getFieldProps('lastName')}\n                          error={Boolean(touched.lastName && errors.lastName)}\n                          helperText={touched.lastName && errors.lastName}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={9}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-email\">Email</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-email\"\n                          placeholder=\"Enter Customer Email\"\n                          {...getFieldProps('email')}\n                          error={Boolean(touched.email && errors.email)}\n                          helperText={touched.email && errors.email}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-age\">Age</InputLabel>\n                        <TextField\n                          type=\"number\"\n                          fullWidth\n                          id=\"customer-age\"\n                          placeholder=\"Enter Age\"\n                          {...getFieldProps('age')}\n                          error={Boolean(touched.age && errors.age)}\n                          helperText={touched.age && errors.age}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-fatherName\">Father Name</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-fatherName\"\n                          placeholder=\"Enter Father Name\"\n                          {...getFieldProps('fatherName')}\n                          error={Boolean(touched.fatherName && errors.fatherName)}\n                          helperText={touched.fatherName && errors.fatherName}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-role\">Customer Role</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-role\"\n                          placeholder=\"Enter Role\"\n                          {...getFieldProps('role')}\n                          error={Boolean(touched.role && errors.role)}\n                          helperText={touched.role && errors.role}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-gender\">Gender</InputLabel>\n                        <RadioGroup row aria-label=\"payment-card\" {...getFieldProps('gender')}>\n                          <FormControlLabel control={<Radio value={Gender.FEMALE} />} label={Gender.FEMALE} />\n                          <FormControlLabel control={<Radio value={Gender.MALE} />} label={Gender.MALE} />\n                        </RadioGroup>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-status\">Status</InputLabel>\n                        <FormControl fullWidth>\n                          <Select\n                            id=\"column-hiding\"\n                            displayEmpty\n                            {...getFieldProps('status')}\n                            onChange={(event) => setFieldValue('status', event.target.value)}\n                            input={<OutlinedInput id=\"select-column-hiding\" placeholder=\"Sort by\" />}\n                            renderValue={(selected) => {\n                              if (!selected) {\n                                return <Typography variant=\"subtitle1\">Select Status</Typography>;\n                              }\n\n                              const selectedStatus = allStatus.filter((item) => item.value === Number(selected));\n                              return (\n                                <Typography variant=\"subtitle2\">\n                                  {selectedStatus.length > 0 ? selectedStatus[0].label : 'Pending'}\n                                </Typography>\n                              );\n                            }}\n                          >\n                            {allStatus.map((column) => (\n                              <MenuItem key={column.value} value={column.value}>\n                                <ListItemText primary={column.label} />\n                              </MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                        {touched.status && errors.status && (\n                          <FormHelperText error id=\"standard-weight-helper-text-email-login\" sx={{ pl: 1.75 }}>\n                            {errors.status}\n                          </FormHelperText>\n                        )}\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-contact\">Contact</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-contact\"\n                          placeholder=\"Enter Contact\"\n                          {...getFieldProps('contact')}\n                          error={Boolean(touched.contact && errors.contact)}\n                          helperText={touched.contact && errors.contact}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-country\">Country</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-country\"\n                          placeholder=\"Enter Country\"\n                          {...getFieldProps('country')}\n                          error={Boolean(touched.country && errors.country)}\n                          helperText={touched.country && errors.country}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-location\">Location</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-location\"\n                          multiline\n                          rows={2}\n                          placeholder=\"Enter Location\"\n                          {...getFieldProps('location')}\n                          error={Boolean(touched.location && errors.location)}\n                          helperText={touched.location && errors.location}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-about\">About Customer</InputLabel>\n                        <TextField\n                          fullWidth\n                          id=\"customer-about\"\n                          multiline\n                          rows={2}\n                          placeholder=\"Enter Customer Information\"\n                          {...getFieldProps('about')}\n                          error={Boolean(touched.about && errors.about)}\n                          helperText={touched.about && errors.about}\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack spacing={1}>\n                        <InputLabel htmlFor=\"customer-skills\">Skills</InputLabel>\n                        <Autocomplete\n                          multiple\n                          fullWidth\n                          id=\"customer-skills\"\n                          options={skills}\n                          {...getFieldProps('skills')}\n                          getOptionLabel={(label) => label}\n                          onChange={(event, newValue) => {\n                            setFieldValue('skills', newValue);\n                          }}\n                          renderInput={(params) => <TextField {...params} name=\"skill\" placeholder=\"Add Skills\" />}\n                          renderTags={(value, getTagProps) =>\n                            value.map((option, index) => (\n                              <Chip\n                                {...getTagProps({ index })}\n                                variant=\"combined\"\n                                key={index}\n                                label={option}\n                                deleteIcon={<CloseCircle style={{ fontSize: '0.75rem' }} />}\n                                sx={{ color: 'text.primary' }}\n                              />\n                            ))\n                          }\n                        />\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n                        <Stack spacing={0.5}>\n                          <Typography variant=\"subtitle1\">Make Contact Info Public</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Means that anyone viewing your profile will be able to see your contacts details\n                          </Typography>\n                        </Stack>\n                        <FormControlLabel control={<Switch defaultChecked sx={{ mt: 0 }} />} label=\"\" labelPlacement=\"start\" />\n                      </Stack>\n                      <Divider sx={{ my: 2 }} />\n                      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n                        <Stack spacing={0.5}>\n                          <Typography variant=\"subtitle1\">Available to hire</Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Toggling this will let your teammates know that you are available for acquiring new projects\n                          </Typography>\n                        </Stack>\n                        <FormControlLabel control={<Switch sx={{ mt: 0 }} />} label=\"\" labelPlacement=\"start\" />\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <Divider />\n            <DialogActions sx={{ p: 2.5 }}>\n              <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n                <Grid item>\n                  {customer && (\n                    <Tooltip title=\"Delete Customer\" placement=\"top\">\n                      <IconButton onClick={() => setOpenAlert(true)} size=\"large\" color=\"error\">\n                        <Trash variant=\"Bold\" />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Grid>\n                <Grid item>\n                  <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Button color=\"error\" onClick={closeModal}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" variant=\"contained\" disabled={isSubmitting}>\n                      {customer ? 'Edit' : 'Add'}\n                    </Button>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </DialogActions>\n          </Form>\n        </LocalizationProvider>\n      </FormikProvider>\n      {customer && <AlertCustomerDelete id={customer.id} title={customer.name} open={openAlert} handleClose={handleAlertClose} />}\n    </>\n  );\n}\n\nFormCustomerAdd.propTypes = { customer: PropTypes.any, closeModal: PropTypes.func };\n","size_bytes":21935},"src/sections/apps/e-commerce/products/ProductFilterDrawer.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Stack from '@mui/material/Stack';\nimport Drawer from '@mui/material/Drawer';\n\n// project-imports\nimport ProductFilterView from './ProductFilterView';\nimport ProductFilter from './ProductFilter';\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\nimport { ThemeMode } from 'config';\nimport { HEADER_HEIGHT } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| PRODUCT - FILTER DRAWER ||============================== //\n\nexport default function ProductFilterDrawer({ filter, initialState, handleDrawerOpen, openFilterDrawer, setFilter, setLoading }) {\n  const theme = useTheme();\n\n  const { mode, container } = useConfig();\n  const matchDownLG = useMediaQuery(theme.breakpoints.down('lg'));\n  const matchLG = useMediaQuery(theme.breakpoints.only('lg'));\n  const drawerBG = mode === ThemeMode.DARK ? 'dark.main' : 'white';\n\n  const filterIsEqual = (a1, a2) =>\n    a1 === a2 ||\n    (a1.length === a2.length &&\n      a1.search === a2.search &&\n      a1.sort === a2.sort &&\n      a1.price === a2.price &&\n      a1.rating === a2.rating &&\n      JSON.stringify(a1.gender) === JSON.stringify(a2.gender) &&\n      JSON.stringify(a1.categories) === JSON.stringify(a2.categories) &&\n      JSON.stringify(a1.colors) === JSON.stringify(a2.colors));\n\n  const handelFilter = (type, params, rating) => {\n    setLoading(true);\n    switch (type) {\n      case 'gender':\n        if (filter.gender.some((item) => item === params)) {\n          setFilter({ ...filter, gender: filter.gender.filter((item) => item !== params) });\n        } else {\n          setFilter({ ...filter, gender: [...filter.gender, params] });\n        }\n        break;\n      case 'categories':\n        if (filter.categories.some((item) => item === params)) {\n          setFilter({ ...filter, categories: filter.categories.filter((item) => item !== params) });\n        } else if (filter.categories.some((item) => item === 'all') || params === 'all') {\n          setFilter({ ...filter, categories: [params] });\n        } else {\n          setFilter({ ...filter, categories: [...filter.categories, params] });\n        }\n\n        break;\n      case 'colors':\n        if (filter.colors.some((item) => item === params)) {\n          setFilter({ ...filter, colors: filter.colors.filter((item) => item !== params) });\n        } else {\n          setFilter({ ...filter, colors: [...filter.colors, params] });\n        }\n        break;\n      case 'price':\n        setFilter({ ...filter, price: params });\n        break;\n      case 'search':\n        setFilter({ ...filter, search: params });\n        break;\n      case 'sort':\n        setFilter({ ...filter, sort: params });\n        break;\n      case 'rating':\n        setFilter({ ...filter, rating: rating });\n        break;\n      case 'reset':\n        setFilter(initialState);\n        break;\n      default:\n      // no options\n    }\n  };\n\n  const drawerContent = (\n    <Stack sx={{ p: 3, pt: 0 }} spacing={0.5}>\n      <ProductFilterView filter={filter} filterIsEqual={filterIsEqual} handelFilter={handelFilter} initialState={initialState} />\n      <ProductFilter filter={filter} handelFilter={handelFilter} />\n    </Stack>\n  );\n\n  return (\n    <Drawer\n      sx={{\n        width: container && matchLG ? 240 : 320,\n        flexShrink: 0,\n        zIndex: { xs: 1200, lg: 0 },\n        mr: openFilterDrawer && !matchDownLG ? 2.5 : 0,\n        '& .MuiDrawer-paper': {\n          height: matchDownLG ? '100%' : 'auto',\n          width: container && matchLG ? 240 : 320,\n          boxSizing: 'border-box',\n          position: 'relative',\n          boxShadow: 'none'\n        }\n      }}\n      variant={matchDownLG ? 'temporary' : 'persistent'}\n      anchor=\"left\"\n      open={openFilterDrawer}\n      ModalProps={{ keepMounted: true }}\n      onClose={handleDrawerOpen}\n    >\n      <MainCard\n        title=\"Filter\"\n        sx={{ bgcolor: matchDownLG ? 'transparent' : drawerBG, borderRadius: '4px 0 0 4px', borderRight: 'none' }}\n        border={!matchDownLG}\n        content={false}\n      >\n        {matchDownLG && <SimpleBar sx={{ height: `calc(100vh - ${HEADER_HEIGHT}px)` }}>{drawerContent}</SimpleBar>}\n        {!matchDownLG && drawerContent}\n      </MainCard>\n    </Drawer>\n  );\n}\n\nProductFilterDrawer.propTypes = {\n  filter: PropTypes.any,\n  initialState: PropTypes.any,\n  handleDrawerOpen: PropTypes.func,\n  openFilterDrawer: PropTypes.oneOfType([PropTypes.bool, PropTypes.any]),\n  setFilter: PropTypes.func,\n  setLoading: PropTypes.func\n};\n","size_bytes":4676},"src/sections/components-overview/autocomplete/FixedTagsAutocomplete.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - FIXED TAGES ||============================== //\n\nexport default function FixedTagsAutocomplete() {\n  const fixedOptions = [data[6]];\n  const [value, setValue] = useState([...fixedOptions, data[13]]);\n\n  const fixedAutocompleteCodeString = `<Autocomplete\n  multiple\n  fullWidth\n  id=\"fixed-tags-demo\"\n  value={value}\n  onChange={(event, newValue) => {\n    setValue([...fixedOptions, ...newValue.filter((option) => fixedOptions.indexOf(option) === -1)]);\n  }}\n  options={data}\n  getOptionLabel={(option) => option.label}\n  renderTags={(tagValue, getTagProps) =>\n    tagValue.map((option, index) => (\n      <Chip label={option.label} {...getTagProps({ index })} disabled={fixedOptions.indexOf(option) !== -1} />\n    ))\n  }\n  renderInput={(params) => <TextField {...params} placeholder=\"Fixed Tag\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Fixed Options\" codeString={fixedAutocompleteCodeString}>\n      <Autocomplete\n        multiple\n        fullWidth\n        id=\"fixed-tags-demo\"\n        value={value}\n        onChange={(event, newValue) => {\n          setValue([...fixedOptions, ...newValue.filter((option) => fixedOptions.indexOf(option) === -1)]);\n        }}\n        options={data}\n        getOptionLabel={(option) => option.label}\n        renderTags={(tagValue, getTagProps) =>\n          tagValue.map((option, index) => (\n            <Chip label={option.label} key={index} {...getTagProps({ index })} disabled={fixedOptions.indexOf(option) !== -1} />\n          ))\n        }\n        renderInput={(params) => <TextField {...params} placeholder=\"Fixed Tag\" />}\n        sx={{\n          '& .MuiOutlinedInput-root': {\n            p: 1\n          },\n          '& .MuiAutocomplete-tag': {\n            bgcolor: 'primary.lighter',\n            border: '1px solid',\n            borderColor: 'primary.light',\n            '& .MuiSvgIcon-root': {\n              color: 'primary.main',\n              '&:hover': {\n                color: 'primary.dark'\n              }\n            }\n          }\n        }}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":2692},"src/sections/components-overview/stepper/CarouselEffectStepper.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport Slider from 'react-slick';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ArrowLeft2, ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| STEPPER - CAROUSEL EFFECT ||============================== //\n\nfunction SampleNextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div className={className} style={{ ...style, display: 'block', top: '87%', right: 64 }}>\n      <Button onClick={onClick} endIcon={<ArrowRight2 size={14} />} sx={{ my: 2, mx: 1 }} size=\"small\">\n        Next\n      </Button>\n    </div>\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <div className={className} style={{ ...style, display: 'block', top: '87%', left: 0 }}>\n      <Button onClick={onClick} startIcon={<ArrowLeft2 size={14} />} sx={{ my: 2, mx: 1 }} size=\"small\">\n        Back\n      </Button>\n    </div>\n  );\n}\n\nexport default function CarouselEffectStepper() {\n  const images = [\n    {\n      label: 'San Francisco',\n      imgPath: 'https://images.unsplash.com/photo-1537944434965-cf4679d1a598?auto=format&fit=crop&w=400&h=250&q=60'\n    },\n    {\n      label: 'Bird',\n      imgPath: 'https://images.unsplash.com/photo-1538032746644-0212e812a9e7?auto=format&fit=crop&w=400&h=250&q=60'\n    },\n    {\n      label: 'Bali, Indonesia',\n      imgPath: 'https://images.unsplash.com/photo-1537996194471-e657df975ab4?auto=format&fit=crop&w=400&h=250&q=80'\n    },\n    {\n      label: 'Goč, Serbia',\n      imgPath: 'https://images.unsplash.com/photo-1512341689857-198e7e2f3ca8?auto=format&fit=crop&w=400&h=250&q=60'\n    }\n  ];\n\n  const settings = {\n    dots: true,\n    autoplay: true,\n    infinite: true,\n    speed: 1000,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    nextArrow: <SampleNextArrow />,\n    prevArrow: <SamplePrevArrow />\n  };\n\n  return (\n    <MainCard\n      content={false}\n      sx={{\n        '& .slick-dots': { position: 'static', pt: 1, pb: 1.5 },\n        '& .slick-prev:before': { display: 'none' },\n        '& .slick-next:before': { display: 'none' }\n      }}\n    >\n      <Slider {...settings}>\n        {images.map((step, index) => (\n          <Box key={index}>\n            <Box sx={{ p: 1.75 }}>\n              <Typography>{step.label}</Typography>\n            </Box>\n            <Box\n              component=\"img\"\n              sx={{\n                height: 255,\n                display: 'block',\n                overflow: 'hidden',\n                width: '100%'\n              }}\n              src={step.imgPath}\n              alt={step.label}\n            />\n          </Box>\n        ))}\n      </Slider>\n    </MainCard>\n  );\n}\n\nSampleNextArrow.propTypes = { className: PropTypes.any, style: PropTypes.any, onClick: PropTypes.any };\n\nSamplePrevArrow.propTypes = { className: PropTypes.any, style: PropTypes.any, onClick: PropTypes.any };\n","size_bytes":3062},"src/sections/components-overview/lists/InteractiveList.jsx":{"content":"import { cloneElement, useState } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormGroup from '@mui/material/FormGroup';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport AntAvatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { FolderOpen, Trash } from 'iconsax-react';\nimport vector1 from 'assets/images/users/vector-1.png';\nimport avatar4 from 'assets/images/users/avatar-4.png';\n\nfunction generate(element) {\n  return [0, 1, 2].map((value) =>\n    cloneElement(element, {\n      key: value\n    })\n  );\n}\n\nconst ListWrapper = styled('div')(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper\n}));\nListWrapper.displayName = 'ListWrapper';\n\n// ==============================|| LIST - INTERACTIVE ||============================== //\n\nexport default function InteractiveList() {\n  const [dense, setDense] = useState(false);\n  const [secondary, setSecondary] = useState(false);\n\n  const interactiveListCodeString = `<FormGroup row>\n  <FormControlLabel\n    control={<Checkbox checked={dense} onChange={(event) => setDense(event.target.checked)} />}\n    label=\"Enable dense\"\n  />\n  <FormControlLabel\n    control={<Checkbox checked={secondary} onChange={(event) => setSecondary(event.target.checked)} />}\n    label=\"Enable secondary text\"\n  />\n</FormGroup>\n// Text Only\n<ListWrapper>\n  <List dense={dense}>\n    {generate(\n      <ListItem divider>\n        <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n      </ListItem>\n    )}\n  </List>\n</ListWrapper>\n\n// Icon with text\n<ListWrapper>\n  <List dense={dense}>\n    {generate(\n      <ListItem divider>\n        <ListItemIcon sx={{ mr: 0.5 }}>\n          <FolderOpen />\n        </ListItemIcon>\n        <ListItemText primary=\"Single item\" secondary={secondary ? 'Secondary text' : null} />\n      </ListItem>\n    )}\n  </List>\n</ListWrapper>\n\n// Avatar with text\n<ListWrapper>\n  <List dense={dense}>\n    {generate(\n      <ListItem divider>\n        <ListItemAvatar>\n          <AntAvatar>\n            <img alt=\"Natacha\" src={'/assets/images/users/vector-1.png'} height={40} />\n          </AntAvatar>\n        </ListItemAvatar>\n        <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n      </ListItem>\n    )}\n  </List>\n</ListWrapper>\n\n// Avatar with text and icon\n<ListWrapper>\n  <List dense={dense}>\n    {generate(\n      <ListItem\n        divider\n        secondaryAction={\n          <IconButton edge=\"end\" aria-label=\"delete\">\n            <Trash variant=\"Bold\" />\n          </IconButton>\n        }\n      >\n        <ListItemAvatar>\n          <AntAvatar alt=\"Avatar\" src={'/assets/images/users/avatar-4.png'} />\n        </ListItemAvatar>\n        <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n      </ListItem>\n    )}\n  </List>\n</ListWrapper>`;\n\n  return (\n    <MainCard codeString={interactiveListCodeString}>\n      <Box sx={{ flexGrow: 1 }}>\n        <FormGroup row>\n          <FormControlLabel\n            control={<Checkbox checked={dense} onChange={(event) => setDense(event.target.checked)} />}\n            label=\"Enable dense\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={secondary} onChange={(event) => setSecondary(event.target.checked)} />}\n            label=\"Enable secondary text\"\n          />\n        </FormGroup>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Typography sx={{ mt: 3 }} variant=\"h5\">\n              Text only\n            </Typography>\n            <ListWrapper>\n              <List dense={dense}>\n                {generate(\n                  <ListItem divider>\n                    <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n                  </ListItem>\n                )}\n              </List>\n            </ListWrapper>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Typography variant=\"h5\" sx={{ mt: { xs: 0, lg: 3 } }}>\n              Icon with text\n            </Typography>\n            <ListWrapper>\n              <List dense={dense}>\n                {generate(\n                  <ListItem divider>\n                    <ListItemIcon sx={{ mr: 0.5 }}>\n                      <FolderOpen size={18} />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Single item\" secondary={secondary ? 'Secondary text' : null} />\n                  </ListItem>\n                )}\n              </List>\n            </ListWrapper>\n          </Grid>\n        </Grid>\n        <Grid container spacing={3} sx={{ mt: 1 }}>\n          <Grid item xs={12} xl={6}>\n            <Typography variant=\"h5\">Avatar with text</Typography>\n            <ListWrapper>\n              <List dense={dense}>\n                {generate(\n                  <ListItem divider>\n                    <ListItemAvatar>\n                      <AntAvatar>\n                        <img alt=\"Natacha\" src={vector1} height={40} />\n                      </AntAvatar>\n                    </ListItemAvatar>\n                    <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n                  </ListItem>\n                )}\n              </List>\n            </ListWrapper>\n          </Grid>\n          <Grid item xs={12} xl={6}>\n            <Typography variant=\"h5\">Avatar with text and icon</Typography>\n            <ListWrapper>\n              <List dense={dense}>\n                {generate(\n                  <ListItem\n                    divider\n                    secondaryAction={\n                      <IconButton edge=\"end\" aria-label=\"delete\" color=\"error\" size=\"small\">\n                        <Trash variant=\"Bold\" />\n                      </IconButton>\n                    }\n                  >\n                    <ListItemAvatar>\n                      <AntAvatar alt=\"Avatar\" src={avatar4} />\n                    </ListItemAvatar>\n                    <ListItemText primary=\"Single-line item\" secondary={secondary ? 'Secondary text' : null} />\n                  </ListItem>\n                )}\n              </List>\n            </ListWrapper>\n          </Grid>\n        </Grid>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":6805},"src/pages/auth/auth2/login2.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Logo from 'components/logo';\nimport useAuth from 'hooks/useAuth';\nimport AuthSocButton from 'sections/auth/AuthSocButton';\nimport AuthDivider from 'sections/auth/AuthDivider';\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\nimport AuthLogin from 'sections/auth/auth-forms/AuthLogin';\n\n// assets\nimport imgFacebook from 'assets/images/auth/facebook.svg';\nimport imgTwitter from 'assets/images/auth/twitter.svg';\nimport imgGoogle from 'assets/images/auth/google.svg';\n\n// ================================|| LOGIN ||================================ //\n\nexport default function Login2() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sx={{ textAlign: 'center' }}>\n          <Logo />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgFacebook} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Facebook\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgTwitter} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Twitter\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgGoogle} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Google\n              </AuthSocButton>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthDivider>\n            <Typography variant=\"body1\">OR</Typography>\n          </AuthDivider>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Login</Typography>\n            <Typography\n              component={Link}\n              to={isLoggedIn ? '/auth/register2' : '/register2'}\n              variant=\"body1\"\n              sx={{ textDecoration: 'none' }}\n              color=\"primary\"\n            >\n              Don&apos;t have an account?\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthLogin forgot=\"/auth/forgot-password2\" />\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":2598},"src/sections/landing/Combo.jsx":{"content":"// material-ui\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport CardMedia from '@mui/material/CardMedia';\nimport Container from '@mui/material/Container';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { motion } from 'framer-motion';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ExportSquare } from 'iconsax-react';\nimport featureFigma from 'assets/images/landing/feature-figma.png';\nimport featureComponents from 'assets/images/landing/feature-components.png';\nimport featureDocumentation from 'assets/images/landing/feature-documentation.png';\n\nconst Technologies = [\n  {\n    icon: featureFigma,\n    title: 'Figma Design System',\n    description: 'Check the live preview of Able Pro Figma design file. Figma file included in all licenses.',\n    preview: 'https://www.figma.com/file/6XqmRhRmkr33w0EFD49acY/Able-Pro--v9.0-Figma-Preview?type=design&mode=design&t=4FS2Lw6WxsmJ3RLm-0'\n  },\n  {\n    icon: featureComponents,\n    title: 'Explore Components',\n    description: 'Access all components of Able Pro in one place to make your development work easier.',\n    preview: '/components-overview/buttons'\n  },\n  {\n    icon: featureDocumentation,\n    title: 'Documentation',\n    description: 'Find solutions and navigate through our helper guide with ease.',\n    preview: 'https://phoenixcoded.gitbook.io/able-pro/v/react/'\n  }\n];\n\n// ==============================|| LANDING - ComboPage ||============================== //\n\nexport default function ComboPage() {\n  return (\n    <Container>\n      <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 15, xs: 2.5 }, mb: { md: 10, xs: 2.5 } }}>\n        <Grid item xs={12}>\n          <Grid container spacing={2} justifyContent=\"center\" sx={{ textAlign: 'center', marginBottom: 3 }}>\n            <Grid item xs={12}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.2\n                }}\n              >\n                <Typography variant=\"h2\">Complete Combo</Typography>\n              </motion.div>\n            </Grid>\n            <Grid item xs={12} md={7}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.4\n                }}\n              >\n                <Typography>\n                  Able Pro caters to the needs of both developers and designers, whether they are beginners or experts.\n                </Typography>\n              </motion.div>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={3} alignItems=\"center\">\n            {Technologies.map((tech, index) => (\n              <Grid item xs={12} md={6} lg={4} key={index}>\n                <FadeInWhenVisible>\n                  <MainCard>\n                    <Grid container spacing={3.5}>\n                      <Grid item xs={12}>\n                        <Stack spacing={1}>\n                          <Typography variant=\"h5\">{tech.title}</Typography>\n                          <Typography>{tech.description}</Typography>\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <CardMedia component=\"img\" image={tech.icon} sx={{ width: '100%' }} />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          size=\"large\"\n                          startIcon={<ExportSquare />}\n                          component={Link}\n                          href={tech.preview}\n                          target=\"_blank\"\n                          sx={{\n                            fontWeight: 500,\n                            bgcolor: 'secondary.light',\n                            color: 'secondary.darker',\n                            '&:hover': { color: 'secondary.lighter' }\n                          }}\n                        >\n                          Reference\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </MainCard>\n                </FadeInWhenVisible>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","size_bytes":4889},"src/sections/apps/e-commerce/checkout/Payment.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// project-imports\nimport AddAddress from './AddAddress';\nimport AddressCard from './AddressCard';\nimport CartDiscount from './CartDiscount';\nimport OrderComplete from './OrderComplete';\nimport OrderSummary from './OrderSummery';\nimport PaymentCard from './PaymentCard';\nimport PaymentOptions from './PaymentOptions';\nimport PaymentSelect from './PaymentSelect';\n\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport { setPaymentCard, setPaymentMethod } from 'api/cart';\n\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { ArrowLeft2, TickCircle, Trash } from 'iconsax-react';\n\nimport cvv from 'assets/images/e-commerce/cvv.png';\nimport lock from 'assets/images/e-commerce/lock.png';\nimport master from 'assets/images/e-commerce/master-card.png';\nimport paypalcard from 'assets/images/e-commerce/paypal.png';\n\n// ==============================|| CHECKOUT - PAYMENT ||============================== //\n\nexport default function Payment({ checkout, onBack, onNext, removeProduct, editAddress }) {\n  const [type, setType] = useState('visa');\n  const [payment, setPayment] = useState(checkout.payment.method);\n  const [rows, setRows] = useState(checkout.products);\n  const [cards, setCards] = useState(checkout.payment.card);\n  const [select, setSelect] = useState(null);\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = (billingAddress) => {\n    setOpen(true);\n    billingAddress && setSelect(billingAddress);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setSelect(null);\n  };\n\n  const [complete, setComplete] = useState(false);\n\n  useEffect(() => {\n    if (checkout.step > 2) {\n      setComplete(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setRows(checkout.products);\n  }, [checkout.products]);\n\n  const cardHandler = (card) => {\n    if (payment === 'card') {\n      setCards(card);\n      setPaymentCard(card);\n    }\n  };\n\n  const handlePaymentMethod = (value) => {\n    if (value === 'card') {\n      setType('visa');\n    } else if (value === 'paypal') {\n      setType('mastercard');\n    } else {\n      setType('cod');\n    }\n    setPayment(value);\n    setPaymentMethod(value);\n  };\n\n  const completeHandler = () => {\n    if (payment === 'card' && (cards === '' || cards === null)) {\n      openSnackbar({\n        open: true,\n        message: 'Select Payment Card',\n        variant: 'alert',\n\n        alert: {\n          color: 'error'\n        }\n      });\n    } else {\n      onNext();\n      setComplete(true);\n    }\n  };\n\n  const getImage = (type) => {\n    if (type === 'visa') {\n      return <img src={master} alt=\"card\" />;\n    }\n    if (type === 'mastercard') {\n      return <img src={paypalcard} alt=\"card\" />;\n    }\n    return null;\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={6} lg={8} xl={9}>\n        <Stack spacing={2} alignItems=\"flex-end\">\n          <MainCard title=\"Payment Method\">\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <AddressCard change address={checkout.billing} handleClickOpen={handleClickOpen} />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl>\n                  <RadioGroup\n                    aria-label=\"delivery-options\"\n                    value={payment}\n                    onChange={(e) => handlePaymentMethod(e.target.value)}\n                    name=\"delivery-options\"\n                  >\n                    <Grid container spacing={2} alignItems=\"center\">\n                      {PaymentOptions.map((item, index) => (\n                        <Grid item xs={12} sm={6} lg={4} key={index}>\n                          <PaymentSelect item={item} />\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </RadioGroup>\n                </FormControl>\n              </Grid>\n              {type !== 'cod' && (\n                <Grid item xs={12}>\n                  <Grid container rowSpacing={2}>\n                    <Grid item xs={12}>\n                      <Grid container>\n                        <Grid item xs={5}>\n                          <Stack>\n                            <InputLabel>Card Number :</InputLabel>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: { xs: 'none', sm: 'flex' } }}>\n                              Enter the 16 digit card number on the card\n                            </Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={7}>\n                          <TextField\n                            fullWidth\n                            type=\"password\"\n                            InputProps={{\n                              startAdornment: type !== 'cod' ? <InputAdornment position=\"start\">{getImage(type)}</InputAdornment> : null,\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  <TickCircle />\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid container>\n                        <Grid item xs={5}>\n                          <Stack>\n                            <InputLabel>Expiry Date :</InputLabel>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: { xs: 'none', sm: 'flex' } }}>\n                              Enter the expiration on the card\n                            </Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={7}>\n                          <Grid container spacing={2}>\n                            <Grid item xs={6}>\n                              <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                                <TextField fullWidth placeholder=\"12\" />\n                                <Typography color=\"text.secondary\">/</Typography>\n                              </Stack>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <TextField fullWidth placeholder=\"2021\" />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid container>\n                        <Grid item xs={5}>\n                          <Stack>\n                            <InputLabel>CVV Number :</InputLabel>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: { xs: 'none', sm: 'flex' } }}>\n                              Enter the 3 or 4 digit number on the card\n                            </Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={7}>\n                          <TextField\n                            fullWidth\n                            InputProps={{\n                              startAdornment: (\n                                <InputAdornment position=\"start\">\n                                  <img src={cvv} alt=\"CVV\" />\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Grid container>\n                        <Grid item xs={5}>\n                          <Stack>\n                            <InputLabel>Password :</InputLabel>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: { xs: 'none', sm: 'flex' } }}>\n                              Enter your dynamic password\n                            </Typography>\n                          </Stack>\n                        </Grid>\n                        <Grid item xs={7}>\n                          <TextField\n                            fullWidth\n                            InputProps={{\n                              startAdornment: (\n                                <InputAdornment position=\"start\">\n                                  <img src={lock} alt=\"icon\" />\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              )}\n              {type !== 'cod' && (\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\">\n                    <Button variant=\"outlined\" color=\"secondary\">\n                      Cancel\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Save\n                    </Button>\n                  </Stack>\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <Stack direction=\"row\" spacing={0} alignItems=\"center\">\n                  <Grid item xs={6}>\n                    <Divider />\n                  </Grid>\n                  <Typography sx={{ px: 1 }}>OR</Typography>\n                  <Grid item xs={6}>\n                    <Divider />\n                  </Grid>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={12} lg={10}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6} lg={5}>\n                    <PaymentCard type=\"mastercard\" paymentType={type} cardHandler={cardHandler} />\n                  </Grid>\n                  <Grid item xs={12} sm={6} lg={5}>\n                    <PaymentCard type=\"visa\" paymentType={type} cardHandler={cardHandler} />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </MainCard>\n          <Button variant=\"text\" color=\"secondary\" startIcon={<ArrowLeft2 />} onClick={onBack}>\n            <Typography variant=\"h6\" color=\"text.primary\">\n              Back to Shipping Information\n            </Typography>\n          </Button>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={6} lg={4} xl={3}>\n        <Stack>\n          <MainCard sx={{ mb: 3 }}>\n            <CartDiscount />\n          </MainCard>\n          <MainCard title=\"Order Summery\" sx={{ borderRadius: '4px 4px 0 0', borderBottom: 'none' }} content={false}>\n            {rows.map((row, index) => (\n              <List\n                key={index}\n                component=\"nav\"\n                sx={{\n                  '& .MuiListItemButton-root': {\n                    '& .MuiListItemSecondaryAction-root': {\n                      alignSelf: 'flex-start',\n                      ml: 1,\n                      position: 'relative',\n                      right: 'auto',\n                      top: 'auto',\n                      transform: 'none'\n                    },\n                    '& .MuiListItemAvatar-root': { mr: '7px' },\n                    py: 0.5,\n                    pl: '15px',\n                    pr: '8px'\n                  },\n                  p: 0\n                }}\n              >\n                <ListItemButton divider>\n                  <ListItemAvatar>\n                    <Avatar\n                      alt=\"Avatar\"\n                      size=\"lg\"\n                      variant=\"rounded\"\n                      color=\"secondary\"\n                      type=\"combined\"\n                      src={row.image ? getImageUrl(`thumbs/${row.image}`, ImagePath.ECOMMERCE) : ''}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    disableTypography\n                    primary={\n                      <Typography\n                        component={Link}\n                        to={`/apps/e-commerce/product-details/${row.id}`}\n                        target=\"_blank\"\n                        variant=\"subtitle1\"\n                        color=\"text.primary\"\n                        sx={{ textDecoration: 'none' }}\n                      >\n                        {row.name}\n                      </Typography>\n                    }\n                    secondary={\n                      <Stack spacing={1}>\n                        <Typography color=\"text.secondary\">{row.description}</Typography>\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\n                          <Typography>${row.offerPrice}</Typography>\n                          <Typography color=\"text.secondary\">{row.quantity} items</Typography>\n                        </Stack>\n                      </Stack>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      size=\"medium\"\n                      color=\"secondary\"\n                      sx={{ opacity: 0.5, '&:hover': { bgcolor: 'transparent' } }}\n                      onClick={() => removeProduct(row.itemId)}\n                    >\n                      <Trash style={{ color: 'secondary.main' }} />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItemButton>\n              </List>\n            ))}\n          </MainCard>\n          <OrderSummary checkout={checkout} show={false} />\n          <Button variant=\"contained\" sx={{ textTransform: 'none', mt: 3 }} onClick={completeHandler} fullWidth>\n            Process to Checkout\n          </Button>\n          <OrderComplete open={complete} />\n        </Stack>\n      </Grid>\n      <AddAddress open={open} handleClose={handleClose} address={select} editAddress={editAddress} />\n    </Grid>\n  );\n}\n\nPayment.propTypes = {\n  checkout: PropTypes.any,\n  onBack: PropTypes.func,\n  onNext: PropTypes.func,\n  removeProduct: PropTypes.func,\n  editAddress: PropTypes.func\n};\n","size_bytes":15202},"src/pages/apps/e-commerce/add-product.jsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { DocumentUpload } from 'iconsax-react';\n\n// constant\nconst prices = [\n  {\n    value: '1',\n    label: '$ 100'\n  },\n  {\n    value: '2',\n    label: '$ 200'\n  },\n  {\n    value: '3',\n    label: '$ 300'\n  },\n  {\n    value: '4',\n    label: '$ 400'\n  }\n];\n\nconst quantities = [\n  {\n    value: 'one',\n    label: '1'\n  },\n  {\n    value: 'two',\n    label: '2'\n  },\n  {\n    value: 'three',\n    label: '3'\n  }\n];\n\nconst statuss = [\n  {\n    value: 'in stock',\n    label: 'In Stock'\n  },\n  {\n    value: 'out of stock',\n    label: 'Out of Stock'\n  }\n];\n\n// ==============================|| ECOMMERCE - ADD PRODUCT ||============================== //\n\nexport default function AddNewProduct() {\n  const history = useNavigate();\n\n  const [quantity, setQuantity] = useState('one');\n  const [price, setPrice] = useState('1');\n  const [status, setStatus] = useState('in stock');\n\n  const handlePrice = (event) => {\n    setPrice(event.target.value);\n  };\n\n  const handleQuantity = (event) => {\n    setQuantity(event.target.value);\n  };\n\n  const handleStatus = (event) => {\n    setStatus(event.target.value);\n  };\n\n  const handleCancel = () => {\n    history(`/apps/e-commerce/product-list`);\n  };\n\n  return (\n    <>\n      <MainCard>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <MainCard>\n              <Grid container spacing={1} direction=\"column\">\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Product Name</InputLabel>\n                  <TextField placeholder=\"Enter product name\" fullWidth />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Product Description</InputLabel>\n                  <TextField placeholder=\"Enter product description\" fullWidth />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Category</InputLabel>\n                  <TextField placeholder=\"Enter your category\" fullWidth />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Price</InputLabel>\n                  <TextField placeholder=\"Select Price\" fullWidth select value={price} onChange={handlePrice}>\n                    {prices.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <MainCard>\n              <Grid container direction=\"column\" spacing={2}>\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Qty</InputLabel>\n                  <TextField placeholder=\"Select quantity\" fullWidth select value={quantity} onChange={handleQuantity}>\n                    {quantities.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <InputLabel sx={{ mb: 1 }}>Status</InputLabel>\n                  <TextField placeholder=\"Select status\" fullWidth select value={status} onChange={handleStatus}>\n                    {statuss.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography color=\"error.main\">\n                    *{' '}\n                    <Typography component=\"span\" color=\"text.secondary\">\n                      Recommended resolution is 640*640 with file size\n                    </Typography>\n                  </Typography>\n                  <Button variant=\"outlined\" color=\"secondary\" startIcon={<DocumentUpload />} sx={{ mt: 1, textTransform: 'none' }}>\n                    Click to Upload\n                  </Button>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" spacing={2} justifyContent=\"right\" alignItems=\"center\" sx={{ mt: 6 }}>\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={handleCancel}>\n                      Cancel\n                    </Button>\n                    <Button variant=\"contained\" sx={{ textTransform: 'none' }}>\n                      Add new Product\n                    </Button>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </MainCard>\n    </>\n  );\n}\n","size_bytes":5299},"src/sections/apps/invoice/export-pdf/Header.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\n\n// third-party\nimport { Text, View, StyleSheet, Image } from '@react-pdf/renderer';\nimport { format } from 'date-fns';\n\n// assets\nimport Logo from 'assets/images/Logo.svg';\n\nconst textPrimary = '#262626';\nconst textSecondary = '#8c8c8c';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row'\n  },\n  detailColumn: {\n    marginBottom: '12px',\n    flexDirection: 'column',\n    flexGrow: 2\n  },\n  chipTitle: {\n    fontSize: '8px',\n    padding: 4\n  },\n  chip: {\n    alignItems: 'center',\n    borderRadius: '4px',\n    marginLeft: 52,\n    marginRight: 4,\n    marginBottom: 8\n  },\n  leftColumn: {\n    flexDirection: 'column',\n    width: 36,\n    marginRight: 10,\n    paddingLeft: 4,\n    marginTop: 4\n  },\n  image: {\n    width: 90,\n    height: 28\n  },\n  mainContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'stretch'\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-end'\n  },\n  title: {\n    color: textPrimary,\n    fontSize: '10px'\n  },\n  caption: {\n    color: textSecondary,\n    fontSize: '10px'\n  }\n});\n\n// ==============================|| INVOICE EXPORT - HEADER  ||============================== //\n\nexport default function Header({ list }) {\n  const theme = useTheme();\n\n  return (\n    <View style={styles.mainContainer}>\n      <View style={styles.container}>\n        <View style={styles.leftColumn}>\n          <Image src={Logo} style={styles.image} />\n          <Text style={[styles.caption, { marginTop: 4 }]}>{`#${list?.invoice_id}`}</Text>\n        </View>\n        <View style={styles.detailColumn}>\n          <View\n            style={[\n              styles.chip,\n              {\n                backgroundColor:\n                  list?.status === 'Paid'\n                    ? alpha(theme.palette.success.light, 0.2)\n                    : list?.status === 'Unpaid'\n                      ? alpha(theme.palette.info.light, 0.2)\n                      : alpha(theme.palette.error.light, 0.2),\n                color:\n                  list?.status === 'Paid'\n                    ? theme.palette.success.main\n                    : list?.status === 'Unpaid'\n                      ? theme.palette.info.main\n                      : theme.palette.error.main\n              }\n            ]}\n          >\n            <Text style={styles.chipTitle}>{list?.status}</Text>\n          </View>\n        </View>\n      </View>\n      <View>\n        <View style={[styles.row, { marginTop: 8 }]}>\n          <Text style={styles.title}>Date</Text>\n          <Text style={styles.caption}> {list?.date && format(new Date(list?.date), 'dd/MM/yyyy')}</Text>\n        </View>\n        <View style={[styles.row, { marginTop: 8 }]}>\n          <Text style={styles.title}>Due Date</Text>\n          <Text style={styles.caption}> {list?.due_date && format(new Date(list?.due_date), 'dd/MM/yyyy')}</Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nHeader.propTypes = { list: PropTypes.any };\n","size_bytes":3096},"src/pages/apps/profiles/user.jsx":{"content":"import { useRef } from 'react';\nimport { Outlet } from 'react-router';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ProfileCard from 'sections/apps/profiles/user/ProfileCard';\nimport ProfileTabs from 'sections/apps/profiles/user/ProfileTabs';\n\n// ==============================|| PROFILE - USER ||============================== //\n\nexport default function UserProfile() {\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current?.focus();\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <ProfileCard focusInput={focusInput} />\n      </Grid>\n      <Grid item xs={12} md={3}>\n        <ProfileTabs focusInput={focusInput} />\n      </Grid>\n      <Grid item xs={12} md={9}>\n        <Outlet context={inputRef} />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":840},"src/pages/auth/auth2/forgot-password2.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\nimport AuthForgotPassword from 'sections/auth/auth-forms/AuthForgotPassword';\n\n// ================================|| FORGOT PASSWORD ||================================ //\n\nexport default function ForgotPassword() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Forgot Password</Typography>\n            <Typography\n              component={Link}\n              to={isLoggedIn ? '/auth/login2' : '/login2'}\n              variant=\"body1\"\n              sx={{ textDecoration: 'none' }}\n              color=\"primary\"\n            >\n              Back to Login\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthForgotPassword />\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":1274},"src/assets/images/price/Standard.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// ==============================|| PRICE - LOGO ||============================== //\n\nconst StandardLogo = () => {\n  const theme = useTheme();\n\n  return (\n    <svg width=\"36\" height=\"18\" viewBox=\"0 0 36 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M18 0.251007L35.5 17.751H28.4137L18 7.33735L7.58635 17.751H0.5L18 0.251007Z\" fill={theme.palette.primary.main} />\n    </svg>\n  );\n};\n\nexport default StandardLogo;\n","size_bytes":498},"src/contexts/auth-reducer/auth.js":{"content":"// action - state management\nimport { REGISTER, LOGIN, LOGOUT } from './actions';\n\n// initial state\nexport const initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\n\n// ==============================|| AUTH REDUCER ||============================== //\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case REGISTER: {\n      const { user } = action.payload;\n      return {\n        ...state,\n        user\n      };\n    }\n    case LOGIN: {\n      const { user } = action.payload;\n      return {\n        ...state,\n        isLoggedIn: true,\n        isInitialized: true,\n        user\n      };\n    }\n    case LOGOUT: {\n      return {\n        ...state,\n        isInitialized: true,\n        isLoggedIn: false,\n        user: null\n      };\n    }\n    default: {\n      return { ...state };\n    }\n  }\n};\n\nexport default auth;\n","size_bytes":865},"src/menu-items/components.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// project-imports\n\n// ==============================|| MENU ITEMS - COMPONENTS ||============================== //\n\nconst menuItems = [\n  {\n    id: 'group-inputs',\n    title: <FormattedMessage id=\"inputs\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'autocomplete',\n        search: 'autocomplete, combo box, country select, grouped, multi select',\n        title: <FormattedMessage id=\"autocomplete\" />,\n        type: 'item',\n        url: '/components-overview/autocomplete'\n      },\n      {\n        id: 'buttons',\n        search: 'buttons, button group, icon button, toggle button, loading button',\n        title: <FormattedMessage id=\"button\" />,\n        type: 'item',\n        url: '/components-overview/buttons'\n      },\n      {\n        id: 'checkbox',\n        search: 'checkbox, indeterminate',\n        title: <FormattedMessage id=\"checkbox\" />,\n        type: 'item',\n        url: '/components-overview/checkbox'\n      },\n      {\n        id: 'radio',\n        search: 'radio',\n        title: <FormattedMessage id=\"radio\" />,\n        type: 'item',\n        url: '/components-overview/radio'\n      },\n      {\n        id: 'rating',\n        search: 'rating, star rating, feedback',\n        title: <FormattedMessage id=\"rating\" />,\n        type: 'item',\n        url: '/components-overview/rating'\n      },\n      {\n        id: 'switch',\n        search: 'switch',\n        title: <FormattedMessage id=\"switch\" />,\n        type: 'item',\n        url: '/components-overview/switch'\n      },\n      {\n        id: 'select',\n        search: 'select, multi-select',\n        title: <FormattedMessage id=\"select\" />,\n        type: 'item',\n        url: '/components-overview/select'\n      },\n      {\n        id: 'slider',\n        search: 'slider, range',\n        title: <FormattedMessage id=\"slider\" />,\n        type: 'item',\n        url: '/components-overview/slider'\n      },\n      {\n        id: 'textfield',\n        search: 'textfield, input, form input, search',\n        title: <FormattedMessage id=\"text-field\" />,\n        type: 'item',\n        url: '/components-overview/textfield'\n      }\n    ]\n  },\n  {\n    id: 'data-display',\n    title: <FormattedMessage id=\"data-display\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'avatars',\n        search: 'avatars, fallbacks, group avatar',\n        title: <FormattedMessage id=\"avatar\" />,\n        type: 'item',\n        url: '/components-overview/avatars'\n      },\n      {\n        id: 'badges',\n        search: 'badges',\n        title: <FormattedMessage id=\"badges\" />,\n        type: 'item',\n        url: '/components-overview/badges'\n      },\n      {\n        id: 'chips',\n        search: 'chips, tags, ',\n        title: <FormattedMessage id=\"chip\" />,\n        type: 'item',\n        url: '/components-overview/chips'\n      },\n      {\n        id: 'lists',\n        search: 'lists, folder list, nested list',\n        title: <FormattedMessage id=\"list\" />,\n        type: 'item',\n        url: '/components-overview/lists'\n      },\n      {\n        id: 'tooltip',\n        search: 'tooltip',\n        title: <FormattedMessage id=\"tooltip\" />,\n        type: 'item',\n        url: '/components-overview/tooltip'\n      },\n      {\n        id: 'typography',\n        search: 'typography, h1, h2,h3, h4, h5, h6, caption, subtitle, body',\n        title: <FormattedMessage id=\"typography\" />,\n        type: 'item',\n        url: '/components-overview/typography'\n      }\n    ]\n  },\n  {\n    id: 'feedback',\n    title: <FormattedMessage id=\"feedback\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'alert',\n        search: 'alert',\n        title: <FormattedMessage id=\"alert\" />,\n        type: 'item',\n        url: '/components-overview/alert'\n      },\n      {\n        id: 'dialogs',\n        search: 'dialogs, modal, sweetalert, confirmation box',\n        title: <FormattedMessage id=\"dialogs\" />,\n        type: 'item',\n        url: '/components-overview/dialogs'\n      },\n      {\n        id: 'progress',\n        search: 'progress, circular, linear, buffer',\n        title: <FormattedMessage id=\"progress\" />,\n        type: 'item',\n        url: '/components-overview/progress'\n      },\n      {\n        id: 'snackbar',\n        search: 'snackbar, notification, notify',\n        title: <FormattedMessage id=\"snackbar\" />,\n        type: 'item',\n        url: '/components-overview/snackbar'\n      }\n    ]\n  },\n  {\n    id: 'navigation',\n    title: <FormattedMessage id=\"navigation\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'breadcrumbs',\n        search: 'breadcrumbs',\n        title: <FormattedMessage id=\"breadcrumb\" />,\n        type: 'item',\n        url: '/components-overview/breadcrumbs'\n      },\n      {\n        id: 'pagination',\n        search: 'pagination, table pagination',\n        title: <FormattedMessage id=\"pagination\" />,\n        type: 'item',\n        url: '/components-overview/pagination'\n      },\n      {\n        id: 'speeddial',\n        search: 'speeddial, speed dial, quick access button, fab button',\n        title: <FormattedMessage id=\"speed-dial\" />,\n        type: 'item',\n        url: '/components-overview/speeddial'\n      },\n      {\n        id: 'stepper',\n        search: 'stepper, form wizard, vertical stepper, vertical wizard',\n        title: <FormattedMessage id=\"stepper\" />,\n        type: 'item',\n        url: '/components-overview/stepper'\n      },\n      {\n        id: 'tabs',\n        search: 'tabs, vertical tab',\n        title: <FormattedMessage id=\"tabs\" />,\n        type: 'item',\n        url: '/components-overview/tabs'\n      }\n    ]\n  },\n  {\n    id: 'surfaces',\n    title: <FormattedMessage id=\"surfaces\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'accordion',\n        search: 'accordion',\n        title: <FormattedMessage id=\"accordion\" />,\n        type: 'item',\n        url: '/components-overview/accordion'\n      },\n      {\n        id: 'cards',\n        search: 'cards',\n        title: <FormattedMessage id=\"cards\" />,\n        type: 'item',\n        url: '/components-overview/cards'\n      }\n    ]\n  },\n  {\n    id: 'utils',\n    title: <FormattedMessage id=\"utils\" />,\n    type: 'group',\n    children: [\n      {\n        id: 'color',\n        search: 'color',\n        title: <FormattedMessage id=\"color\" />,\n        type: 'item',\n        url: '/components-overview/color'\n      },\n      {\n        id: 'date-time-picker',\n        search: 'datetime, date, time date time, picker, date range picker',\n        title: <FormattedMessage id=\"datetime\" />,\n        type: 'item',\n        url: '/components-overview/date-time-picker'\n      },\n      {\n        id: 'modal',\n        search: 'modal, dialog',\n        title: <FormattedMessage id=\"modal\" />,\n        type: 'item',\n        url: '/components-overview/modal'\n      },\n      {\n        id: 'shadows',\n        search: 'shadows, color shadow',\n        title: <FormattedMessage id=\"shadow\" />,\n        type: 'item',\n        url: '/components-overview/shadows'\n      },\n      {\n        id: 'timeline',\n        search: 'timeline, list of event',\n        title: <FormattedMessage id=\"timeline\" />,\n        type: 'item',\n        url: '/components-overview/timeline'\n      },\n      {\n        id: 'treeview',\n        search: 'treeview, email clone',\n        title: <FormattedMessage id=\"treeview\" />,\n        type: 'item',\n        url: '/components-overview/treeview'\n      }\n    ]\n  }\n];\n\nexport default menuItems;\n","size_bytes":7431},"src/components/third-party/dropzone/SingleFile.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useDropzone } from 'react-dropzone';\n\n// project-imports\nimport RejectionFiles from './RejectionFiles';\nimport PlaceholderContent from './PlaceholderContent';\n\nconst DropzoneWrapper = styled('div')(({ theme }) => ({\n  outline: 'none',\n  overflow: 'hidden',\n  position: 'relative',\n  padding: theme.spacing(5, 1),\n  borderRadius: theme.shape.borderRadius,\n  transition: theme.transitions.create('padding'),\n  backgroundColor: theme.palette.background.paper,\n  border: '1px dashed',\n  borderColor: theme.palette.secondary.main,\n  '&:hover': { opacity: 0.72, cursor: 'pointer' }\n}));\n\n// ==============================|| UPLOAD - SINGLE FILE ||============================== //\n\nexport default function SingleFileUpload({ error, file, setFieldValue, sx }) {\n  const theme = useTheme();\n\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\n    accept: { 'image/*': [] },\n    multiple: false,\n    onDrop: (acceptedFiles) => {\n      setFieldValue(\n        'files',\n        acceptedFiles.map((file) => Object.assign(file, { preview: URL.createObjectURL(file) }))\n      );\n    }\n  });\n\n  const thumbs =\n    file &&\n    file.map((item) => (\n      <img\n        key={item.name}\n        alt={item.name}\n        src={item.preview}\n        style={{\n          top: 8,\n          left: 8,\n          borderRadius: 2,\n          position: 'absolute',\n          width: 'calc(100% - 16px)',\n          height: 'calc(100% - 16px)',\n          background: theme.palette.background.paper\n        }}\n        onLoad={() => {\n          URL.revokeObjectURL(item.preview);\n        }}\n      />\n    ));\n\n  const onRemove = () => {\n    setFieldValue('files', null);\n  };\n\n  return (\n    <Box sx={{ width: '100%', ...sx }}>\n      <DropzoneWrapper\n        {...getRootProps()}\n        sx={{\n          ...(isDragActive && { opacity: 0.72 }),\n          ...((isDragReject || error) && { color: 'error.main', borderColor: 'error.light', bgcolor: 'error.lighter' }),\n          ...(file && { padding: '12% 0' })\n        }}\n      >\n        <input {...getInputProps()} />\n        <PlaceholderContent />\n        {thumbs}\n      </DropzoneWrapper>\n\n      {fileRejections.length > 0 && <RejectionFiles fileRejections={fileRejections} />}\n\n      {file && file.length > 0 && (\n        <Stack direction=\"row\" justifyContent=\"flex-end\" sx={{ mt: 1.5 }}>\n          <Button variant=\"contained\" color=\"error\" onClick={onRemove}>\n            Remove\n          </Button>\n        </Stack>\n      )}\n    </Box>\n  );\n}\n\nSingleFileUpload.propTypes = { error: PropTypes.any, file: PropTypes.any, setFieldValue: PropTypes.any, sx: PropTypes.any };\n","size_bytes":2883},"src/layout/Dashboard/Header/HeaderContent/Profile/ProfileTab.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router';\n\n// material-ui\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\n\n// assets\nimport { Card, Edit2, Logout, Profile, Profile2User } from 'iconsax-react';\n\nexport default function ProfileTab({ handleLogout }) {\n  const navigate = useNavigate();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const handleListItemClick = (event, index, route = '') => {\n    setSelectedIndex(index);\n\n    if (route && route !== '') {\n      navigate(route);\n    }\n  };\n\n  return (\n    <List component=\"nav\" sx={{ p: 0, '& .MuiListItemIcon-root': { minWidth: 32 } }}>\n      <ListItemButton selected={selectedIndex === 0} onClick={(event) => handleListItemClick(event, 0, '/apps/profiles/user/personal')}>\n        <ListItemIcon>\n          <Edit2 variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Edit Profile\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 1} onClick={(event) => handleListItemClick(event, 1, '/apps/profiles/account/basic')}>\n        <ListItemIcon>\n          <Profile variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"View Profile\" />\n      </ListItemButton>\n\n      <ListItemButton selected={selectedIndex === 3} onClick={(event) => handleListItemClick(event, 3, '/apps/profiles/account/personal')}>\n        <ListItemIcon>\n          <Profile2User variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Social Profile\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 4} onClick={(event) => handleListItemClick(event, 4, '/apps/invoice/details/1')}>\n        <ListItemIcon>\n          <Card variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Billing\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 2} onClick={handleLogout}>\n        <ListItemIcon>\n          <Logout variant=\"Bulk\" size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Logout\" />\n      </ListItemButton>\n    </List>\n  );\n}\n\nProfileTab.propTypes = { handleLogout: PropTypes.func };\n","size_bytes":2350},"src/components/logo/LogoMain.jsx":{"content":"import logo from 'assets/images/Logo.svg';\n\n// ==============================|| LOGO SVG ||============================== //\n\nexport default function LogoMain() {\n  return (\n  <img src={logo} alt=\"icon logo\" height=\"auto\" />\n);\n}\n","size_bytes":230},"src/layout/Dashboard/Drawer/DrawerContent/Navigation/NavCollapse.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState, useMemo } from 'react';\nimport { matchPath, useLocation, useNavigate, Link } from 'react-router-dom';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport List from '@mui/material/List';\nimport Menu from '@mui/material/Menu';\nimport Paper from '@mui/material/Paper';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Popper from '@mui/material/Popper';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport NavItem from './NavItem';\nimport Dot from 'components/@extended/Dot';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport Transitions from 'components/@extended/Transitions';\n\nimport { MenuOrientation, ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport { useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { ArrowDown2, ArrowUp2, ArrowRight2, Copy } from 'iconsax-react';\n\n// mini-menu - wrapper\nconst PopperStyled = styled(Popper)(({ theme }) => ({\n  overflow: 'visible',\n  zIndex: 1202,\n  minWidth: 180,\n  '&:before': {\n    content: '\"\"',\n    display: 'block',\n    position: 'absolute',\n    top: 38,\n    left: -5,\n    width: 10,\n    height: 10,\n    backgroundColor: theme.palette.background.paper,\n    transform: 'translateY(-50%) rotate(45deg)',\n    zIndex: 120\n  }\n}));\n\nexport default function NavCollapse({ menu, level, parentId, setSelectedItems, selectedItems, setSelectedLevel, selectedLevel }) {\n  const theme = useTheme();\n  const navigation = useNavigate();\n\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n  const { mode, menuOrientation } = useConfig();\n\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const [anchorElCollapse, setAnchorElCollapse] = useState(null);\n\n  const openCollapse = Boolean(anchorElCollapse);\n  const handleClickCollapse = (event) => {\n    setAnchorElCollapse(event.currentTarget);\n  };\n  const handleCloseCollapse = () => {\n    setAnchorElCollapse(null);\n  };\n\n  const handleClick = (event, isRedirect) => {\n    setAnchorEl(null);\n    setSelectedLevel(level);\n    if (drawerOpen) {\n      setOpen(!open);\n      setSelected(!selected ? menu.id : null);\n      setSelectedItems(!selected ? menu.id : '');\n      if (menu.url && isRedirect) navigation(`${menu.url}`);\n    } else {\n      setAnchorEl(event?.currentTarget);\n    }\n  };\n\n  const handlerIconLink = () => {\n    if (!drawerOpen) {\n      if (menu.url) navigation(`${menu.url}`);\n      setSelected(menu.id);\n    }\n  };\n\n  const handleHover = (event) => {\n    setAnchorEl(event?.currentTarget);\n    if (!drawerOpen) {\n      setSelected(menu.id);\n    }\n  };\n\n  const miniMenuOpened = Boolean(anchorEl);\n\n  const handleClose = () => {\n    setOpen(false);\n    if (!miniMenuOpened && !menu.url) {\n      setSelected(null);\n    }\n    setAnchorEl(null);\n  };\n\n  useMemo(() => {\n    if (selected === selectedItems) {\n      if (level === 1) {\n        setOpen(true);\n      }\n    } else {\n      if (level === selectedLevel) {\n        setOpen(false);\n        if ((!miniMenuOpened && !drawerOpen && !selected) || drawerOpen) {\n          setSelected(null);\n        }\n      }\n    }\n  }, [selectedItems, level, selected, miniMenuOpened, drawerOpen, selectedLevel]);\n\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    if (pathname === menu.url) {\n      setSelected(menu.id);\n    }\n    // eslint-disable-next-line\n  }, [pathname]);\n\n  const checkOpenForParent = (child, id) => {\n    child.forEach((item) => {\n      if (item.url === pathname) {\n        setOpen(true);\n        setSelected(id);\n      }\n    });\n  };\n\n  // menu collapse for sub-levels\n  useEffect(() => {\n    setOpen(false);\n    if (!miniMenuOpened) {\n      setSelected(null);\n    }\n    if (miniMenuOpened) setAnchorEl(null);\n    if (menu.children) {\n      menu.children.forEach((item) => {\n        if (item.children?.length) {\n          checkOpenForParent(item.children, menu.id);\n        }\n\n        if (item.link && !!matchPath({ path: item?.link, end: false }, pathname)) {\n          setSelected(menu.id);\n          setOpen(true);\n        }\n\n        if (item.url === pathname) {\n          setSelected(menu.id);\n          setOpen(true);\n        }\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pathname, menu.children]);\n\n  useEffect(() => {\n    if (menu.url === pathname) {\n      setSelected(menu.id);\n      setAnchorEl(null);\n      setOpen(true);\n    }\n  }, [pathname, menu]);\n\n  const navCollapse = menu.children?.map((item) => {\n    switch (item.type) {\n      case 'collapse':\n        return (\n          <NavCollapse\n            key={item.id}\n            setSelectedItems={setSelectedItems}\n            setSelectedLevel={setSelectedLevel}\n            selectedLevel={selectedLevel}\n            selectedItems={selectedItems}\n            menu={item}\n            level={level + 1}\n            parentId={parentId}\n          />\n        );\n      case 'item':\n        return <NavItem key={item.id} item={item} level={level + 1} />;\n      default:\n        return (\n          <Typography key={item.id} variant=\"h6\" color=\"error\" align=\"center\">\n            Fix - Collapse or Item\n          </Typography>\n        );\n    }\n  });\n\n  const isSelected = selected === menu.id;\n  const borderIcon = level === 1 ? <Copy variant=\"Bulk\" size={drawerOpen ? 22 : 24} /> : false;\n  const Icon = menu.icon;\n  const menuIcon = menu.icon ? <Icon variant=\"Bulk\" size={drawerOpen ? 22 : 24} /> : borderIcon;\n  const textColor = mode === ThemeMode.DARK ? theme.palette.secondary[400] : theme.palette.secondary.main;\n  const iconSelectedColor = mode === ThemeMode.DARK && drawerOpen ? theme.palette.text.primary : theme.palette.primary.main;\n  const popperId = miniMenuOpened ? `collapse-pop-${menu.id}` : undefined;\n  const FlexBox = { display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' };\n\n  return (\n    <>\n      {menuOrientation === MenuOrientation.VERTICAL || downLG ? (\n        <>\n          <ListItemButton\n            id={`${menu.id}-button`}\n            selected={isSelected}\n            {...(!drawerOpen && { onMouseEnter: (e) => handleClick(e, true), onMouseLeave: handleClose })}\n            onClick={(e) => handleClick(e, true)}\n            sx={{\n              pl: drawerOpen ? `${level === 1 ? 20 : level * 20 - 10}px` : 1.5,\n              py: !drawerOpen && level === 1 ? 1.25 : 1,\n              ...(drawerOpen && {\n                mx: 1.25,\n                my: 0.5,\n                borderRadius: 1,\n                '&:hover': { bgcolor: mode === ThemeMode.DARK ? 'divider' : 'secondary.200' },\n                '&.Mui-selected': { color: iconSelectedColor }\n              }),\n              ...(!drawerOpen && {\n                px: 2.75,\n                justifyContent: 'center',\n                '&:hover': { bgcolor: 'transparent' },\n                '&.Mui-selected': {\n                  '&:hover': { bgcolor: 'transparent' },\n                  bgcolor: 'transparent'\n                }\n              })\n            }}\n            {...(drawerOpen &&\n              menu.isDropdown && {\n                'aria-controls': openCollapse ? `${menu.id}-menu` : undefined,\n                'aria-haspopup': true,\n                'aria-expanded': openCollapse ? 'true' : undefined,\n                onClick: handleClickCollapse\n              })}\n          >\n            {menuIcon && (\n              <ListItemIcon\n                onClick={handlerIconLink}\n                sx={{\n                  minWidth: 38,\n                  color: isSelected ? 'primary.main' : textColor,\n                  ...(!drawerOpen && {\n                    borderRadius: 1,\n                    width: 46,\n                    height: 46,\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    '&:hover': { bgcolor: mode === ThemeMode.DARK ? 'secondary.light' : 'secondary.200' }\n                  }),\n                  ...(!drawerOpen &&\n                    isSelected && {\n                      bgcolor: mode === ThemeMode.DARK ? 'secondary.100' : 'primary.lighter',\n                      '&:hover': { bgcolor: mode === ThemeMode.DARK ? 'secondary.200' : 'primary.lighter' }\n                    })\n                }}\n              >\n                {menuIcon}\n              </ListItemIcon>\n            )}\n\n            {!menuIcon && drawerOpen && (\n              <ListItemIcon sx={{ minWidth: 30 }}>\n                <Dot size={isSelected ? 6 : 5} color={isSelected ? 'primary' : 'secondary'} />\n              </ListItemIcon>\n            )}\n\n            {(drawerOpen || (!drawerOpen && level !== 1)) && (\n              <ListItemText\n                primary={\n                  <Typography variant=\"h6\" color={isSelected ? 'primary' : textColor} sx={{ fontWeight: isSelected ? 500 : 400 }}>\n                    {menu.title}\n                  </Typography>\n                }\n                secondary={\n                  menu.caption && (\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      {menu.caption}\n                    </Typography>\n                  )\n                }\n              />\n            )}\n            {(drawerOpen || (!drawerOpen && level !== 1)) &&\n              (menu?.url ? (\n                <IconButton\n                  onClick={(event) => {\n                    event.stopPropagation();\n                    handleClick(event, false);\n                  }}\n                  color=\"secondary\"\n                  variant=\"outlined\"\n                  sx={{\n                    width: 20,\n                    height: 20,\n                    mr: '-5px !important',\n                    p: 0.25,\n                    color: 'secondary.dark',\n                    borderColor: open ? 'primary.light' : 'secondary.light',\n                    '&:hover': { borderColor: open ? 'primary.main' : 'secondary.main' }\n                  }}\n                >\n                  {miniMenuOpened || open ? (\n                    <>\n                      {miniMenuOpened ? (\n                        <ArrowRight2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                      ) : (\n                        <ArrowUp2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                      )}\n                    </>\n                  ) : (\n                    <ArrowDown2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                  )}\n                </IconButton>\n              ) : (\n                <>\n                  {miniMenuOpened || open ? (\n                    <>\n                      {miniMenuOpened ? (\n                        <ArrowRight2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                      ) : (\n                        <ArrowUp2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                      )}\n                    </>\n                  ) : (\n                    <ArrowDown2 size={12} color={textColor} style={{ marginLeft: 1 }} />\n                  )}\n                </>\n              ))}\n\n            {!drawerOpen && (\n              <PopperStyled\n                open={miniMenuOpened}\n                anchorEl={anchorEl}\n                placement=\"right-start\"\n                style={{ zIndex: 2001 }}\n                popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [-12, 1] } }] }}\n              >\n                {({ TransitionProps }) => (\n                  <Transitions in={miniMenuOpened} {...TransitionProps}>\n                    <Paper\n                      sx={{\n                        overflow: 'hidden',\n                        mt: 1.5,\n                        boxShadow: theme.customShadows.z1,\n                        backgroundImage: 'none',\n                        border: '1px solid ',\n                        borderColor: 'divider'\n                      }}\n                    >\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <>\n                          <SimpleBar\n                            sx={{\n                              overflowX: 'hidden',\n                              overflowY: 'auto',\n                              maxHeight: 'calc(100vh - 170px)'\n                            }}\n                          >\n                            {navCollapse}\n                          </SimpleBar>\n                        </>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Transitions>\n                )}\n              </PopperStyled>\n            )}\n          </ListItemButton>\n          {drawerOpen && !menu?.isDropdown && (\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\n              <List sx={{ p: 0 }}>{navCollapse}</List>\n            </Collapse>\n          )}\n          {drawerOpen && menu?.isDropdown && (\n            <Menu\n              id={`${menu.id}-menu`}\n              aria-labelledby={`${menu.id}-button`}\n              anchorEl={anchorElCollapse}\n              open={openCollapse}\n              onClose={handleCloseCollapse}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right'\n              }}\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n              sx={{ '& .MuiPaper-root': { boxShadow: theme.shadows[2] } }}\n            >\n              {navCollapse}\n            </Menu>\n          )}\n        </>\n      ) : (\n        <>\n          <ListItemButton\n            {...(menu?.url && { component: Link, to: menu.url })}\n            id={`boundary-${popperId}`}\n            selected={isSelected}\n            onMouseEnter={handleHover}\n            onMouseLeave={handleClose}\n            onClick={handleHover}\n            aria-describedby={popperId}\n            sx={{\n              '&:hover': {\n                bgcolor: 'transparent'\n              },\n              '&.Mui-selected': {\n                '&:hover': {\n                  bgcolor: 'transparent'\n                },\n                bgcolor: 'transparent'\n              }\n            }}\n          >\n            <Box onClick={handlerIconLink} sx={FlexBox}>\n              {menuIcon && (\n                <ListItemIcon sx={{ my: 'auto', minWidth: !menu.icon ? 18 : 36, color: 'secondary.dark' }}>{menuIcon}</ListItemIcon>\n              )}\n              <ListItemText\n                primary={\n                  <Typography variant=\"h6\" color={textColor} sx={{ fontWeight: isSelected ? 500 : 400 }}>\n                    {menu.title}\n                  </Typography>\n                }\n              />\n              {miniMenuOpened ? <ArrowRight2 size={12} color={textColor} /> : <ArrowDown2 size={12} color={textColor} />}\n            </Box>\n\n            {anchorEl && (\n              <PopperStyled\n                id={popperId}\n                open={miniMenuOpened}\n                anchorEl={anchorEl}\n                placement=\"right-start\"\n                style={{ zIndex: 2001 }}\n                modifiers={[{ name: 'offset', options: { offset: [-10, 0] } }]}\n              >\n                {({ TransitionProps }) => (\n                  <Transitions in={miniMenuOpened} {...TransitionProps}>\n                    <Paper\n                      sx={{\n                        overflow: 'hidden',\n                        mt: 1.5,\n                        py: 0.5,\n                        boxShadow: theme.customShadows.z1,\n                        border: '1px solid ',\n                        borderColor: 'divider',\n                        backgroundImage: 'none'\n                      }}\n                    >\n                      <ClickAwayListener onClickAway={handleClose}>\n                        <>\n                          <SimpleBar\n                            sx={{\n                              overflowX: 'hidden',\n                              overflowY: 'auto',\n                              maxHeight: 'calc(100vh - 170px)'\n                            }}\n                          >\n                            {navCollapse}\n                          </SimpleBar>\n                        </>\n                      </ClickAwayListener>\n                    </Paper>\n                  </Transitions>\n                )}\n              </PopperStyled>\n            )}\n          </ListItemButton>\n        </>\n      )}\n    </>\n  );\n}\n\nNavCollapse.propTypes = {\n  menu: PropTypes.any,\n  level: PropTypes.number,\n  parentId: PropTypes.string,\n  setSelectedItems: PropTypes.oneOfType([PropTypes.any, PropTypes.string]),\n  selectedItems: PropTypes.oneOfType([PropTypes.any, PropTypes.string]),\n  setSelectedLevel: PropTypes.func,\n  selectedLevel: PropTypes.number\n};\n","size_bytes":17220},"src/sections/forms/edit-forms/blogs/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport MultiLanguageTabs from 'components/forms/MultiLanguageTabs';\nimport GooglePreview from 'components/seo/GooglePreview';\nimport CharacterCounter from 'components/seo/CharacterCounter';\nimport ArticleImporter from 'components/blog/ArticleImporter';\nimport TemplateDownloader from 'components/blog/TemplateDownloader';\nimport { generateBlogUrl } from 'utils/url-helpers';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  label: yup.string().required('Label is required'),\n  titleImagePath: yup.string(),\n  titleImageAltTextEn: yup.string(),\n  titleImageAltTextRo: yup.string(),\n  titleImageAltTextRu: yup.string(),\n  blogTitleEn: yup.string().required('English title is required'),\n  blogTitleRo: yup.string().required('Romanian title is required'),\n  blogTitleRu: yup.string().required('Russian title is required'),\n  blogIntroEn: yup.string().required('English intro is required'),\n  blogIntroRo: yup.string().required('Romanian intro is required'),\n  blogIntroRu: yup.string().required('Russian intro is required'),\n  firstSubheadingTitleEn: yup.string(),\n  firstSubheadingTitleRo: yup.string(),\n  firstSubheadingTitleRu: yup.string(),\n  firstSubheadingTextEn: yup.string(),\n  firstSubheadingTextRo: yup.string(),\n  firstSubheadingTextRu: yup.string(),\n  secondSubheadingTitleEn: yup.string(),\n  secondSubheadingTitleRo: yup.string(),\n  secondSubheadingTitleRu: yup.string(),\n  secondSubheadingTextEn: yup.string(),\n  secondSubheadingTextRo: yup.string(),\n  secondSubheadingTextRu: yup.string(),\n  thirdSubheadingTitleEn: yup.string(),\n  thirdSubheadingTitleRo: yup.string(),\n  thirdSubheadingTitleRu: yup.string(),\n  thirdSubheadingTextEn: yup.string(),\n  thirdSubheadingTextRo: yup.string(),\n  thirdSubheadingTextRu: yup.string(),\n  conclusionEn: yup.string(),\n  conclusionRo: yup.string(),\n  conclusionRu: yup.string(),\n  metaDescriptionEn: yup.string().max(160, 'Meta description should be max 160 characters').required('English meta description is required'),\n  metaDescriptionRo: yup.string().max(160, 'Meta description should be max 160 characters').required('Romanian meta description is required'),\n  metaDescriptionRu: yup.string().max(160, 'Meta description should be max 160 characters').required('Russian meta description is required'),\n  metaKeywordsEn: yup.string().required('English keywords are required'),\n  metaKeywordsRo: yup.string().required('Romanian keywords are required'),\n  metaKeywordsRu: yup.string().required('Russian keywords are required')\n});\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const [currentLang, setCurrentLang] = useState('en');\n\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      publishingDate: data.publishingDate ?? new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' }),\n      label: data.label ?? '',\n      titleImagePath: data.titleImagePath ?? '',\n      titleImageAltTextEn: data.titleImageAltTextEn ?? '',\n      titleImageAltTextRo: data.titleImageAltTextRo ?? '',\n      titleImageAltTextRu: data.titleImageAltTextRu ?? '',\n      blogTitleEn: data.blogTitleEn ?? '',\n      blogTitleRo: data.blogTitleRo ?? '',\n      blogTitleRu: data.blogTitleRu ?? '',\n      blogIntroEn: data.blogIntroEn ?? '',\n      blogIntroRo: data.blogIntroRo ?? '',\n      blogIntroRu: data.blogIntroRu ?? '',\n      firstSubheadingTitleEn: data.firstSubheadingTitleEn ?? '',\n      firstSubheadingTitleRo: data.firstSubheadingTitleRo ?? '',\n      firstSubheadingTitleRu: data.firstSubheadingTitleRu ?? '',\n      firstSubheadingTextEn: data.firstSubheadingTextEn ?? '',\n      firstSubheadingTextRo: data.firstSubheadingTextRo ?? '',\n      firstSubheadingTextRu: data.firstSubheadingTextRu ?? '',\n      secondSubheadingTitleEn: data.secondSubheadingTitleEn ?? '',\n      secondSubheadingTitleRo: data.secondSubheadingTitleRo ?? '',\n      secondSubheadingTitleRu: data.secondSubheadingTitleRu ?? '',\n      secondSubheadingTextEn: data.secondSubheadingTextEn ?? '',\n      secondSubheadingTextRo: data.secondSubheadingTextRo ?? '',\n      secondSubheadingTextRu: data.secondSubheadingTextRu ?? '',\n      thirdSubheadingTitleEn: data.thirdSubheadingTitleEn ?? '',\n      thirdSubheadingTitleRo: data.thirdSubheadingTitleRo ?? '',\n      thirdSubheadingTitleRu: data.thirdSubheadingTitleRu ?? '',\n      thirdSubheadingTextEn: data.thirdSubheadingTextEn ?? '',\n      thirdSubheadingTextRo: data.thirdSubheadingTextRo ?? '',\n      thirdSubheadingTextRu: data.thirdSubheadingTextRu ?? '',\n      conclusionEn: data.conclusionEn ?? '',\n      conclusionRo: data.conclusionRo ?? '',\n      conclusionRu: data.conclusionRu ?? '',\n      metaDescriptionEn: data.metaDescriptionEn ?? '',\n      metaDescriptionRo: data.metaDescriptionRo ?? '',\n      metaDescriptionRu: data.metaDescriptionRu ?? '',\n      metaKeywordsEn: data.metaKeywordsEn ?? '',\n      metaKeywordsRo: data.metaKeywordsRo ?? '',\n      metaKeywordsRu: data.metaKeywordsRu ?? ''\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        ...values,\n        blogTitle: values.blogTitleEn,\n        metaDescription: values.metaDescriptionEn,\n        metaKeywords: values.metaKeywordsEn,\n        baseUrl: 'blogs'\n      });\n      handleNext();\n    }\n  });\n\n  // Auto-generate Blog URL from English title (only if ID is empty)\n  useEffect(() => {\n    if (formik.values.blogTitleEn && !formik.values.id) {\n      const blogUrl = generateBlogUrl(formik.values.blogTitleEn);\n      if (blogUrl) {\n        formik.setFieldValue('id', blogUrl);\n      }\n    }\n  }, [formik.values.blogTitleEn]);\n\n  const handleImport = (importedData) => {\n    Object.keys(importedData).forEach(key => {\n      if (formik.values.hasOwnProperty(key)) {\n        formik.setFieldValue(key, importedData[key]);\n      }\n    });\n  };\n\n  const handleLangChange = (event, newValue) => {\n    setCurrentLang(newValue);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Blog Article - Multi-Language Content\n      </Typography>\n\n      <Box sx={{ mb: 3, display: 'flex', gap: 2 }}>\n        <TemplateDownloader />\n        <ArticleImporter onImport={handleImport} />\n      </Box>\n\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>Global Fields</Typography>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Page URL</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Blog/your-article-title\"\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id ? formik.errors.id : 'URL format: Blog/title-slug'}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label</InputLabel>\n              <TextField\n                id=\"label\"\n                name=\"label\"\n                placeholder=\"Category or tag\"\n                value={formik.values.label}\n                onChange={formik.handleChange}\n                error={formik.touched.label && Boolean(formik.errors.label)}\n                helperText={formik.touched.label && formik.errors.label}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title Image Path</InputLabel>\n              <TextField\n                id=\"titleImagePath\"\n                name=\"titleImagePath\"\n                placeholder=\"/images/blog/article.jpg\"\n                value={formik.values.titleImagePath}\n                onChange={formik.handleChange}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" sx={{ mb: 2, mt: 2 }}>Multi-Language Content</Typography>\n            <MultiLanguageTabs value={currentLang} onChange={handleLangChange} />\n          </Grid>\n\n          {currentLang === 'en' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (EN)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextEn\"\n                    value={formik.values.titleImageAltTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (EN) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleEn\"\n                    multiline\n                    value={formik.values.blogTitleEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleEn && Boolean(formik.errors.blogTitleEn)}\n                    helperText={formik.touched.blogTitleEn && formik.errors.blogTitleEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (EN) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroEn && Boolean(formik.errors.blogIntroEn)}\n                    helperText={formik.touched.blogIntroEn && formik.errors.blogIntroEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleEn\"\n                    value={formik.values.firstSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleEn\"\n                    value={formik.values.secondSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (EN)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleEn\"\n                    value={formik.values.thirdSubheadingTitleEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (EN)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (EN)</InputLabel>\n                  <TextField\n                    name=\"conclusionEn\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionEn}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (EN) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionEn\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionEn && Boolean(formik.errors.metaDescriptionEn)}\n                    helperText={formik.touched.metaDescriptionEn && formik.errors.metaDescriptionEn}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionEn.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (EN) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsEn\"\n                    value={formik.values.metaKeywordsEn}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsEn && Boolean(formik.errors.metaKeywordsEn)}\n                    helperText={formik.touched.metaKeywordsEn && formik.errors.metaKeywordsEn}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleEn}\n                  description={formik.values.metaDescriptionEn}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          {currentLang === 'ro' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (RO)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextRo\"\n                    value={formik.values.titleImageAltTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (RO) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleRo\"\n                    multiline\n                    value={formik.values.blogTitleRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleRo && Boolean(formik.errors.blogTitleRo)}\n                    helperText={formik.touched.blogTitleRo && formik.errors.blogTitleRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (RO) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroRo && Boolean(formik.errors.blogIntroRo)}\n                    helperText={formik.touched.blogIntroRo && formik.errors.blogIntroRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleRo\"\n                    value={formik.values.firstSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleRo\"\n                    value={formik.values.secondSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (RO)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleRo\"\n                    value={formik.values.thirdSubheadingTitleRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (RO)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (RO)</InputLabel>\n                  <TextField\n                    name=\"conclusionRo\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionRo}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (RO) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionRo\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionRo && Boolean(formik.errors.metaDescriptionRo)}\n                    helperText={formik.touched.metaDescriptionRo && formik.errors.metaDescriptionRo}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionRo.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (RO) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsRo\"\n                    value={formik.values.metaKeywordsRo}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsRo && Boolean(formik.errors.metaKeywordsRo)}\n                    helperText={formik.touched.metaKeywordsRo && formik.errors.metaKeywordsRo}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleRo}\n                  description={formik.values.metaDescriptionRo}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          {currentLang === 'ru' && (\n            <>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Title Image Alt Text (RU)</InputLabel>\n                  <TextField\n                    name=\"titleImageAltTextRu\"\n                    value={formik.values.titleImageAltTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Title (RU) *</InputLabel>\n                  <TextField\n                    name=\"blogTitleRu\"\n                    multiline\n                    value={formik.values.blogTitleRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogTitleRu && Boolean(formik.errors.blogTitleRu)}\n                    helperText={formik.touched.blogTitleRu && formik.errors.blogTitleRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Blog Intro (RU) *</InputLabel>\n                  <TextField\n                    name=\"blogIntroRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.blogIntroRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.blogIntroRu && Boolean(formik.errors.blogIntroRu)}\n                    helperText={formik.touched.blogIntroRu && formik.errors.blogIntroRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTitleRu\"\n                    value={formik.values.firstSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>First Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"firstSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.firstSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTitleRu\"\n                    value={formik.values.secondSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Second Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"secondSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.secondSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Title (RU)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTitleRu\"\n                    value={formik.values.thirdSubheadingTitleRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Third Subheading Text (RU)</InputLabel>\n                  <TextField\n                    name=\"thirdSubheadingTextRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.thirdSubheadingTextRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Conclusion (RU)</InputLabel>\n                  <TextField\n                    name=\"conclusionRu\"\n                    multiline\n                    rows={3}\n                    value={formik.values.conclusionRu}\n                    onChange={formik.handleChange}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Description (RU) * (Max 160 chars)</InputLabel>\n                  <TextField\n                    name=\"metaDescriptionRu\"\n                    multiline\n                    rows={2}\n                    value={formik.values.metaDescriptionRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaDescriptionRu && Boolean(formik.errors.metaDescriptionRu)}\n                    helperText={formik.touched.metaDescriptionRu && formik.errors.metaDescriptionRu}\n                    fullWidth\n                  />\n                  <CharacterCounter \n                    current={formik.values.metaDescriptionRu.length} \n                    max={160}\n                    showProgress={true}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Meta Keywords (RU) *</InputLabel>\n                  <TextField\n                    name=\"metaKeywordsRu\"\n                    value={formik.values.metaKeywordsRu}\n                    onChange={formik.handleChange}\n                    error={formik.touched.metaKeywordsRu && Boolean(formik.errors.metaKeywordsRu)}\n                    helperText={formik.touched.metaKeywordsRu && formik.errors.metaKeywordsRu}\n                    fullWidth\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <GooglePreview \n                  title={formik.values.blogTitleRu}\n                  description={formik.values.metaDescriptionRu}\n                  url={`https://easyreserv.com/${formik.values.id || 'Blog/your-article-url'}`}\n                />\n              </Grid>\n            </>\n          )}\n\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":29928},"src/components/CircularLoader.jsx":{"content":"// material ui\nimport Stack from '@mui/material/Stack';\n\n// project import\nimport CircularWithPath from './@extended/progress/CircularWithPath';\n\n// ==============================|| LOADER - CIRCULAR ||============================== //\n\nexport default function CircularLoader() {\n  return (\n    <Stack alignItems=\"center\" justifyContent=\"center\" sx={{ height: '100%' }}>\n      <CircularWithPath />\n    </Stack>\n  );\n}\n","size_bytes":418},"src/contexts/Auth0Context.jsx":{"content":"import { createContext, useEffect, useReducer } from 'react';\n\n// third-party\nimport { Auth0Client } from '@auth0/auth0-spa-js';\n\n// reducer - state management\nimport { LOGIN, LOGOUT } from 'contexts/auth-reducer/actions';\nimport authReducer from 'contexts/auth-reducer/auth';\n\n// project-imports\nimport Loader from 'components/Loader';\n\n// constant\nlet auth0Client;\n\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\n\n// ==============================|| AUTH0 CONTEXT & PROVIDER ||============================== //\n\nconst Auth0Context = createContext(null);\n\nexport const Auth0Provider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        auth0Client = new Auth0Client({\n          clientId: import.meta.env.VITE_APP_AUTH0_CLIENT_ID,\n          domain: import.meta.env.VITE_APP_AUTH0_DOMAIN,\n          authorizationParams: {\n            redirect_uri: window.location.origin\n          }\n        });\n\n        await auth0Client.checkSession();\n        const isLoggedIn = await auth0Client.isAuthenticated();\n\n        if (isLoggedIn) {\n          const user = await auth0Client.getUser();\n\n          dispatch({\n            type: LOGIN,\n            payload: {\n              isLoggedIn: true,\n              user: {\n                id: user?.sub,\n                email: user?.email\n              }\n            }\n          });\n        } else {\n          dispatch({\n            type: LOGOUT\n          });\n        }\n      } catch (err) {\n        dispatch({\n          type: LOGOUT\n        });\n      }\n    };\n\n    init();\n  }, []);\n\n  const login = async (options) => {\n    await auth0Client.loginWithPopup(options);\n    const isLoggedIn = await auth0Client.isAuthenticated();\n\n    if (isLoggedIn) {\n      const user = await auth0Client.getUser();\n      dispatch({\n        type: LOGIN,\n        payload: {\n          isLoggedIn: true,\n          user: {\n            id: user?.sub,\n            avatar: user?.picture,\n            email: user?.email,\n            name: user?.name,\n            tier: 'Premium'\n          }\n        }\n      });\n    }\n  };\n\n  const logout = () => {\n    auth0Client.logout();\n\n    dispatch({\n      type: LOGOUT\n    });\n  };\n\n  const resetPassword = async (email) => {\n    console.log('email - ', email);\n  };\n\n  const updateProfile = () => {};\n\n  if (state.isInitialized !== undefined && !state.isInitialized) {\n    return <Loader />;\n  }\n\n  return <Auth0Context.Provider value={{ ...state, login, logout, resetPassword, updateProfile }}>{children}</Auth0Context.Provider>;\n};\n\nexport default Auth0Context;\n","size_bytes":2657},"src/sections/components-overview/date-time-picker/BasicPickers.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { MobileDatePicker } from '@mui/x-date-pickers/MobileDatePicker';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - BASIC ||============================== //\n\nexport default function BasicDateTimePickers() {\n  const [value, setValue] = useState(new Date('2014-08-18T21:11:54'));\n\n  const handleChange = (newValue) => {\n    setValue(newValue);\n  };\n\n  const basicDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <Stack spacing={3}>\n    <DesktopDatePicker\n      label=\"Date Desktop\"\n      inputFormat=\"MM/dd/yyyy\"\n      value={value}\n      onChange={handleChange}\n      renderInput={(params) => <TextField {...params} />}\n    />\n    <MobileDatePicker\n      label=\"Date Mobile\"\n      inputFormat=\"MM/dd/yyyy\"\n      value={value}\n      onChange={handleChange}\n      renderInput={(params) => <TextField {...params} />}\n    />\n    <TimePicker label=\"Time\" value={value} onChange={handleChange} renderInput={(params) => <TextField {...params} />} />\n    <DateTimePicker\n      label=\"Date & Time Picker\"\n      value={value}\n      onChange={handleChange}\n      renderInput={(params) => <TextField {...params} />}\n    />\n  </Stack>\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Basic Picker\" codeString={basicDatepickerCodeString}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <Stack spacing={3}>\n          <DesktopDatePicker format=\"MM/dd/yyyy\" value={value} onChange={handleChange} />\n          <MobileDatePicker format=\"MM/dd/yyyy\" value={value} onChange={handleChange} />\n          <TimePicker value={value} onChange={handleChange} />\n          <DateTimePicker value={value} onChange={handleChange} />\n        </Stack>\n      </LocalizationProvider>\n    </MainCard>\n  );\n}\n","size_bytes":2247},"src/pages/apps/invoice/details.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Divider from '@mui/material/Divider';\nimport Skeleton from '@mui/material/Skeleton';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport ReactToPrint from 'react-to-print';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport LogoSection from 'components/logo';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport LoadingButton from 'components/@extended/LoadingButton';\n\nimport { APP_DEFAULT_PATH, ThemeMode } from 'config';\nimport { useGetInvoice, useGetInvoiceMaster } from 'api/invoice';\nimport ExportPDFView from 'sections/apps/invoice/export-pdf';\n\n// assets\nimport { DocumentDownload, Edit, Printer, Share } from 'iconsax-react';\n\nfunction PDFIconButton({ list }) {\n  const theme = useTheme();\n  return (\n    <PDFDownloadLink document={<ExportPDFView list={list} />} fileName={`${list.invoice_id}-${list.customer_name}.pdf`}>\n      <IconButton>\n        <DocumentDownload color={theme.palette.mode === ThemeMode.DARK ? theme.palette.background.paper : theme.palette.text.secondary} />\n      </IconButton>\n    </PDFDownloadLink>\n  );\n}\n\n// ==============================|| INVOICE - DETAILS ||============================== //\n\nexport default function Details() {\n  const theme = useTheme();\n  const { id } = useParams();\n  const navigation = useNavigate();\n\n  const { invoiceLoading, invoice } = useGetInvoice();\n  const { invoiceMaster, invoiceMasterLoading } = useGetInvoiceMaster();\n  const [list, seList] = useState(null);\n\n  useEffect(() => {\n    if (id && !invoiceLoading) {\n      seList(invoice.filter((item) => item.id.toString() === id)[0] || invoice[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id, invoiceLoading]);\n\n  const today = new Date(`${list?.date}`).toLocaleDateString('en-GB', {\n    month: 'numeric',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  const due_dates = new Date(`${list?.due_date}`).toLocaleDateString('en-GB', {\n    month: 'numeric',\n    day: 'numeric',\n    year: 'numeric'\n  });\n\n  const subtotal = list?.invoice_detail?.reduce((prev, curr) => {\n    if (curr.name.trim().length > 0) return prev + Number(curr.price * Math.floor(curr.qty));\n    else return prev;\n  }, 0);\n\n  const taxRate = (Number(list?.tax) * subtotal) / 100;\n  const discountRate = (Number(list?.discount) * subtotal) / 100;\n  const total = subtotal - discountRate + taxRate;\n  const componentRef = useRef(null);\n\n  const isLoader = invoiceLoading || invoiceMasterLoading || invoiceMaster === undefined || list === null;\n\n  let breadcrumbLinks = [\n    { title: 'Home', to: APP_DEFAULT_PATH },\n    { title: 'Invoice', to: '/apps/invoice/dashboard' },\n    { title: 'Details' }\n  ];\n\n  const iconColor = theme.palette.mode === ThemeMode.DARK ? theme.palette.background.paper : theme.palette.text.secondary;\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"Invoice Summary\" links={breadcrumbLinks} />\n      <MainCard content={false}>\n        <Stack spacing={2.5}>\n          <Box sx={{ p: 2.5, pb: 0 }}>\n            <MainCard content={false} border={false} sx={{ p: 1.25, bgcolor: 'secondary.lighter' }}>\n              <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1}>\n                <IconButton onClick={() => navigation(`/apps/invoice/edit/${id}`)}>\n                  <Edit color={iconColor} />\n                </IconButton>\n                {isLoader ? <LoadingButton loading>X</LoadingButton> : <PDFIconButton {...{ list }} />}\n                <ReactToPrint\n                  trigger={() => (\n                    <IconButton>\n                      <Printer color={iconColor} />\n                    </IconButton>\n                  )}\n                  content={() => componentRef.current}\n                />\n                <IconButton>\n                  <Share color={iconColor} />\n                </IconButton>\n              </Stack>\n            </MainCard>\n          </Box>\n          <Box sx={{ p: 2.5 }} id=\"print\" ref={componentRef}>\n            <Grid container spacing={2.5}>\n              <Grid item xs={12}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} justifyContent=\"space-between\">\n                  <Stack spacing={0.5}>\n                    <Stack direction=\"row\" spacing={2}>\n                      <LogoSection />\n                      <Chip label=\"Paid\" variant=\"light\" color=\"success\" size=\"small\" />\n                    </Stack>\n                    <Typography color=\"secondary\">{isLoader ? <Skeleton /> : `#${list.invoice_id}`}</Typography>\n                  </Stack>\n                  <Box>\n                    <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\">\n                      <Typography variant=\"subtitle1\">Date</Typography>\n                      <Typography color=\"secondary\">{today}</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\">\n                      <Typography sx={{ overflow: 'hidden' }} variant=\"subtitle1\">\n                        Due Date\n                      </Typography>\n                      <Typography color=\"secondary\">{due_dates}</Typography>\n                    </Stack>\n                  </Box>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <MainCard>\n                  <Stack spacing={1}>\n                    <Typography variant=\"h5\">From:</Typography>\n                    {isLoader ? (\n                      <Stack spacing={0.5}>\n                        <Skeleton />\n                        <Skeleton width={60} />\n                        <Skeleton />\n                      </Stack>\n                    ) : (\n                      <FormControl sx={{ width: '100%' }}>\n                        <Typography color=\"secondary\">{list.cashierInfo.name}</Typography>\n                        <Typography color=\"secondary\">{list.cashierInfo.address}</Typography>\n                        <Typography color=\"secondary\">{list.cashierInfo.phone}</Typography>\n                        <Typography color=\"secondary\">{list.cashierInfo.email}</Typography>\n                      </FormControl>\n                    )}\n                  </Stack>\n                </MainCard>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <MainCard>\n                  <Stack spacing={1}>\n                    <Typography variant=\"h5\">To:</Typography>\n                    {isLoader ? (\n                      <Stack spacing={0.5}>\n                        <Skeleton />\n                        <Skeleton width={60} />\n                        <Skeleton />\n                      </Stack>\n                    ) : (\n                      <FormControl sx={{ width: '100%' }}>\n                        <Typography color=\"secondary\">{list.customerInfo.name}</Typography>\n                        <Typography color=\"secondary\">{list.customerInfo.address}</Typography>\n                        <Typography color=\"secondary\">{list.customerInfo.phone}</Typography>\n                        <Typography color=\"secondary\">{list.customerInfo.email}</Typography>\n                      </FormControl>\n                    )}\n                  </Stack>\n                </MainCard>\n              </Grid>\n              <Grid item xs={12}>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>#</TableCell>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Description</TableCell>\n                        <TableCell align=\"right\">Qty</TableCell>\n                        <TableCell align=\"right\">Price</TableCell>\n                        <TableCell align=\"right\">Amount</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {isLoader &&\n                        [1, 2, 3].map((row) => (\n                          <TableRow key={row} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                            <TableCell>\n                              <Skeleton />\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      {!isLoader &&\n                        list.invoice_detail?.map((row, index) => (\n                          <TableRow key={row.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                            <TableCell>{index + 1}</TableCell>\n                            <TableCell>{row.name}</TableCell>\n                            <TableCell>{row.description}</TableCell>\n                            <TableCell align=\"right\">{row.qty}</TableCell>\n                            <TableCell align=\"right\">{invoiceMaster.country?.prefix + '' + Number(row.price).toFixed(2)}</TableCell>\n                            <TableCell align=\"right\">\n                              {invoiceMaster.country?.prefix + '' + Number(row.price * row.qty).toFixed(2)}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider sx={{ borderWidth: 1 }} />\n              </Grid>\n              <Grid item xs={12} sm={6} md={8}></Grid>\n              <Grid item xs={12} sm={6} md={4}>\n                <Stack spacing={2}>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color={theme.palette.secondary.main}>Sub Total:</Typography>\n                    <Typography>\n                      {isLoader ? <Skeleton width={80} /> : invoiceMaster.country?.prefix + '' + subtotal?.toFixed(2)}\n                    </Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color={theme.palette.secondary.main}>Discount:</Typography>\n                    <Typography variant=\"h6\" color={theme.palette.success.main}>\n                      {isLoader ? <Skeleton width={50} /> : invoiceMaster.country?.prefix + '' + discountRate?.toFixed(2)}\n                    </Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography color={theme.palette.secondary.main}>Tax:</Typography>\n                    <Typography>{isLoader ? <Skeleton width={60} /> : invoiceMaster.country?.prefix + '' + taxRate?.toFixed(2)}</Typography>\n                  </Stack>\n                  <Stack direction=\"row\" justifyContent=\"space-between\">\n                    <Typography variant=\"subtitle1\">Grand Total:</Typography>\n                    <Typography variant=\"subtitle1\">\n                      {isLoader ? (\n                        <Skeleton width={100} />\n                      ) : total % 1 === 0 ? (\n                        invoiceMaster.country?.prefix + '' + total\n                      ) : (\n                        invoiceMaster.country?.prefix + '' + total?.toFixed(2)\n                      )}\n                    </Typography>\n                  </Stack>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" spacing={1}>\n                  <Typography color=\"secondary\">Notes: </Typography>\n                  <Typography>\n                    It was a pleasure working with you and your team. We hope you will keep us in mind for future freelance projects. Thank\n                    You!\n                  </Typography>\n                </Stack>\n              </Grid>\n            </Grid>\n          </Box>\n          <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={2} sx={{ p: 2.5, a: { textDecoration: 'none', color: 'inherit' } }}>\n            <PDFDownloadLink document={<ExportPDFView list={list} />} fileName={`${list?.invoice_id}-${list?.customer_name}.pdf`}>\n              <LoadingButton\n                loading={isLoader}\n                color=\"primary\"\n                variant=\"contained\"\n                loadingPosition=\"center\"\n                sx={{ color: 'secondary.lighter' }}\n              >\n                Download\n              </LoadingButton>\n            </PDFDownloadLink>\n          </Stack>\n        </Stack>\n      </MainCard>\n    </>\n  );\n}\n\nPDFIconButton.propTypes = { list: PropTypes.any };\n","size_bytes":13849},"src/components/Customization/index.jsx":{"content":"import { useMemo, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Drawer from '@mui/material/Drawer';\nimport Fab from '@mui/material/Fab';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ThemeLayout from './ThemeLayout';\nimport ThemeMode from './ThemeMode';\nimport ThemeContrast from './ThemeContrast';\nimport ColorScheme from './ColorScheme';\nimport ThemeWidth from './ThemeWidth';\nimport ThemeMenuLayout from './ThemeMenuLayout';\nimport ThemeFont from './ThemeFont';\nimport MenuCaption from './MenuCaption';\n\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\nimport { HEADER_HEIGHT } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport { Add, Setting2 } from 'iconsax-react';\n\n// ==============================|| HEADER CONTENT - CUSTOMIZATION ||============================== //\n\nexport default function Customization() {\n  const theme = useTheme();\n  const { container, mode, presetColor, miniDrawer, themeDirection, menuOrientation, menuCaption, themeContrast, fontFamily } = useConfig();\n\n  // eslint-disable-next-line\n  const themeLayout = useMemo(() => <ThemeLayout />, [miniDrawer, themeDirection]);\n  // eslint-disable-next-line\n  const themeMenuLayout = useMemo(() => <ThemeMenuLayout />, [menuOrientation]);\n  // eslint-disable-next-line\n  const themeMode = useMemo(() => <ThemeMode />, [mode]);\n  // eslint-disable-next-line\n  const themeContrastView = useMemo(() => <ThemeContrast />, [themeContrast]);\n  // eslint-disable-next-line\n  const menuCaptionView = useMemo(() => <MenuCaption />, [menuCaption]);\n  // eslint-disable-next-line\n  const themeColor = useMemo(() => <ColorScheme />, [presetColor]);\n  // eslint-disable-next-line\n  const themeWidth = useMemo(() => <ThemeWidth />, [container]);\n  // eslint-disable-next-line\n  const themeFont = useMemo(() => <ThemeFont />, [fontFamily]);\n\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <>\n      <Fab\n        component=\"div\"\n        onClick={handleToggle}\n        size=\"large\"\n        variant=\"circular\"\n        sx={{\n          borderRadius: 0,\n          borderTopLeftRadius: '50%',\n          borderBottomLeftRadius: '50%',\n          borderTopRightRadius: '4px',\n          borderBottomRightRadius: '4px',\n          top: '14%',\n          position: 'fixed',\n          right: 0,\n          zIndex: 1200,\n          boxShadow: theme.customShadows.z1,\n          bgcolor: 'background.paper',\n          border: '4px solid ',\n          borderColor: 'background.paper',\n          borderRight: 'none',\n          '&:hover': { bgcolor: 'primary.lighter' }\n        }}\n      >\n        <IconButton\n          onClick={handleToggle}\n          aria-label=\"settings toggler\"\n          size=\"large\"\n          sx={{ p: 0, '& :hover': { bgcolor: 'red' }, '& svg': { width: 28, height: 28 } }}\n        >\n          <Setting2 variant=\"Bulk\" />\n        </IconButton>\n      </Fab>\n      <Drawer\n        sx={{\n          zIndex: 2001\n        }}\n        anchor=\"right\"\n        onClose={handleToggle}\n        open={open}\n        PaperProps={{\n          sx: {\n            width: 350\n          }\n        }}\n      >\n        {open && (\n          <MainCard content={false} border={false}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1.5} sx={{ p: 2.5 }}>\n              <Typography variant=\"h5\">Settings</Typography>\n              <IconButton color=\"error\" sx={{ p: 0 }} onClick={handleToggle}>\n                <Add size={28} style={{ transform: 'rotate(45deg)' }} />\n              </IconButton>\n            </Stack>\n            <SimpleBar\n              sx={{\n                '& .simplebar-content': {\n                  display: 'flex',\n                  flexDirection: 'column'\n                }\n              }}\n            >\n              <Box sx={{ p: 3, height: `calc(100vh - ${HEADER_HEIGHT}px)` }}>\n                <Grid container spacing={2.5}>\n                  {/* theme-mode */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Theme Mode\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose light or dark mode\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeMode}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* theme-contrast */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Theme Contrast\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose theme contrast/shadow\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeContrastView}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* custom-theme */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Custom Theme\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose your primary theme color\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeColor}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* menu-caption */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Sidebar Caption\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Hide your sidebar caption\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {menuCaptionView}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* theme-layout */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Theme Layout\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose your layout\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeLayout}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* theme-orientation */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Menu Orientation\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose Vertical or Horizontal Menu Orientation\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeMenuLayout}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* theme-container */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Layout Width\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose fluid or container layout\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeWidth}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  {/* theme-font-family */}\n                  <Grid item xs={12}>\n                    <Stack>\n                      <Typography variant=\"subtitle1\" color=\"text.primary\">\n                        Font Family\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Choose your font family.\n                      </Typography>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    {themeFont}\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n                </Grid>\n              </Box>\n            </SimpleBar>\n          </MainCard>\n        )}\n      </Drawer>\n    </>\n  );\n}\n","size_bytes":9792},"src/pages/forms/plugins/mask.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| PLUGIN - MASK INPUT ||============================== //\n\nexport default function MaskPage() {\n  const [date1, setDate1] = useState(null);\n  const [date2, setDate2] = useState(null);\n\n  const [time, setTime] = useState(new Date());\n  const [datetime, setDatetime] = useState(new Date());\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <MainCard title=\"Date\">\n            <Grid container alignItems=\"center\" spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Insert Date 1</InputLabel>\n                  <DatePicker value={date1} onChange={(newValue) => setDate1(newValue)} slotProps={{ textField: { fullWidth: true } }} />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Insert Date 2</InputLabel>\n                  <DatePicker\n                    value={date2}\n                    onChange={(newValue) => setDate2(newValue)}\n                    slotProps={{ textField: { fullWidth: true } }}\n                    format=\"DD-MM-YYYY\"\n                  />\n                </Stack>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <MainCard title=\"Time\">\n            <Grid container alignItems=\"center\" spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Enter Time 1</InputLabel>\n                  <TimePicker\n                    ampm={false}\n                    openTo=\"hours\"\n                    views={['hours', 'minutes', 'seconds']}\n                    format=\"HH:mm:ss\"\n                    value={time}\n                    onChange={(newValue) => {\n                      setTime(newValue);\n                    }}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Enter Time 2</InputLabel>\n                  <MobileDateTimePicker\n                    value={datetime}\n                    onChange={(newValue) => {\n                      setDatetime(newValue);\n                    }}\n                    slotProps={{ textField: { fullWidth: true } }}\n                  />\n                </Stack>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <MainCard title=\"Phone no.\">\n            <Grid container alignItems=\"center\" spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Phone Number</InputLabel>\n                  <PatternFormat format=\"+1 (###) ###-####\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"Phone Number\" />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Contact Number</InputLabel>\n                  <PatternFormat format=\"+91 #### ###-####\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"Contact Number\" />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Telephone with Area Code</InputLabel>\n                  <PatternFormat format=\"(##) ####-#####\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"Tel. with Code Area\" />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>US Telephone</InputLabel>\n                  <PatternFormat format=\"(###) ### #####\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"US Telephone\" />\n                </Stack>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <MainCard title=\"Network\">\n            <Grid container alignItems=\"center\" spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Enter IP Address</InputLabel>\n                  <PatternFormat format=\"###.###.###.###\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"IP Address\" />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Enter IPV4</InputLabel>\n                  <PatternFormat format=\"####.####.####.####\" mask=\"_\" fullWidth customInput={TextField} placeholder=\"IPV4\" />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Enter IPV6</InputLabel>\n                  <PatternFormat\n                    format=\"####:####:####:#:###:####:####:####\"\n                    mask=\"_\"\n                    fullWidth\n                    customInput={TextField}\n                    placeholder=\"IPV6\"\n                  />\n                </Stack>\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </LocalizationProvider>\n  );\n}\n","size_bytes":6025},"src/pages/auth/auth1/login.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Logo from 'components/logo';\nimport AuthSocButton from 'sections/auth/AuthSocButton';\nimport AuthDivider from 'sections/auth/AuthDivider';\nimport AuthWrapper from 'sections/auth/AuthWrapper';\nimport AuthLogin from 'sections/auth/auth-forms/AuthLogin';\n\n// assets\nimport imgFacebook from 'assets/images/auth/facebook.svg';\nimport imgTwitter from 'assets/images/auth/twitter.svg';\nimport imgGoogle from 'assets/images/auth/google.svg';\n\n// ================================|| LOGIN ||================================ //\n\nexport default function Login() {\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sx={{ textAlign: 'center' }}>\n          <Logo />\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Login</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthLogin forgot=\"/auth/forgot-password\" />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":1261},"src/layout/Simple/Header.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, cloneElement } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport Container from '@mui/material/Container';\nimport CardMedia from '@mui/material/CardMedia';\nimport Collapse from '@mui/material/Collapse';\nimport Drawer from '@mui/material/Drawer';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Tooltip from '@mui/material/Tooltip';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\n// project-imports\nimport { APP_DEFAULT_PATH, ThemeDirection } from 'config';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport Dot from 'components/@extended/Dot';\nimport Logo from 'components/logo';\nimport { handlerComponentDrawer, useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { ArrowDown2, ArrowUp2, DocumentDownload, ExportSquare, HambergerMenu, Minus } from 'iconsax-react';\nimport techBootstrap from 'assets/images/landing/tech-bootstrap.svg';\nimport techReact from 'assets/images/landing/tech-react.svg';\nimport techAngular from 'assets/images/landing/tech-angular.svg';\nimport techCodeigniter from 'assets/images/landing/tech-codeigniter.svg';\nimport techNet from 'assets/images/landing/tech-net.svg';\nimport techFigma from 'assets/images/landing/tech-figma.svg';\nimport techVue from 'assets/images/landing/tech-vuetify.svg';\nimport techVuelaravel from 'assets/images/landing/tech-l+v.svg';\nimport techNextJS from 'assets/images/landing/tech-nextjs.svg';\nimport techLaravelBootstrap from 'assets/images/landing/tech-Laravel+Bootstrap.svg';\nimport techDjango from 'assets/images/landing/tech-Django.svg';\nimport techFlask from 'assets/images/landing/tech-Flask.svg';\nimport techNodeJs from 'assets/images/landing/tech-Node-js.svg';\nimport techSvelteKit from 'assets/images/landing/tech-SvelteKit.svg';\n\n// elevation scroll\nfunction ElevationScroll({ children, window }) {\n  const theme = useTheme();\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 10,\n    target: window ? window : undefined\n  });\n\n  return cloneElement(children, {\n    style: {\n      boxShadow: trigger ? '0 8px 6px -10px rgba(0, 0, 0, 0.5)' : 'none',\n      backgroundColor: trigger ? alpha(theme.palette.background.default, 0.8) : alpha(theme.palette.background.default, 0.1)\n    }\n  });\n}\n\n// ==============================|| COMPONENTS - APP BAR ||============================== //\n\nexport default function Header({ layout = 'landing', ...others }) {\n  const theme = useTheme();\n  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));\n  const [drawerToggle, setDrawerToggle] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  const { menuMaster } = useGetMenuMaster();\n\n  /** Method called on multiple components with different event types */\n  const drawerToggler = (open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setDrawerToggle(open);\n  };\n\n  let value = window.location.search;\n  const params = new URLSearchParams(value);\n  const ispValue = params.get('isp');\n  const ispValueAvailable = ispValue !== null && parseInt(ispValue) === 1;\n\n  const url = ispValueAvailable ? 'https://1.envato.market/OrJ5nn' : 'https://1.envato.market/zNkqj6';\n\n  const items = [\n    {\n      label: 'Bootstrap',\n      image: techBootstrap,\n      url: 'https://ableproadmin.com/dashboard/index.html',\n      target: '_blank',\n      tooltipTitle: 'Bootstrap'\n    },\n    {\n      label: 'React MUI',\n      image: techReact,\n      url: '/login',\n      target: '_blank',\n      tooltipTitle: 'React MUI'\n    },\n    {\n      label: 'Angular',\n      image: techAngular,\n      url: 'https://ableproadmin.com/angular/default/dashboard/default',\n      target: '_blank',\n      tooltipTitle: 'Angular'\n    },\n    {\n      label: 'CodeIgniter',\n      image: techCodeigniter,\n      url: 'https://ableproadmin.com/codeigniter/default/public/dashboard-default',\n      target: '_blank',\n      tooltipTitle: 'CodeIgniter'\n    },\n    {\n      label: 'ASP.net',\n      image: techNet,\n      url: 'https://able-pro.azurewebsites.net/Dashboard/Index',\n      target: '_blank',\n      tooltipTitle: 'ASP.net'\n    },\n    {\n      label: 'Next js',\n      image: techNextJS,\n      url: 'https://able-pro.azurewebsites.net/Dashboard/Index',\n      target: '_blank',\n      tooltipTitle: 'Next js'\n    },\n    {\n      label: 'Vue',\n      image: techVue,\n      url: 'https://ableproadmin.com/vue/dashboard/default',\n      target: '_blank',\n      tooltipTitle: 'Vue'\n    },\n    {\n      label: 'Vuetify Laravel',\n      image: techVuelaravel,\n      url: 'https://phplaravel-207002-4524103.cloudwaysapps.com/build/dashboards/default',\n      target: '_blank',\n      tooltipTitle: 'Vuetify Laravel'\n    },\n    {\n      label: 'Laravel Bootstrap',\n      image: techLaravelBootstrap,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Django',\n      image: techDjango,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Node JS',\n      image: techNodeJs,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Flask',\n      image: techFlask,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'SvelteKit',\n      image: techSvelteKit,\n      url: '#!',\n      target: '_self',\n      tooltipTitle: 'Live Preview Not Available'\n    },\n    {\n      label: 'Figma',\n      image: techFigma,\n      url: 'https://www.figma.com/file/6XqmRhRmkr33w0EFD49acY/Able-Pro--v9.0-Figma-Preview?type=design&mode=design&t=4FS2Lw6WxsmJ3RLm-0',\n      target: '_blank',\n      tooltipTitle: 'Figma'\n    }\n  ];\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const ListItem = items.map((item, index) => {\n    const finalUrl = item.url !== '#!' && ispValueAvailable ? `${item.url}?isp=1` : item.url;\n    return (\n      <ListItemButton\n        key={index}\n        component={item.label === 'React MUI' ? RouterLink : 'a'}\n        {...(item.label === 'React MUI' ? { to: finalUrl } : { href: finalUrl })}\n        target={item.target}\n        sx={{ p: 0 }}\n      >\n        <ListItemIcon>\n          <Dot size={4} color=\"secondary\" />\n        </ListItemIcon>\n        <ListItemText primary={item.label} primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n      </ListItemButton>\n    );\n  });\n\n  const listItems = items.map((item, index) => {\n    const finalUrl = item.url !== '#!' && ispValueAvailable ? `${item.url}?isp=1` : item.url;\n\n    return (\n      <ListItemButton\n        key={index}\n        component={item.label === 'React MUI' ? RouterLink : 'a'}\n        {...(item.label === 'React MUI' ? { to: finalUrl } : { href: finalUrl })}\n        target={item.target}\n      >\n        <Tooltip title={item.tooltipTitle} placement=\"bottom\">\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ListItemAvatar\n              sx={{\n                minWidth: 'auto',\n                marginRight: 1,\n                filter: item.tooltipTitle === 'Live Preview Not Available' ? 'grayscale(1)' : ''\n              }}\n            >\n              <CardMedia component=\"img\" image={item.image} sx={{ width: '30px' }} />\n            </ListItemAvatar>\n            <ListItemText primary={item.label} />\n          </Box>\n        </Tooltip>\n      </ListItemButton>\n    );\n  });\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <ElevationScroll layout={layout} {...others}>\n      <AppBar\n        sx={{\n          bgcolor: alpha(theme.palette.background.default, 0.1),\n          backdropFilter: 'blur(8px)',\n          color: theme.palette.text.primary,\n          boxShadow: 'none'\n        }}\n      >\n        <Container maxWidth=\"xl\" disableGutters={matchDownMd}>\n          <Toolbar sx={{ px: { xs: 1.5, sm: 4, md: 0, lg: 0 }, py: 1 }}>\n            <Stack direction=\"row\" sx={{ flexGrow: 1, display: { xs: 'none', md: 'block' } }} alignItems=\"center\">\n              <Typography sx={{ textAlign: 'left', display: 'inline-block' }}>\n                <Logo to=\"/\" />\n              </Typography>\n              <Chip\n                label={import.meta.env.VITE_APP_VERSION}\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                sx={{ mt: 0.5, ml: 1, fontSize: '0.725rem', height: 20, '& .MuiChip-label': { px: 0.5 } }}\n              />\n            </Stack>\n            <Stack\n              direction=\"row\"\n              sx={{\n                '& .header-link': { fontWeight: 500, '&:hover': { color: 'primary.main' } },\n                display: { xs: 'none', md: 'block' }\n              }}\n              spacing={3}\n            >\n              <Link\n                className=\"header-link\"\n                sx={{ ml: theme.direction === ThemeDirection.RTL ? 3 : 0 }}\n                color=\"secondary.main\"\n                component={RouterLink}\n                to=\"/login\"\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                Dashboard\n              </Link>\n              {/* <Link\n                className=\"header-link\"\n                color=\"secondary.main\"\n                component={RouterLink}\n                to=\"/components-overview/buttons\"\n                underline=\"none\"\n              >\n                Components\n              </Link> */}\n              <Link\n                className=\"header-link\"\n                color=\"secondary.main\"\n                href=\"https://phoenixcoded.gitbook.io/able-pro\"\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                Documentation\n              </Link>\n              <Link\n                className=\"header-link\"\n                color=\"secondary.main\"\n                id=\"wallet-button\"\n                href=\"#\"\n                aria-controls={open ? 'wallet-menu' : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={open ? 'true' : undefined}\n                onClick={handleClick}\n                underline=\"none\"\n                sx={{ path: { strokeWidth: 2 }, svg: { marginBottom: '-3px' } }}\n              >\n                Live Preview {open ? <ArrowUp2 size=\"16\" /> : <ArrowDown2 size=\"16\" />}\n              </Link>\n              <Menu\n                id=\"wallet-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{\n                  'aria-labelledby': 'wallet-button',\n                  sx: { p: 1.25, minWidth: 150 }\n                }}\n                anchorOrigin={{\n                  vertical: 'bottom',\n                  horizontal: 'right'\n                }}\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right'\n                }}\n                sx={{ '.MuiModal-backdrop': { backgroundColor: 'unset' } }}\n              >\n                {listItems}\n              </Menu>\n              <Link href=\"https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template\" target=\"_blank\" underline=\"none\">\n                <IconButton\n                  size=\"large\"\n                  shape=\"rounded\"\n                  color=\"secondary\"\n                  sx={{\n                    bgcolor: 'secondary.light',\n                    color: 'secondary.darker',\n                    '&:hover': { color: 'secondary.lighter', bgcolor: 'secondary.darker' }\n                  }}\n                >\n                  <DocumentDownload />\n                </IconButton>\n              </Link>\n              <Box sx={{ display: 'inline-block' }}>\n                <AnimateButton>\n                  <Button\n                    component={Link}\n                    href={url}\n                    target=\"_blank\"\n                    disableElevation\n                    startIcon={<ExportSquare />}\n                    color=\"success\"\n                    size=\"large\"\n                    variant=\"contained\"\n                  >\n                    Purchase Now\n                  </Button>\n                </AnimateButton>\n              </Box>\n            </Stack>\n            <Box\n              sx={{\n                width: '100%',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                display: { xs: 'flex', md: 'none' }\n              }}\n            >\n              <Typography sx={{ textAlign: 'left', display: 'inline-block' }}>\n                <Logo to=\"/\" />\n              </Typography>\n              <Stack direction=\"row\" spacing={2}>\n                {layout === 'component' && (\n                  <Button variant=\"outlined\" color=\"warning\" component={RouterLink} to={APP_DEFAULT_PATH} sx={{ mt: 0.25 }}>\n                    Dashboard\n                  </Button>\n                )}\n                {layout !== 'component' && (\n                  <Button variant=\"outlined\" color=\"warning\" component={RouterLink} to=\"/components-overview/buttons\" sx={{ mt: 0.25 }}>\n                    All Components\n                  </Button>\n                )}\n\n                <IconButton\n                  size=\"large\"\n                  color=\"secondary\"\n                  {...(layout === 'component'\n                    ? { onClick: () => handlerComponentDrawer(!menuMaster.isComponentDrawerOpened) }\n                    : { onClick: drawerToggler(true) })}\n                  sx={{ p: 1 }}\n                >\n                  <HambergerMenu />\n                </IconButton>\n              </Stack>\n              <Drawer\n                anchor=\"top\"\n                open={drawerToggle}\n                onClose={drawerToggler(false)}\n                sx={{ '& .MuiDrawer-paper': { backgroundImage: 'none' } }}\n              >\n                <Box\n                  sx={{\n                    width: 'auto',\n                    '& .MuiListItemIcon-root': {\n                      fontSize: '1rem',\n                      minWidth: 32\n                    }\n                  }}\n                  role=\"presentation\"\n                  onKeyDown={drawerToggler(false)}\n                >\n                  <List>\n                    <Link style={{ textDecoration: 'none' }} href=\"/login\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Dashboard\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    {/* <Link style={{ textDecoration: 'none' }} component={RouterLink} to=\"/components-overview/buttons\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"All Components\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link> */}\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      href=\"https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template\"\n                      target=\"_blank\"\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Free Version\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link style={{ textDecoration: 'none' }} href=\"https://phoenixcoded.gitbook.io/able-pro\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Documentation\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link style={{ textDecoration: 'none' }} href=\"https://phoenixcoded.authordesk.app/\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Support\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      href=\"https://1.envato.market/c/1289604/275988/4415?subId1=phoenixcoded&u=https%3A%2F%2Fthemeforest.net%2Fitem%2Fable-pro-responsive-bootstrap-4-admin-template%2F19300403\"\n                      target=\"_blank\"\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Purchase Now\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                        <Chip color=\"primary\" label=\"v1.0\" size=\"small\" />\n                      </ListItemButton>\n                    </Link>\n                    <Link style={{ textDecoration: 'none' }} href=\"#\" onClick={() => setOpenDrawer(!openDrawer)}>\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Live Preview\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                        <Stack sx={{ path: { strokeWidth: 2 } }}>{openDrawer ? <ArrowUp2 size=\"16\" /> : <ArrowDown2 size=\"16\" />}</Stack>\n                      </ListItemButton>\n                    </Link>\n                    <Collapse in={openDrawer} timeout=\"auto\" unmountOnExit>\n                      {openDrawer && <List sx={{ p: 0, pl: 6, '& .MuiListItemIcon-root': { minWidth: 20 } }}>{ListItem}</List>}\n                    </Collapse>\n                  </List>\n                </Box>\n              </Drawer>\n            </Box>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </ElevationScroll>\n  );\n}\n\nElevationScroll.propTypes = { layout: PropTypes.string, children: PropTypes.node, window: PropTypes.any };\n\nHeader.propTypes = { layout: PropTypes.string, others: PropTypes.any };\n","size_bytes":19861},"src/pages/components-overview/speeddial.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport SimpleSpeedDials from 'sections/components-overview/speeddial/SimpleSpeedDials';\nimport OpenIconSpeedDial from 'sections/components-overview/speeddial/OpenIconSpeedDial';\nimport SpeedDialTooltipOpen from 'sections/components-overview/speeddial/SpeedDialTooltipOpen';\n\n// ==============================|| COMPONENTS - SPEED DIAL ||============================== //\n\nexport default function ComponentSpeeddial() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Speed Dial\"\n        caption=\"When pressed, a floating action button can display three to six related actions in the form of a speed dial.\"\n        directory=\"src/pages/components-overview/speeddial\"\n        link=\"https://mui.com/material-ui/react-speed-dial/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <SimpleSpeedDials />\n          </Grid>\n          <Grid item xs={12} sm={6} lg={3}>\n            <OpenIconSpeedDial />\n          </Grid>\n          <Grid item xs={12} sm={6} lg={3}>\n            <SpeedDialTooltipOpen />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1476},"src/sections/widget/data/ToDoList.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Tooltip from '@mui/material/Tooltip';\nimport Checkbox from '@mui/material/Checkbox';\nimport CardContent from '@mui/material/CardContent';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { AddCircle } from 'iconsax-react';\nimport IconButton from 'components/@extended/IconButton';\n\n// ===========================|| DATA WIDGET - TODO LIST ||=========================== //\n\nexport default function ToDoList() {\n  const [state, setState] = useState({\n    checkedA: true,\n    checkedB: true,\n    checkedC: true,\n    checkedD: false,\n    checkedE: false,\n    checkedF: false,\n    checkedG: false\n  });\n\n  const handleChangeState = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <MainCard\n      title=\"To Do List\"\n      content={false}\n      secondary={\n        <Tooltip title=\"Add Task\">\n          <IconButton>\n            <AddCircle />\n          </IconButton>\n        </Tooltip>\n      }\n      sx={{ '& .MuiCardHeader-root': { p: 1.75 } }}\n    >\n      <CardContent>\n        <Grid container spacing={0} sx={{ '& .Mui-checked + span': { textDecoration: 'line-through' } }}>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedA} onChange={handleChangeState} name=\"checkedA\" color=\"primary\" />}\n              label=\"Check your Email\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedB} onChange={handleChangeState} name=\"checkedB\" color=\"primary\" />}\n              label=\"Make YouTube Video\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedC} onChange={handleChangeState} name=\"checkedC\" color=\"primary\" />}\n              label=\"Create Banner\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedD} onChange={handleChangeState} name=\"checkedD\" color=\"primary\" />}\n              label=\"Upload Project\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedE} onChange={handleChangeState} name=\"checkedE\" color=\"primary\" />}\n              label=\"Update Task\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedF} onChange={handleChangeState} name=\"checkedF\" color=\"primary\" />}\n              label=\"Task Issue\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox checked={state.checkedG} onChange={handleChangeState} name=\"checkedG\" color=\"primary\" />}\n              label=\"Deploy Project\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":3147},"src/themes/shadows.jsx":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| DEFAULT THEME - SHADOWS  ||============================== //\n\nexport default function CustomShadows(theme) {\n  return {\n    // z1: `0px 2px 8px rgba(0, 0, 0, 0.15)`,\n    button: theme.palette.mode === ThemeMode.DARK ? `0 2px 0 rgb(0 0 0 / 5%)` : `0 2px #0000000b`,\n    text: `0 -1px 0 rgb(0 0 0 / 12%)`,\n    z1:\n      theme.palette.mode === ThemeMode.DARK\n        ? `0px 8px 24px ${alpha(theme.palette.secondary[200], 0.3)}`\n        : `0px 8px 24px  ${alpha(theme.palette.secondary.darker, 0.08)}`,\n    z2:\n      theme.palette.mode === ThemeMode.DARK\n        ? `0px 2px 8px ${alpha(theme.palette.secondary[200], 0.3)}`\n        : `0px 2px 8px  ${alpha(theme.palette.secondary.darker, 0.08)}`,\n    primary: `0 0 0 2px ${alpha(theme.palette.primary.main, 0.1)}`,\n    secondary: `0 0 0 2px ${alpha(theme.palette.secondary.main, 0.2)}`,\n    error: `0 0 0 2px ${alpha(theme.palette.error.main, 0.2)}`,\n    warning: `0 0 0 2px ${alpha(theme.palette.warning.main, 0.2)}`,\n    info: `0 0 0 2px ${alpha(theme.palette.info.main, 0.2)}`,\n    success: `0 0 0 2px ${alpha(theme.palette.success.main, 0.2)}`,\n    grey: `0 0 0 2px ${alpha(theme.palette.secondary.main, 0.2)}`,\n    primaryButton: `0 14px 12px ${alpha(theme.palette.primary.main, 0.2)}`,\n    secondaryButton: `0 14px 12px ${alpha(theme.palette.secondary.main, 0.2)}`,\n    errorButton: `0 14px 12px ${alpha(theme.palette.error.main, 0.2)}`,\n    warningButton: `0 14px 12px ${alpha(theme.palette.warning.main, 0.2)}`,\n    infoButton: `0 14px 12px ${alpha(theme.palette.info.main, 0.2)}`,\n    successButton: `0 14px 12px ${alpha(theme.palette.success.main, 0.2)}`,\n    greyButton: `0 14px 12px ${alpha(theme.palette.secondary.main, 0.2)}`\n  };\n}\n","size_bytes":1846},"src/sections/maps/viewport-animation/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useRef, useState, useCallback, memo } from 'react';\n\n// third-party\nimport Map from 'react-map-gl';\n\n// project-import\nimport ControlPanel from './control-panel';\nimport MapControl from 'components/third-party/map/MapControl';\n\n// ==============================|| MAP - VIEWPORT ANIMATION ||============================== //\n\nfunction ViewportAnimation({ data, ...other }) {\n  const mapRef = useRef(null);\n\n  const [selectedCity, setSelectedCity] = useState(data[2].city);\n\n  const onSelectCity = useCallback((event, { longitude, latitude }) => {\n    setSelectedCity(event.target.value);\n    mapRef.current?.flyTo({ center: [longitude, latitude], duration: 2000 });\n  }, []);\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 22.299405,\n        longitude: 73.208119,\n        zoom: 11,\n        bearing: 0,\n        pitch: 0\n      }}\n      ref={mapRef}\n      {...other}\n    >\n      <MapControl />\n      <ControlPanel data={data} selectedCity={selectedCity} onSelectCity={onSelectCity} />\n    </Map>\n  );\n}\n\nexport default memo(ViewportAnimation);\n\nViewportAnimation.propTypes = { data: PropTypes.array, other: PropTypes.any };\n","size_bytes":1184},"src/utils/password-strength.js":{"content":"// has number\nconst hasNumber = (number) => new RegExp(/[0-9]/).test(number);\n\n// has mix of small and capitals\nconst hasMixed = (number) => new RegExp(/[a-z]/).test(number) && new RegExp(/[A-Z]/).test(number);\n\n// has special chars\nconst hasSpecial = (number) => new RegExp(/[!#@$%^&*)(+=._-]/).test(number);\n\n// set color based on password strength\nexport const strengthColor = (count) => {\n  if (count < 2) return { label: 'Poor', color: 'error.main' };\n  if (count < 3) return { label: 'Weak', color: 'warning.main' };\n  if (count < 4) return { label: 'Normal', color: 'warning.dark' };\n  if (count < 5) return { label: 'Good', color: 'success.main' };\n  if (count < 6) return { label: 'Strong', color: 'success.dark' };\n  return { label: 'Poor', color: 'error.main' };\n};\n\n// password strength indicator\nexport const strengthIndicator = (number) => {\n  let strengths = 0;\n  if (number.length > 5) strengths += 1;\n  if (number.length > 7) strengths += 1;\n  if (hasNumber(number)) strengths += 1;\n  if (hasSpecial(number)) strengths += 1;\n  if (hasMixed(number)) strengths += 1;\n  return strengths;\n};\n","size_bytes":1105},"src/sections/landing/ContactUs.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\n\n// ==============================|| LANDING - ContactUsPage ||============================== //\n\nexport default function ContactUsPage() {\n  return (\n    <Box sx={{ bgcolor: 'secondary.200', pb: { md: 10, xs: 7 }, pt: 0.25 }}>\n      <Container>\n        <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 10, xs: 2.5 } }}>\n          <Grid item xs={12} md={8}>\n            <FadeInWhenVisible>\n              <Grid container spacing={2} justifyContent=\"center\">\n                <Grid item xs={12}>\n                  <Typography variant=\"h2\">Stay connected with us</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography>\n                    Simply submit your email, we share you the top news related to Able Pro feature updates, roadmap, and news.\n                  </Typography>\n                </Grid>\n              </Grid>\n            </FadeInWhenVisible>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <FadeInWhenVisible>\n              <Grid container spacing={2} justifyContent={{ md: 'end', xs: 'center' }} alignItems=\"center\">\n                <Grid item>\n                  <TextField id=\"firstNameBasic\" name=\"firstName\" placeholder=\"Enter your email\" fullWidth />\n                </Grid>\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\" size=\"large\">\n                    Subscribe\n                  </Button>\n                </Grid>\n              </Grid>\n            </FadeInWhenVisible>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":1958},"src/layout/Component/Header.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, cloneElement } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport Container from '@mui/material/Container';\nimport Drawer from '@mui/material/Drawer';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Stack from '@mui/material/Stack';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\n// project-imports\nimport Logo from 'components/logo';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nimport useAuth from 'hooks/useAuth';\nimport { ThemeDirection, APP_DEFAULT_PATH } from 'config';\nimport { handlerComponentDrawer, useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { DocumentDownload, ExportSquare, HambergerMenu, Minus } from 'iconsax-react';\n\n// elevation scroll\nfunction ElevationScroll({ children, window }) {\n  const theme = useTheme();\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 10,\n    target: window ? window : undefined\n  });\n\n  return cloneElement(children, {\n    style: {\n      boxShadow: trigger ? '0 8px 6px -10px rgba(0, 0, 0, 0.5)' : 'none',\n      backgroundColor: trigger ? alpha(theme.palette.background.default, 0.8) : alpha(theme.palette.background.default, 0.1)\n    }\n  });\n}\n\n// ==============================|| COMPONENTS - APP BAR ||============================== //\n\nexport default function Header() {\n  const theme = useTheme();\n  const { isLoggedIn } = useAuth();\n  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));\n  const [drawerToggle, setDrawerToggle] = useState(false);\n\n  const { menuMaster } = useGetMenuMaster();\n\n  /** Method called on multiple components with different event types */\n  const drawerToggler = (open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setDrawerToggle(open);\n  };\n\n  let url;\n  let value = window.location.search;\n  const params = new URLSearchParams(value);\n  const ispValue = params.get('isp');\n\n  if (ispValue !== null && parseInt(ispValue) === 1) {\n    url = 'https://1.envato.market/OrJ5nn';\n  } else {\n    url = 'https://1.envato.market/zNkqj6';\n  }\n\n  return (\n    <ElevationScroll>\n      <AppBar\n        sx={{\n          bgcolor: alpha(theme.palette.background.default, 0.1),\n          backdropFilter: 'blur(8px)',\n          color: theme.palette.text.primary,\n          boxShadow: 'none'\n        }}\n      >\n        <Container maxWidth=\"xl\" disableGutters={matchDownMd}>\n          <Toolbar sx={{ px: { xs: 1.5, sm: 4, md: 0, lg: 0 }, py: 1 }}>\n            <Stack direction=\"row\" sx={{ flexGrow: 1, display: { xs: 'none', md: 'block' } }} alignItems=\"center\">\n              <Typography sx={{ textAlign: 'left', display: 'inline-block' }}>\n                <Logo to=\"/\" />\n              </Typography>\n              <Chip\n                label={import.meta.env.VITE_APP_VERSION}\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                sx={{ mt: 0.5, ml: 1, fontSize: '0.725rem', height: 20, '& .MuiChip-label': { px: 0.5 } }}\n              />\n            </Stack>\n            <Stack\n              direction=\"row\"\n              sx={{ '& .header-link': { fontWeight: 500, '&:hover': { color: 'primary.main' } }, display: { xs: 'none', md: 'block' } }}\n              spacing={3}\n            >\n              <Link\n                className=\"header-link\"\n                sx={{ ml: theme.direction === ThemeDirection.RTL ? 3 : 0 }}\n                color=\"secondary.main\"\n                component={RouterLink}\n                to=\"/login\"\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                Dashboard\n              </Link>\n              {/* <Link className=\"header-link\" color=\"primary\" component={RouterLink} to=\"/components-overview/buttons\" underline=\"none\">\n                Components\n              </Link> */}\n              <Link\n                className=\"header-link\"\n                color=\"secondary.main\"\n                href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/\"\n                target=\"_blank\"\n                underline=\"none\"\n              >\n                Documentation\n              </Link>\n              <Link href=\"https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template\" target=\"_blank\" underline=\"none\">\n                <IconButton\n                  size=\"large\"\n                  shape=\"rounded\"\n                  color=\"secondary\"\n                  sx={{\n                    bgcolor: 'secondary.light',\n                    color: 'secondary.darker',\n                    '&:hover': { color: 'secondary.lighter', bgcolor: 'secondary.darker' }\n                  }}\n                >\n                  <DocumentDownload />\n                </IconButton>\n              </Link>\n              <Box sx={{ display: 'inline-block' }}>\n                <AnimateButton>\n                  <Button\n                    component={Link}\n                    href={url}\n                    target=\"_blank\"\n                    disableElevation\n                    startIcon={<ExportSquare />}\n                    color=\"success\"\n                    size=\"large\"\n                    variant=\"contained\"\n                  >\n                    Purchase Now\n                  </Button>\n                </AnimateButton>\n              </Box>\n            </Stack>\n            <Box\n              sx={{\n                width: '100%',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                display: { xs: 'flex', md: 'none' }\n              }}\n            >\n              <Typography sx={{ textAlign: 'left', display: 'inline-block' }}>\n                <Logo to=\"/\" />\n              </Typography>\n              <Stack direction=\"row\" spacing={2}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"warning\"\n                  component={RouterLink}\n                  to={isLoggedIn ? APP_DEFAULT_PATH : '/login'}\n                  sx={{ mt: 0.25 }}\n                >\n                  {isLoggedIn ? 'Dashboard' : 'Login'}\n                </Button>\n\n                <IconButton\n                  size=\"large\"\n                  color=\"secondary\"\n                  onClick={() => handlerComponentDrawer(!menuMaster.isComponentDrawerOpened)}\n                  sx={{ p: 1 }}\n                >\n                  <HambergerMenu />\n                </IconButton>\n              </Stack>\n              <Drawer\n                anchor=\"top\"\n                open={drawerToggle}\n                onClose={drawerToggler(false)}\n                sx={{ '& .MuiDrawer-paper': { backgroundImage: 'none' } }}\n              >\n                <Box\n                  sx={{ width: 'auto', '& .MuiListItemIcon-root': { fontSize: '1rem', minWidth: 32 } }}\n                  role=\"presentation\"\n                  onClick={drawerToggler(false)}\n                  onKeyDown={drawerToggler(false)}\n                >\n                  <List>\n                    <Link style={{ textDecoration: 'none' }} href=\"/login\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Dashboard\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    {/* <Link style={{ textDecoration: 'none' }} href=\"/components-overview/buttons\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"All Components\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link> */}\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      href=\"https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template\"\n                      target=\"_blank\"\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Free Version\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link style={{ textDecoration: 'none' }} href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Documentation\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link style={{ textDecoration: 'none' }} href=\"https://phoenixcoded.authordesk.app/\" target=\"_blank\">\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Support\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                      </ListItemButton>\n                    </Link>\n                    <Link\n                      style={{ textDecoration: 'none' }}\n                      href=\"https://1.envato.market/c/1289604/275988/4415?subId1=phoenixcoded&u=https%3A%2F%2Fthemeforest.net%2Fitem%2Fable-pro-responsive-bootstrap-4-admin-template%2F19300403\"\n                      target=\"_blank\"\n                    >\n                      <ListItemButton>\n                        <ListItemIcon>\n                          <Minus color={theme.palette.secondary.main} />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Purchase Now\" primaryTypographyProps={{ variant: 'h6', color: 'secondary.main' }} />\n                        <Chip color=\"primary\" label=\"v1.0\" size=\"small\" />\n                      </ListItemButton>\n                    </Link>\n                  </List>\n                </Box>\n              </Drawer>\n            </Box>\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </ElevationScroll>\n  );\n}\n\nElevationScroll.propTypes = { children: PropTypes.node, window: PropTypes.any };\n","size_bytes":11397},"src/components/@extended/progress/CircularWithPath.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport CircularProgress, { circularProgressClasses } from '@mui/material/CircularProgress';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| PROGRESS - CIRCULAR PATH ||============================== //\n\nexport default function CircularWithPath({ value, size, variant, thickness, showLabel, pathColor, sx, ...others }) {\n  return (\n    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n      <CircularProgress\n        variant=\"determinate\"\n        sx={{ color: pathColor ? pathColor : 'secondary.200' }}\n        size={size}\n        thickness={thickness}\n        {...others}\n        value={100}\n      />\n      {showLabel && (\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {value ? `${Math.round(value)}%` : '0%'}\n          </Typography>\n        </Box>\n      )}\n      <CircularProgress\n        variant={variant}\n        sx={{\n          ...sx,\n          position: 'absolute',\n          left: 0,\n          [`& .${circularProgressClasses.circle}`]: {\n            strokeLinecap: 'round'\n          }\n        }}\n        size={size}\n        thickness={thickness}\n        value={value}\n        {...others}\n      />\n    </Box>\n  );\n}\n\nCircularWithPath.propTypes = {\n  value: PropTypes.any,\n  size: PropTypes.any,\n  variant: PropTypes.any,\n  thickness: PropTypes.any,\n  showLabel: PropTypes.bool,\n  pathColor: PropTypes.string,\n  sx: PropTypes.any,\n  others: PropTypes.any\n};\n","size_bytes":1802},"src/sections/widget/data/TeamMembers.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\n\nimport Avatar1 from 'assets/images/users/avatar-1.png';\nimport Avatar2 from 'assets/images/users/avatar-2.png';\nimport Avatar3 from 'assets/images/users/avatar-3.png';\nimport Avatar4 from 'assets/images/users/avatar-4.png';\n\n// ===========================|| DATA WIDGET - TEAM MEMBERS ||=========================== //\n\nexport default function TeamMembers() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 3, pb: 0 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">Team Members</Typography>\n          <IconButton\n            color=\"secondary\"\n            id=\"wallet-button\"\n            aria-controls={open ? 'wallet-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >\n            <MoreIcon />\n          </IconButton>\n          <Menu\n            id=\"wallet-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          >\n            <ListItemButton onClick={handleClose}>Today</ListItemButton>\n            <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n            <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n          </Menu>\n        </Stack>\n      </Box>\n      <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n        <ListItem divider secondaryAction={<Typography color=\"text.secondary\">5 min ago</Typography>}>\n          <ListItemAvatar sx={{ mr: 1 }}>\n            <Avatar alt=\"User 1\" src={Avatar1} variant=\"rounded\" size=\"lg\" />\n          </ListItemAvatar>\n          <ListItemText\n            primary={<Typography variant=\"subtitle1\">David Jones</Typography>}\n            secondary={<Typography sx={{ mt: 0.25 }}>Project Leader</Typography>}\n          />\n        </ListItem>\n        <ListItem divider secondaryAction={<Typography color=\"text.secondary\">1 hour ago</Typography>}>\n          <ListItemAvatar sx={{ mr: 1 }}>\n            <Avatar alt=\"User 2\" src={Avatar2} variant=\"rounded\" size=\"lg\" />\n          </ListItemAvatar>\n          <ListItemText\n            primary={<Typography variant=\"subtitle1\">David Jones</Typography>}\n            secondary={<Typography sx={{ mt: 0.25 }}>HR Manager</Typography>}\n          />\n        </ListItem>\n        <ListItem divider secondaryAction={<Typography color=\"text.secondary\">Yesterday</Typography>}>\n          <ListItemAvatar sx={{ mr: 1 }}>\n            <Avatar alt=\"User 3\" src={Avatar3} variant=\"rounded\" size=\"lg\" />\n          </ListItemAvatar>\n          <ListItemText\n            primary={<Typography variant=\"subtitle1\">David Jones</Typography>}\n            secondary={<Typography sx={{ mt: 0.25 }}>Developer</Typography>}\n          />\n        </ListItem>\n        <ListItem secondaryAction={<Typography color=\"text.secondary\">02-05-2022</Typography>}>\n          <ListItemAvatar sx={{ mr: 1 }}>\n            <Avatar alt=\"User 4\" src={Avatar4} variant=\"rounded\" size=\"lg\" />\n          </ListItemAvatar>\n          <ListItemText\n            primary={<Typography variant=\"subtitle1\">David Jones</Typography>}\n            secondary={<Typography sx={{ mt: 0.25 }}>UI/UX Designer</Typography>}\n          />\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":4490},"README.md":{"content":"Admin Panel for iShunea","size_bytes":23},"src/sections/apps/kanban/Backlogs/AddStory.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Drawer from '@mui/material/Drawer';\nimport Select from '@mui/material/Select';\nimport Tooltip from '@mui/material/Tooltip';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\n\n// third-party\nimport * as yup from 'yup';\nimport { Chance } from 'chance';\nimport { useFormik } from 'formik';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport UploadMultiFile from 'components/third-party/dropzone/MultiFile';\n\nimport { DropzopType } from 'config';\nimport { addStory, useGetBacklogs } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add } from 'iconsax-react';\n\nconst chance = new Chance();\nconst validationSchema = yup.object({\n  title: yup.string().required('User story title is required'),\n  dueDate: yup.date().required('Due date is required').nullable()\n});\n\n// ==============================|| KANBAN BACKLOGS - ADD STORY ||============================== //\n\nexport default function AddStory({ open, handleDrawerOpen }) {\n  const { backlogs } = useGetBacklogs();\n\n  const formik = useFormik({\n    initialValues: {\n      id: '',\n      title: '',\n      assign: null,\n      columnId: '',\n      priority: 'low',\n      dueDate: null,\n      acceptance: '',\n      description: '',\n      commentIds: '',\n      image: false,\n      itemIds: [],\n      files: []\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      values.id = `${chance.integer({ min: 1000, max: 9999 })}`;\n      addStory(values);\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n      handleDrawerOpen();\n      resetForm();\n    }\n  });\n\n  return (\n    <Drawer\n      sx={{\n        ml: open ? 3 : 0,\n        flexShrink: 0,\n        zIndex: 1200,\n        overflowX: 'hidden',\n        width: { xs: 320, md: 450 },\n        '& .MuiDrawer-paper': {\n          width: { xs: 320, md: 450 },\n          border: 'none',\n          borderRadius: '0px'\n        }\n      }}\n      variant=\"temporary\"\n      anchor=\"right\"\n      open={open}\n      ModalProps={{ keepMounted: true }}\n      onClose={handleDrawerOpen}\n    >\n      {open && (\n        <SimpleBar\n          sx={{\n            overflowX: 'hidden',\n            height: '100vh'\n          }}\n        >\n          <Box sx={{ p: 3 }}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n              <Typography variant=\"h4\">Add Story</Typography>\n              <Tooltip title=\"Close\">\n                <IconButton color=\"secondary\" onClick={handleDrawerOpen} size=\"small\" sx={{ fontSize: '0.875rem' }}>\n                  <Add style={{ transform: 'rotate(45deg)' }} />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Box>\n          <Divider />\n          <Box sx={{ p: 3 }}>\n            <form onSubmit={formik.handleSubmit}>\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <Grid container spacing={2.5}>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Title</InputLabel>\n                      <TextField\n                        fullWidth\n                        id=\"title\"\n                        name=\"title\"\n                        placeholder=\"Title\"\n                        value={formik.values.title}\n                        onChange={formik.handleChange}\n                        error={formik.touched.title && Boolean(formik.errors.title)}\n                        helperText={formik.touched.title && formik.errors.title}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Assign to</InputLabel>\n                      <Autocomplete\n                        id=\"assign\"\n                        value={backlogs?.profiles.find((profile) => profile.id === formik.values.assign) || null}\n                        onChange={(event, value) => {\n                          formik.setFieldValue('assign', value?.id);\n                        }}\n                        options={backlogs?.profiles}\n                        fullWidth\n                        autoHighlight\n                        getOptionLabel={(option) => option.name}\n                        isOptionEqualToValue={(option) => option.id === formik.values.assign}\n                        renderOption={(props, option) => (\n                          <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                            <img loading=\"lazy\" width=\"20\" src={getImageUrl(`${option.avatar}`, ImagePath.USERS)} alt=\"\" />\n                            {option.name}\n                          </Box>\n                        )}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            placeholder=\"Choose a assignee\"\n                            inputProps={{\n                              ...params.inputProps,\n                              autoComplete: 'new-password' // disable autocomplete and autofill\n                            }}\n                          />\n                        )}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Prioritize</InputLabel>\n                      <FormControl>\n                        <RadioGroup\n                          row\n                          aria-label=\"color\"\n                          value={formik.values.priority}\n                          onChange={formik.handleChange}\n                          name=\"priority\"\n                          id=\"priority\"\n                        >\n                          <FormControlLabel value=\"low\" control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />} label=\"Low\" />\n                          <FormControlLabel\n                            value=\"medium\"\n                            control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />}\n                            label=\"Medium\"\n                          />\n                          <FormControlLabel value=\"high\" control={<Radio color=\"error\" sx={{ color: 'error.main' }} />} label=\"High\" />\n                        </RadioGroup>\n                      </FormControl>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Due date</InputLabel>\n                      <DesktopDatePicker\n                        value={formik.values.dueDate}\n                        format=\"dd/MM/yyyy\"\n                        onChange={(date) => {\n                          formik.setFieldValue('dueDate', date);\n                        }}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Acceptance</InputLabel>\n                      <TextField\n                        fullWidth\n                        id=\"acceptance\"\n                        name=\"acceptance\"\n                        multiline\n                        rows={3}\n                        value={formik.values.acceptance}\n                        onChange={formik.handleChange}\n                        error={formik.touched.acceptance && Boolean(formik.errors.acceptance)}\n                        helperText={formik.touched.acceptance && formik.errors.acceptance}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>Description</InputLabel>\n                      <TextField\n                        fullWidth\n                        id=\"description\"\n                        name=\"description\"\n                        multiline\n                        rows={3}\n                        value={formik.values.description}\n                        onChange={formik.handleChange}\n                        error={formik.touched.description && Boolean(formik.errors.description)}\n                        helperText={formik.touched.description && formik.errors.description}\n                      />\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack spacing={1}>\n                      <InputLabel>State</InputLabel>\n                      <FormControl fullWidth sx={{ m: 1 }}>\n                        <Select\n                          id=\"columnId\"\n                          name=\"columnId\"\n                          displayEmpty\n                          value={formik.values.columnId}\n                          onChange={formik.handleChange}\n                          inputProps={{ 'aria-label': 'Without label' }}\n                        >\n                          {backlogs?.columns.map((column, index) => (\n                            <MenuItem key={index} value={column.id}>\n                              {column.title}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                      <Grid item xs={12}>\n                        <InputLabel sx={{ mt: 0.5 }}>Attachments:</InputLabel>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <UploadMultiFile\n                          type={DropzopType.STANDARD}\n                          showList={true}\n                          setFieldValue={formik.setFieldValue}\n                          files={formik.values.files}\n                          error={formik.touched.files && !!formik.errors.files}\n                        />\n                      </Grid>\n                      {formik.touched.files && formik.errors.files && (\n                        <Grid item xs={12}>\n                          <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                            {formik.errors.files}\n                          </FormHelperText>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <AnimateButton>\n                      <Button fullWidth variant=\"contained\" type=\"submit\">\n                        Save\n                      </Button>\n                    </AnimateButton>\n                  </Grid>\n                </Grid>\n              </LocalizationProvider>\n            </form>\n          </Box>\n        </SimpleBar>\n      )}\n    </Drawer>\n  );\n}\n\nAddStory.propTypes = { open: PropTypes.bool, handleDrawerOpen: PropTypes.func };\n","size_bytes":12192},"src/sections/charts/apexchart/ApexBarChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst barChartOptions = {\n  chart: {\n    type: 'bar',\n    height: 350\n  },\n  plotOptions: {\n    bar: {\n      borderRadius: 4,\n      horizontal: true\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  xaxis: {\n    categories: ['South Korea', 'Canada', 'United Kingdom', 'Netherlands', 'Italy', 'France', 'Japan', 'United States', 'China', 'Germany']\n  }\n};\n\n// ==============================|| APEXCHART - BAR ||============================== //\n\nexport default function ApexBarChart() {\n  const theme = useTheme();\n\n  const mode = theme.palette.mode;\n  const line = theme.palette.divider;\n  const { primary } = theme.palette.text;\n\n  const successDark = theme.palette.success.main;\n\n  const [series] = useState([\n    {\n      data: [400, 430, 448, 470, 540, 580, 690, 1100, 1200, 1380]\n    }\n  ]);\n\n  const [options, setOptions] = useState(barChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [successDark],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, successDark]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"bar\" height={350} />\n    </div>\n  );\n}\n","size_bytes":1875},"src/pages/edit-form-grids/jobs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport EditJobsPage from 'sections/forms/edit-forms/jobs';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormEditJobs() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <EditJobsPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":429},"src/sections/widget/statistics/AssignUsers.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport AvatarGroup from '@mui/material/AvatarGroup';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { Add, Profile } from 'iconsax-react';\n\nimport avatar1 from '/src/assets/images/users/avatar-1.png';\nimport avatar2 from '/src/assets/images/users/avatar-2.png';\nimport avatar3 from '/src/assets/images/users/avatar-3.png';\nimport avatar4 from '/src/assets/images/users/avatar-4.png';\nimport avatar5 from '/src/assets/images/users/avatar-5.png';\n\n// ===========================|| STATISTICS - ASSIGN USERS ||=========================== //\n\nexport default function AssignUsers() {\n  const [show, setShow] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n              <Avatar variant=\"rounded\">\n                <Profile variant=\"Bold\" />\n              </Avatar>\n              <Stack>\n                <Typography variant=\"subtitle1\">Able pro</Typography>\n                <Typography variant=\"caption\">@ableprodevelop</Typography>\n              </Stack>\n            </Stack>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={3}>\n            <Box sx={{ width: 186 }}>\n              <Tooltip\n                open={show}\n                placement=\"top-end\"\n                title={\n                  <AvatarGroup max={10}>\n                    <Avatar alt=\"Agnes Walker\" src={avatar4} />\n                    <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                  </AvatarGroup>\n                }\n              >\n                <AvatarGroup\n                  sx={{\n                    '& .MuiAvatarGroup-avatar': { bgcolor: 'primary.main', cursor: 'pointer' },\n                    justifyContent: 'start',\n                    '& .MuiAvatar-root': {\n                      width: 32,\n                      height: 32,\n                      fontSize: '0.875rem',\n                      bgcolor: 'primary.lighter',\n                      color: 'primary.main',\n                      ml: -1.25\n                    }\n                  }}\n                  max={4}\n                  componentsProps={{\n                    additionalAvatar: {\n                      onMouseEnter: () => {\n                        setShow(true);\n                      },\n                      onMouseLeave: () => {\n                        setShow(false);\n                      }\n                    }\n                  }}\n                >\n                  <Avatar alt=\"Remy Sharp\" src={avatar1} />\n                  <Avatar alt=\"Travis Howard\" src={avatar2} />\n                  <Avatar alt=\"Cindy Baker\" src={avatar3} />\n                  <Avatar alt=\"Agnes Walker\" src={avatar4} />\n                  <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                </AvatarGroup>\n              </Tooltip>\n            </Box>\n            <IconButton shape=\"rounded\" variant=\"contained\">\n              <Add />\n            </IconButton>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4980},"src/sections/components-overview/lists/NestedList.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Collapse from '@mui/material/Collapse';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowUp2, Element, Grid5, Setting3 } from 'iconsax-react';\n\n// ==============================|| LIST - NESTED ||============================== //\n\nexport default function NestedList() {\n  const [open, setOpen] = useState('sample');\n  const [openChild, setOpenChild] = useState('');\n\n  const handleClick = (page) => {\n    setOpen(open !== page ? page : '');\n    setOpenChild('');\n  };\n\n  const handleChildClick = (page) => {\n    setOpenChild(openChild !== page ? page : '');\n  };\n\n  const nestedListCodeString = `<List sx={{ p: 0 }}>\n  <ListItem disablePadding divider>\n    <ListItemButton onClick={() => handleClick('sample')}>\n      <ListItemIcon>\n        <Grid5 />\n      </ListItemIcon>\n      <ListItemText primary=\"Sample\" />\n      {open === 'sample' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n    </ListItemButton>\n  </ListItem>\n  <Collapse in={open === 'sample'} timeout=\"auto\" unmountOnExit>\n    <List disablePadding sx={{ bgcolor: 'secondary.100' }}>\n      <ListItemButton sx={{ pl: 5 }}>\n        <ListItemText primary=\"List item 01\" />\n      </ListItemButton>\n      <ListItemButton sx={{ pl: 5 }} onClick={() => handleChildClick('list1')}>\n        <ListItemText primary=\"List item 02\" />\n        {openChild === 'list1' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n      </ListItemButton>\n      <Collapse in={openChild === 'list1'} timeout=\"auto\" unmountOnExit>\n        <List disablePadding sx={{ bgcolor: 'secondary.lighter' }}>\n          <ListItemButton sx={{ pl: 7 }}>\n            <ListItemText primary=\"List item 05\" />\n          </ListItemButton>\n          <ListItemButton sx={{ pl: 7 }}>\n            <ListItemText primary=\"List item 06\" />\n          </ListItemButton>\n        </List>\n      </Collapse>\n    </List>\n  </Collapse>\n  <ListItem disablePadding divider>\n    <ListItemButton onClick={() => handleClick('settings')}>\n      <ListItemIcon>\n        <Setting3 />\n      </ListItemIcon>\n      <ListItemText primary=\"Settings\" />\n      {open === 'settings' ? <ArrowDown2 style={{ fontSize: '0.75rem' }} /> : <ArrowUp2 style={{ fontSize: '0.75rem' }} />}\n    </ListItemButton>\n  </ListItem>\n  <Collapse in={open === 'settings'} timeout=\"auto\" unmountOnExit>\n    <List disablePadding sx={{ bgcolor: 'secondary.100' }}>\n      <ListItemButton sx={{ pl: 5 }}>\n        <ListItemText primary=\"List item 03\" />\n      </ListItemButton>\n      <ListItemButton sx={{ pl: 5 }}>\n        <ListItemText primary=\"List item 04\" />\n      </ListItemButton>\n    </List>\n  </Collapse>\n  <ListItem disablePadding>\n    <ListItemButton>\n      <ListItemIcon>\n        <Element />\n      </ListItemIcon>\n      <ListItemText primary=\"UI Elements\" />\n    </ListItemButton>\n  </ListItem>\n</List>`;\n\n  return (\n    <MainCard content={false} codeString={nestedListCodeString}>\n      <List sx={{ p: 0, '& .MuiListItemButton-root': { borderRadius: 0, my: 0 } }}>\n        <ListItem disablePadding divider>\n          <ListItemButton onClick={() => handleClick('sample')}>\n            <ListItemIcon>\n              <Grid5 size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Sample\" />\n            {open === 'sample' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n          </ListItemButton>\n        </ListItem>\n        <Collapse in={open === 'sample'} timeout=\"auto\" unmountOnExit>\n          <List disablePadding sx={{ bgcolor: 'secondary.100' }}>\n            <ListItemButton sx={{ pl: 5 }}>\n              <ListItemText primary=\"List item 01\" />\n            </ListItemButton>\n            <ListItemButton sx={{ pl: 5 }} onClick={() => handleChildClick('list1')}>\n              <ListItemText primary=\"List item 02\" />\n              {openChild === 'list1' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n            </ListItemButton>\n            <Collapse in={openChild === 'list1'} timeout=\"auto\" unmountOnExit>\n              <List disablePadding sx={{ bgcolor: 'secondary.lighter' }}>\n                <ListItemButton sx={{ pl: 7 }}>\n                  <ListItemText primary=\"List item 05\" />\n                </ListItemButton>\n                <ListItemButton sx={{ pl: 7 }}>\n                  <ListItemText primary=\"List item 06\" />\n                </ListItemButton>\n              </List>\n            </Collapse>\n          </List>\n        </Collapse>\n        <ListItem disablePadding divider>\n          <ListItemButton onClick={() => handleClick('settings')}>\n            <ListItemIcon>\n              <Setting3 size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"Settings\" />\n            {open === 'settings' ? <ArrowDown2 size={14} /> : <ArrowUp2 size={14} />}\n          </ListItemButton>\n        </ListItem>\n        <Collapse in={open === 'settings'} timeout=\"auto\" unmountOnExit>\n          <List disablePadding sx={{ bgcolor: 'secondary.100' }}>\n            <ListItemButton sx={{ pl: 5 }}>\n              <ListItemText primary=\"List item 03\" />\n            </ListItemButton>\n            <ListItemButton sx={{ pl: 5 }}>\n              <ListItemText primary=\"List item 04\" />\n            </ListItemButton>\n          </List>\n        </Collapse>\n        <ListItem disablePadding>\n          <ListItemButton>\n            <ListItemIcon>\n              <Element size={18} />\n            </ListItemIcon>\n            <ListItemText primary=\"UI Elements\" />\n          </ListItemButton>\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":5915},"src/themes/theme/index.js":{"content":"// project-imports\nimport Default from './default';\nimport Theme1 from './theme1';\nimport Theme2 from './theme2';\nimport Theme3 from './theme3';\nimport Theme4 from './theme4';\nimport Theme5 from './theme5';\nimport Theme6 from './theme6';\nimport Theme7 from './theme7';\nimport Theme8 from './theme8';\n\n// ==============================|| PRESET THEME - THEME SELECTOR ||============================== //\n\nconst Theme = (presetColor, mode) => {\n  switch (presetColor) {\n    case 'theme1':\n      return Theme1(mode);\n    case 'theme2':\n      return Theme2(mode);\n    case 'theme3':\n      return Theme3(mode);\n    case 'theme4':\n      return Theme4(mode);\n    case 'theme5':\n      return Theme5(mode);\n    case 'theme6':\n      return Theme6(mode);\n    case 'theme7':\n      return Theme7(mode);\n    case 'theme8':\n      return Theme8(mode);\n    default:\n      return Default(mode);\n  }\n};\n\nexport default Theme;\n","size_bytes":907},"src/contexts/auth-reducer/actions.js":{"content":"// action - account reducer\nexport const LOGIN = '@auth/LOGIN';\nexport const LOGOUT = '@auth/LOGOUT';\nexport const REGISTER = '@auth/REGISTER';\n","size_bytes":144},"src/sections/apps/profiles/account/TabPersonal.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport Select from '@mui/material/Select';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport MainCard from 'components/MainCard';\n\nimport { ThemeMode, facebookColor, linkedInColor } from 'config';\nimport defaultImages from 'assets/images/users/default.png';\n\n// assets\nimport { Apple, Camera, Facebook, Google } from 'iconsax-react';\n\n// styles & constant\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP\n    }\n  }\n};\n\n// ==============================|| ACCOUNT PROFILE - PERSONAL ||============================== //\n\nexport default function TabPersonal() {\n  const theme = useTheme();\n  const [selectedImage, setSelectedImage] = useState(undefined);\n  const [avatar, setAvatar] = useState(defaultImages);\n\n  useEffect(() => {\n    if (selectedImage) {\n      setAvatar(URL.createObjectURL(selectedImage));\n    }\n  }, [selectedImage]);\n\n  const [experience, setExperience] = useState('0');\n\n  const handleChange = (event) => {\n    setExperience(event.target.value);\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} sm={6}>\n        <MainCard title=\"Personal Information\">\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Stack spacing={2.5} alignItems=\"center\" sx={{ m: 3 }}>\n                <FormLabel\n                  htmlFor=\"change-avtar\"\n                  sx={{\n                    position: 'relative',\n                    borderRadius: '50%',\n                    overflow: 'hidden',\n                    '&:hover .MuiBox-root': { opacity: 1 },\n                    cursor: 'pointer'\n                  }}\n                >\n                  <Avatar alt=\"Avatar 1\" src={avatar} sx={{ width: 76, height: 76 }} />\n                  <Box\n                    sx={{\n                      position: 'absolute',\n                      top: 0,\n                      left: 0,\n                      backgroundColor: theme.palette.mode === ThemeMode.DARK ? 'rgba(255, 255, 255, .75)' : 'rgba(0,0,0,.65)',\n                      width: '100%',\n                      height: '100%',\n                      opacity: 0,\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center'\n                    }}\n                  >\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Camera style={{ color: theme.palette.secondary.lighter, fontSize: '1.5rem' }} />\n                      <Typography sx={{ color: 'secondary.lighter' }} variant=\"caption\">\n                        Upload\n                      </Typography>\n                    </Stack>\n                  </Box>\n                </FormLabel>\n                <TextField\n                  type=\"file\"\n                  id=\"change-avtar\"\n                  placeholder=\"Outlined\"\n                  variant=\"outlined\"\n                  sx={{ display: 'none' }}\n                  onChange={(e) => setSelectedImage(e.target.files?.[0])}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-first-name\">First Name</InputLabel>\n                <TextField fullWidth defaultValue=\"Anshan\" id=\"personal-first-name\" placeholder=\"First Name\" autoFocus />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-first-name\">Last Name</InputLabel>\n                <TextField fullWidth defaultValue=\"Handgun\" id=\"personal-first-name\" placeholder=\"Last Name\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-location\">Country</InputLabel>\n                <TextField fullWidth defaultValue=\"New York\" id=\"personal-location\" placeholder=\"Location\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-zipcode\">Zipcode</InputLabel>\n                <TextField fullWidth defaultValue=\"956754\" id=\"personal-zipcode\" placeholder=\"Zipcode\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-location\">Bio</InputLabel>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={3}\n                  defaultValue=\"Hello, I’m Anshan Handgun Creative Graphic Designer & User Experience Designer based in Website, I create digital Products a more Beautiful and usable place. Morbid accusant ipsum. Nam nec tellus at.\"\n                  id=\"personal-location\"\n                  placeholder=\"Location\"\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"personal-experience\">Experiance</InputLabel>\n                <Select fullWidth id=\"personal-experience\" value={experience} onChange={handleChange} MenuProps={MenuProps}>\n                  <MenuItem value=\"0\">Start Up</MenuItem>\n                  <MenuItem value=\"0.5\">6 Months</MenuItem>\n                  <MenuItem value=\"1\">1 Year</MenuItem>\n                  <MenuItem value=\"2\">2 Years</MenuItem>\n                  <MenuItem value=\"3\">3 Years</MenuItem>\n                  <MenuItem value=\"4\">4 Years</MenuItem>\n                  <MenuItem value=\"5\">5 Years</MenuItem>\n                  <MenuItem value=\"6\">6 Years</MenuItem>\n                  <MenuItem value=\"10\">10+ Years</MenuItem>\n                </Select>\n              </Stack>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"Social Network\">\n              <Stack spacing={1}>\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <Button\n                    size=\"small\"\n                    startIcon={<Google variant=\"Bold\" style={{ color: theme.palette.error.main }} />}\n                    sx={{ color: theme.palette.error.main, '&:hover': { bgcolor: 'transparent' } }}\n                  >\n                    Google\n                  </Button>\n                  <Button color=\"error\">Connect</Button>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <Button\n                    size=\"small\"\n                    startIcon={<Facebook variant=\"Bold\" style={{ color: facebookColor }} />}\n                    sx={{ color: facebookColor, '&:hover': { bgcolor: 'transparent' } }}\n                  >\n                    Facebook\n                  </Button>\n                  <Typography variant=\"subtitle1\" sx={{ color: facebookColor }}>\n                    Anshan Handgun\n                  </Typography>\n                </Stack>\n                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                  <Button\n                    size=\"small\"\n                    startIcon={<Apple variant=\"Bold\" style={{ color: linkedInColor }} />}\n                    sx={{ color: linkedInColor, '&:hover': { bgcolor: 'transparent' } }}\n                  >\n                    Apple\n                  </Button>\n                  <Button color=\"error\">Connect</Button>\n                </Stack>\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Contact Information\">\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-phone\">Phone Number</InputLabel>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                      <Select defaultValue=\"1-876\">\n                        <MenuItem value=\"91\">+91</MenuItem>\n                        <MenuItem value=\"1-671\">1-671</MenuItem>\n                        <MenuItem value=\"36\">+36</MenuItem>\n                        <MenuItem value=\"225\">(255)</MenuItem>\n                        <MenuItem value=\"39\">+39</MenuItem>\n                        <MenuItem value=\"1-876\">1-876</MenuItem>\n                        <MenuItem value=\"7\">+7</MenuItem>\n                        <MenuItem value=\"254\">(254)</MenuItem>\n                        <MenuItem value=\"373\">(373)</MenuItem>\n                        <MenuItem value=\"1-664\">1-664</MenuItem>\n                        <MenuItem value=\"95\">+95</MenuItem>\n                        <MenuItem value=\"264\">(264)</MenuItem>\n                      </Select>\n                      <PatternFormat\n                        format=\"+1 (###) ###-####\"\n                        mask=\"_\"\n                        fullWidth\n                        customInput={TextField}\n                        placeholder=\"Phone Number\"\n                        defaultValue=\"8654239581\"\n                        onBlur={() => {}}\n                        onChange={() => {}}\n                      />\n                    </Stack>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-email\">Email Address</InputLabel>\n                    <TextField type=\"email\" fullWidth defaultValue=\"stebin.ben@gmail.com\" id=\"personal-email\" placeholder=\"Email Address\" />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-email\">Portfolio URL</InputLabel>\n                    <TextField fullWidth defaultValue=\"https://anshan.dh.url\" id=\"personal-url\" placeholder=\"Portfolio URL\" />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-address\">Address</InputLabel>\n                    <TextField\n                      fullWidth\n                      defaultValue=\"Street 110-B Kalians Bag, Dewan, M.P. New York\"\n                      id=\"personal-address\"\n                      placeholder=\"Address\"\n                    />\n                  </Stack>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n          <Button variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button variant=\"contained\">Update Profile</Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":11598},"src/themes/overrides/Slider.js":{"content":"// project-imports\nimport getColors from 'utils/getColors';\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { main } = colors;\n\n  return {\n    border: '2px solid ',\n    borderColor: main\n  };\n}\n\n// ==============================|| OVERRIDES - SLIDER ||============================== //\n\nexport default function Slider(theme) {\n  return {\n    MuiSlider: {\n      styleOverrides: {\n        track: {\n          height: '1px'\n        },\n        thumb: {\n          width: 14,\n          height: 14,\n          border: '2px solid',\n          borderColor: theme.palette.primary.main,\n          backgroundColor: theme.palette.background.paper,\n          '&.MuiSlider-thumbColorPrimary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiSlider-thumbColorSecondary': getColorStyle({ color: 'secondary', theme }),\n          '&.MuiSlider-thumbColorSuccess': getColorStyle({ color: 'success', theme }),\n          '&.MuiSlider-thumbColorWarning': getColorStyle({ color: 'warning', theme }),\n          '&.MuiSlider-thumbColorInfo': getColorStyle({ color: 'info', theme }),\n          '&.MuiSlider-thumbColorError': getColorStyle({ color: 'error', theme })\n        },\n        mark: {\n          width: 4,\n          height: 4,\n          borderRadius: '50%',\n          border: '1px solid',\n          borderColor: theme.palette.secondary.light,\n          backgroundColor: theme.palette.background.paper,\n          '&.MuiSlider-markActive': {\n            opacity: 1,\n            borderColor: 'inherit',\n            borderWidth: 2\n          }\n        },\n        rail: {\n          color: theme.palette.secondary.light\n        },\n        root: {\n          '&.Mui-disabled': {\n            '.MuiSlider-rail': {\n              opacity: 0.25\n            },\n            '.MuiSlider-track': {\n              color: theme.palette.secondary.lighter\n            },\n            '.MuiSlider-thumb': {\n              border: '2px solid',\n              borderColor: theme.palette.secondary.lighter\n            }\n          }\n        },\n        valueLabel: {\n          backgroundColor: theme.palette.secondary.light,\n          color: theme.palette.text.primary\n        }\n      }\n    }\n  };\n}\n","size_bytes":2202},"src/pages/components-overview/timeline.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicTimeline from 'sections/components-overview/timeline/BasicTimeline';\nimport LeftPositionedTimeline from 'sections/components-overview/timeline/LeftPositionedTimeline';\nimport AlternateTimeline from 'sections/components-overview/timeline/AlternateTimeline';\nimport ColorsTimeline from 'sections/components-overview/timeline/ColorsTimeline';\nimport OppositeContentTimeline from 'sections/components-overview/timeline/OppositeContentTimeline';\nimport CustomizedTimeline from 'sections/components-overview/timeline/CustomizedTimeline';\n\n// ==============================|| COMPONENTS - TIMELINE ||============================== //\n\nexport default function ComponentTimeline() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Timeline\"\n        caption=\"The timeline displays a list of events in chronological order.\"\n        directory=\"src/pages/components-overview/timeline\"\n        link=\"https://mui.com/material-ui/react-timeline/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <BasicTimeline />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <LeftPositionedTimeline />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <AlternateTimeline />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <ColorsTimeline />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <OppositeContentTimeline />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <CustomizedTimeline />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1948},"src/sections/apps/invoice/InvoiceUserList.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport Avatar1 from 'assets/images/users/avatar-5.png';\nimport Avatar2 from 'assets/images/users/avatar-6.png';\nimport Avatar3 from 'assets/images/users/avatar-7.png';\nimport Avatar4 from 'assets/images/users/avatar-8.png';\nimport Avatar5 from 'assets/images/users/avatar-9.png';\n\n// ==============================|| INVOICE - DASHBOARD USER ||============================== //\n\nexport default function InvoiceUserList() {\n  return (\n    <MainCard\n      title=\"Recent Invoice\"\n      secondary={\n        <IconButton edge=\"end\" aria-label=\"comments\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n          <MoreIcon />\n        </IconButton>\n      }\n    >\n      <Grid container spacing={2.5} alignItems=\"center\">\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" src={Avatar1} />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                David Jones -{' '}\n                <Typography color=\"secondary\" component=\"span\">\n                  {' '}\n                  #790841\n                </Typography>\n              </Typography>\n              <Typography color=\"primary\">$329.20</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" color=\"secondary\">\n                5 min ago\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" src={Avatar2} />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Jenny Jones -{' '}\n                <Typography color=\"secondary\" component=\"span\">\n                  {' '}\n                  #790841\n                </Typography>\n              </Typography>\n              <Typography color=\"primary\">$182.89</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" color=\"secondary\">\n                1 day ago\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" src={Avatar3} />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Harry Ben -{' '}\n                <Typography color=\"secondary\" component=\"span\">\n                  {' '}\n                  #790841\n                </Typography>\n              </Typography>\n              <Typography color=\"primary\">3 week ago</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" color=\"secondary\">\n                5 min ago\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" src={Avatar4} />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Jenifer Vintage -{' '}\n                <Typography color=\"secondary\" component=\"span\">\n                  {' '}\n                  #790841\n                </Typography>\n              </Typography>\n              <Typography color=\"primary\">$182.89</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" color=\"secondary\">\n                3 week ago\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" src={Avatar5} />\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Stebin Ben -{' '}\n                <Typography color=\"secondary\" component=\"span\">\n                  {' '}\n                  #790841\n                </Typography>\n              </Typography>\n              <Typography color=\"primary\">$324.00</Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" color=\"secondary\">\n                1 month ago\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            View All\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":5067},"src/sections/components-overview/tabs/CenteredTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return { id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}` };\n}\n\n// ==============================|| TABS - CENTERED ||============================== //\n\nexport default function CenteredTabs() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const centerTabCodeString = `// CenteredTabs.tsx\n<Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" centered>\n  <Tab\n    label=\"Tab1\"\n    icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n    iconPosition=\"end\"\n    {...a11yProps(0)}\n  />\n  <Tab label=\"Tab2\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(1)} />\n  <Tab label=\"Tab3\" {...a11yProps(2)} />\n</Tabs>\n<TabPanel value={value} index={0}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n    purus sem, sagittis eu mauris et, viverra lobortis urna.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={1}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={2}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>`;\n\n  return (\n    <MainCard codeString={centerTabCodeString}>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" centered>\n            <Tab\n              label=\"Tab1\"\n              icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n              iconPosition=\"end\"\n              {...a11yProps(0)}\n            />\n            <Tab label=\"Tab2\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(1)} />\n            <Tab label=\"Tab3\" {...a11yProps(2)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={value} index={0}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n            purus sem, sagittis eu mauris et, viverra lobortis urna.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":4209},"src/pages/edit-form-grids/team.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport EditTeamPage from 'sections/forms/edit-forms/team';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormEditTeam() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <EditTeamPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":429},"src/api/snackbar.js":{"content":"import { useMemo } from 'react';\nimport useSWR, { mutate } from 'swr';\n\nexport const endpoints = {\n  key: 'snackbar'\n};\n\nconst initialState = {\n  action: false,\n  open: false,\n  message: 'Note archived',\n  anchorOrigin: {\n    vertical: 'bottom',\n    horizontal: 'right'\n  },\n  variant: 'default',\n  alert: {\n    color: 'primary',\n    variant: 'filled'\n  },\n  transition: 'Fade',\n  close: false,\n  actionButton: false,\n  maxStack: 3,\n  dense: false,\n  iconVariant: 'usedefault'\n};\n\nexport function useGetSnackbar() {\n  const { data } = useSWR(endpoints.key, () => initialState, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(() => ({ snackbar: data }), [data]);\n\n  return memoizedValue;\n}\n\nexport function openSnackbar(snackbar) {\n  // to update local state based on key\n\n  const { action, open, message, anchorOrigin, variant, alert, transition, close, actionButton } = snackbar;\n\n  mutate(\n    endpoints.key,\n    (currentSnackbar) => {\n      return {\n        ...currentSnackbar,\n        action: action || initialState.action,\n        open: open || initialState.open,\n        message: message || initialState.message,\n        anchorOrigin: anchorOrigin || initialState.anchorOrigin,\n        variant: variant || initialState.variant,\n        alert: {\n          color: alert?.color || initialState.alert.color,\n          variant: alert?.variant || initialState.alert.variant\n        },\n        transition: transition || initialState.transition,\n        close: close || initialState.close,\n        actionButton: actionButton || initialState.actionButton\n      };\n    },\n    false\n  );\n}\n\nexport function closeSnackbar() {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentSnackbar) => {\n      return { ...currentSnackbar, open: false };\n    },\n    false\n  );\n}\n\nexport function handlerIncrease(maxStack) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentSnackbar) => {\n      return { ...currentSnackbar, maxStack };\n    },\n    false\n  );\n}\n\nexport function handlerDense(dense) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentSnackbar) => {\n      return { ...currentSnackbar, dense };\n    },\n    false\n  );\n}\n\nexport function handlerIconVariants(iconVariant) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentSnackbar) => {\n      return { ...currentSnackbar, iconVariant };\n    },\n    false\n  );\n}\n","size_bytes":2513},"src/sections/apps/kanban/Board/EditItem.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';\n\n// third-party\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport UploadMultiFile from 'components/third-party/dropzone/MultiFile';\n\nimport { DropzopType } from 'config';\nimport { editItem } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\nconst validationSchema = yup.object({\n  title: yup.string().required('Task title is required'),\n  dueDate: yup.date()\n});\n\n// ==============================|| KANBAN BOARD - ITEM EDIT ||============================== //\n\nexport default function EditItem({ item, profiles, userStory, columns, handleDrawerOpen }) {\n  const itemUserStory = userStory.filter((story) => story.itemIds.filter((itemId) => itemId === item.id)[0])[0];\n  const itemColumn = columns.filter((column) => column.itemIds.filter((itemId) => itemId === item.id)[0])[0];\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      id: item.id,\n      title: item.title,\n      assign: item.assign,\n      priority: item.priority,\n      dueDate: item.dueDate ? new Date(item.dueDate) : new Date(),\n      description: item.description,\n      commentIds: item.commentIds,\n      image: item.image,\n      storyId: itemUserStory ? itemUserStory.id : '',\n      columnId: itemColumn ? itemColumn.id : '',\n      files: item.attachments\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      const itemToEdit = {\n        id: values.id,\n        title: values.title,\n        assign: values.assign,\n        priority: values.priority,\n        dueDate: values.dueDate ? new Date(values.dueDate) : new Date(),\n        description: values.description,\n        commentIds: values.commentIds,\n        image: values.image,\n        attachments: values.files\n      };\n      editItem(values.columnId, itemToEdit, values.storyId);\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n\n      handleDrawerOpen();\n    }\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <Grid container spacing={2.5}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title</InputLabel>\n              <TextField\n                fullWidth\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title\"\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                error={formik.touched.title && Boolean(formik.errors.title)}\n                helperText={formik.touched.title && formik.errors.title}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Assign to</InputLabel>\n              <Autocomplete\n                id=\"assign\"\n                fullWidth\n                autoHighlight\n                options={profiles}\n                value={profiles.find((profile) => profile.id === formik.values.assign)}\n                getOptionLabel={(option) => option.name}\n                isOptionEqualToValue={(option) => option.id === formik.values.assign}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                    <img loading=\"lazy\" width=\"20\" src={getImageUrl(`${option.avatar}`, ImagePath.USERS)} alt=\"\" />\n                    {option.name}\n                  </Box>\n                )}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    name=\"assign\"\n                    placeholder=\"Choose a assignee\"\n                    inputProps={{\n                      ...params.inputProps,\n                      autoComplete: 'new-password' // disable autocomplete and autofill\n                    }}\n                  />\n                )}\n                onChange={(event, value) => {\n                  formik.setFieldValue('assign', value?.id);\n                }}\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Prioritize</InputLabel>\n              <FormControl>\n                <RadioGroup\n                  row\n                  aria-label=\"color\"\n                  value={formik.values.priority}\n                  onChange={formik.handleChange}\n                  name=\"priority\"\n                  id=\"priority\"\n                >\n                  <FormControlLabel value=\"low\" control={<Radio color=\"primary\" sx={{ color: 'primary.main' }} />} label=\"Low\" />\n                  <FormControlLabel value=\"medium\" control={<Radio color=\"warning\" sx={{ color: 'warning.main' }} />} label=\"Medium\" />\n                  <FormControlLabel value=\"high\" control={<Radio color=\"error\" sx={{ color: 'error.main' }} />} label=\"High\" />\n                </RadioGroup>\n              </FormControl>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Due date</InputLabel>\n              <DesktopDatePicker\n                value={formik.values.dueDate}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => {\n                  formik.setFieldValue('dueDate', date);\n                }}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Description</InputLabel>\n              <TextField\n                fullWidth\n                id=\"description\"\n                name=\"description\"\n                multiline\n                rows={3}\n                value={formik.values.description}\n                onChange={formik.handleChange}\n                error={formik.touched.description && Boolean(formik.errors.description)}\n                helperText={formik.touched.description && formik.errors.description}\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>User Story</InputLabel>\n              <FormControl fullWidth>\n                <Select\n                  id=\"storyId\"\n                  name=\"storyId\"\n                  displayEmpty\n                  value={formik.values.storyId}\n                  onChange={formik.handleChange}\n                  inputProps={{ 'aria-label': 'Without label' }}\n                >\n                  {userStory.map((story, index) => (\n                    <MenuItem key={index} value={story.id}>\n                      {story.id} - {story.title}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>State</InputLabel>\n              <FormControl fullWidth>\n                <Select\n                  id=\"columnId\"\n                  name=\"columnId\"\n                  displayEmpty\n                  value={formik.values.columnId}\n                  onChange={formik.handleChange}\n                  inputProps={{ 'aria-label': 'Without label' }}\n                >\n                  {columns.map((column, index) => (\n                    <MenuItem key={index} value={column.id}>\n                      {column.title}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <InputLabel sx={{ mt: 0.5 }}>Attachments:</InputLabel>\n              </Grid>\n              <Grid item xs={12}>\n                <UploadMultiFile\n                  type={DropzopType.STANDARD}\n                  showList={true}\n                  setFieldValue={formik.setFieldValue}\n                  files={formik.values.files}\n                  error={formik.touched.files && !!formik.errors.files}\n                />\n              </Grid>\n              {formik.touched.files && formik.errors.files && (\n                <Grid item xs={12}>\n                  <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                    {formik.errors.files}\n                  </FormHelperText>\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n\n          <Grid item xs={12}>\n            <AnimateButton>\n              <Button fullWidth variant=\"contained\" type=\"submit\">\n                Save\n              </Button>\n            </AnimateButton>\n          </Grid>\n        </Grid>\n      </LocalizationProvider>\n    </form>\n  );\n}\n\nEditItem.propTypes = {\n  item: PropTypes.any,\n  profiles: PropTypes.array,\n  userStory: PropTypes.array,\n  columns: PropTypes.array,\n  handleDrawerOpen: PropTypes.func\n};\n","size_bytes":9980},"src/pages/widget/chart.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport MenuItem from '@mui/material/MenuItem';\nimport Stack from '@mui/material/Stack';\nimport Select from '@mui/material/Select';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\nimport SalesChart from 'sections/dashboard/SalesChart';\nimport AcquisitionChannels from 'sections/dashboard/analytics/AcquisitionChannels';\n\nimport EcommerceDataCard from 'components/cards/statistics/EcommerceDataCard';\nimport EcommerceDataChart from 'sections/widget/chart/EcommerceDataChart';\n\nimport RepeatCustomerRate from 'sections/widget/chart/RepeatCustomerRate';\nimport ProjectOverview from 'sections/widget/chart/ProjectOverview';\nimport EcommerceIncome from 'sections/widget/chart/EcommerceIncome';\nimport EcommerceRadial from 'sections/widget/chart/EcommerceRadial';\n\nimport NewOrders from 'sections/widget/chart/NewOrders';\nimport NewUsers from 'sections/widget/chart/NewUsers';\nimport Visitors from 'sections/widget/chart/Visitors';\n\nimport ProjectAnalytics from 'sections/widget/chart/ProjectAnalytics';\n\nimport ProductOverview from 'sections/widget/chart/ProductOverview';\nimport TotalIncome from 'sections/widget/chart/TotalIncome';\n\nimport LanguagesSupport from 'sections/widget/chart/LanguagesSupport';\nimport MonthlyReport from 'sections/widget/chart/MonthlyReport';\n\nimport IncomeChart from 'sections/dashboard/analytics/IncomeChart';\n\n// assets\nimport { ArrowDown, ArrowDown2, ArrowUp, Book, Calendar, CloudChange, DocumentDownload, Wallet3 } from 'iconsax-react';\n\n// ==============================|| WIDGET - CHARTS ||============================== //\n\nexport default function WidgetChart() {\n  const theme = useTheme();\n  const [slot, setSlot] = useState('week');\n  const [quantity, setQuantity] = useState('By volume');\n\n  const handleQuantity = (e) => {\n    setQuantity(e.target.value);\n  };\n\n  const handleChange = (event, newAlignment) => {\n    if (newAlignment) setSlot(newAlignment);\n  };\n\n  return (\n    <Grid container rowSpacing={4.5} columnSpacing={3}>\n      {/* row 1 */}\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"All Earnings\"\n          count=\"$3200\"\n          iconPrimary={<Wallet3 />}\n          percentage={\n            <Typography color=\"primary\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowUp size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.primary.main} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Page Views\"\n          count=\"290+\"\n          color=\"warning\"\n          iconPrimary={<Book color={theme.palette.warning.main} />}\n          percentage={\n            <Typography color=\"warning.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowDown size={16} style={{ transform: 'rotate(-45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.warning.main} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Total task\"\n          count=\"1468\"\n          color=\"success\"\n          iconPrimary={<Calendar color={theme.palette.success.main} />}\n          percentage={\n            <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowUp size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.success.main} />\n        </EcommerceDataCard>\n      </Grid>\n      <Grid item xs={12} sm={6} lg={3}>\n        <EcommerceDataCard\n          title=\"Download\"\n          count=\"$300\"\n          color=\"error\"\n          iconPrimary={<CloudChange color={theme.palette.error.dark} />}\n          percentage={\n            <Typography color=\"error.dark\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <ArrowDown size={16} style={{ transform: 'rotate(45deg)' }} /> 30.6%\n            </Typography>\n          }\n        >\n          <EcommerceDataChart color={theme.palette.error.dark} />\n        </EcommerceDataCard>\n      </Grid>\n\n      {/* row 2 */}\n      <Grid item xs={12} md={8} lg={9}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <RepeatCustomerRate />\n          </Grid>\n          <Grid item xs={12}>\n            <ProjectOverview />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <EcommerceIncome />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Stack spacing={3}>\n              <EcommerceRadial color={theme.palette.primary.main} />\n              <EcommerceRadial color={theme.palette.error.dark} />\n            </Stack>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} md={4} lg={3}>\n        <Stack spacing={3}>\n          <NewOrders />\n          <NewUsers />\n          <Visitors />\n        </Stack>\n      </Grid>\n\n      {/* row 3 */}\n      <Grid item xs={12}>\n        <ProjectAnalytics />\n      </Grid>\n\n      {/* row 4 */}\n      <Grid item xs={12} md={6}>\n        <ProductOverview />\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <TotalIncome />\n      </Grid>\n\n      {/* row 5 */}\n      <Grid item xs={12} md={4}>\n        <LanguagesSupport />\n      </Grid>\n      <Grid item xs={12} md={8}>\n        <MonthlyReport />\n      </Grid>\n\n      {/* row 6 */}\n      <Grid item xs={12} md={7} lg={8}>\n        <SalesChart />\n      </Grid>\n      <Grid item xs={12} md={5} lg={4}>\n        <AcquisitionChannels />\n      </Grid>\n\n      {/* row 7 */}\n      <Grid item xs={12} md={7} lg={8}>\n        <MainCard>\n          <Grid container>\n            <Grid item xs={12} sm={6}>\n              <Stack alignItems={{ xs: 'center', sm: 'flex-start' }}>\n                <Typography variant=\"h5\">Income Overview</Typography>\n                <Stack direction=\"row\" alignItems=\"center\" sx={{ mt: 2 }}>\n                  <ArrowDown2 variant=\"Bold\" style={{ color: theme.palette.error.main, paddingRight: '4px' }} />\n                  <Typography color={theme.palette.error.main}>$1,12,900 (45.67%)</Typography>\n                </Stack>\n                <Typography color=\"text.secondary\" sx={{ display: 'block' }}>\n                  Compare to : 01 Dec 2021-08 Jan 2022\n                </Typography>\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\" justifyContent={{ xs: 'center', sm: 'flex-end' }} sx={{ mr: 2 }}>\n                <ToggleButtonGroup exclusive onChange={handleChange} value={slot}>\n                  <ToggleButton disabled={slot === 'week'} value=\"week\" sx={{ px: 2, py: 0.5 }}>\n                    Week\n                  </ToggleButton>\n                  <ToggleButton disabled={slot === 'month'} value=\"month\" sx={{ px: 2, py: 0.5 }}>\n                    Month\n                  </ToggleButton>\n                </ToggleButtonGroup>\n                <Select value={quantity} onChange={handleQuantity} size=\"small\">\n                  <MenuItem value=\"By volume\">By Volume</MenuItem>\n                  <MenuItem value=\"By margin\">By Margin</MenuItem>\n                  <MenuItem value=\"By sales\">By Sales</MenuItem>\n                </Select>\n                <IconButton\n                  sx={{\n                    border: '1px solid',\n                    borderColor: theme.palette.secondary[400],\n                    '&:hover': { backgroundColor: 'transparent' }\n                  }}\n                >\n                  <DocumentDownload style={{ color: theme.palette.secondary.darker }} />\n                </IconButton>\n              </Stack>\n            </Grid>\n          </Grid>\n          <Box sx={{ pt: 1 }}>\n            <IncomeChart slot={slot} quantity={quantity} />\n          </Box>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":8388},"src/themes/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport StyledEngineProvider from '@mui/material/StyledEngineProvider';\n\n// project-imports\nimport Palette from './palette';\nimport Typography from './typography';\nimport CustomShadows from './shadows';\nimport componentsOverride from './overrides';\n\nimport { HEADER_HEIGHT, ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport getWindowScheme from 'utils/getWindowScheme';\n\n// ==============================|| DEFAULT THEME - MAIN  ||============================== //\n\nexport default function ThemeCustomization({ children }) {\n  const { themeDirection, mode, presetColor, fontFamily, themeContrast } = useConfig();\n  let themeMode = mode;\n  if (themeMode === ThemeMode.AUTO) {\n    const autoMode = getWindowScheme();\n    if (autoMode) {\n      themeMode = ThemeMode.DARK;\n    } else {\n      themeMode = ThemeMode.LIGHT;\n    }\n  }\n\n  const theme = useMemo(() => Palette(themeMode, presetColor, themeContrast), [themeMode, presetColor, themeContrast]);\n\n  const themeTypography = useMemo(\n    () => Typography(fontFamily),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fontFamily]\n  );\n  const themeCustomShadows = useMemo(() => CustomShadows(theme), [theme]);\n\n  const themeOptions = useMemo(\n    () => ({\n      breakpoints: {\n        values: {\n          xs: 0,\n          sm: 768,\n          md: 1024,\n          lg: 1266,\n          xl: 1440\n        }\n      },\n      direction: themeDirection,\n      mixins: {\n        toolbar: {\n          minHeight: HEADER_HEIGHT,\n          paddingTop: 8,\n          paddingBottom: 8\n        }\n      },\n      palette: theme.palette,\n      shape: {\n        borderRadius: 8\n      },\n      customShadows: themeCustomShadows,\n      typography: themeTypography\n    }),\n    [themeDirection, theme, themeTypography, themeCustomShadows]\n  );\n\n  const themes = createTheme(themeOptions);\n  themes.components = componentsOverride(themes);\n\n  return (\n    <StyledEngineProvider injectFirst>\n      <ThemeProvider theme={themes}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </StyledEngineProvider>\n  );\n}\n\nThemeCustomization.propTypes = { children: PropTypes.node };\n","size_bytes":2355},"src/themes/overrides/Popover.js":{"content":"// ==============================|| OVERRIDES - POPOVER ||============================== //\n\nexport default function Popover(theme) {\n  return {\n    MuiPopover: {\n      styleOverrides: {\n        paper: {\n          boxShadow: theme.customShadows.z1\n        }\n      }\n    }\n  };\n}\n","size_bytes":279},"src/data/countries.js":{"content":"// ==============================|| DATA - COUNTRIES ||============================== //\n\nconst countries = [\n  { code: 'AD', label: 'Andorra', phone: '+376' },\n  {\n    code: 'AE',\n    label: 'United Arab Emirates',\n    phone: '+971'\n  },\n  { code: 'AF', label: 'Afghanistan', phone: '+93' },\n  {\n    code: 'AG',\n    label: 'Antigua and Barbuda',\n    phone: '+1-268'\n  },\n  { code: 'AI', label: 'Anguilla', phone: '+1-264' },\n  { code: 'AL', label: 'Albania', phone: '+355' },\n  { code: 'AM', label: 'Armenia', phone: '+374' },\n  { code: 'AO', label: 'Angola', phone: '+244' },\n  { code: 'AQ', label: 'Antarctica', phone: '+672' },\n  { code: 'AR', label: 'Argentina', phone: '+54' },\n  { code: 'AS', label: 'American Samoa', phone: '+1-684' },\n  { code: 'AT', label: 'Austria', phone: '+43' },\n  {\n    code: 'AU',\n    label: 'Australia',\n    phone: '+61',\n    suggested: true\n  },\n  { code: 'AW', label: 'Aruba', phone: '+297' },\n  { code: 'AZ', label: 'Azerbaijan', phone: '+994' },\n  {\n    code: 'BA',\n    label: 'Bosnia and Herzegovina',\n    phone: '+387'\n  },\n  { code: 'BB', label: 'Barbados', phone: '+1-246' },\n  { code: 'BD', label: 'Bangladesh', phone: '+880' },\n  { code: 'BE', label: 'Belgium', phone: '+32' },\n  { code: 'BF', label: 'Burkina Faso', phone: '+226' },\n  { code: 'BG', label: 'Bulgaria', phone: '+359' },\n  { code: 'BH', label: 'Bahrain', phone: '+973' },\n  { code: 'BI', label: 'Burundi', phone: '+257' },\n  { code: 'BJ', label: 'Benin', phone: '+229' },\n  { code: 'BL', label: 'Saint Barthelemy', phone: '+590' },\n  { code: 'BM', label: 'Bermuda', phone: '+1-441' },\n  { code: 'BN', label: 'Brunei Darussalam', phone: '+673' },\n  { code: 'BO', label: 'Bolivia', phone: '+591' },\n  { code: 'BR', label: 'Brazil', phone: '+55' },\n  { code: 'BS', label: 'Bahamas', phone: '+1-242' },\n  { code: 'BT', label: 'Bhutan', phone: '+975' },\n  { code: 'BW', label: 'Botswana', phone: '+267' },\n  { code: 'BY', label: 'Belarus', phone: '+375' },\n  { code: 'BZ', label: 'Belize', phone: '+501' },\n  {\n    code: 'CD',\n    label: 'Congo, Democratic Republic of the',\n    phone: '+243'\n  },\n  {\n    code: 'CF',\n    label: 'Central African Republic',\n    phone: '+236'\n  },\n  {\n    code: 'CG',\n    label: 'Congo, Republic of the',\n    phone: '+242'\n  },\n  { code: 'CH', label: 'Switzerland', phone: '+41' },\n  { code: 'CI', label: \"Cote d'Ivoire\", phone: '+225' },\n  { code: 'CK', label: 'Cook Islands', phone: '+682' },\n  { code: 'CL', label: 'Chile', phone: '+56' },\n  { code: 'CM', label: 'Cameroon', phone: '+237' },\n  { code: 'CN', label: 'China', phone: '+86' },\n  { code: 'CO', label: 'Colombia', phone: '+57' },\n  { code: 'CR', label: 'Costa Rica', phone: '+506' },\n  { code: 'CU', label: 'Cuba', phone: '+53' },\n  { code: 'CV', label: 'Cape Verde', phone: '+238' },\n  { code: 'CW', label: 'Curacao', phone: '+599' },\n  { code: 'CY', label: 'Cyprus', phone: '+357' },\n  { code: 'CZ', label: 'Czech Republic', phone: '+420' },\n  {\n    code: 'DE',\n    label: 'Germany',\n    phone: '+49',\n    suggested: true\n  },\n  { code: 'DJ', label: 'Djibouti', phone: '+253' },\n  { code: 'DK', label: 'Denmark', phone: '+45' },\n  { code: 'DM', label: 'Dominica', phone: '+1-767' },\n  {\n    code: 'DO',\n    label: 'Dominican Republic',\n    phone: '+1-809'\n  },\n  { code: 'DZ', label: 'Algeria', phone: '+213' },\n  { code: 'EC', label: 'Ecuador', phone: '+593' },\n  { code: 'EE', label: 'Estonia', phone: '+372' },\n  { code: 'EG', label: 'Egypt', phone: '+20' },\n  { code: 'ER', label: 'Eritrea', phone: '+291' },\n  { code: 'ES', label: 'Spain', phone: '+34' },\n  { code: 'ET', label: 'Ethiopia', phone: '+251' },\n  { code: 'FI', label: 'Finland', phone: '+358' },\n  { code: 'FJ', label: 'Fiji', phone: '+679' },\n  {\n    code: 'FK',\n    label: 'Falkland Islands (Malvinas)',\n    phone: '+500'\n  },\n  {\n    code: 'FM',\n    label: 'Micronesia, Federated States of',\n    phone: '+691'\n  },\n  { code: 'FO', label: 'Faroe Islands', phone: '+298' },\n  {\n    code: 'FR',\n    label: 'France',\n    phone: '+33',\n    suggested: true\n  },\n  { code: 'GA', label: 'Gabon', phone: '+241' },\n  { code: 'GB', label: 'United Kingdom', phone: '+44' },\n  { code: 'GD', label: 'Grenada', phone: '+1-473' },\n  { code: 'GE', label: 'Georgia', phone: '+995' },\n  { code: 'GF', label: 'French Guiana', phone: '+594' },\n  { code: 'GH', label: 'Ghana', phone: '+233' },\n  { code: 'GI', label: 'Gibraltar', phone: '+350' },\n  { code: 'GL', label: 'Greenland', phone: '+299' },\n  { code: 'GM', label: 'Gambia', phone: '+220' },\n  { code: 'GN', label: 'Guinea', phone: '+224' },\n  { code: 'GQ', label: 'Equatorial Guinea', phone: '+240' },\n  { code: 'GR', label: 'Greece', phone: '+30' },\n  { code: 'GT', label: 'Guatemala', phone: '+502' },\n  { code: 'GU', label: 'Guam', phone: '+1-671' },\n  { code: 'GW', label: 'Guinea-Bissau', phone: '+245' },\n  { code: 'GY', label: 'Guyana', phone: '+592' },\n  { code: 'HK', label: 'Hong Kong', phone: '+852' },\n  { code: 'HN', label: 'Honduras', phone: '+504' },\n  { code: 'HR', label: 'Croatia', phone: '+385' },\n  { code: 'HT', label: 'Haiti', phone: '+509' },\n  { code: 'HU', label: 'Hungary', phone: '3+6' },\n  { code: 'ID', label: 'Indonesia', phone: '+62' },\n  { code: 'IE', label: 'Ireland', phone: '+353' },\n  { code: 'IL', label: 'Israel', phone: '+972' },\n  { code: 'IN', label: 'India', phone: '+91' },\n  {\n    code: 'IO',\n    label: 'British Indian Ocean Territory',\n    phone: '+246'\n  },\n  { code: 'IQ', label: 'Iraq', phone: '+964' },\n  {\n    code: 'IR',\n    label: 'Iran, Islamic Republic of',\n    phone: '+98'\n  },\n  { code: 'IS', label: 'Iceland', phone: '+354' },\n  { code: 'IT', label: 'Italy', phone: '+39' },\n  { code: 'JM', label: 'Jamaica', phone: '+1-876' },\n  { code: 'JO', label: 'Jordan', phone: '+962' },\n  {\n    code: 'JP',\n    label: 'Japan',\n    phone: '+81',\n    suggested: true\n  },\n  { code: 'KE', label: 'Kenya', phone: '+254' },\n  { code: 'KG', label: 'Kyrgyzstan', phone: '+996' },\n  { code: 'KH', label: 'Cambodia', phone: '+855' },\n  { code: 'KI', label: 'Kiribati', phone: '+686' },\n  { code: 'KM', label: 'Comoros', phone: '+269' },\n  {\n    code: 'KN',\n    label: 'Saint Kitts and Nevis',\n    phone: '+1-869'\n  },\n  {\n    code: 'KP',\n    label: \"Korea, Democratic People's Republic of\",\n    phone: '+850'\n  },\n  { code: 'KR', label: 'Korea, Republic of', phone: '+82' },\n  { code: 'KW', label: 'Kuwait', phone: '+965' },\n  { code: 'KY', label: 'Cayman Islands', phone: '+1-345' },\n  {\n    code: 'LA',\n    label: \"Lao People's Democratic Republic\",\n    phone: '+856'\n  },\n  { code: 'LB', label: 'Lebanon', phone: '+961' },\n  { code: 'LC', label: 'Saint Lucia', phone: '+1-758' },\n  { code: 'LI', label: 'Liechtenstein', phone: '+423' },\n  { code: 'LK', label: 'Sri Lanka', phone: '+94' },\n  { code: 'LR', label: 'Liberia', phone: '+231' },\n  { code: 'LS', label: 'Lesotho', phone: '+266' },\n  { code: 'LT', label: 'Lithuania', phone: '+370' },\n  { code: 'LU', label: 'Luxembourg', phone: '+352' },\n  { code: 'LV', label: 'Latvia', phone: '+371' },\n  { code: 'LY', label: 'Libya', phone: '+218' },\n  { code: 'MA', label: 'Morocco', phone: '+212' },\n  { code: 'MC', label: 'Monaco', phone: '+377' },\n  {\n    code: 'MD',\n    label: 'Moldova, Republic of',\n    phone: '+373'\n  },\n  { code: 'ME', label: 'Montenegro', phone: '+382' },\n  { code: 'MG', label: 'Madagascar', phone: '+261' },\n  { code: 'MH', label: 'Marshall Islands', phone: '+692' },\n  {\n    code: 'MK',\n    label: 'Macedonia, the Former Yugoslav Republic of',\n    phone: '+389'\n  },\n  { code: 'ML', label: 'Mali', phone: '+223' },\n  { code: 'MM', label: 'Myanmar', phone: '+95' },\n  { code: 'MN', label: 'Mongolia', phone: '+976' },\n  { code: 'MO', label: 'Macao', phone: '+853' },\n  {\n    code: 'MP',\n    label: 'Northern Mariana Islands',\n    phone: '+1-670'\n  },\n  { code: 'MQ', label: 'Martinique', phone: '+596' },\n  { code: 'MR', label: 'Mauritania', phone: '+222' },\n  { code: 'MS', label: 'Montserrat', phone: '+1-664' },\n  { code: 'MT', label: 'Malta', phone: '+356' },\n  { code: 'MU', label: 'Mauritius', phone: '+230' },\n  { code: 'MV', label: 'Maldives', phone: '+960' },\n  { code: 'MW', label: 'Malawi', phone: '+265' },\n  { code: 'MX', label: 'Mexico', phone: '+52' },\n  { code: 'MY', label: 'Malaysia', phone: '+60' },\n  { code: 'MZ', label: 'Mozambique', phone: '+258' },\n  { code: 'NA', label: 'Namibia', phone: '+264' },\n  { code: 'NC', label: 'New Caledonia', phone: '+687' },\n  { code: 'NE', label: 'Niger', phone: '+227' },\n  { code: 'NG', label: 'Nigeria', phone: '+234' },\n  { code: 'NI', label: 'Nicaragua', phone: '+505' },\n  { code: 'NL', label: 'Netherlands', phone: '+31' },\n  { code: 'NO', label: 'Norway', phone: '+47' },\n  { code: 'NP', label: 'Nepal', phone: '+977' },\n  { code: 'NR', label: 'Nauru', phone: '+674' },\n  { code: 'NU', label: 'Niue', phone: '+683' },\n  { code: 'NZ', label: 'New Zealand', phone: '+64' },\n  { code: 'OM', label: 'Oman', phone: '+968' },\n  { code: 'PA', label: 'Panama', phone: '+507' },\n  { code: 'PE', label: 'Peru', phone: '+51' },\n  { code: 'PF', label: 'French Polynesia', phone: '+689' },\n  { code: 'PG', label: 'Papua New Guinea', phone: '+675' },\n  { code: 'PH', label: 'Philippines', phone: '+63' },\n  { code: 'PK', label: 'Pakistan', phone: '+92' },\n  { code: 'PL', label: 'Poland', phone: '+48' },\n  {\n    code: 'PM',\n    label: 'Saint Pierre and Miquelon',\n    phone: '+508'\n  },\n  { code: 'PN', label: 'Pitcairn', phone: '+870' },\n  {\n    code: 'PS',\n    label: 'Palestine, State of',\n    phone: '+970'\n  },\n  { code: 'PT', label: 'Portugal', phone: '+351' },\n  { code: 'PW', label: 'Palau', phone: '+680' },\n  { code: 'PY', label: 'Paraguay', phone: '+595' },\n  { code: 'QA', label: 'Qatar', phone: '+974' },\n  { code: 'RO', label: 'Romania', phone: '+40' },\n  { code: 'RS', label: 'Serbia', phone: '+381' },\n  { code: 'RU', label: 'Russian Federation', phone: '+7' },\n  { code: 'RW', label: 'Rwanda', phone: '+250' },\n  { code: 'SA', label: 'Saudi Arabia', phone: '+966' },\n  { code: 'SB', label: 'Solomon Islands', phone: '+677' },\n  { code: 'SC', label: 'Seychelles', phone: '+248' },\n  { code: 'SD', label: 'Sudan', phone: '+249' },\n  { code: 'SE', label: 'Sweden', phone: '+46' },\n  { code: 'SG', label: 'Singapore', phone: '+65' },\n  { code: 'SH', label: 'Saint Helena', phone: '+290' },\n  { code: 'SI', label: 'Slovenia', phone: '+386' },\n  { code: 'SK', label: 'Slovakia', phone: '+421' },\n  { code: 'SL', label: 'Sierra Leone', phone: '+232' },\n  { code: 'SM', label: 'San Marino', phone: '+378' },\n  { code: 'SN', label: 'Senegal', phone: '+221' },\n  { code: 'SO', label: 'Somalia', phone: '+252' },\n  { code: 'SR', label: 'Suriname', phone: '+597' },\n  { code: 'SS', label: 'South Sudan', phone: '+211' },\n  {\n    code: 'ST',\n    label: 'Sao Tome and Principe',\n    phone: '+239'\n  },\n  { code: 'SV', label: 'El Salvador', phone: '+503' },\n  {\n    code: 'SX',\n    label: 'Sint Maarten (Dutch part)',\n    phone: '+1-721'\n  },\n  {\n    code: 'SY',\n    label: 'Syrian Arab Republic',\n    phone: '+963'\n  },\n  { code: 'SZ', label: 'Swaziland', phone: '+268' },\n  {\n    code: 'TC',\n    label: 'Turks and Caicos Islands',\n    phone: '+1-649'\n  },\n  { code: 'TD', label: 'Chad', phone: '+235' },\n  { code: 'TG', label: 'Togo', phone: '+228' },\n  { code: 'TH', label: 'Thailand', phone: '+66' },\n  { code: 'TJ', label: 'Tajikistan', phone: '+992' },\n  { code: 'TK', label: 'Tokelau', phone: '+690' },\n  { code: 'TL', label: 'Timor-Leste', phone: '+670' },\n  { code: 'TM', label: 'Turkmenistan', phone: '+993' },\n  { code: 'TN', label: 'Tunisia', phone: '+216' },\n  { code: 'TO', label: 'Tonga', phone: '+676' },\n  { code: 'TR', label: 'Turkey', phone: '+90' },\n  {\n    code: 'TT',\n    label: 'Trinidad and Tobago',\n    phone: '+1-868'\n  },\n  { code: 'TV', label: 'Tuvalu', phone: '+688' },\n  {\n    code: 'TW',\n    label: 'Taiwan, Province of China',\n    phone: '+886'\n  },\n  {\n    code: 'TZ',\n    label: 'United Republic of Tanzania',\n    phone: '+255'\n  },\n  { code: 'UA', label: 'Ukraine', phone: '+380' },\n  { code: 'UG', label: 'Uganda', phone: '+256' },\n  {\n    code: 'US',\n    label: 'United States',\n    phone: '+1',\n    suggested: true\n  },\n  { code: 'UY', label: 'Uruguay', phone: '+598' },\n  { code: 'UZ', label: 'Uzbekistan', phone: '+998' },\n  {\n    code: 'VA',\n    label: 'Holy See (Vatican City State)',\n    phone: '+379'\n  },\n  {\n    code: 'VC',\n    label: 'Saint Vincent and the Grenadines',\n    phone: '+1-784'\n  },\n  { code: 'VE', label: 'Venezuela', phone: '+58' },\n  {\n    code: 'VG',\n    label: 'British Virgin Islands',\n    phone: '+1-284'\n  },\n  {\n    code: 'VI',\n    label: 'US Virgin Islands',\n    phone: '+1-340'\n  },\n  { code: 'VN', label: 'Vietnam', phone: '+84' },\n  { code: 'VU', label: 'Vanuatu', phone: '+678' },\n  { code: 'WF', label: 'Wallis and Futuna', phone: '+681' },\n  { code: 'WS', label: 'Samoa', phone: '+685' },\n  { code: 'XK', label: 'Kosovo', phone: '+383' },\n  { code: 'YE', label: 'Yemen', phone: '+967' },\n  { code: 'YT', label: 'Mayotte', phone: '+262' },\n  { code: 'ZA', label: 'South Africa', phone: '+27' },\n  { code: 'ZM', label: 'Zambia', phone: '+260' },\n  { code: 'ZW', label: 'Zimbabwe', phone: '+263' }\n];\n\nexport default countries;\n","size_bytes":13184},"src/layout/Dashboard/Header/HeaderContent/MegaMenuSection.jsx":{"content":"import { useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport CardMedia from '@mui/material/CardMedia';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport List from '@mui/material/List';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport IconButton from 'components/@extended/IconButton';\nimport Transitions from 'components/@extended/Transitions';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { DRAWER_WIDTH, ThemeMode } from 'config';\n\n// assets\nimport { Windows, ArrowRight3 } from 'iconsax-react';\nimport cardBack from 'assets/images/widget/img-dropbox-bg.svg';\nimport imageChart from 'assets/images/mega-menu/chart.svg';\n\n// ==============================|| HEADER CONTENT - MEGA MENU SECTION ||============================== //\n\nexport default function MegaMenuSection() {\n  const theme = useTheme();\n\n  const anchorRef = useRef(null);\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 0.75 }}>\n      <IconButton\n        color=\"secondary\"\n        variant=\"light\"\n        aria-label=\"open profile\"\n        ref={anchorRef}\n        aria-controls={open ? 'profile-grow' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        size=\"large\"\n        sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, ml: { xs: 0, lg: -2 }, p: 1 }}\n      >\n        <Windows variant=\"Bulk\" />\n      </IconButton>\n      <Popper\n        placement=\"bottom\"\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n        popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [-180, 9] } }] }}\n      >\n        {({ TransitionProps }) => (\n          <Transitions type=\"grow\" position=\"top\" in={open} {...TransitionProps}>\n            <Paper\n              sx={{\n                boxShadow: theme.customShadows.z1,\n                minWidth: 750,\n                width: {\n                  md: `calc(100vw - 100px)`,\n                  lg: `calc(100vw - ${DRAWER_WIDTH + 100}px)`,\n                  xl: `calc(100vw - ${DRAWER_WIDTH + 140}px)`\n                },\n                maxWidth: 1024,\n                borderRadius: 1.5\n              }}\n            >\n              <ClickAwayListener onClickAway={handleClose}>\n                <MainCard elevation={0} border={false} content={false}>\n                  <Grid container>\n                    <Grid\n                      item\n                      xs={4}\n                      sx={{\n                        color: 'common.white',\n                        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'primary.400' : 'primary.darker',\n                        position: 'relative',\n                        '&:after': {\n                          content: '\"\"',\n                          background: `url(\"${cardBack}\") 100% / cover no-repeat`,\n                          position: 'absolute',\n                          top: '41%',\n                          left: 0,\n                          right: 0,\n                          bottom: 0,\n                          zIndex: 1,\n                          opacity: 0.5\n                        }\n                      }}\n                    >\n                      <Box sx={{ p: 4.5, pb: 3, position: 'inherit', zIndex: 2 }}>\n                        <Stack sx={{ color: 'background.paper' }}>\n                          <Typography variant=\"h2\" sx={{ fontSize: '1.875rem', mb: 1 }}>\n                            Explore Components\n                          </Typography>\n                          <Typography variant=\"h6\">\n                            Try Able Pro&apos;s component pages to check how it feels and suits as per your need.\n                          </Typography>\n                          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-end\" sx={{ mt: -1 }}>\n                            <AnimateButton>\n                              <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                sx={{\n                                  bgcolor: 'background.paper',\n                                  color: 'text.primary',\n                                  '&:hover': { bgcolor: 'background.paper', color: 'text.primary' },\n                                  zIndex: 2\n                                }}\n                                endIcon={<ArrowRight3 variant=\"Bulk\" color={theme.palette.primary.main} />}\n                                component={Link}\n                                to=\"/components-overview/buttons\"\n                                target=\"_blank\"\n                              >\n                                View All\n                              </Button>\n                            </AnimateButton>\n                            <CardMedia component=\"img\" src={imageChart} alt=\"Chart\" sx={{ mr: -2.5, mb: -2.5, width: 124 }} />\n                          </Stack>\n                        </Stack>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={8}>\n                      <Box\n                        sx={{\n                          p: 4,\n                          '& .MuiList-root': { pb: 0 },\n                          '& .MuiListSubheader-root': { p: 0, pb: 1.5 },\n                          '& .MuiListItemButton-root': {\n                            p: 0.5,\n                            '&:hover': { bgcolor: 'transparent', '& .MuiTypography-root': { color: 'primary.main' } }\n                          },\n                          '& .MuiListItemIcon-root': { minWidth: 16 }\n                        }}\n                      >\n                        <Grid container spacing={6}>\n                          <Grid item xs={4}>\n                            <List\n                              component=\"nav\"\n                              aria-labelledby=\"nested-list-user\"\n                              subheader={\n                                <ListSubheader id=\"nested-list-user\">\n                                  <Typography variant=\"subtitle1\" color=\"text.primary\">\n                                    Authentication\n                                  </Typography>\n                                </ListSubheader>\n                              }\n                            >\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/auth/login\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Login\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/auth/register\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Register\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/auth/reset-password\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Reset Password\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/auth/forgot-password\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Forgot Password\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/auth/code-verification\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Verification Code\" />\n                              </ListItemButton>\n                            </List>\n                          </Grid>\n                          <Grid item xs={4}>\n                            <List\n                              component=\"nav\"\n                              aria-labelledby=\"nested-list-user\"\n                              subheader={\n                                <ListSubheader id=\"nested-list-user\">\n                                  <Typography variant=\"subtitle1\" color=\"text.primary\">\n                                    Other Pages\n                                  </Typography>\n                                </ListSubheader>\n                              }\n                            >\n                              <ListItemButton disableRipple component={Link} to=\"#\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"About us\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} to=\"/contact-us\" target=\"_blank\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Contact us\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} to=\"/price/price1\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Pricing\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} to=\"/apps/profiles/user/payment\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Payment\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/maintenance/under-construction\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Construction\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/maintenance/coming-soon\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Coming Soon\" />\n                              </ListItemButton>\n                            </List>\n                          </Grid>\n                          <Grid item xs={4}>\n                            <List\n                              component=\"nav\"\n                              aria-labelledby=\"nested-list-user\"\n                              subheader={\n                                <ListSubheader id=\"nested-list-user\">\n                                  <Typography variant=\"subtitle1\" color=\"text.primary\">\n                                    SAAS Pages\n                                  </Typography>\n                                </ListSubheader>\n                              }\n                            >\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"/maintenance/404\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"404 Error\" />\n                              </ListItemButton>\n                              <ListItemButton disableRipple component={Link} target=\"_blank\" to=\"\">\n                                <ListItemIcon>\n                                  <Dot size={6} color=\"secondary\" variant=\"outlined\" />\n                                </ListItemIcon>\n                                <ListItemText primary=\"Landing\" />\n                              </ListItemButton>\n                            </List>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </MainCard>\n              </ClickAwayListener>\n            </Paper>\n          </Transitions>\n        )}\n      </Popper>\n    </Box>\n  );\n}\n","size_bytes":14522},"src/pages/apps/calendar.jsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport Tooltip from '@mui/material/Tooltip';\nimport SpeedDial from '@mui/material/SpeedDial';\n\n// third-party\nimport FullCalendar from '@fullcalendar/react';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport timelinePlugin from '@fullcalendar/timeline';\n\n// project imports\nimport { PopupTransition } from 'components/@extended/Transitions';\nimport CalendarStyled from 'sections/apps/calendar/CalendarStyled';\nimport Toolbar from 'sections/apps/calendar/Toolbar';\nimport AddEventForm from 'sections/apps/calendar/AddEventForm';\n\nimport { useGetEvents, updateEvent } from 'api/calender';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// ==============================|| CALENDAR - MAIN ||============================== //\n\nexport default function Calendar() {\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState();\n  const [calendarView, setCalendarView] = useState();\n  const [date, setDate] = useState(new Date());\n  const [selectedRange, setSelectedRange] = useState(null);\n  const calendarRef = useRef(null);\n  const { events } = useGetEvents();\n\n  useEffect(() => {\n    const calendarEl = calendarRef.current;\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      const newView = matchDownSM ? 'listWeek' : 'dayGridMonth';\n      calendarApi.changeView(newView);\n      setCalendarView(newView);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matchDownSM]);\n\n  // calendar toolbar events\n  const handleDateToday = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.today();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleViewChange = (newView) => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.changeView(newView);\n      setCalendarView(newView);\n    }\n  };\n\n  const handleDatePrev = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.prev();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleDateNext = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.next();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  // calendar events\n  const handleRangeSelect = (arg) => {\n    const calendarEl = calendarRef.current;\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.unselect();\n    }\n\n    setSelectedRange({ start: arg.start, end: arg.end });\n    setModalOpen(true);\n  };\n\n  const handleEventSelect = (arg) => {\n    if (arg?.event?.id) {\n      const event = events.find((event) => event.id === arg.event.id);\n      setSelectedEvent(event);\n    }\n\n    setModalOpen(true);\n  };\n\n  const handleEventUpdate = async ({ event }) => {\n    await updateEvent(event.id, {\n      allDay: event.allDay,\n      start: event.start,\n      end: event.end\n    });\n    setModalOpen(true);\n  };\n\n  const modalCallback = (openModal) => {\n    // open/close modal based on dialog state\n    if (isModalOpen) {\n      setSelectedEvent(undefined);\n    }\n    setModalOpen(openModal);\n  };\n\n  const handleModal = () => {\n    if (isModalOpen) {\n      setSelectedEvent(undefined);\n    }\n    setModalOpen(!isModalOpen);\n  };\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <CalendarStyled>\n        <Toolbar\n          date={date}\n          view={calendarView}\n          onClickNext={handleDateNext}\n          onClickPrev={handleDatePrev}\n          onClickToday={handleDateToday}\n          onChangeView={handleViewChange}\n        />\n\n        <FullCalendar\n          weekends\n          editable\n          droppable\n          selectable\n          events={events}\n          ref={calendarRef}\n          rerenderDelay={10}\n          initialDate={date}\n          initialView={calendarView}\n          dayMaxEventRows={3}\n          eventDisplay=\"block\"\n          headerToolbar={false}\n          allDayMaintainDuration\n          eventResizableFromStart\n          select={handleRangeSelect}\n          eventDrop={handleEventUpdate}\n          eventClick={handleEventSelect}\n          eventResize={handleEventUpdate}\n          height={matchDownSM ? 'auto' : 720}\n          plugins={[listPlugin, dayGridPlugin, timelinePlugin, timeGridPlugin, interactionPlugin]}\n        />\n      </CalendarStyled>\n\n      {/* Dialog renders its body even if not open */}\n      <Dialog\n        maxWidth=\"sm\"\n        TransitionComponent={PopupTransition}\n        fullWidth\n        onClose={handleModal}\n        open={isModalOpen}\n        sx={{ '& .MuiDialog-paper': { p: 0, bgcolor: 'secondary.lighter' } }}\n      >\n        <AddEventForm modalCallback={modalCallback} event={selectedEvent} range={selectedRange} onCancel={handleModal} />\n      </Dialog>\n      <Tooltip title=\"Add New Event\">\n        <SpeedDial\n          ariaLabel=\"add-event-fab\"\n          sx={{ display: 'inline-flex', position: 'sticky', bottom: 24, left: '100%', transform: 'translate(-50%, -50% )' }}\n          icon={<Add />}\n          onClick={handleModal}\n        />\n      </Tooltip>\n    </Box>\n  );\n}\n","size_bytes":5687},"src/themes/overrides/TableRow.js":{"content":"// ==============================|| OVERRIDES - TABLE ROW ||============================== //\n\nexport default function TableRow() {\n  return {\n    MuiTableRow: {\n      styleOverrides: {\n        root: {\n          '&:last-of-type': {\n            '& .MuiTableCell-root': {\n              borderBottom: 'none'\n            }\n          },\n          '& .MuiTableCell-root': {\n            '&:last-of-type': {\n              paddingRight: 24\n            },\n            '&:first-of-type': {\n              paddingLeft: 24\n            }\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":566},"src/pages/tables/react-table/pagination.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useReactTable, getCoreRowModel, getPaginationRowModel, flexRender } from '@tanstack/react-table';\n\n// project-import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport, TablePagination } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ data, columns, top }) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    debugTable: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={top ? 'Pagination at Top' : 'Pagination at Bottom'}\n      content={false}\n      secondary={<CSVExport {...{ data, headers, filename: top ? 'pagination-top.csv' : 'pagination-bottom.csv' }} />}\n    >\n      <ScrollX>\n        <Stack>\n          {top && (\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount\n                }}\n              />\n            </Box>\n          )}\n\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => (\n                      <TableCell key={header.id} {...header.column.columnDef.meta}>\n                        {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {!top && (\n            <>\n              <Divider />\n              <Box sx={{ p: 2 }}>\n                <TablePagination\n                  {...{\n                    setPageSize: table.setPageSize,\n                    setPageIndex: table.setPageIndex,\n                    getState: table.getState,\n                    getPageCount: table.getPageCount\n                  }}\n                />\n              </Box>\n            </>\n          )}\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - PAGINATION ||============================== //\n\nexport default function PaginationTable() {\n  const data = makeData(100);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <ReactTable {...{ data, columns, top: true }} />\n      </Grid>\n      <Grid item xs={12}>\n        <ReactTable {...{ data, columns }} />\n      </Grid>\n    </Grid>\n  );\n}\n\nReactTable.propTypes = { data: PropTypes.array, columns: PropTypes.array, top: PropTypes.bool };\n","size_bytes":5584},"src/sections/components-overview/select/CheckmarksSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport MenuItem from '@mui/material/MenuItem';\nimport Checkbox from '@mui/material/Checkbox';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = { PaperProps: { style: { maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP, width: 250 } } };\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder'\n];\n\n// ==============================|| SELECT - CHECKMARKERS ||============================== //\n\nexport default function CheckmarksSelect() {\n  const [personName, setPersonName] = useState([]);\n\n  const handleChange = (event) => {\n    const {\n      target: { value }\n    } = event;\n    setPersonName(\n      // On autofill we get a the stringified value.\n      typeof value === 'string' ? value.split(',') : value\n    );\n  };\n\n  const checkmarkSelectCodeString = `// CheckmarksSelect.tsx\n<FormControl fullWidth>\n  <InputLabel id=\"demo-multiple-checkbox-label\">Checkmarks</InputLabel>\n  <Select\n    labelId=\"demo-multiple-checkbox-label\"\n    id=\"demo-multiple-checkbox\"\n    multiple\n    value={personName}\n    onChange={handleChange}\n    input={<OutlinedInput placeholder=\"Tag\" />}\n    renderValue={(selected) => selected.join(', ')}\n    MenuProps={MenuProps}\n  >\n    {names.map((name) => (\n      <MenuItem key={name} value={name}>\n        <Checkbox checked={personName.indexOf(name) > -1} />\n        <ListItemText primary={name} />\n      </MenuItem>\n    ))}\n  </Select>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"With Checkmarks\" codeString={checkmarkSelectCodeString}>\n      <FormControl fullWidth>\n        <InputLabel id=\"demo-multiple-checkbox-label\">Checkmarks</InputLabel>\n        <Select\n          labelId=\"demo-multiple-checkbox-label\"\n          id=\"demo-multiple-checkbox\"\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<OutlinedInput placeholder=\"Tag\" />}\n          renderValue={(selected) => selected.join(', ')}\n          MenuProps={MenuProps}\n        >\n          {names.map((name) => (\n            <MenuItem key={name} value={name}>\n              <Checkbox checked={personName.indexOf(name) > -1} />\n              <ListItemText primary={name} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </MainCard>\n  );\n}\n","size_bytes":2756},"src/index.jsx":{"content":"import { createRoot } from 'react-dom/client';\n\n// map\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// fonts\nimport 'assets/fonts/inter/inter.css';\n\n// scroll bar\nimport 'simplebar/dist/simplebar.css';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\n// apex-chart\nimport 'assets/third-party/apex-chart.css';\nimport 'assets/third-party/react-table.css';\n\n// google-fonts\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/700.css';\n\nimport '@fontsource/inter/400.css';\nimport '@fontsource/inter/500.css';\nimport '@fontsource/inter/600.css';\nimport '@fontsource/inter/700.css';\n\nimport '@fontsource/poppins/400.css';\nimport '@fontsource/poppins/500.css';\nimport '@fontsource/poppins/600.css';\nimport '@fontsource/poppins/700.css';\n\nimport '@fontsource/public-sans/400.css';\nimport '@fontsource/public-sans/500.css';\nimport '@fontsource/public-sans/600.css';\nimport '@fontsource/public-sans/700.css';\n\n// project-imports\nimport App from './App';\nimport { ConfigProvider } from 'contexts/ConfigContext';\nimport reportWebVitals from './reportWebVitals';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n// ==============================|| MAIN - REACT DOM RENDER  ||============================== //\n\nroot.render(\n  <ConfigProvider>\n    <App />\n  </ConfigProvider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","size_bytes":1658},"src/api/menu.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// Project-imports\nimport { fetcher } from 'utils/axios';\n\nconst initialState = {\n  isDashboardDrawerOpened: false,\n  isComponentDrawerOpened: true\n};\n\nexport const endpoints = {\n  key: 'api/menu',\n  master: 'master',\n  dashboard: '/dashboard' // server URL\n};\n\nexport function useGetMenu() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.dashboard, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      menu: data?.dashboard,\n      menuLoading: isLoading,\n      menuError: error,\n      menuValidating: isValidating,\n      menuEmpty: !isLoading && !data?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport function useGetMenuMaster() {\n  const { data, isLoading } = useSWR(endpoints.key + endpoints.master, () => initialState, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      menuMaster: data,\n      menuMasterLoading: isLoading\n    }),\n    [data, isLoading]\n  );\n\n  return memoizedValue;\n}\n\nexport function handlerComponentDrawer(isComponentDrawerOpened) {\n  // to update local state based on key\n\n  mutate(\n    endpoints.key + endpoints.master,\n    (currentMenuMaster) => {\n      return { ...currentMenuMaster, isComponentDrawerOpened };\n    },\n    false\n  );\n}\n\nexport function handlerDrawerOpen(isDashboardDrawerOpened) {\n  // to update local state based on key\n\n  mutate(\n    endpoints.key + endpoints.master,\n    (currentMenuMaster) => {\n      return { ...currentMenuMaster, isDashboardDrawerOpened };\n    },\n    false\n  );\n}\n","size_bytes":1803},"src/sections/charts/apexchart/ApexAreaChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst areaChartOptions = {\n  chart: {\n    height: 350,\n    type: 'area'\n  },\n  colors: ['primary.700', 'primary.main'],\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    curve: 'smooth'\n  },\n  xaxis: {\n    type: 'datetime',\n    categories: [\n      '2018-09-19T00:00:00.000Z',\n      '2018-09-19T01:30:00.000Z',\n      '2018-09-19T02:30:00.000Z',\n      '2018-09-19T03:30:00.000Z',\n      '2018-09-19T04:30:00.000Z',\n      '2018-09-19T05:30:00.000Z',\n      '2018-09-19T06:30:00.000Z'\n    ]\n  },\n  tooltip: {\n    x: {\n      format: 'dd/MM/yy HH:mm'\n    }\n  },\n  legend: {\n    show: true,\n    fontFamily: `Inter var`,\n    position: 'bottom',\n    offsetX: 10,\n    offsetY: 10,\n    labels: {\n      useSeriesColors: false\n    },\n    markers: {\n      width: 16,\n      height: 16,\n      radius: 5\n    },\n    itemMargin: {\n      horizontal: 15,\n      vertical: 8\n    }\n  }\n};\n\n// ==============================|| APEXCHART - AREA ||============================== //\n\nexport default function ApexAreaChart() {\n  const theme = useTheme();\n\n  const mode = theme.palette.mode;\n  const line = theme.palette.divider;\n  const { primary, secondary } = theme.palette.text;\n\n  const [series] = useState([\n    {\n      name: 'Series 1',\n      data: [31, 40, 28, 51, 42, 109, 100]\n    },\n    {\n      name: 'Series 2',\n      data: [11, 32, 45, 32, 34, 52, 41]\n    }\n  ]);\n\n  const [options, setOptions] = useState(areaChartOptions);\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary[700], theme.palette.primary.main],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"area\" height={350} />\n    </div>\n  );\n}\n","size_bytes":2492},"src/sections/tables/react-table/VirtualizedRowsTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useRef } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\n// third-party\nimport { flexRender, useReactTable, getCoreRowModel } from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport { CSVExport } from 'components/third-party/react-table';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n\n  const tableContainerRef = useRef(null);\n\n  const { rows } = table.getRowModel();\n  const rowVirtualizer = useVirtualizer({\n    count: rows.length,\n    getScrollElement: () => tableContainerRef.current,\n    estimateSize: () => 34,\n    overscan: 10\n  });\n\n  const virtualRows = rowVirtualizer.getVirtualItems();\n  const totalSize = rowVirtualizer.getTotalSize();\n\n  const paddingTop = virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0;\n  const paddingBottom = virtualRows.length > 0 ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0) : 0;\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      content={false}\n      title=\"Virtualized Rows\"\n      secondary={\n        <CSVExport\n          {...{ data: virtualRows.map((virtualRow) => rows[virtualRow.index].original), headers, filename: 'virtualized-row.csv' }}\n        />\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper} ref={tableContainerRef} sx={{ height: 544, overflow: 'auto' }}>\n          <Table>\n            <TableHead className=\"sticky-header\">\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {paddingTop > 0 && (\n                <TableRow>\n                  <TableCell sx={{ height: `${paddingTop}px`, whiteSpace: 'nowrap' }} />\n                </TableRow>\n              )}\n              {virtualRows.map((virtualRow) => {\n                const row = rows[virtualRow.index];\n                return (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} sx={{ whiteSpace: 'nowrap' }} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                );\n              })}\n              {paddingBottom > 0 && (\n                <TableRow>\n                  <TableCell sx={{ height: `${paddingBottom}px`, whiteSpace: 'nowrap' }} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - VIRTUALIZED ROW ||============================== //\n\nexport default function VirtualizedRowTable() {\n  const data = makeData(100);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Role',\n        accessorKey: 'role'\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: { className: 'cell-right' }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ columns, data }} />;\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5601},"src/sections/apps/profiles/user/TabPassword.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputAdornment from '@mui/material/InputAdornment';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport { openSnackbar } from 'api/snackbar';\nimport { isNumber, isLowercaseChar, isUppercaseChar, isSpecialChar, minLength } from 'utils/password-validation';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// assets\nimport { Eye, EyeSlash, Minus, TickCircle } from 'iconsax-react';\n\n// ==============================|| USER PROFILE - PASSWORD CHANGE ||============================== //\n\nexport default function TabPassword() {\n  const [showOldPassword, setShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleClickShowOldPassword = () => {\n    setShowOldPassword(!showOldPassword);\n  };\n  const handleClickShowNewPassword = () => {\n    setShowNewPassword(!showNewPassword);\n  };\n  const handleClickShowConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <MainCard title=\"Change Password\">\n      <Formik\n        initialValues={{\n          old: '',\n          password: '',\n          confirm: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          old: Yup.string().required('Old Password is required'),\n          password: Yup.string()\n            .required('New Password is required')\n            .matches(\n              /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\n              'Password must contain at least 8 characters, one uppercase, one number and one special case character'\n            ),\n          confirm: Yup.string()\n            .required('Confirm Password is required')\n            .test('confirm', `Passwords don't match.`, (confirm, yup) => yup.parent.password === confirm)\n        })}\n        onSubmit={async (values, { resetForm, setErrors, setStatus, setSubmitting }) => {\n          try {\n            openSnackbar({\n              open: true,\n              message: 'Password changed successfully.',\n              variant: 'alert',\n              alert: { color: 'success' }\n            });\n\n            resetForm();\n            setStatus({ success: false });\n            setSubmitting(false);\n          } catch (err) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item container spacing={3} xs={12} sm={6}>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-old\">Old Password</InputLabel>\n                    <OutlinedInput\n                      placeholder=\"Enter Old Password\"\n                      id=\"password-old\"\n                      type={showOldPassword ? 'text' : 'password'}\n                      value={values.old}\n                      name=\"old\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowOldPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showOldPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-old\"\n                    />\n                  </Stack>\n                  {touched.old && errors.old && (\n                    <FormHelperText error id=\"password-old-helper\">\n                      {errors.old}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-password\">New Password</InputLabel>\n                    <OutlinedInput\n                      placeholder=\"Enter New Password\"\n                      id=\"password-password\"\n                      type={showNewPassword ? 'text' : 'password'}\n                      value={values.password}\n                      name=\"password\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowNewPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showNewPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-password\"\n                    />\n                  </Stack>\n                  {touched.password && errors.password && (\n                    <FormHelperText error id=\"password-password-helper\">\n                      {errors.password}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-confirm\">Confirm Password</InputLabel>\n                    <OutlinedInput\n                      placeholder=\"Enter Confirm Password\"\n                      id=\"password-confirm\"\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      value={values.confirm}\n                      name=\"confirm\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowConfirmPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showConfirmPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-confirm\"\n                    />\n                  </Stack>\n                  {touched.confirm && errors.confirm && (\n                    <FormHelperText error id=\"password-confirm-helper\">\n                      {errors.confirm}\n                    </FormHelperText>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box sx={{ p: { xs: 0, sm: 2, md: 4, lg: 5 } }}>\n                  <Typography variant=\"h5\">New password must contain:</Typography>\n                  <List sx={{ p: 0, mt: 1 }}>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: minLength(values.password) ? 'success.main' : 'inherit' }}>\n                        {minLength(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 8 characters\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isLowercaseChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isLowercaseChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 lower letter (a-z)\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isUppercaseChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isUppercaseChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 uppercase letter (A-Z)\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isNumber(values.password) ? 'success.main' : 'inherit' }}>\n                        {isNumber(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 number (0-9)\" />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon sx={{ color: isSpecialChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isSpecialChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 special characters\" />\n                    </ListItem>\n                  </List>\n                </Box>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                  <Button variant=\"outlined\" color=\"secondary\">\n                    Cancel\n                  </Button>\n                  <Button disabled={isSubmitting || Object.keys(errors).length !== 0} type=\"submit\" variant=\"contained\">\n                    Save\n                  </Button>\n                </Stack>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </MainCard>\n  );\n}\n","size_bytes":10964},"src/sections/forms/edit-forms/team/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  console.log(data.imageLabelSrc);\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Full Name of member\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.fullName}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.job}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Portrait image of member\n            </Typography>\n            <ImageDisplay file={data.imageSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Facebook link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.facebook}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Linkedin link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.linkedin}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Twitter link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.socialMedia?.twitter}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":3034},"src/utils/getDropzoneData.js":{"content":"// ==============================|| UPLOAD - DETAILS  ||============================== //\n\nexport default function getDropzoneData(file, index) {\n  if (typeof file === 'string') {\n    return {\n      key: index ? `${file}-${index}` : file,\n      preview: file\n    };\n  }\n\n  return {\n    key: index ? `${file.name}-${index}` : file.name,\n    name: file.name,\n    size: file.size,\n    path: file.path,\n    type: file.type,\n    preview: file.preview,\n    lastModified: file.lastModified,\n    lastModifiedDate: file.lastModifiedDate\n  };\n}\n","size_bytes":535},"src/sections/components-overview/date-time-picker/NativePickers.jsx":{"content":"// material-ui\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - NATIVE ||============================== //\n\nexport default function NativePickers() {\n  const nativeDatepickerCodeString = `<TextField\n  id=\"date\"\n  placeholder=\"Birthday\"\n  type=\"date\"\n  defaultValue=\"2017-05-24\"\n  sx={{ width: 220 }}\n  InputLabelProps={{\n    shrink: true\n  }}\n/>\n<TextField\n  id=\"time\"\n  placeholder=\"Alarm Clock\"\n  type=\"time\"\n  defaultValue=\"07:30\"\n  InputLabelProps={{\n    shrink: true\n  }}\n  inputProps={{\n    step: 300 // 5 min\n  }}\n  sx={{ width: 150 }}\n/>\n<TextField\n  id=\"datetime-local\"\n  placeholder=\"Next Appointment\"\n  type=\"datetime-local\"\n  defaultValue=\"2017-05-24T10:30\"\n  sx={{ width: 250 }}\n  InputLabelProps={{\n    shrink: true\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Native Picker\" codeString={nativeDatepickerCodeString}>\n      <Stack component=\"form\" noValidate spacing={3}>\n        <TextField\n          id=\"date\"\n          placeholder=\"Birthday\"\n          type=\"date\"\n          defaultValue=\"2017-05-24\"\n          sx={{ width: 220 }}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <TextField\n          id=\"time\"\n          placeholder=\"Alarm Clock\"\n          type=\"time\"\n          defaultValue=\"07:30\"\n          InputLabelProps={{\n            shrink: true\n          }}\n          inputProps={{\n            step: 300 // 5 min\n          }}\n          sx={{ width: 150 }}\n        />\n        <TextField\n          id=\"datetime-local\"\n          placeholder=\"Next Appointment\"\n          type=\"datetime-local\"\n          defaultValue=\"2017-05-24T10:30\"\n          sx={{ width: 250 }}\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":1891},"src/sections/apps/invoice/InvoiceCard.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { ArchiveBook, CloseCircle, DocumentText, DollarCircle, FilterSquare, ShoppingBag } from 'iconsax-react';\n\n// ==============================|| INVOICE - CARD ||============================== //\n\nexport default function InvoiceCard() {\n  return (\n    <MainCard sx={{ height: '100%' }}>\n      <Grid container spacing={3}>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard content={false} sx={{ py: 2.5 }}>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\">\n                <DocumentText variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                All Invoices\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\" color=\"info\">\n                <ArchiveBook variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Reports\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\" color=\"success\">\n                <DollarCircle variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Paid\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\" color=\"warning\">\n                <FilterSquare variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Pending\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\" color=\"error\">\n                <CloseCircle variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Cancelled\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={4} sm={2} lg={6}>\n          <MainCard>\n            <Stack alignItems=\"center\" spacing={2}>\n              <Avatar size=\"md\" type=\"filled\">\n                <ShoppingBag variant=\"Bold\" />\n              </Avatar>\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Draft\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":3210},"src/data/movies.js":{"content":"// ==============================|| AUTOCOMPLETE - MOVIES ||============================== //\n\nconst movies = [\n  { label: 'The Shawshank Redemption', year: 1994 },\n  { label: 'The Godfather', year: 1972 },\n  { label: 'The Godfather: Part II', year: 1974 },\n  { label: 'The Dark Knight', year: 2008 },\n  { label: '12 Angry Men', year: 1957 },\n  { label: \"Schindler's List\", year: 1993 },\n  { label: 'Pulp Fiction', year: 1994 },\n  {\n    label: 'The Lord of the Rings: The Return of the King',\n    year: 2003\n  },\n  { label: 'The Good, the Bad and the Ugly', year: 1966 },\n  { label: 'Fight Club', year: 1999 },\n  {\n    label: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001\n  },\n  {\n    label: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980\n  },\n  { label: 'Forrest Gump', year: 1994 },\n  { label: 'Inception', year: 2010 },\n  {\n    label: 'The Lord of the Rings: The Two Towers',\n    year: 2002\n  },\n  { label: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { label: 'Goodfellas', year: 1990 },\n  { label: 'The Matrix', year: 1999 },\n  { label: 'Seven Samurai', year: 1954 },\n  {\n    label: 'Star Wars: Episode IV - A New Hope',\n    year: 1977\n  },\n  { label: 'City of God', year: 2002 },\n  { label: 'Se7en', year: 1995 },\n  { label: 'The Silence of the Lambs', year: 1991 },\n  { label: \"It's a Wonderful Life\", year: 1946 },\n  { label: 'Life Is Beautiful', year: 1997 },\n  { label: 'The Usual Suspects', year: 1995 },\n  { label: 'Léon: The Professional', year: 1994 },\n  { label: 'Spirited Away', year: 2001 },\n  { label: 'Saving Private Ryan', year: 1998 },\n  { label: 'Once Upon a Time in the West', year: 1968 },\n  { label: 'American History X', year: 1998 },\n  { label: 'Interstellar', year: 2014 },\n  { label: 'Casablanca', year: 1942 },\n  { label: 'City Lights', year: 1931 },\n  { label: 'Psycho', year: 1960 },\n  { label: 'The Green Mile', year: 1999 },\n  { label: 'The Intouchables', year: 2011 },\n  { label: 'Modern Times', year: 1936 },\n  { label: 'Raiders of the Lost Ark', year: 1981 },\n  { label: 'Rear Window', year: 1954 },\n  { label: 'The Pianist', year: 2002 },\n  { label: 'The Departed', year: 2006 },\n  { label: 'Terminator 2: Judgment Day', year: 1991 },\n  { label: 'Back to the Future', year: 1985 },\n  { label: 'Whiplash', year: 2014 },\n  { label: 'Gladiator', year: 2000 },\n  { label: 'Memento', year: 2000 },\n  { label: 'The Prestige', year: 2006 },\n  { label: 'The Lion King', year: 1994 },\n  { label: 'Apocalypse Now', year: 1979 },\n  { label: 'Alien', year: 1979 },\n  { label: 'Sunset Boulevard', year: 1950 },\n  {\n    label: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n    year: 1964\n  },\n  { label: 'The Great Dictator', year: 1940 },\n  { label: 'Cinema Paradiso', year: 1988 },\n  { label: 'The Lives of Others', year: 2006 },\n  { label: 'Grave of the Fireflies', year: 1988 },\n  { label: 'Paths of Glory', year: 1957 },\n  { label: 'Django Unchained', year: 2012 },\n  { label: 'The Shining', year: 1980 },\n  { label: 'WALL·E', year: 2008 },\n  { label: 'American Beauty', year: 1999 },\n  { label: 'The Dark Knight Rises', year: 2012 },\n  { label: 'Princess Mononoke', year: 1997 },\n  { label: 'Aliens', year: 1986 },\n  { label: 'Oldboy', year: 2003 },\n  { label: 'Once Upon a Time in America', year: 1984 },\n  { label: 'Witness for the Prosecution', year: 1957 },\n  { label: 'Das Boot', year: 1981 },\n  { label: 'Citizen Kane', year: 1941 },\n  { label: 'North by Northwest', year: 1959 },\n  { label: 'Vertigo', year: 1958 },\n  {\n    label: 'Star Wars: Episode VI - Return of the Jedi',\n    year: 1983\n  },\n  { label: 'Reservoir Dogs', year: 1992 },\n  { label: 'Braveheart', year: 1995 },\n  { label: 'M', year: 1931 },\n  { label: 'Requiem for a Dream', year: 2000 },\n  { label: 'Amélie', year: 2001 },\n  { label: 'A Clockwork Orange', year: 1971 },\n  { label: 'Like Stars on Earth', year: 2007 },\n  { label: 'Taxi Driver', year: 1976 },\n  { label: 'Lawrence of Arabia', year: 1962 },\n  { label: 'Double Indemnity', year: 1944 },\n  {\n    label: 'Eternal Sunshine of the Spotless Mind',\n    year: 2004\n  },\n  { label: 'Amadeus', year: 1984 },\n  { label: 'To Kill a Mockingbird', year: 1962 },\n  { label: 'Toy Story 3', year: 2010 },\n  { label: 'Logan', year: 2017 },\n  { label: 'Full Metal Jacket', year: 1987 },\n  { label: 'Dangal', year: 2016 },\n  { label: 'The Sting', year: 1973 },\n  { label: '2001: A Space Odyssey', year: 1968 },\n  { label: \"Singin' in the Rain\", year: 1952 },\n  { label: 'Toy Story', year: 1995 },\n  { label: 'Bicycle Thieves', year: 1948 },\n  { label: 'The Kid', year: 1921 },\n  { label: 'Inglourious Basterds', year: 2009 },\n  { label: 'Snatch', year: 2000 },\n  { label: '3 Idiots', year: 2009 },\n  { label: 'Monty Python and the Holy Grail', year: 1975 }\n];\n\nexport default movies;\n","size_bytes":4809},"src/sections/apps/e-commerce/products/Colors.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Tooltip from '@mui/material/Tooltip';\nimport Skeleton from '@mui/material/Skeleton';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ColorOptions from './ColorOptions';\nimport Avatar from 'components/@extended/Avatar';\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRODUCT - COLOR ||============================== //\n\nfunction Color({ bg, id, colors, label, handelFilter }) {\n  const theme = useTheme();\n\n  return (\n    <Grid item>\n      <Tooltip title={label}>\n        <ButtonBase\n          sx={{\n            borderRadius: '50%',\n            '&:focus-visible': { outline: `2px solid ${theme.palette.secondary.dark}`, outlineOffset: 2 }\n          }}\n          onClick={() => handelFilter('colors', id)}\n        >\n          <Avatar\n            color=\"inherit\"\n            size=\"sm\"\n            sx={{\n              bgcolor: bg,\n              color: theme.palette.mode === ThemeMode.DARK ? 'secondary.800' : 'secondary.lighter',\n              border: '3px solid',\n              borderColor: colors.some((item) => item === id) ? theme.palette.secondary.light : theme.palette.background.paper\n            }}\n          >\n            {' '}\n          </Avatar>\n        </ButtonBase>\n      </Tooltip>\n    </Grid>\n  );\n}\n\n// ==============================|| PRODUCT - COLOR ||============================== //\n\nexport default function Colors({ colors, handelFilter }) {\n  const [isColorsLoading, setColorLoading] = useState(true);\n  useEffect(() => {\n    setColorLoading(false);\n  }, []);\n\n  return (\n    <>\n      {isColorsLoading ? (\n        <Grid item xs={12}>\n          <Skeleton variant=\"rectangular\" width=\"100%\" height={158} />\n        </Grid>\n      ) : (\n        <Stack>\n          <Typography variant=\"h5\" sx={{ mb: 1 }}>\n            Color\n          </Typography>\n          <Grid container spacing={1.5} alignItems=\"center\">\n            {ColorOptions.map((color, index) => (\n              <Color key={index} id={color.value} bg={color.bg} label={color.label} colors={colors} handelFilter={handelFilter} />\n            ))}\n          </Grid>\n        </Stack>\n      )}\n    </>\n  );\n}\n\nColor.propTypes = {\n  bg: PropTypes.string,\n  id: PropTypes.string,\n  colors: PropTypes.array,\n  label: PropTypes.string,\n  handelFilter: PropTypes.func\n};\n\nColors.propTypes = { colors: PropTypes.array, handelFilter: PropTypes.func };\n","size_bytes":2655},"src/pages/auth/auth1/check-mail.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport AuthWrapper from 'sections/auth/AuthWrapper';\n\n// ================================|| CHECK MAIL ||================================ //\n\nexport default function CheckMail() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Box sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Hi, Check Your Mail</Typography>\n            <Typography color=\"secondary\" sx={{ mb: 0.5, mt: 1.25 }}>\n              We have sent a password recover instructions to your email.\n            </Typography>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <AnimateButton>\n            <Button\n              component={Link}\n              to={isLoggedIn ? '/auth/login' : '/login'}\n              disableElevation\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Sign in\n            </Button>\n          </AnimateButton>\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  );\n}\n","size_bytes":1458},"src/sections/auth/auth-forms/AuthCodeVerification.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport OtpInput from 'react18-input-otp';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { ThemeMode } from 'config';\n\n// ============================|| STATIC - CODE VERIFICATION ||============================ //\n\nexport default function AuthCodeVerification() {\n  const theme = useTheme();\n  const [otp, setOtp] = useState();\n\n  const borderColor = theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary.light;\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <OtpInput\n          value={otp}\n          onChange={(otp) => setOtp(otp)}\n          numInputs={4}\n          containerStyle={{ justifyContent: 'space-between' }}\n          inputStyle={{\n            width: '100%',\n            margin: '8px',\n            padding: '10px',\n            border: '1px solid',\n            borderColor: { borderColor },\n            borderRadius: 4,\n            ':hover': { borderColor: theme.palette.primary.main }\n          }}\n          focusStyle={{\n            outline: 'none',\n            boxShadow: theme.customShadows.primary,\n            border: '1px solid',\n            borderColor: theme.palette.primary.main\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <AnimateButton>\n          <Button disableElevation fullWidth size=\"large\" type=\"submit\" variant=\"contained\">\n            Continue\n          </Button>\n        </AnimateButton>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\">\n          <Typography>Not received Code?</Typography>\n          <Typography variant=\"body1\" sx={{ minWidth: 85, ml: 2, textDecoration: 'none', cursor: 'pointer' }} color=\"primary\">\n            Resend code\n          </Typography>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":2157},"src/sections/components-overview/notistack/PreventDuplicate.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - PREVENT DUPLICATE ||============================== //\n\nexport default function PreventDuplicate() {\n  const [checked, setChecked] = useState(true);\n\n  const handleChangeCheck = (event) => {\n    setChecked(event.target.checked);\n  };\n\n  const NotiStackPreventDuplicateCodeString = `<Button\n  variant=\"outlined\"\n  fullWidth\n  sx={{ marginBlockStart: 2 }}\n  onClick={() =>\n    enqueueSnackbar('You only see me once.', {\n      preventDuplicate: checked ? true : false\n    })\n  }\n>\n  Show snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"Prevent Duplicate\" codeString={NotiStackPreventDuplicateCodeString}>\n      <Stack flexDirection={'row'} gap={1} justifyContent={'center'} alignItems={'center'} flexWrap=\"wrap\">\n        <Checkbox checked={checked} onChange={handleChangeCheck} inputProps={{ 'aria-label': 'controlled' }} />\n        Prevent duplicate\n        <Button\n          variant=\"outlined\"\n          fullWidth\n          sx={{ marginBlockStart: 2 }}\n          onClick={() =>\n            enqueueSnackbar('You only see me once.', {\n              preventDuplicate: checked ? true : false\n            })\n          }\n        >\n          Show snackbar\n        </Button>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":1564},"src/layout/Dashboard/Header/HeaderContent/index.jsx":{"content":"import { useMemo } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport Search from './Search';\n// import Message from './Message';\nimport Profile from './Profile';\nimport Localization from './Localization';\n// import Notification from './Notification';\nimport MobileSection from './MobileSection';\n// import MegaMenuSection from './MegaMenuSection';\nimport FullScreen from './FullScreen';\n\nimport { MenuOrientation } from 'config';\nimport useConfig from 'hooks/useConfig';\nimport DrawerHeader from 'layout/Dashboard/Drawer/DrawerHeader';\n\n// ==============================|| HEADER - CONTENT ||============================== //\n\nexport default function HeaderContent() {\n  const { i18n, menuOrientation } = useConfig();\n\n  const downLG = useMediaQuery((theme) => theme.breakpoints.down('lg'));\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const localization = useMemo(() => <Localization />, [i18n]);\n\n  // const megaMenu = useMemo(() => <MegaMenuSection />, []);\n\n  return (\n    <>\n      {menuOrientation === MenuOrientation.HORIZONTAL && !downLG && <DrawerHeader open={true} />}\n      {!downLG && <Search />}\n      {/* {!downLG && megaMenu} */}\n      {!downLG && localization}\n      {downLG && <Box sx={{ width: '100%', ml: 1 }} />}\n\n      {/* <Notification /> */}\n      <FullScreen />\n      {/* <Message /> */}\n      {!downLG && <Profile />}\n      {downLG && <MobileSection />}\n    </>\n  );\n}\n","size_bytes":1496},"src/pages/apps/invoice/list.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Tab from '@mui/material/Tab';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Tabs from '@mui/material/Tabs';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// third-party\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  getPaginationRowModel,\n  getFilteredRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport { rankItem } from '@tanstack/match-sorter-utils';\n\n// project-import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport InvoiceCard from 'components/cards/invoice/InvoiceCard';\nimport InvoiceChart from 'components/cards/invoice/InvoiceChart';\nimport EmptyReactTable from 'pages/tables/react-table/empty';\nimport AlertProductDelete from 'sections/apps/invoice/AlertProductDelete';\n\nimport { APP_DEFAULT_PATH } from 'config';\nimport { openSnackbar } from 'api/snackbar';\nimport { handlerDelete, deleteInvoice, useGetInvoice, useGetInvoiceMaster } from 'api/invoice';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\nimport {\n  CSVExport,\n  DebouncedInput,\n  HeaderSort,\n  IndeterminateCheckbox,\n  RowSelection,\n  SelectColumnSorting,\n  TablePagination\n} from 'components/third-party/react-table';\n\n// assets\nimport { Edit, Eye, InfoCircle, ProfileTick, Trash } from 'iconsax-react';\n\nexport const fuzzyFilter = (row, columnId, value, addMeta) => {\n  // rank the item\n  const itemRank = rankItem(row.getValue(columnId), value);\n\n  // store the ranking info\n  addMeta(itemRank);\n\n  // return if the item should be filtered in/out\n  return itemRank.passed;\n};\n\n// ==============================|| REACT TABLE - LIST ||============================== //\n\nfunction ReactTable({ data, columns }) {\n  const groups = ['All', ...new Set(data.map((item) => item.status))];\n\n  const countGroup = data.map((item) => item.status);\n  const counts = countGroup.reduce(\n    (acc, value) => ({\n      ...acc,\n      [value]: (acc[value] || 0) + 1\n    }),\n    {}\n  );\n\n  const [activeTab, setActiveTab] = useState(groups[0]);\n  const [sorting, setSorting] = useState([{ id: 'customer_name', desc: false }]);\n  const [columnFilters, setColumnFilters] = useState([]);\n  const [rowSelection, setRowSelection] = useState({});\n  const [globalFilter, setGlobalFilter] = useState('');\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      columnFilters,\n      sorting,\n      rowSelection,\n      globalFilter\n    },\n    enableRowSelection: true,\n    onSortingChange: setSorting,\n    onRowSelectionChange: setRowSelection,\n    onGlobalFilterChange: setGlobalFilter,\n    onColumnFiltersChange: setColumnFilters,\n    getRowCanExpand: () => true,\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    globalFilterFn: fuzzyFilter,\n    debugTable: true\n  });\n\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  useEffect(() => {\n    setColumnFilters(activeTab === 'All' ? [] : [{ id: 'status', value: activeTab }]);\n  }, [activeTab]);\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 2.5, pb: 0, width: '100%' }}>\n        <Tabs value={activeTab} onChange={(e, value) => setActiveTab(value)} sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          {groups.map((status, index) => (\n            <Tab\n              key={index}\n              label={status}\n              value={status}\n              icon={\n                <Chip\n                  label={\n                    status === 'All'\n                      ? data.length\n                      : status === 'Paid'\n                        ? counts.Paid\n                        : status === 'Unpaid'\n                          ? counts.Unpaid\n                          : counts.Cancelled\n                  }\n                  color={status === 'All' ? 'primary' : status === 'Paid' ? 'success' : status === 'Unpaid' ? 'warning' : 'error'}\n                  variant=\"light\"\n                  size=\"small\"\n                />\n              }\n              iconPosition=\"end\"\n            />\n          ))}\n        </Tabs>\n      </Box>\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\" justifyContent=\"space-between\" sx={{ padding: 2.5 }}>\n        <DebouncedInput\n          value={globalFilter ?? ''}\n          onFilterChange={(value) => setGlobalFilter(String(value))}\n          placeholder={`Search ${data.length} records...`}\n        />\n\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          <CSVExport\n            {...{ data: table.getSelectedRowModel().flatRows.map((row) => row.original), headers, filename: 'customer-list.csv' }}\n          />\n        </Stack>\n      </Stack>\n      <ScrollX>\n        <Stack>\n          <RowSelection selected={Object.keys(rowSelection).length} />\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                        Object.assign(header.column.columnDef.meta, {\n                          className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                        });\n                      }\n\n                      return (\n                        <TableCell\n                          key={header.id}\n                          {...header.column.columnDef.meta}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...(header.column.getCanSort() &&\n                            header.column.columnDef.meta === undefined && {\n                              className: 'cursor-pointer prevent-select'\n                            })}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                              <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                              {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                            </Stack>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount,\n                  initialPageSize: 5\n                }}\n              />\n            </Box>\n          </>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| INVOICE - LIST ||============================== //\n\nexport default function List() {\n  const { invoiceLoading, invoice: list } = useGetInvoice();\n  const { invoiceMaster } = useGetInvoiceMaster();\n  const [invoiceId, setInvoiceId] = useState(0);\n\n  const navigation = useNavigate();\n  const handleClose = (status) => {\n    if (status) {\n      deleteInvoice(invoiceId);\n      openSnackbar({\n        open: true,\n        message: 'Column deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n    handlerDelete(false);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'Row Selection',\n        header: ({ table }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n              onChange: table.getToggleAllRowsSelectedHandler()\n            }}\n          />\n        ),\n        cell: ({ row }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.getToggleSelectedHandler()\n            }}\n          />\n        )\n      },\n      {\n        header: 'Invoice Id',\n        accessorKey: 'id',\n        meta: { className: 'cell-center' }\n      },\n      {\n        header: 'User Info',\n        accessorKey: 'customer_name',\n        cell: ({ row, getValue }) => (\n          <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n            <Avatar\n              alt=\"Avatar\"\n              size=\"sm\"\n              src={getImageUrl(`avatar-${!row.original.avatar ? 1 : row.original.avatar}.png`, ImagePath.USERS)}\n            />\n            <Stack spacing={0}>\n              <Typography variant=\"subtitle1\">{getValue()}</Typography>\n              <Typography color=\"text.secondary\">{row.original.email}</Typography>\n            </Stack>\n          </Stack>\n        )\n      },\n      {\n        header: 'Create Date',\n        accessorKey: 'date'\n      },\n      {\n        header: 'Due Date',\n        accessorKey: 'due_date'\n      },\n      {\n        header: 'Quantity',\n        accessorKey: 'quantity'\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Cancelled':\n              return <Chip color=\"error\" label=\"Cancelled\" size=\"small\" variant=\"light\" />;\n            case 'Paid':\n              return <Chip color=\"success\" label=\"Paid\" size=\"small\" variant=\"light\" />;\n            case 'Unpaid':\n            default:\n              return <Chip color=\"info\" label=\"Unpaid\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Actions',\n        meta: { className: 'cell-center' },\n        disableSortBy: true,\n        cell: ({ row }) => {\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={0}>\n              <Tooltip title=\"View\">\n                <IconButton\n                  color=\"secondary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigation(`/apps/invoice/details/${row?.original?.id}`);\n                  }}\n                >\n                  <Eye />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Edit\">\n                <IconButton\n                  color=\"primary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigation(`/apps/invoice/edit/${row?.original?.id}`);\n                  }}\n                >\n                  <Edit />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Delete\">\n                <IconButton\n                  color=\"error\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setInvoiceId(row?.original?.id);\n                    handlerDelete(true);\n                  }}\n                >\n                  <Trash />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          );\n        }\n      }\n    ], // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const widgetsData = [\n    {\n      title: 'Paid',\n      count: '$7,825',\n      percentage: 70.5,\n      isLoss: false,\n      invoice: '9',\n      color: theme.palette.success,\n      chartData: [200, 600, 100, 400, 300, 400, 50]\n    },\n    {\n      title: 'Unpaid',\n      count: '$1,880',\n      percentage: 27.4,\n      isLoss: true,\n      invoice: '6',\n      color: theme.palette.warning,\n      chartData: [100, 550, 300, 350, 200, 100, 300]\n    },\n    {\n      title: 'Overdue',\n      count: '$3,507',\n      percentage: 27.4,\n      isLoss: true,\n      invoice: '4',\n      color: theme.palette.error,\n      chartData: [100, 550, 200, 300, 100, 200, 300]\n    }\n  ];\n\n  let breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Invoice', to: '/apps/invoice/dashboard' }, { title: 'List' }];\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"Invoice List\" links={breadcrumbLinks} />\n      <Grid container direction={matchDownSM ? 'column' : 'row'} spacing={2} sx={{ pb: 2 }}>\n        <Grid item md={8}>\n          <Grid container direction=\"row\" spacing={2}>\n            {widgetsData.map((widget, index) => (\n              <Grid item sm={4} xs={12} key={index}>\n                <MainCard>\n                  <InvoiceCard\n                    title={widget.title}\n                    count={widget.count}\n                    percentage={widget.percentage}\n                    isLoss={widget.isLoss}\n                    invoice={widget.invoice}\n                    color={widget.color.main}\n                  >\n                    <InvoiceChart color={widget.color} data={widget.chartData} />\n                  </InvoiceCard>\n                </MainCard>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item md={4} sm={12} xs={12}>\n          <Box\n            sx={{\n              background: `linear-gradient(to right, ${theme.palette.primary.dark}, ${theme.palette.primary.main})`,\n              borderRadius: 1,\n              p: 1.75\n            }}\n          >\n            <Stack direction=\"row\" alignItems=\"flex-end\" justifyContent=\"space-between\" spacing={1}>\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"filled\">\n                  <ProfileTick style={{ fontSize: '20px' }} />\n                </Avatar>\n                <Box>\n                  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                    <Typography variant=\"body1\" color=\"white\">\n                      Total Recievables\n                    </Typography>\n                    <InfoCircle color={theme.palette.background.paper} />\n                  </Stack>\n                  <Stack direction=\"row\" spacing={1}>\n                    <Typography variant=\"body2\" color=\"white\">\n                      Current\n                    </Typography>\n                    <Typography variant=\"body1\" color=\"white\">\n                      109.1k\n                    </Typography>\n                  </Stack>\n                </Box>\n              </Stack>\n              <Stack direction=\"row\" spacing={1}>\n                <Typography variant=\"body2\" color=\"white\">\n                  Overdue\n                </Typography>\n                <Typography variant=\"body1\" color=\"white\">\n                  62k\n                </Typography>\n              </Stack>\n            </Stack>\n            <Typography variant=\"h4\" color=\"white\" sx={{ pt: 2, pb: 1, zIndex: 1 }}>\n              $43,078\n            </Typography>\n            <Box sx={{ maxWidth: '100%' }}>\n              <LinearWithLabel value={90} />\n            </Box>\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          {invoiceLoading ? <EmptyReactTable /> : <ReactTable {...{ data: list, columns }} />}\n          <AlertProductDelete\n            title={invoiceId.toString()}\n            open={invoiceMaster ? invoiceMaster.alertPopup : false}\n            handleClose={handleClose}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nfunction LinearWithLabel({ value, ...others }) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <LinearProgress color=\"warning\" variant=\"determinate\" value={value} {...others} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>\n        <Typography variant=\"body2\" color=\"white\">{`${Math.round(value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nReactTable.propTypes = { data: PropTypes.array, columns: PropTypes.array };\n\nLinearWithLabel.propTypes = { value: PropTypes.any, others: PropTypes.any };\n","size_bytes":17866},"src/sections/apps/chat/ChatMessageSend.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport TextField from '@mui/material/TextField';\n\n// ==============================|| CHAT - MESSAGE SEND ||============================== //\n\nexport default function ChatMessageSend({ message, setMessage, handleEnter }) {\n  const theme = useTheme();\n\n  return (\n    <TextField\n      fullWidth\n      multiline\n      rows={4}\n      placeholder=\"Your Message...\"\n      value={message}\n      onChange={(e) => setMessage(e.target.value)}\n      onKeyDown={handleEnter}\n      variant=\"standard\"\n      sx={{ pr: 2, '& .MuiInput-root:before': { borderBottomColor: theme.palette.divider } }}\n    />\n  );\n}\n\nChatMessageSend.propTypes = { message: PropTypes.string, setMessage: PropTypes.func, handleEnter: PropTypes.any };\n","size_bytes":813},"src/sections/forms/edit-forms/team/index.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function EditTeamPage() {\n  const idPage = useLocation().pathname.split('/').splice(-1).toString();\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.put('admin/edit/team/' + idPage, data);\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveArticles = await axiosInstance.get('admin/edit/team/' + idPage);\n        if (retrieveArticles.status === 200) {\n          console.log(retrieveArticles);\n          setData(retrieveArticles.data);\n        } else {\n          console.error('Failed to retrieve team page');\n        }\n      } catch (error) {\n        console.error('Error fetching team page:', error);\n      }\n    };\n\n    fetchData();\n  }, [idPage]);\n\n  return (\n    <MainCard title=\"Edit team page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully edited a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6528},"src/data/org-chart.js":{"content":"import Avatar1 from 'assets/images/users/avatar-6.png';\nimport Avatar2 from 'assets/images/users/avatar-1.png';\nimport Avatar3 from 'assets/images/users/avatar-2.png';\nimport Avatar5 from 'assets/images/users/avatar-4.png';\nimport Avatar6 from 'assets/images/users/avatar-5.png';\nimport Avatar7 from 'assets/images/users/avatar-7.png';\nimport Avatar8 from 'assets/images/users/avatar-8.png';\nimport Avatar9 from 'assets/images/users/avatar-9.png';\nimport Avatar10 from 'assets/images/users/avatar-10.png';\n\n// ===========================|| ORGANIZATION CHART - USERS ||=========================== //\n\nexport const data = [\n  {\n    name: 'Anne Teak',\n    role: 'CEO',\n    avatar: Avatar1,\n    linkedin: 'https://www.linkedin.com/',\n    facebook: 'https://www.facebook.com/',\n    skype: 'https://www.skype.com/en/',\n    children: [\n      {\n        name: 'Colin Sik',\n        role: 'CFO',\n        avatar: Avatar1,\n        linkedin: 'https://www.linkedin.com/',\n        facebook: 'https://www.facebook.com/',\n        skype: 'https://www.skype.com/en/',\n        children: [\n          {\n            name: 'Karen Onnabit',\n            role: 'Controller',\n            avatar: Avatar2,\n            linkedin: 'https://www.linkedin.com/',\n            facebook: 'https://www.facebook.com/',\n            skype: 'https://www.skype.com/en/'\n          }\n        ]\n      },\n      {\n        name: 'Jen Tile',\n        role: 'VP of Marketing',\n        avatar: Avatar3,\n        linkedin: 'https://www.linkedin.com/',\n        facebook: 'https://www.facebook.com/',\n        skype: 'https://www.skype.com/en/',\n\n        children: [\n          {\n            name: 'Anne Thurium',\n            role: 'Manager',\n            avatar: Avatar8,\n            linkedin: 'https://www.linkedin.com/',\n            facebook: 'https://www.facebook.com/',\n            skype: 'https://www.skype.com/en/',\n\n            children: [\n              {\n                name: 'Liz Erd',\n                role: 'Junior Manager',\n                avatar: Avatar6,\n                linkedin: 'https://www.linkedin.com/',\n                facebook: 'https://www.facebook.com/',\n                skype: 'https://www.skype.com/en/'\n              },\n              {\n                name: 'Percy Vere',\n                role: 'Programmer',\n                avatar: Avatar7,\n                linkedin: 'https://www.linkedin.com/',\n                facebook: 'https://www.facebook.com/',\n                skype: 'https://www.skype.com/en/'\n              }\n            ]\n          }\n        ]\n      },\n      {\n        name: 'Harriet Upp',\n        role: 'VP of IT',\n        avatar: Avatar9,\n        linkedin: 'https://www.linkedin.com/',\n        facebook: 'https://www.facebook.com/',\n        skype: 'https://www.skype.com/en/',\n\n        children: [\n          {\n            name: 'Mark Ateer',\n            role: 'System Admin',\n            avatar: Avatar5,\n            linkedin: 'https://www.linkedin.com/',\n            facebook: 'https://www.facebook.com/',\n            skype: 'https://www.skype.com/en/'\n          },\n          {\n            name: 'Dave Allippa',\n            role: 'System Admin',\n            avatar: Avatar10,\n            linkedin: 'https://www.linkedin.com/',\n            facebook: 'https://www.facebook.com/',\n            skype: 'https://www.skype.com/en/'\n          }\n        ]\n      }\n    ]\n  }\n];\n","size_bytes":3348},"src/components/Customization/ThemeContrast.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport { Mask } from 'iconsax-react';\n\n// ==============================|| CUSTOMIZATION - MODE ||============================== //\n\nexport default function ThemeContrast() {\n  const theme = useTheme();\n  const { themeContrast, onChangeContrast } = useConfig();\n\n  const handleContrastChange = () => {\n    onChangeContrast();\n  };\n\n  return (\n    <RadioGroup\n      row\n      aria-label=\"payment-card\"\n      name=\"payment-card\"\n      value={themeContrast ? 'contrast' : 'default'}\n      onChange={handleContrastChange}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value=\"contrast\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{ width: '100%', borderWidth: 2, p: 1, ...(themeContrast && { borderColor: theme.palette.primary.main }) }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ height: 44 }}>\n                  <Mask variant=\"Bold\" />\n                </Stack>\n              </MainCard>\n              <Typography variant=\"caption\">Contrast</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value=\"default\" sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{ width: '100%', borderWidth: 2, p: 1, ...(!themeContrast && { borderColor: theme.palette.primary.main }) }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ height: 44 }}>\n                  <Mask />\n                </Stack>\n              </MainCard>\n              <Typography variant=\"caption\">Shadow</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":2617},"src/layout/Dashboard/Drawer/DrawerContent/NavUser.jsx":{"content":"import { useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\n\n// project import\nimport Avatar from 'components/@extended/Avatar';\nimport useAuth from 'hooks/useAuth';\nimport { useGetMenuMaster } from 'api/menu';\n\n// assets\nimport { ArrowRight2 } from 'iconsax-react';\n\nimport avatar1 from 'assets/images/users/avatar-6.png';\n\nconst ExpandMore = styled(IconButton, { shouldForwardProp: (prop) => prop !== 'theme' && prop !== 'expand' && prop !== 'drawerOpen' })(\n  ({ theme, expand, drawerOpen }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(-90deg)',\n    marginLeft: 'auto',\n    color: theme.palette.secondary.dark,\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    }),\n    ...(!drawerOpen && {\n      opacity: 0,\n      width: 50,\n      height: 50\n    })\n  })\n);\n\n// ==============================|| LIST - USER ||============================== //\n\nexport default function UserList() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  const { logout, user } = useAuth();\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate(`/login`, {\n        state: {\n          from: ''\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Box sx={{ p: 1.25, px: !drawerOpen ? 1.25 : 3, borderTop: '2px solid ', borderTopColor: 'divider' }}>\n      <List disablePadding>\n        <ListItem\n          disablePadding\n          secondaryAction={\n            <ExpandMore\n              theme={theme}\n              expand={open}\n              drawerOpen={drawerOpen}\n              id=\"basic-button\"\n              aria-controls={open ? 'basic-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n              aria-label=\"show more\"\n            >\n              <ArrowRight2 style={{ fontSize: '0.625rem' }} />\n            </ExpandMore>\n          }\n          sx={{\n            ...(!drawerOpen && { display: 'flex', justifyContent: 'flex-end' }),\n            '& .MuiListItemSecondaryAction-root': { right: !drawerOpen ? 16 : -16 }\n          }}\n        >\n          <ListItemAvatar>\n            <Avatar alt=\"Avatar\" src={avatar1} sx={{ ...(drawerOpen && { width: 46, height: 46 }) }} />\n          </ListItemAvatar>\n          <ListItemText primary={user?.name} sx={{ ...(!drawerOpen && { display: 'none' }) }} secondary=\"UI/UX Designer\" />\n        </ListItem>\n      </List>\n      <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{ 'aria-labelledby': 'basic-button' }}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      >\n        <MenuItem onClick={handleLogout}>Logout</MenuItem>\n        <MenuItem component={Link} to=\"/apps/profiles/user/personal\" onClick={handleClose}>\n          Profile\n        </MenuItem>\n        <MenuItem component={Link} to=\"/apps/profiles/account/basic\" onClick={handleClose}>\n          My account\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n}\n","size_bytes":4000},"src/sections/components-overview/autocomplete/GroupedAutocomplete.jsx":{"content":"// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - GROUPED ||============================== //\n\nexport default function GroupedAutocomplete() {\n  const options = data.map((option) => {\n    const firstLetter = option.label[0].toUpperCase();\n    return {\n      firstLetter: /[0-9]/.test(firstLetter) ? '0-9' : firstLetter,\n      ...option\n    };\n  });\n\n  const groupAutocompleteCodeString = `<Autocomplete\n  id=\"grouped-demo\"\n  fullWidth\n  options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n  groupBy={(option) => option.firstLetter}\n  getOptionLabel={(option) => option.label}\n  renderInput={(params) => <TextField {...params} placeholder=\"With categories\" />}\n/>`;\n\n  return (\n    <MainCard title=\"Grouped\" codeString={groupAutocompleteCodeString}>\n      <Autocomplete\n        id=\"grouped-demo\"\n        fullWidth\n        options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\n        groupBy={(option) => option.firstLetter}\n        getOptionLabel={(option) => option.label}\n        renderInput={(params) => <TextField {...params} placeholder=\"With categories\" />}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":1363},"src/themes/overrides/Button.js":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport getShadow from 'utils/getShadow';\nimport { ThemeMode } from 'config';\n\n// ==============================|| BUTTON - COLORS ||============================== //\n\nfunction getColorStyle({ variant, color, theme }) {\n  const colors = getColors(theme, color);\n  const { lighter, light, main, dark, darker, contrastText } = colors;\n\n  const buttonShadow = `${color}Button`;\n  const shadows = getShadow(theme, buttonShadow);\n\n  const commonShadow = {\n    '&::after': { boxShadow: `0 0 5px 5px ${alpha(main, 0.9)}` },\n    '&:active::after': { boxShadow: `0 0 0 0 ${alpha(main, 0.9)}` },\n    '&:focus-visible': { outline: `2px solid ${dark}`, outlineOffset: 2 }\n  };\n\n  switch (variant) {\n    case 'contained':\n      return {\n        ...(color === 'secondary' && {\n          backgroundColor: theme.palette.mode === ThemeMode.DARK ? light : dark\n        }),\n        '&:hover': {\n          backgroundColor: theme.palette.mode === ThemeMode.DARK ? lighter : dark,\n          ...(color === 'secondary' && {\n            backgroundColor: theme.palette.mode === ThemeMode.DARK ? lighter : darker\n          })\n        },\n        ...commonShadow\n      };\n    case 'shadow':\n      return {\n        color: contrastText,\n        backgroundColor: theme.palette.mode === ThemeMode.DARK ? light : dark,\n        boxShadow: shadows,\n        '&:hover': {\n          boxShadow: 'none',\n          backgroundColor: theme.palette.mode === ThemeMode.DARK ? lighter : darker,\n          ...(color === 'secondary' && {\n            backgroundColor: theme.palette.mode === ThemeMode.DARK ? lighter : darker\n          })\n        },\n        ...commonShadow\n      };\n    case 'outlined':\n      return {\n        borderColor: main,\n        '&:hover': {\n          color: dark,\n          backgroundColor: 'transparent',\n          borderColor: dark\n        },\n        ...commonShadow\n      };\n    case 'dashed':\n      return {\n        color: theme.palette.mode === ThemeMode.DARK ? darker : main,\n        borderColor: theme.palette.mode === ThemeMode.DARK ? darker : main,\n        backgroundColor: lighter,\n        '&:hover': {\n          color: theme.palette.mode === ThemeMode.DARK ? contrastText : dark,\n          borderColor: dark\n        },\n        ...commonShadow\n      };\n    case 'text':\n    default:\n      return {\n        '&:hover': {\n          color: theme.palette.mode === ThemeMode.DARK ? darker : dark,\n          backgroundColor: theme.palette.mode === ThemeMode.DARK ? lighter + 30 : lighter\n        },\n        ...commonShadow\n      };\n  }\n}\n\n// ==============================|| OVERRIDES - BUTTON ||============================== //\n\nexport default function Button(theme) {\n  const primaryDashed = getColorStyle({ variant: 'dashed', color: 'primary', theme });\n  const primaryShadow = getColorStyle({ variant: 'shadow', color: 'primary', theme });\n\n  const disabledStyle = { '&.Mui-disabled': { backgroundColor: theme.palette.secondary[200] } };\n  const iconStyle = { '&>*:nth-of-type(1)': { fontSize: 'inherit' } };\n\n  return {\n    MuiButton: {\n      defaultProps: {\n        disableElevation: true\n      },\n      styleOverrides: {\n        root: {\n          fontWeight: 400,\n          '&::after': {\n            content: '\"\"',\n            display: 'block',\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: '100%',\n            height: '100%',\n            borderRadius: 8,\n            opacity: 0,\n            transition: 'all 0.5s'\n          },\n\n          '&:active::after': {\n            position: 'absolute',\n            borderRadius: 8,\n            left: 0,\n            top: 0,\n            opacity: 1,\n            transition: '0s'\n          }\n        },\n        contained: {\n          ...disabledStyle\n        },\n        outlined: {\n          ...disabledStyle\n        },\n        text: {\n          boxShadow: 'none',\n          '&:hover': {\n            boxShadow: 'none'\n          }\n        },\n        endIcon: {\n          ...iconStyle\n        },\n        startIcon: {\n          ...iconStyle\n        },\n        dashed: {\n          border: '1px dashed',\n          ...primaryDashed,\n          '&.MuiButton-dashedPrimary': getColorStyle({ variant: 'dashed', color: 'primary', theme }),\n          '&.MuiButton-dashedSecondary': getColorStyle({ variant: 'dashed', color: 'secondary', theme }),\n          '&.MuiButton-dashedError': getColorStyle({ variant: 'dashed', color: 'error', theme }),\n          '&.MuiButton-dashedSuccess': getColorStyle({ variant: 'dashed', color: 'success', theme }),\n          '&.MuiButton-dashedInfo': getColorStyle({ variant: 'dashed', color: 'info', theme }),\n          '&.MuiButton-dashedWarning': getColorStyle({ variant: 'dashed', color: 'warning', theme }),\n          '&.Mui-disabled': {\n            color: `${theme.palette.secondary.light} !important`,\n            borderColor: `${theme.palette.secondary[400]} !important`,\n            backgroundColor: `${theme.palette.secondary[200]} !important`\n          }\n        },\n        shadow: {\n          ...primaryShadow,\n          '&.MuiButton-shadowPrimary': getColorStyle({ variant: 'shadow', color: 'primary', theme }),\n          '&.MuiButton-shadowSecondary': getColorStyle({ variant: 'shadow', color: 'secondary', theme }),\n          '&.MuiButton-shadowError': getColorStyle({ variant: 'shadow', color: 'error', theme }),\n          '&.MuiButton-shadowSuccess': getColorStyle({ variant: 'shadow', color: 'success', theme }),\n          '&.MuiButton-shadowInfo': getColorStyle({ variant: 'shadow', color: 'info', theme }),\n          '&.MuiButton-shadowWarning': getColorStyle({ variant: 'shadow', color: 'warning', theme }),\n          '&.Mui-disabled': {\n            color: `${theme.palette.secondary.light} !important`,\n            borderColor: `${theme.palette.secondary[400]} !important`,\n            backgroundColor: `${theme.palette.secondary[200]} !important`\n          }\n        },\n        containedPrimary: getColorStyle({ variant: 'contained', color: 'primary', theme }),\n        containedSecondary: getColorStyle({ variant: 'contained', color: 'secondary', theme }),\n        containedError: getColorStyle({ variant: 'contained', color: 'error', theme }),\n        containedSuccess: getColorStyle({ variant: 'contained', color: 'success', theme }),\n        containedInfo: getColorStyle({ variant: 'contained', color: 'info', theme }),\n        containedWarning: getColorStyle({ variant: 'contained', color: 'warning', theme }),\n        outlinedPrimary: getColorStyle({ variant: 'outlined', color: 'primary', theme }),\n        outlinedSecondary: getColorStyle({ variant: 'outlined', color: 'secondary', theme }),\n        outlinedError: getColorStyle({ variant: 'outlined', color: 'error', theme }),\n        outlinedSuccess: getColorStyle({ variant: 'outlined', color: 'success', theme }),\n        outlinedInfo: getColorStyle({ variant: 'outlined', color: 'info', theme }),\n        outlinedWarning: getColorStyle({ variant: 'outlined', color: 'warning', theme }),\n        textPrimary: getColorStyle({ variant: 'text', color: 'primary', theme }),\n        textSecondary: getColorStyle({ variant: 'text', color: 'secondary', theme }),\n        textError: getColorStyle({ variant: 'text', color: 'error', theme }),\n        textSuccess: getColorStyle({ variant: 'text', color: 'success', theme }),\n        textInfo: getColorStyle({ variant: 'text', color: 'info', theme }),\n        textWarning: getColorStyle({ variant: 'text', color: 'warning', theme }),\n        sizeExtraSmall: {\n          minWidth: 56,\n          fontSize: '0.625rem',\n          padding: '2px 8px'\n        },\n        sizeSmall: {\n          '& svg': {\n            width: 16,\n            height: 16\n          }\n        },\n        sizeMedium: {\n          '& svg': {\n            width: 18,\n            height: 18\n          }\n        },\n        sizeLarge: {\n          '& svg': {\n            width: 20,\n            height: 20\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":8047},"src/layout/Dashboard/Drawer/HorizontalBar.jsx":{"content":"import PropTypes from 'prop-types';\nimport { cloneElement } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\n\n// project-imports\nimport Navigation from './DrawerContent/Navigation';\n\nimport { HEADER_HEIGHT } from 'config';\nimport useConfig from 'hooks/useConfig';\n\nfunction ElevationScroll({ children, window }) {\n  const theme = useTheme();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    target: window\n  });\n\n  theme.shadows[4] = theme.customShadows.z1;\n  theme.shadows[1] = theme.customShadows.z2;\n\n  return cloneElement(children, {\n    elevation: trigger ? 4 : 1\n  });\n}\n\n// ==============================|| HORIZONTAL MENU ||============================== //\n\nexport default function CustomAppBar() {\n  const theme = useTheme();\n  const { container } = useConfig();\n\n  return (\n    <ElevationScroll>\n      <AppBar\n        sx={{\n          top: HEADER_HEIGHT,\n          height: HEADER_HEIGHT,\n          bgcolor: alpha(theme.palette.background.default, 0.8),\n          backdropFilter: 'blur(8px)',\n          width: '100%',\n          justifyContent: 'center',\n          borderTop: `1px solid ${theme.palette.divider}`,\n          zIndex: 1098,\n          color: theme.palette.secondary.main\n        }}\n      >\n        <Container maxWidth={container ? 'xl' : false}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Navigation />\n          </Box>\n        </Container>\n      </AppBar>\n    </ElevationScroll>\n  );\n}\n\nElevationScroll.propTypes = { children: PropTypes.node, window: PropTypes.any };\n","size_bytes":1968},"src/sections/components-overview/switch/CustomizedSwitches.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport FormGroup from '@mui/material/FormGroup';\nimport Typography from '@mui/material/Typography';\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// ==============================|| CUSTOMIZED - MATERIAL UI ||============================== //\n\nconst MaterialUISwitch = styled(Switch)(({ theme }) => ({\n  width: 62,\n  height: 34,\n  padding: 7,\n  '& .MuiSwitch-switchBase': {\n    margin: 1,\n    padding: 0,\n    transform: 'translateX(6px)',\n    '&.Mui-checked': {\n      color: '#fff',\n      transform: 'translateX(22px)',\n      '& .MuiSwitch-thumb:before': {\n        backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n          '#fff'\n        )}\" d=\"M4.2 2.5l-.7 1.8-1.8.7 1.8.7.7 1.8.6-1.8L6.7 5l-1.9-.7-.6-1.8zm15 8.3a6.7 6.7 0 11-6.6-6.6 5.8 5.8 0 006.6 6.6z\"/></svg>')`\n      },\n      '& + .MuiSwitch-track': { opacity: 1, backgroundColor: theme.palette.secondary.main }\n    }\n  },\n  '& .MuiSwitch-thumb': {\n    backgroundColor: theme.palette.primary.dark,\n    width: 32,\n    height: 32,\n    '&:before': {\n      content: \"''\",\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      left: 0,\n      top: 0,\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n        '#fff'\n      )}\" d=\"M9.305 1.667V3.75h1.389V1.667h-1.39zm-4.707 1.95l-.982.982L5.09 6.072l.982-.982-1.473-1.473zm10.802 0L13.927 5.09l.982.982 1.473-1.473-.982-.982zM10 5.139a4.872 4.872 0 00-4.862 4.86A4.872 4.872 0 0010 14.862 4.872 4.872 0 0014.86 10 4.872 4.872 0 0010 5.139zm0 1.389A3.462 3.462 0 0113.471 10a3.462 3.462 0 01-3.473 3.472A3.462 3.462 0 016.527 10 3.462 3.462 0 0110 6.528zM1.665 9.305v1.39h2.083v-1.39H1.666zm14.583 0v1.39h2.084v-1.39h-2.084zM5.09 13.928L3.616 15.4l.982.982 1.473-1.473-.982-.982zm9.82 0l-.982.982 1.473 1.473.982-.982-1.473-1.473zM9.305 16.25v2.083h1.389V16.25h-1.39z\"/></svg>')`\n    }\n  },\n  '& .MuiSwitch-track': {\n    opacity: 1,\n    backgroundColor: theme.palette.secondary.light,\n    borderRadius: 20 / 2\n  }\n}));\n\nMaterialUISwitch.displayName = 'MaterialUISwitch';\n\n// ==============================|| CUSTOMIZED - ANDROID ||============================== //\n\nconst Android12Switch = styled(Switch)(({ theme }) => ({\n  '& .MuiSwitch-track': {\n    borderRadius: 22 / 2,\n    '&:before, &:after': {\n      content: '\"\"',\n      position: 'absolute',\n      top: '50%',\n      transform: 'translateY(-50%)',\n      width: 16,\n      height: 16\n    },\n    '&:before': {\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\n        theme.palette.getContrastText(theme.palette.primary.main)\n      )}\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"/></svg>')`,\n      left: 4\n    },\n    '&:after': {\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\n        theme.palette.getContrastText(theme.palette.primary.main)\n      )}\" d=\"M19,13H5V11H19V13Z\" /></svg>')`,\n      right: 4\n    }\n  }\n}));\nAndroid12Switch.displayName = 'Android12Switch';\n\n// ==============================|| CUSTOMIZED - IOS ||============================== //\n\nconst IOSSwitch = styled((props) => <Switch focusVisibleClassName=\".Mui-focusVisible\" disableRipple {...props} />)(({ theme }) => ({\n  width: 42,\n  height: 26,\n  padding: 0,\n  '& .MuiSwitch-switchBase': {\n    padding: 0,\n    margin: 2,\n    transitionDuration: '300ms',\n    '&.Mui-checked': {\n      transform: 'translateX(16px)',\n      color: '#fff',\n      '& + .MuiSwitch-track': {\n        backgroundColor: theme.palette.success.main,\n        opacity: 1,\n        border: 0\n      },\n      '&.Mui-disabled + .MuiSwitch-track': {\n        opacity: 0.5\n      }\n    },\n    '&.Mui-focusVisible .MuiSwitch-thumb': {\n      color: '#33cf4d',\n      border: '6px solid #fff'\n    },\n    '&.Mui-disabled .MuiSwitch-thumb': {\n      color: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.main : theme.palette.secondary[100]\n    },\n    '&.Mui-disabled + .MuiSwitch-track': {\n      opacity: theme.palette.mode === ThemeMode.DARK ? 0.3 : 0.7\n    }\n  },\n  '& .MuiSwitch-thumb': {\n    boxSizing: 'border-box',\n    width: 22,\n    height: 22\n  },\n  '& .MuiSwitch-track': {\n    borderRadius: 26 / 2,\n    backgroundColor: theme.palette.secondary.light,\n    opacity: 1,\n    transition: theme.transitions.create(['background-color'], {\n      duration: 500\n    })\n  }\n}));\nIOSSwitch.displayName = 'IOSSwitch';\n\n// ==============================|| CUSTOMIZED - ANT ||============================== //\n\nconst AntSwitch = styled(Switch)(({ theme }) => ({\n  width: 28,\n  height: 16,\n  padding: 0,\n  display: 'flex',\n  '&:active': {\n    '& .MuiSwitch-thumb': {\n      width: 15\n    },\n    '& .MuiSwitch-switchBase.Mui-checked': {\n      transform: 'translateX(9px)'\n    }\n  },\n  '& .MuiSwitch-switchBase': {\n    padding: 2,\n    '&.Mui-checked': {\n      transform: 'translateX(12px)',\n      color: '#fff',\n      '& + .MuiSwitch-track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main\n      }\n    }\n  },\n  '& .MuiSwitch-thumb': {\n    boxShadow: '0 2px 4px 0 rgb(0 35 11 / 20%)',\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    transition: theme.transitions.create(['width'], {\n      duration: 200\n    })\n  },\n  '& .MuiSwitch-track': {\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.secondary.light,\n    boxSizing: 'border-box'\n  }\n}));\nAntSwitch.displayName = 'AntSwitch';\n\n// ==============================|| SWITCH - CUSTOMIZED ||============================== //\n\nexport default function CustomizedSwitches() {\n  const customizedSwitchCodeString = `// CustomizedSwitches.tsx\n<FormGroup row>\n  <FormControlLabel control={<MaterialUISwitch sx={{ m: 1 }} defaultChecked />} label=\"MUI switch\" />\n  <FormControlLabel control={<Android12Switch defaultChecked />} label=\"Android 12\" />\n  <FormControlLabel control={<IOSSwitch sx={{ m: 1 }} defaultChecked />} label=\"iOS style\" />\n  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n    <Typography>Off</Typography>\n    <AntSwitch defaultChecked inputProps={{ 'aria-label': 'ant design' }} />\n    <Typography>On</Typography>\n  </Stack>\n</FormGroup>`;\n\n  return (\n    <MainCard title=\"Customized\" codeString={customizedSwitchCodeString}>\n      <FormGroup row>\n        <FormControlLabel control={<MaterialUISwitch sx={{ m: 1 }} defaultChecked />} label=\"MUI switch\" />\n        <FormControlLabel control={<Android12Switch defaultChecked />} label=\"Android 12\" />\n        <FormControlLabel control={<IOSSwitch sx={{ m: 1 }} defaultChecked />} label=\"iOS style\" />\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Typography>Off</Typography>\n          <AntSwitch defaultChecked inputProps={{ 'aria-label': 'ant design' }} />\n          <Typography>On</Typography>\n        </Stack>\n      </FormGroup>\n    </MainCard>\n  );\n}\n","size_bytes":7507},"src/pages/landing.jsx":{"content":"// project-imports\nimport Hero from 'sections/landing/Header';\nimport Technologies from 'sections/landing/Technologies';\nimport Combo from 'sections/landing/Combo';\nimport Apps from 'sections/landing/Apps';\nimport Free from 'sections/landing/Free';\nimport Testimonial from 'sections/landing/Testimonial';\nimport Partner from 'sections/landing/Partner';\nimport ContactUs from 'sections/landing/ContactUs';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nexport default function Landing() {\n  return (\n    <>\n      <Hero />\n      <Technologies />\n      <Combo />\n      <Apps />\n      <Free />\n      <Testimonial />\n      <Partner />\n      <ContactUs />\n    </>\n  );\n}\n","size_bytes":704},"src/pages/maintenance/under-construction/under-construction.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport construction from 'assets/images/maintenance/img-cunstruct-1.svg';\nimport constructionBg from 'assets/images/maintenance/img-cunstruct-1-bg.png';\nimport constructionbottom from 'assets/images/maintenance/img-cunstruct-1-bottom.svg';\n\n// ==============================|| UNDER CONSTRUCTION ||============================== //\n\nexport default function UnderConstruction() {\n  return (\n    <Box sx={{ minHeight: '100vh', backgroundImage: `url(${constructionBg})`, backgroundSize: '100%', backgroundRepeat: 'no-repeat' }}>\n      <Container fixed sx={{ minHeight: '100vh', display: 'flex', alignItems: 'center' }}>\n        <Grid\n          container\n          spacing={3}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          sx={{\n            py: 2,\n            backgroundImage: `url(${constructionbottom})`,\n            backgroundSize: '100%',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'bottom'\n          }}\n        >\n          <Grid item md={6}>\n            <Stack spacing={2} justifyContent=\"center\" alignItems=\"center\">\n              <Typography align=\"center\" variant=\"h1\">\n                Under Construction\n              </Typography>\n              <Typography color=\"text.secondary\" align=\"center\" sx={{ width: '85%' }}>\n                Hey! Please check out this site later. We are doing some maintenance on it right now.\n              </Typography>\n              <Button component={Link} to={APP_DEFAULT_PATH} variant=\"contained\">\n                Back To Home\n              </Button>\n            </Stack>\n          </Grid>\n          <Grid item md={6}>\n            <Box sx={{ width: { xs: 300, sm: 374 } }}>\n              <img src={construction} alt=\"under construction\" style={{ width: '100%', height: 'auto' }} />\n            </Box>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n","size_bytes":2261},"src/components/@extended/MoreIcon.jsx":{"content":"export default function MoreIcon() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth=\"2\"\n      stroke=\"currentColor\"\n      fill=\"none\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n      <path d=\"M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n      <path d=\"M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" />\n    </svg>\n  );\n}\n","size_bytes":546},"src/sections/apps/customer/export-pdf/ListSmallCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport { Page, View, Document, StyleSheet, Image, Text, Link } from '@react-pdf/renderer';\n\n// project-imports\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport LinkIcon from 'assets/images/icons/link.png';\nimport Mail from 'assets/images/icons/mail.png';\nimport Maps from 'assets/images/icons/map.png';\nimport Phone from 'assets/images/icons/phone.png';\n\nconst textPrimary = '#262626';\nconst textSecondary = '#8c8c8c';\nconst border = '#f0f0f0';\n\nconst styles = StyleSheet.create({\n  page: {\n    padding: 30\n  },\n  container: {\n    border: `1px solid ${border}`,\n    padding: 18,\n    flexDirection: 'column',\n    '@media max-width: 400': {\n      flexDirection: 'column'\n    }\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16\n  },\n  image: {\n    width: 40,\n    height: 40,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  CardInfo: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  title: {\n    fontSize: 14,\n    lineHeight: 1.57,\n    color: textPrimary\n  },\n  role: {\n    fontSize: 10,\n    lineHeight: 1.66,\n    color: textSecondary\n  },\n  hr: {\n    borderBottom: `1px solid ${border}`,\n    paddingTop: 18\n    // paddingBottom: 18\n  },\n  about: {\n    paddingTop: 18,\n    fontSize: 14,\n    lineHeight: 1.57,\n    fontWeight: 'demibold',\n    color: textPrimary,\n    paddingBottom: 18\n  },\n  IconContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  IconRow: {\n    width: '48%',\n    gap: 10,\n    paddingBottom: 10\n  },\n  icon: {\n    width: 12,\n    height: 10\n  },\n  iconTitle: {\n    fontSize: 10,\n    lineHeight: 1.57,\n    color: textSecondary\n  },\n  chip: {\n    border: `1px solid ${textSecondary}`,\n    alignItems: 'center',\n    borderRadius: '4px',\n    marginLeft: 4,\n    marginRight: 4,\n    marginBottom: 8\n  },\n  chipTitle: {\n    color: textSecondary,\n    fontSize: '10px',\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingBottom: 4,\n    paddingTop: 4\n  },\n  timer: {\n    marginTop: 25\n  }\n});\n\n// ==============================|| CUSTOMER - CARD ||============================== //\n\nexport default function ListSmallCard({ customer }) {\n  const theme = useTheme();\n  return (\n    <Document title={`${customer?.fatherName}`}>\n      <Page size=\"A4\" style={styles.page}>\n        <View style={styles.container}>\n          <View style={styles.row}>\n            <Image style={styles.image} src={getImageUrl(`avatar-${!customer.avatar ? 1 : customer.avatar}.png`, ImagePath.USERS)} />\n            <View style={styles.CardInfo}>\n              <Text style={styles.title}>{customer.fatherName}</Text>\n              <Text style={styles.role}>{customer.role}</Text>\n            </View>\n          </View>\n          <View style={styles.hr} />\n          <View>\n            <Text style={styles.about}>Hello, {customer.about}</Text>\n          </View>\n          <View style={styles.IconContainer}>\n            <View style={[styles.row, styles.IconRow]}>\n              <Image src={Mail} style={styles.icon} />\n              <Text style={styles.iconTitle}>{customer.email}</Text>\n            </View>\n            <View style={[styles.row, styles.IconRow]}>\n              <Image src={Maps} style={styles.icon} />\n              <Text style={styles.iconTitle}>{customer.country}</Text>\n            </View>\n          </View>\n          <View style={styles.IconContainer}>\n            <View style={[styles.row, styles.IconRow]}>\n              <Image src={Phone} style={styles.icon} />\n              <Text style={styles.iconTitle}>{customer.contact}</Text>\n            </View>\n            <View style={[styles.row, styles.IconRow]}>\n              <Image src={LinkIcon} style={styles.icon} />\n              <Link\n                style={[styles.iconTitle, { color: theme.palette.primary.main }]}\n                src={`https://${customer.firstName}.en`}\n              >{`https://${customer.firstName}.en`}</Link>\n            </View>\n          </View>\n          <View style={[styles.row, { gap: 1, paddingTop: 18 }]}>\n            {customer.skills.map((skill, index) => (\n              <View style={styles.chip} key={index}>\n                <Text style={styles.chipTitle}>{skill}</Text>\n              </View>\n            ))}\n          </View>\n          <View style={styles.timer}>\n            <Text style={styles.iconTitle}> Updated in {customer.time}</Text>\n          </View>\n        </View>\n      </Page>\n    </Document>\n  );\n}\n\nListSmallCard.propTypes = { customer: PropTypes.any };\n","size_bytes":4594},"src/sections/components-overview/timeline/LeftPositionedTimeline.jsx":{"content":"// material-ui\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TIMELINE - LEFT ||============================== //\n\nexport default function LeftPositionedTimeline() {\n  const leftTimelineCodeString = `<Timeline position=\"left\">\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Eat</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Code</TimelineContent>\n  </TimelineItem>\n  <TimelineItem sx={{ minHeight: 'auto' }}>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n    </TimelineSeparator>\n    <TimelineContent>Sleep</TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Left Positioned\" codeString={leftTimelineCodeString}>\n      <Timeline position=\"left\">\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Eat</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Code</TimelineContent>\n        </TimelineItem>\n        <TimelineItem sx={{ minHeight: 'auto' }}>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n          </TimelineSeparator>\n          <TimelineContent>Sleep</TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":2168},"src/sections/apps/chat/UserDetails.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Collapse from '@mui/material/Collapse';\nimport Divider from '@mui/material/Divider';\nimport Switch from '@mui/material/Switch';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AvatarStatus from './AvatarStatus';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add, ArrowDown2, ArrowRight2, Camera, Document, DocumentLike, FolderOpen, Image, Link2, Mobile, Sms } from 'iconsax-react';\n\nimport { ThemeMode } from 'config';\n\n// ==============================|| CHAT - USER DETAILS ||============================== //\n\nexport default function UserDetails({ user, onClose }) {\n  const theme = useTheme();\n  const matchDownLG = useMediaQuery(theme.breakpoints.down('md'));\n\n  const [checked, setChecked] = useState(true);\n\n  if (Object.keys(user).length === 0) return <Typography>...Loading</Typography>;\n\n  let statusBGColor;\n  let statusColor;\n  if (user.online_status === 'available') {\n    statusBGColor = theme.palette.success.lighter;\n    statusColor = theme.palette.success.darker;\n  } else if (user.online_status === 'do_not_disturb') {\n    statusBGColor = theme.palette.common.white;\n    statusColor = theme.palette.secondary[400];\n  } else {\n    statusBGColor = theme.palette.warning.lighter;\n    statusColor = theme.palette.warning.main;\n  }\n\n  return (\n    <MainCard\n      sx={{\n        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'dark.main' : 'common.white',\n        borderRadius: '0 4px 4px 0',\n        borderLeft: 'none'\n      }}\n      content={false}\n    >\n      <Box sx={{ p: 3 }}>\n        {onClose && (\n          <IconButton size=\"small\" sx={{ position: 'absolute', right: 8, top: 8 }} onClick={onClose} color=\"error\">\n            <Add style={{ transform: 'rotate(45deg)' }} />\n          </IconButton>\n        )}\n        <Grid container spacing={1} justifyContent=\"center\">\n          <Grid item xs={12}>\n            <Stack>\n              <Avatar\n                alt={user.name}\n                src={user.avatar && getImageUrl(`${user.avatar}`, ImagePath.USERS)}\n                size=\"xl\"\n                sx={{\n                  m: '8px auto',\n                  width: 88,\n                  height: 88,\n                  border: '1px solid',\n                  borderColor: theme.palette.primary.main,\n                  p: 1,\n                  bgcolor: 'transparent',\n                  '& .MuiAvatar-img ': { height: '88px', width: '88px', borderRadius: '50%' }\n                }}\n              />\n              <Typography variant=\"h5\" align=\"center\">\n                {user.name}\n              </Typography>\n              <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\">\n                {user.role}\n              </Typography>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack\n              direction=\"row\"\n              alignItems=\"center\"\n              spacing={1}\n              justifyContent=\"center\"\n              sx={{ mt: 0.75, '& .MuiChip-root': { height: '24px' } }}\n            >\n              <AvatarStatus status={user.online_status} />\n              <Chip\n                label={user?.online_status && user.online_status.replaceAll('_', ' ')}\n                sx={{ bgcolor: statusBGColor, textTransform: 'capitalize', color: statusColor, '& .MuiChip-label': { px: 1 } }}\n              />\n            </Stack>\n          </Grid>\n        </Grid>\n\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\" sx={{ mt: 3 }}>\n          <IconButton size=\"medium\" color=\"secondary\" sx={{ boxShadow: '0px 8px 25px rgba(0, 0, 0, 0.05)' }}>\n            <Mobile />\n          </IconButton>\n          <IconButton size=\"medium\" color=\"secondary\" sx={{ boxShadow: '0px 8px 25px rgba(0, 0, 0, 0.05)' }}>\n            <Sms />\n          </IconButton>\n          <IconButton size=\"medium\" color=\"secondary\" sx={{ boxShadow: '0px 8px 25px rgba(0, 0, 0, 0.05)' }}>\n            <Camera />\n          </IconButton>\n        </Stack>\n      </Box>\n      <Box>\n        <SimpleBar sx={{ overflowX: 'hidden', height: matchDownLG ? 'auto' : 'calc(100vh - 397px)', minHeight: matchDownLG ? 0 : 420 }}>\n          <Stack spacing={3}>\n            <Stack direction=\"row\" spacing={1.5} justifyContent=\"center\" sx={{ px: 3 }}>\n              <Box sx={{ bgcolor: 'primary.lighter', p: 2, width: '50%', borderRadius: 2 }}>\n                <Typography color={theme.palette.mode === ThemeMode.DARK ? alpha(theme.palette.primary.darker, 0.7) : 'primary'}>\n                  All File\n                </Typography>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ mt: 0.5 }}>\n                  <FolderOpen style={{ color: theme.palette.primary.main, fontSize: '1.15em' }} />\n                  <Typography variant=\"h4\">231</Typography>\n                </Stack>\n              </Box>\n              <Box sx={{ bgcolor: 'secondary.lighter', p: 2, width: '50%', borderRadius: 2 }}>\n                <Typography>All Link</Typography>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ mt: 0.5 }}>\n                  <Link2 style={{ fontSize: '1.15em' }} />\n                  <Typography variant=\"h4\">231</Typography>\n                </Stack>\n              </Box>\n            </Stack>\n            <Box sx={{ px: 3, pb: 3 }}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                    sx={{ cursor: 'pointer' }}\n                    onClick={() => setChecked(!checked)}\n                  >\n                    <Typography variant=\"h5\">Information</Typography>\n                    <IconButton size=\"small\" color=\"secondary\">\n                      <ArrowDown2 />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sx={{ mt: -1 }}>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12}>\n                  <Collapse in={checked}>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" sx={{ mt: 1, mb: 2 }}>\n                      <Typography>Address</Typography>\n                      <Typography color=\"text.secondary\">{user.location}</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" sx={{ mt: 2 }}>\n                      <Typography>Email</Typography>\n                      <Typography color=\"text.secondary\">{user.personal_email}</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" sx={{ mt: 2 }}>\n                      <Typography>Phone</Typography>\n                      <Typography color=\"text.secondary\">{user.personal_phone}</Typography>\n                    </Stack>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" sx={{ mt: 2, mb: 2 }}>\n                      <Typography>Last visited</Typography>\n                      <Typography color=\"text.secondary\">{user.lastMessage}</Typography>\n                    </Stack>\n                  </Collapse>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h5\">Notification</Typography>\n                    <Switch defaultChecked />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sx={{ mt: -1 }}>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12} sx={{ mt: -1 }}>\n                  <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h5\">File type</Typography>\n                    <IconButton size=\"medium\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n                      {' '}\n                      <MoreIcon />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sx={{ mt: -1 }}>\n                  <Divider />\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                    <Stack direction=\"row\" alignItems=\"center\" spacing={1.5}>\n                      <Avatar sx={{ color: 'success.dark', bgcolor: 'success.light', borderRadius: 1 }}>\n                        <DocumentLike />\n                      </Avatar>\n                      <Stack>\n                        <Typography>Document</Typography>\n                        <Typography color=\"text.secondary\">123 files, 193MB</Typography>\n                      </Stack>\n                    </Stack>\n                    <IconButton size=\"small\" color=\"secondary\">\n                      <ArrowRight2 />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                    <Stack direction=\"row\" alignItems=\"center\" spacing={1.5}>\n                      <Avatar sx={{ color: 'warning.main', bgcolor: 'warning.lighter', borderRadius: 1 }}>\n                        <Image />\n                      </Avatar>\n                      <Stack>\n                        <Typography>Photos</Typography>\n                        <Typography color=\"text.secondary\">53 files, 321MB</Typography>\n                      </Stack>\n                    </Stack>\n                    <IconButton size=\"small\" color=\"secondary\">\n                      <ArrowRight2 />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                    <Stack direction=\"row\" alignItems=\"center\" spacing={1.5}>\n                      <Avatar sx={{ color: 'primary.main', bgcolor: 'primary.lighter', borderRadius: 1 }}>\n                        <Document />\n                      </Avatar>\n                      <Stack>\n                        <Typography>Other</Typography>\n                        <Typography color=\"text.secondary\">49 files, 193MB</Typography>\n                      </Stack>\n                    </Stack>\n                    <IconButton size=\"small\" color=\"secondary\">\n                      <ArrowRight2 />\n                    </IconButton>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Box>\n          </Stack>\n        </SimpleBar>\n      </Box>\n    </MainCard>\n  );\n}\n\nUserDetails.propTypes = { user: PropTypes.any, onClose: PropTypes.func };\n","size_bytes":11399},"src/sections/apps/profiles/user/TabPersonal.jsx":{"content":"import { useOutletContext } from 'react-router';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport CardHeader from '@mui/material/CardHeader';\nimport InputLabel from '@mui/material/InputLabel';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Select from '@mui/material/Select';\n\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport countries from 'data/countries';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// styles & constant\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = { PaperProps: { style: { maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP } } };\n\nconst skills = [\n  'Adobe XD',\n  'After Effect',\n  'Angular',\n  'Animation',\n  'ASP.Net',\n  'Bootstrap',\n  'C#',\n  'CC',\n  'Corel Draw',\n  'CSS',\n  'DIV',\n  'Dreamweaver',\n  'Figma',\n  'Graphics',\n  'HTML',\n  'Illustrator',\n  'J2Ee',\n  'Java',\n  'Javascript',\n  'JQuery',\n  'Logo Design',\n  'Material UI',\n  'Motion',\n  'MVC',\n  'MySQL',\n  'NodeJS',\n  'npm',\n  'Photoshop',\n  'PHP',\n  'React',\n  'Redux',\n  'Reduxjs & tooltit',\n  'SASS',\n  'SCSS',\n  'SQL Server',\n  'SVG',\n  'UI/UX',\n  'User Interface Designing',\n  'Wordpress'\n];\n\nfunction useInputRef() {\n  return useOutletContext();\n}\n\n// ==============================|| USER PROFILE - PERSONAL ||============================== //\n\nexport default function TabPersonal() {\n  const handleChangeDay = (event, date, setFieldValue) => {\n    setFieldValue('dob', new Date(date.setDate(parseInt(event.target.value, 10))));\n  };\n\n  const handleChangeMonth = (event, date, setFieldValue) => {\n    setFieldValue('dob', new Date(date.setMonth(parseInt(event.target.value, 10))));\n  };\n\n  const maxDate = new Date();\n  maxDate.setFullYear(maxDate.getFullYear() - 18);\n  const inputRef = useInputRef();\n\n  return (\n    <MainCard content={false} title=\"Personal Information\" sx={{ '& .MuiInputLabel-root': { fontSize: '0.875rem' } }}>\n      <Formik\n        initialValues={{\n          firstname: 'Stebin',\n          lastname: 'Ben',\n          email: 'stebin.ben@gmail.com',\n          dob: new Date('03-10-1993'),\n          countryCode: '+91',\n          contact: 9652364852,\n          designation: 'Full Stack Developer',\n          address: '3801 Chalk Butte Rd, Cut Bank, MT 59427, United States',\n          address1: '301 Chalk Butte Rd, Cut Bank, NY 96572, New York',\n          country: 'US',\n          state: 'California',\n          skill: [\n            'Adobe XD',\n            'Angular',\n            'Corel Draw',\n            'Figma',\n            'HTML',\n            'Illustrator',\n            'Javascript',\n            'Logo Design',\n            'Material UI',\n            'NodeJS',\n            'npm',\n            'Photoshop',\n            'React',\n            'Reduxjs & tooltit',\n            'SASS'\n          ],\n          note: `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.`,\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          firstname: Yup.string().max(255).required('First Name is required.'),\n          lastname: Yup.string().max(255).required('Last Name is required.'),\n          email: Yup.string().email('Invalid email address.').max(255).required('Email is required.'),\n          dob: Yup.date().max(maxDate, 'Age should be 18+ years.').required('Date of birth is requird.'),\n          contact: Yup.number()\n            .test('len', 'Contact should be exactly 10 digit', (val) => val?.toString().length === 10)\n            .required('Phone number is required'),\n          designation: Yup.string().required('Designation is required'),\n          address: Yup.string().min(50, 'Address to short.').required('Address is required'),\n          country: Yup.string().required('Country is required'),\n          state: Yup.string().required('State is required'),\n          note: Yup.string().min(150, 'Not shoulde be more then 150 char.')\n        })}\n        onSubmit={(values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            openSnackbar({\n              open: true,\n              message: 'Personal profile updated successfully.',\n              variant: 'alert',\n              alert: { color: 'success' }\n            });\n            setStatus({ success: false });\n            setSubmitting(false);\n          } catch (err) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, setFieldValue, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Box sx={{ p: 2.5 }}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-first-name\">First Name</InputLabel>\n                    <TextField\n                      fullWidth\n                      id=\"personal-first-name\"\n                      value={values.firstname}\n                      name=\"firstname\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"First Name\"\n                      autoFocus\n                      inputRef={inputRef}\n                    />\n                  </Stack>\n                  {touched.firstname && errors.firstname && (\n                    <FormHelperText error id=\"personal-first-name-helper\">\n                      {errors.firstname}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-last-name\">Last Name</InputLabel>\n                    <TextField\n                      fullWidth\n                      id=\"personal-last-name\"\n                      value={values.lastname}\n                      name=\"lastname\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"Last Name\"\n                    />\n                  </Stack>\n                  {touched.lastname && errors.lastname && (\n                    <FormHelperText error id=\"personal-last-name-helper\">\n                      {errors.lastname}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-email\">Email Address</InputLabel>\n                    <TextField\n                      type=\"email\"\n                      fullWidth\n                      value={values.email}\n                      name=\"email\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      id=\"personal-email\"\n                      placeholder=\"Email Address\"\n                    />\n                  </Stack>\n                  {touched.email && errors.email && (\n                    <FormHelperText error id=\"personal-email-helper\">\n                      {errors.email}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"dob-month\">Date of Birth (+18)</InputLabel>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                      <Select\n                        fullWidth\n                        value={values.dob.getMonth().toString()}\n                        name=\"dob-month\"\n                        onChange={(e) => handleChangeMonth(e, values.dob, setFieldValue)}\n                      >\n                        <MenuItem value=\"0\">January</MenuItem>\n                        <MenuItem value=\"1\">February</MenuItem>\n                        <MenuItem value=\"2\">March</MenuItem>\n                        <MenuItem value=\"3\">April</MenuItem>\n                        <MenuItem value=\"4\">May</MenuItem>\n                        <MenuItem value=\"5\">June</MenuItem>\n                        <MenuItem value=\"6\">July</MenuItem>\n                        <MenuItem value=\"7\">August</MenuItem>\n                        <MenuItem value=\"8\">September</MenuItem>\n                        <MenuItem value=\"9\">October</MenuItem>\n                        <MenuItem value=\"10\">November</MenuItem>\n                        <MenuItem value=\"11\">December</MenuItem>\n                      </Select>\n                      <Select\n                        fullWidth\n                        value={values.dob.getDate().toString()}\n                        name=\"dob-date\"\n                        onBlur={handleBlur}\n                        onChange={(e) => handleChangeDay(e, values.dob, setFieldValue)}\n                        MenuProps={MenuProps}\n                      >\n                        {[\n                          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31\n                        ].map((i) => (\n                          <MenuItem\n                            key={i}\n                            value={i}\n                            disabled={\n                              (values.dob.getMonth() === 1 && i > (values.dob.getFullYear() % 4 === 0 ? 29 : 28)) ||\n                              (values.dob.getMonth() % 2 !== 0 && values.dob.getMonth() < 7 && i > 30) ||\n                              (values.dob.getMonth() % 2 === 0 && values.dob.getMonth() > 7 && i > 30)\n                            }\n                          >\n                            {i}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                      <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <DatePicker\n                          views={['year']}\n                          value={values.dob}\n                          maxDate={maxDate}\n                          onChange={(newValue) => {\n                            setFieldValue('dob', newValue);\n                          }}\n                          sx={{ width: 1 }}\n                        />\n                      </LocalizationProvider>\n                    </Stack>\n                  </Stack>\n                  {touched.dob && errors.dob && (\n                    <FormHelperText error id=\"personal-dob-helper\">\n                      {errors.dob}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-phone\">Phone Number</InputLabel>\n                    <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                      <Select value={values.countryCode} name=\"countryCode\" onBlur={handleBlur} onChange={handleChange}>\n                        <MenuItem value=\"+91\">+91</MenuItem>\n                        <MenuItem value=\"1-671\">1-671</MenuItem>\n                        <MenuItem value=\"+36\">+36</MenuItem>\n                        <MenuItem value=\"(225)\">(255)</MenuItem>\n                        <MenuItem value=\"+39\">+39</MenuItem>\n                        <MenuItem value=\"1-876\">1-876</MenuItem>\n                        <MenuItem value=\"+7\">+7</MenuItem>\n                        <MenuItem value=\"(254)\">(254)</MenuItem>\n                        <MenuItem value=\"(373)\">(373)</MenuItem>\n                        <MenuItem value=\"1-664\">1-664</MenuItem>\n                        <MenuItem value=\"+95\">+95</MenuItem>\n                        <MenuItem value=\"(264)\">(264)</MenuItem>\n                      </Select>\n                      <TextField\n                        fullWidth\n                        id=\"personal-contact\"\n                        value={values.contact}\n                        name=\"contact\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        placeholder=\"Contact Number\"\n                      />\n                    </Stack>\n                  </Stack>\n                  {touched.contact && errors.contact && (\n                    <FormHelperText error id=\"personal-contact-helper\">\n                      {errors.contact}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-designation\">Designation</InputLabel>\n                    <TextField\n                      fullWidth\n                      id=\"personal-designation\"\n                      value={values.designation}\n                      name=\"designation\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"Designation\"\n                    />\n                  </Stack>\n                  {touched.designation && errors.designation && (\n                    <FormHelperText error id=\"personal-designation-helper\">\n                      {errors.designation}\n                    </FormHelperText>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n            <CardHeader title=\"Address\" />\n            <Divider />\n            <Box sx={{ p: 2.5 }}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-addrees1\">Address 01</InputLabel>\n                    <TextField\n                      multiline\n                      rows={3}\n                      fullWidth\n                      id=\"personal-addrees1\"\n                      value={values.address}\n                      name=\"address\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"Address 01\"\n                    />\n                  </Stack>\n                  {touched.address && errors.address && (\n                    <FormHelperText error id=\"personal-address-helper\">\n                      {errors.address}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-addrees2\">Address 02</InputLabel>\n                    <TextField\n                      multiline\n                      rows={3}\n                      fullWidth\n                      id=\"personal-addrees2\"\n                      value={values.address1}\n                      name=\"address1\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"Address 02\"\n                    />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-country\">Country</InputLabel>\n                    <Autocomplete\n                      id=\"personal-country\"\n                      fullWidth\n                      value={countries.filter((item) => item.code === values?.country)[0]}\n                      onBlur={handleBlur}\n                      onChange={(event, newValue) => {\n                        setFieldValue('country', newValue === null ? '' : newValue.code);\n                      }}\n                      options={countries}\n                      autoHighlight\n                      isOptionEqualToValue={(option, value) => option.code === value?.code}\n                      getOptionLabel={(option) => option.label}\n                      renderOption={(props, option) => (\n                        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                          {option.code && (\n                            <img\n                              loading=\"lazy\"\n                              width=\"20\"\n                              src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                              srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                              alt=\"\"\n                            />\n                          )}\n                          {option.label}\n                          {option.code && `(${option.code}) ${option.phone}`}\n                        </Box>\n                      )}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a country\"\n                          name=\"country\"\n                          inputProps={{\n                            ...params.inputProps,\n                            autoComplete: 'new-password' // disable autocomplete and autofill\n                          }}\n                        />\n                      )}\n                    />\n                  </Stack>\n                  {touched.country && errors.country && (\n                    <FormHelperText error id=\"personal-country-helper\">\n                      {errors.country}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"personal-state\">State</InputLabel>\n                    <TextField\n                      fullWidth\n                      id=\"personal-state\"\n                      value={values.state}\n                      name=\"state\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      placeholder=\"State\"\n                    />\n                  </Stack>\n                  {touched.state && errors.state && (\n                    <FormHelperText error id=\"personal-state-helper\">\n                      {errors.state}\n                    </FormHelperText>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n            <CardHeader title=\"Skills\" />\n            <Divider />\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', listStyle: 'none', p: 2.5, m: 0 }} component=\"ul\">\n              <Autocomplete\n                multiple\n                fullWidth\n                id=\"tags-outlined\"\n                options={skills}\n                value={values.skill}\n                onBlur={handleBlur}\n                getOptionLabel={(label) => label}\n                onChange={(event, newValue) => {\n                  setFieldValue('skill', newValue);\n                }}\n                renderInput={(params) => <TextField {...params} name=\"skill\" placeholder=\"Add Skills\" />}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      key={index}\n                      {...getTagProps({ index })}\n                      variant=\"combined\"\n                      label={option}\n                      deleteIcon={<Add style={{ fontSize: '0.75rem', transform: 'rotate(45deg)' }} />}\n                      sx={{ color: 'text.primary' }}\n                    />\n                  ))\n                }\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    p: 0,\n                    '& .MuiAutocomplete-tag': { m: 1 },\n                    '& fieldset': { display: 'none' },\n                    '& .MuiAutocomplete-endAdornment': { display: 'none' },\n                    '& .MuiAutocomplete-popupIndicator': { display: 'none' }\n                  }\n                }}\n              />\n            </Box>\n            <CardHeader title=\"Note\" />\n            <Divider />\n            <Box sx={{ p: 2.5 }}>\n              <TextField\n                multiline\n                rows={5}\n                fullWidth\n                value={values.note}\n                name=\"note\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                id=\"personal-note\"\n                placeholder=\"Note\"\n              />\n              {touched.note && errors.note && (\n                <FormHelperText error id=\"personal-note-helper\">\n                  {errors.note}\n                </FormHelperText>\n              )}\n              <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2} sx={{ mt: 2.5 }}>\n                <Button variant=\"outlined\" color=\"secondary\">\n                  Cancel\n                </Button>\n                <Button disabled={isSubmitting || Object.keys(errors).length !== 0} type=\"submit\" variant=\"contained\">\n                  Save\n                </Button>\n              </Stack>\n            </Box>\n          </form>\n        )}\n      </Formik>\n    </MainCard>\n  );\n}\n","size_bytes":21755},"src/pages/forms/plugins/dropzone.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport UploadAvatar from 'components/third-party/dropzone/Avatar';\nimport UploadSingleFile from 'components/third-party/dropzone/SingleFile';\nimport UploadMultiFile from 'components/third-party/dropzone/MultiFile';\n\n// third-party\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Category, TableDocument } from 'iconsax-react';\n\n// ==============================|| PLUGIN - DROPZONE ||============================== //\n\nexport default function DropzonePage() {\n  const [list, setList] = useState(false);\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard\n          title=\"Upload Multiple File\"\n          secondary={\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1.25}>\n              <IconButton color={list ? 'secondary' : 'primary'} size=\"small\" onClick={() => setList(false)}>\n                <TableDocument style={{ fontSize: '1.15rem' }} />\n              </IconButton>\n              <IconButton color={list ? 'primary' : 'secondary'} size=\"small\" onClick={() => setList(true)}>\n                <Category style={{ fontSize: '1.15rem' }} />\n              </IconButton>\n            </Stack>\n          }\n        >\n          <Formik\n            initialValues={{ files: null }}\n            onSubmit={() => {\n              // submit form\n            }}\n            validationSchema={yup.object().shape({\n              files: yup.mixed().required('Avatar is a required.')\n            })}\n          >\n            {({ values, handleSubmit, setFieldValue, touched, errors }) => (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <Stack spacing={1.5} alignItems=\"center\">\n                      <UploadMultiFile\n                        showList={list}\n                        setFieldValue={setFieldValue}\n                        files={values.files}\n                        error={touched.files && !!errors.files}\n                      />\n                    </Stack>\n                    {touched.files && errors.files && (\n                      <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                        {errors.files}\n                      </FormHelperText>\n                    )}\n                  </Grid>\n                </Grid>\n              </form>\n            )}\n          </Formik>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Upload Single File\">\n          <Formik\n            initialValues={{ files: null }}\n            onSubmit={() => {\n              // submit form\n            }}\n            validationSchema={yup.object().shape({\n              files: yup.mixed().required('Avatar is a required.')\n            })}\n          >\n            {({ values, handleSubmit, setFieldValue, touched, errors }) => (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <Stack spacing={1.5} alignItems=\"center\">\n                      <UploadSingleFile setFieldValue={setFieldValue} file={values.files} error={touched.files && !!errors.files} />\n                    </Stack>\n                    {touched.files && errors.files && (\n                      <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                        {errors.files}\n                      </FormHelperText>\n                    )}\n                  </Grid>\n                </Grid>\n              </form>\n            )}\n          </Formik>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Upload Avatar\">\n          <Formik\n            initialValues={{ files: null }}\n            onSubmit={() => {\n              // submit form\n            }}\n            validationSchema={yup.object().shape({\n              files: yup.mixed().required('Avatar is a required.')\n            })}\n          >\n            {({ values, handleSubmit, setFieldValue, touched, errors }) => (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <Stack alignItems=\"center\">\n                      <Stack spacing={1.5} alignItems=\"center\">\n                        <UploadAvatar setFieldValue={setFieldValue} file={values.files} error={touched.files && !!errors.files} />\n                        <Stack spacing={0}>\n                          <Typography align=\"center\" variant=\"caption\" color=\"secondary\">\n                            Allowed &apos;image/*&apos;\n                          </Typography>\n                          <Typography align=\"center\" variant=\"caption\" color=\"secondary\">\n                            *.png, *.jpeg, *.jpg, *.gif\n                          </Typography>\n                        </Stack>\n                      </Stack>\n                      {touched.files && errors.files && (\n                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                          {errors.files}\n                        </FormHelperText>\n                      )}\n                    </Stack>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                      <Button color=\"error\" onClick={() => setFieldValue('files', null)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" variant=\"contained\">\n                        Submit\n                      </Button>\n                    </Stack>\n                  </Grid>\n                </Grid>\n              </form>\n            )}\n          </Formik>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":6222},"src/sections/components-overview/ComponentWrapper.js":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// ==============================|| COMPONENTS - WRAPPER ||============================== //\n\nconst ComponentWrapper = styled(Box)(({ theme }) => ({\n  paddingLeft: theme.spacing(8),\n  paddingTop: theme.spacing(3),\n  marginBottom: theme.spacing(3),\n  [theme.breakpoints.down('xl')]: {\n    padding: theme.spacing(3),\n    paddingRight: 0\n  },\n  [theme.breakpoints.down('md')]: {\n    padding: theme.spacing(2)\n  },\n  [theme.breakpoints.down('sm')]: {\n    padding: theme.spacing(1.5)\n  }\n}));\n\nexport default ComponentWrapper;\n","size_bytes":622},"src/assets/images/profile/UserProfileBackLeft.jsx":{"content":"// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\n\n// ==============================|| USER PROFILE - CARD BACK LEFT ||============================== //\n\nconst UserProfileBackLeft = () => {\n  const theme = useTheme();\n\n  return (\n    <svg width=\"333\" height=\"61\" viewBox=\"0 0 333 61\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        opacity=\"0.4\"\n        d=\"M-0.322477 0.641086L-0.418408 0.55164L-9.20939 59.4297L23.6588 106.206L154.575 130.423C236.759 117.931 383.93 93.3326 315.142 94.879C246.355 96.4253 215.362 64.2785 215.362 64.2785C215.362 64.2785 185.497 26.9117 117.864 33.4279C42.6115 40.6783 10.6143 10.8399 -0.322477 0.641086Z\"\n        fill={alpha(theme.palette.primary.light, 0.4)}\n      />\n    </svg>\n  );\n};\n\nexport default UserProfileBackLeft;\n","size_bytes":800},"src/sections/components-overview/accordion/CustomizedAccordion.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Accordion from '@mui/material/Accordion';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Clock, EmojiHappy, Image, Profile } from 'iconsax-react';\n\n// ==============================|| ACCORDION - CUSTOMIZED ||============================== //\n\nexport default function CustomizedAccordion() {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState('panel1');\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const customAccordionCodeString = `<Box\n  sx={{\n    '& .MuiAccordion-root': {\n      borderColor: theme.palette.divider,\n      '& .MuiAccordionSummary-root': {\n        bgcolor: 'transparent',\n        flexDirection: 'row'\n      },\n      '& .MuiAccordionDetails-root': {\n        borderColor: theme.palette.divider\n      },\n      '& .Mui-expanded': {\n        color: 'primary.main'\n      }\n    }\n  }}\n>\n  <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n    <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n      <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n        <EmojiHappy />\n        <Typography variant=\"h6\">Accordion 01</Typography>\n      </Stack>\n    </AccordionSummary>\n    <AccordionDetails>\n      <Stack spacing={2}>\n        <Typography variant=\"h5\">Lorem ipsum dolor sit amet,</Typography>\n        <Typography>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        </Typography>\n        <Typography>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        </Typography>\n      </Stack>\n    </AccordionDetails>\n  </Accordion>\n  <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n    <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n      <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n        <Profile />\n        <Typography variant=\"h6\">Accordion 02</Typography>\n      </Stack>\n    </AccordionSummary>\n    <AccordionDetails>\n      <Typography>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      </Typography>\n    </AccordionDetails>\n  </Accordion>\n  <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n    <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n      <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n        <Clock />\n        <Typography variant=\"h6\">Accordion 03</Typography>\n      </Stack>\n    </AccordionSummary>\n    <AccordionDetails>\n      <Typography>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      </Typography>\n    </AccordionDetails>\n  </Accordion>\n  <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n    <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n      <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n        <Image />\n        <Typography variant=\"h6\">Accordion 04</Typography>\n      </Stack>\n    </AccordionSummary>\n    <AccordionDetails>\n      <Typography>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      </Typography>\n    </AccordionDetails>\n  </Accordion>\n</Box>`;\n\n  return (\n    <MainCard title=\"Customized\" codeString={customAccordionCodeString}>\n      <Box\n        sx={{\n          '& .MuiAccordion-root': {\n            borderColor: theme.palette.divider,\n            '& .MuiAccordionSummary-root': {\n              bgcolor: 'transparent',\n              flexDirection: 'row',\n              '&:focus-visible': { bgcolor: 'primary.lighter' }\n            },\n            '& .MuiAccordionDetails-root': { borderColor: theme.palette.divider },\n            '& .Mui-expanded': { color: 'primary.main' }\n          }\n        }}\n      >\n        <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n          <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n            <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n              <EmojiHappy size={18} />\n              <Typography variant=\"h6\">Accordion 01</Typography>\n            </Stack>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Stack spacing={2}>\n              <Typography variant=\"h5\">Lorem ipsum dolor sit amet,</Typography>\n              <Typography>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              </Typography>\n              <Typography>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              </Typography>\n            </Stack>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n          <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n            <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n              <Profile size={18} />\n              <Typography variant=\"h6\">Accordion 02</Typography>\n            </Stack>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n          <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n            <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n              <Clock size={18} />\n              <Typography variant=\"h6\">Accordion 03</Typography>\n            </Stack>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n          <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n            <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n              <Image size={18} />\n              <Typography variant=\"h6\">Accordion 04</Typography>\n            </Stack>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":8821},"src/sections/apps/e-commerce/checkout/Cart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport TableContainer from '@mui/material/TableContainer';\n\n// third-party\nimport { sum } from 'lodash';\nimport currency from 'currency.js';\n\n// project-imports\nimport CartDiscount from './CartDiscount';\nimport OrderSummary from './OrderSummery';\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport Avatar from 'components/@extended/Avatar';\nimport ColorOptions from '../products/ColorOptions';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add, ArrowLeft2, Minus, Trash } from 'iconsax-react';\n\n// product color select\nfunction getColor(color) {\n  return ColorOptions.filter((item) => item.value === color);\n}\n\n// ==============================|| CART - INCREMENT QUANTITY ||============================== //\n\nfunction Increment({ itemId, quantity, updateQuantity }) {\n  const [value, setValue] = useState(quantity);\n  const theme = useTheme();\n\n  const incrementHandler = () => {\n    setValue(value - 1);\n    updateQuantity(itemId, value - 1);\n  };\n\n  const decrementHandler = () => {\n    setValue(value + 1);\n    updateQuantity(itemId, value + 1);\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Button\n        key=\"three\"\n        variant=\"text\"\n        disabled={value <= 1}\n        onClick={incrementHandler}\n        sx={{ pr: 0.75, pl: 0.75, minWidth: '0px !important', '&:hover': { bgcolor: 'transparent' } }}\n      >\n        <Minus style={{ fontSize: 'inherit' }} />\n      </Button>\n      <Typography key=\"two\" sx={{ p: '9px 15px', border: '1px solid', borderColor: theme.palette.secondary[200] }}>\n        {value}\n      </Typography>\n      <Button\n        key=\"one\"\n        variant=\"text\"\n        onClick={decrementHandler}\n        sx={{ pl: 0.75, pr: 0.75, minWidth: '0px !important', '&:hover': { bgcolor: 'transparent' } }}\n      >\n        <Add style={{ fontSize: 'inherit' }} />\n      </Button>\n    </Stack>\n  );\n}\n\n// ==============================|| CHECKOUT - CART ||============================== //\n\nexport default function Cart({ checkout, onNext, removeProduct, updateQuantity }) {\n  const [totalQuantity, setTotalQuantity] = useState(0);\n  const [rows, setRows] = useState(checkout.products);\n\n  useEffect(() => {\n    setRows(checkout.products);\n    setTotalQuantity(sum(checkout.products.map((item) => item.quantity)));\n  }, [checkout.products]);\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={2}>\n          <MainCard content={false}>\n            <Grid container>\n              <Grid item xs={12} sx={{ py: 2.5, pl: 2.5 }}>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                  <Typography variant=\"subtitle1\">Cart</Typography>\n                  <Avatar color=\"secondary\" size=\"xs\">\n                    {totalQuantity}\n                  </Avatar>\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Divider />\n              </Grid>\n              <Grid item xs={12}>\n                <TableContainer>\n                  <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                    <TableBody>\n                      {rows.map((row, index) => {\n                        const colorsData = row.color ? getColor(row.color) : false;\n                        return (\n                          <TableRow key={index} sx={{ '&:last-of-type td, &:last-of-type th': { border: 0 } }}>\n                            <TableCell component=\"th\" scope=\"row\">\n                              <Grid container alignItems=\"center\" spacing={2}>\n                                <Grid item>\n                                  <Avatar\n                                    size=\"lg\"\n                                    variant=\"rounded\"\n                                    color=\"secondary\"\n                                    type=\"combined\"\n                                    src={row.image ? getImageUrl(`thumbs/${row.image}`, ImagePath.ECOMMERCE) : ''}\n                                  />\n                                </Grid>\n                                <Grid item>\n                                  <Stack spacing={0}>\n                                    <Typography\n                                      component={Link}\n                                      to={`/apps/e-commerce/product-details/${row.id}`}\n                                      target=\"_blank\"\n                                      variant=\"subtitle1\"\n                                      color=\"text.primary\"\n                                      sx={{ textDecoration: 'none' }}\n                                    >\n                                      {row.name}\n                                    </Typography>\n                                    <Typography color=\"text.secondary\">{colorsData ? colorsData[0].label : 'Multicolor'}</Typography>\n                                  </Stack>\n                                </Grid>\n                              </Grid>\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <Stack alignItems=\"center\">\n                                {row.offerPrice && row.quantity && (\n                                  <Typography variant=\"subtitle1\">{currency(row.offerPrice * row.quantity).format()}</Typography>\n                                )}\n                              </Stack>\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <Increment quantity={row.quantity} itemId={row.itemId} updateQuantity={updateQuantity} />\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <IconButton\n                                color=\"error\"\n                                onClick={() => removeProduct(row.itemId)}\n                                size=\"small\"\n                                sx={{ opacity: 0.75, '&:hover': { bgcolor: 'transparent' } }}\n                              >\n                                <Trash variant=\"Bold\" />\n                              </IconButton>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Grid>\n            </Grid>\n          </MainCard>\n          <Grid item sx={{ textAlign: 'right' }}>\n            <Button color=\"secondary\" component={Link} to=\"/apps/e-commerce/products\" variant=\"text\" startIcon={<ArrowLeft2 />}>\n              <Typography variant=\"h6\" color=\"text.primary\">\n                Back to Shopping\n              </Typography>\n            </Button>\n          </Grid>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <Stack spacing={3}>\n          <MainCard>\n            <CartDiscount />\n          </MainCard>\n          <OrderSummary checkout={checkout} show />\n          <Button variant=\"contained\" sx={{ textTransform: 'none' }} fullWidth onClick={onNext}>\n            Process to Checkout\n          </Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n\nIncrement.propTypes = {\n  itemId: PropTypes.oneOfType([PropTypes.any, PropTypes.number, PropTypes.string]),\n  quantity: PropTypes.number,\n  updateQuantity: PropTypes.func\n};\n\nCart.propTypes = { checkout: PropTypes.any, onNext: PropTypes.func, removeProduct: PropTypes.func, updateQuantity: PropTypes.func };\n","size_bytes":8109},"src/utils/axios.js":{"content":"import axios from 'axios';\n\nconst axiosServices = axios.create({ baseURL: import.meta.env.VITE_APP_API_URL || 'http://localhost:3010/' });\n\n// ==============================|| AXIOS - FOR MOCK SERVICES ||============================== //\n\naxiosServices.interceptors.request.use(\n  async (config) => {\n    const accessToken = localStorage.getItem('serviceToken');\n    if (accessToken) {\n      config.headers['Authorization'] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxiosServices.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response.status === 401 && !window.location.href.includes('/login')) {\n      window.location.pathname = '/maintenance/500';\n    }\n    return Promise.reject((error.response && error.response.data) || 'Wrong Services');\n  }\n);\n\nexport default axiosServices;\n\nexport const fetcher = async (args) => {\n  const [url, config] = Array.isArray(args) ? args : [args];\n\n  const res = await axiosServices.get(url, { ...config });\n\n  return res.data;\n};\n\nexport const fetcherPost = async (args) => {\n  const [url, config] = Array.isArray(args) ? args : [args];\n\n  const res = await axiosServices.post(url, { ...config });\n\n  return res.data;\n};\n","size_bytes":1267},"src/components/third-party/react-table/TablePagination.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport FormControl from '@mui/material/FormControl';\nimport Grid from '@mui/material/Grid';\nimport MenuItem from '@mui/material/MenuItem';\nimport Pagination from '@mui/material/Pagination';\nimport Select from '@mui/material/Select';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| TABLE PAGINATION ||============================== //\n\nexport default function TablePagination({ getPageCount, setPageIndex, setPageSize, getState, initialPageSize }) {\n  const [open, setOpen] = useState(false);\n  let options = [10, 25, 50, 100];\n\n  if (initialPageSize) {\n    options = [...options, initialPageSize]\n      .filter((item, index) => [...options, initialPageSize].indexOf(item) === index)\n      .sort(function (a, b) {\n        return a - b;\n      });\n  }\n\n  // eslint-disable-next-line\n  useEffect(() => setPageSize(initialPageSize || 10), []);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleChangePagination = (event, value) => {\n    setPageIndex(value - 1);\n  };\n\n  const handleChange = (event) => {\n    setPageSize(Number(event.target.value));\n  };\n\n  return (\n    <Grid spacing={1} container alignItems=\"center\" justifyContent=\"space-between\" sx={{ width: 'auto' }}>\n      <Grid item>\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            <Typography variant=\"caption\" color=\"secondary\">\n              Row per page\n            </Typography>\n            <FormControl sx={{ m: 1 }}>\n              <Select\n                id=\"demo-controlled-open-select\"\n                open={open}\n                onClose={handleClose}\n                onOpen={handleOpen}\n                value={getState().pagination.pageSize}\n                onChange={handleChange}\n                size=\"small\"\n                sx={{ '& .MuiSelect-select': { py: 0.75, px: 1.25 } }}\n              >\n                {options.map((option) => (\n                  <MenuItem key={option} value={option}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Stack>\n          <Typography variant=\"caption\" color=\"secondary\">\n            Go to\n          </Typography>\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            value={getState().pagination.pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              setPageIndex(page);\n            }}\n            sx={{ '& .MuiOutlinedInput-input': { py: 0.75, px: 1.25, width: 36 } }}\n          />\n        </Stack>\n      </Grid>\n      <Grid item sx={{ mt: { xs: 2, sm: 0 } }}>\n        <Pagination\n          sx={{ '& .MuiPaginationItem-root': { my: 0.5 } }}\n          count={getPageCount()}\n          page={getState().pagination.pageIndex + 1}\n          onChange={handleChangePagination}\n          color=\"primary\"\n          variant=\"combined\"\n          showFirstButton\n          showLastButton\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nTablePagination.propTypes = {\n  getPageCount: PropTypes.func,\n  setPageIndex: PropTypes.func,\n  setPageSize: PropTypes.func,\n  getState: PropTypes.func,\n  initialPageSize: PropTypes.number\n};\n","size_bytes":3519},"src/sections/charts/org-chart/DataCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Apple, Facebook, Google } from 'iconsax-react';\n\n// ==============================|| ORGANIZATION CHART - DATACARD ||============================== //\n\nexport default function DataCard({ name, role, avatar, linkedin, facebook, skype, root }) {\n  const linkHandler = (link) => {\n    window.open(link);\n  };\n  const theme = useTheme();\n\n  const subTree = alpha(theme.palette.secondary.lighter, 0.4);\n  const rootTree = alpha(theme.palette.primary.lighter, 0.6);\n\n  return (\n    <MainCard\n      sx={{\n        bgcolor: root ? rootTree : subTree,\n        border: root ? `1px solid ${theme.palette.primary.light} !important` : `1px solid ${theme.palette.divider} !important`,\n        width: 'max-content',\n        m: '0px auto',\n        p: 1.5,\n        direction: 'ltr'\n      }}\n      border={false}\n      content={false}\n    >\n      <Stack direction=\"row\" spacing={2}>\n        <Avatar sx={{ mt: 0.3 }} src={avatar} size=\"sm\" />\n        <Stack spacing={1.5}>\n          <Stack alignItems=\"flex-start\">\n            <Typography variant=\"subtitle1\" sx={{ color: root ? 'primary.main' : 'text.primary' }}>\n              {name}\n            </Typography>\n            {!root && (\n              <Chip\n                label={role}\n                sx={{ '& .MuiChip-label': { px: 0.75 }, width: 'max-content' }}\n                color=\"primary\"\n                variant=\"outlined\"\n                size=\"small\"\n              />\n            )}\n            {root && (\n              <Typography sx={{ color: 'primary.darker' }} variant=\"caption\">\n                {role}\n              </Typography>\n            )}\n          </Stack>\n          <Stack spacing={0} direction=\"row\">\n            <IconButton color=\"secondary\" onClick={() => linkHandler(linkedin)} size=\"small\">\n              <Apple variant=\"Bold\" />\n            </IconButton>\n            <IconButton color=\"primary\" onClick={() => linkHandler(facebook)} size=\"small\">\n              <Facebook variant=\"Bold\" />\n            </IconButton>\n            <IconButton color=\"error\" onClick={() => linkHandler(skype)} size=\"small\">\n              <Google variant=\"Bold\" />\n            </IconButton>\n          </Stack>\n        </Stack>\n      </Stack>\n    </MainCard>\n  );\n}\n\nDataCard.propTypes = {\n  name: PropTypes.any,\n  role: PropTypes.any,\n  avatar: PropTypes.any,\n  linkedin: PropTypes.any,\n  facebook: PropTypes.any,\n  skype: PropTypes.any,\n  root: PropTypes.any\n};\n","size_bytes":2829},"src/sections/components-overview/tabs/ScrollableTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| TABS - SCROLLABLE ||============================== //\n\nexport default function ScrollableTabs() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const scrollTabCodeString = `// ScrollableTabs.tsx\n  <Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"basic tabs example\">\n  <Tab\n    label=\"Tab1\"\n    icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n    iconPosition=\"end\"\n    {...a11yProps(0)}\n  />\n  <Tab\n    label=\"Tab2\"\n    disabled\n    icon={<Chip label=\"99\" disabled variant=\"light\" size=\"small\" />}\n    iconPosition=\"end\"\n    {...a11yProps(1)}\n  />\n  <Tab label=\"Tab3\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(2)} />\n  <Tab label=\"Tab4\" {...a11yProps(3)} />\n  <Tab label=\"Tab5\" {...a11yProps(4)} />\n  <Tab label=\"Tab6\" {...a11yProps(5)} />\n  <Tab label=\"Tab7\" {...a11yProps(6)} />\n  <Tab label=\"Tab8\" {...a11yProps(7)} />\n  <Tab label=\"Tab9\" {...a11yProps(8)} />\n</Tabs>\n<TabPanel value={value} index={0}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n    purus sem, sagittis eu mauris et, viverra lobortis urna.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={2}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={3}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={4}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n    purus sem, sagittis eu mauris et, viverra lobortis urna.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={5}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={6}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={7}>\n  <Typography variant=\"h6\">\n    Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n    semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={8}>\n  <Typography variant=\"h6\">\n    Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n    cursus in nec est.\n  </Typography>\n</TabPanel>`;\n\n  return (\n    <MainCard codeString={scrollTabCodeString}>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"basic tabs example\">\n            <Tab\n              label=\"Tab1\"\n              icon={<Chip label=\"99\" color=\"primary\" variant=\"light\" size=\"small\" />}\n              iconPosition=\"end\"\n              {...a11yProps(0)}\n            />\n            <Tab\n              label=\"Tab2\"\n              disabled\n              icon={<Chip label=\"99\" disabled variant=\"light\" size=\"small\" />}\n              iconPosition=\"end\"\n              {...a11yProps(1)}\n            />\n            <Tab label=\"Tab3\" icon={<Chip label=\"9\" variant=\"light\" size=\"small\" />} iconPosition=\"end\" {...a11yProps(2)} />\n            <Tab label=\"Tab4\" {...a11yProps(3)} />\n            <Tab label=\"Tab5\" {...a11yProps(4)} />\n            <Tab label=\"Tab6\" {...a11yProps(5)} />\n            <Tab label=\"Tab7\" {...a11yProps(6)} />\n            <Tab label=\"Tab8\" {...a11yProps(7)} />\n            <Tab label=\"Tab9\" {...a11yProps(8)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={value} index={0}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n            purus sem, sagittis eu mauris et, viverra lobortis urna.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n            purus sem, sagittis eu mauris et, viverra lobortis urna.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={5}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={6}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={7}>\n          <Typography variant=\"h6\">\n            Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n            semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={8}>\n          <Typography variant=\"h6\">\n            Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n            cursus in nec est.\n          </Typography>\n        </TabPanel>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":8193},"src/sections/components-overview/cards/CardTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| CARD - TAB ||============================== //\n\nexport default function CardTabs({ activeTab }) {\n  const [value, setValue] = useState(activeTab || 0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n          <Tab label=\"Article\" {...a11yProps(0)} />\n          <Tab label=\"App\" {...a11yProps(1)} />\n          <Tab label=\"Project\" {...a11yProps(2)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n          Article Content\n        </Typography>\n        <Typography variant=\"h6\" gutterBottom={!activeTab}>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque non libero dignissim, viverra augue eu, semper ligula. Mauris\n          purus sem, sagittis eu mauris et, viverra lobortis urna.\n        </Typography>\n        {!activeTab && (\n          <Typography variant=\"h6\">\n            Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Suspendisse blandit velit sit amet velit porta aliquet.\n          </Typography>\n        )}\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n          App Content\n        </Typography>\n        <Typography variant=\"h6\">\n          Suspendisse sed lectus ac nunc rhoncus scelerisque. Integer vitae fringilla leo. Aliquam tincidunt et turpis non mattis. Ut sed\n          semper orci, sed facilisis mauris. Suspendisse blandit velit sit amet velit porta aliquet.\n        </Typography>\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Typography variant=\"h5\" gutterBottom color=\"text.secondary\">\n          Project Content\n        </Typography>\n        <Typography variant=\"h6\">\n          Nam egestas sollicitudin nisl, sit amet aliquam risus pharetra ac. Donec ac lacinia orci. Phasellus ut enim eu ligula placerat\n          cursus in nec est.\n        </Typography>\n      </TabPanel>\n    </Box>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n\nCardTabs.propTypes = { activeTab: PropTypes.number };\n","size_bytes":3141},"src/sections/widget/chart/TotalIncome.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowUp } from 'iconsax-react';\n\n// chart options\nconst pieChartOptions = {\n  chart: {\n    type: 'donut',\n    height: 320\n  },\n  labels: ['Total income', 'Total rent', 'Download', 'Views'],\n  legend: {\n    show: false\n  },\n  dataLabels: {\n    enabled: false\n  }\n};\n\n// ==============================|| CHART ||============================== //\n\nfunction ApexDonutChart() {\n  const theme = useTheme();\n  const downSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n  const backColor = theme.palette.background.paper;\n\n  const [series] = useState([31, 26, 23, 20]);\n  const [options, setOptions] = useState(pieChartOptions);\n\n  useEffect(() => {\n    const primaryMain = theme.palette.primary.main;\n    const primaryLighter = theme.palette.primary[100];\n    const warning = theme.palette.warning.main;\n    const success = theme.palette.success.main;\n\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [primaryMain, warning, success, primaryLighter],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      stroke: {\n        colors: [backColor]\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, backColor, theme]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"donut\" height={downSM ? 280 : 320} />\n    </div>\n  );\n}\n\n// ==============================|| CHART WIDGETS - TOTAL INCOME ||============================== //\n\nexport default function TotalIncome() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Total Income</Typography>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <ApexDonutChart />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <MainCard content={false} border={false} sx={{ bgcolor: 'background.default' }}>\n            <Stack alignItems=\"flex-start\" sx={{ p: 2 }} spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot componentDiv />\n                <Typography>Item01</Typography>\n              </Stack>\n\n              <Typography variant=\"subtitle1\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                $23,876\n                <Typography\n                  variant=\"caption\"\n                  color=\"text.secondary\"\n                  sx={{ fontWeight: 600, display: 'flex', alignItems: 'center', gap: 0.25 }}\n                >\n                  <ArrowUp size={14} /> +$76,343\n                </Typography>\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <MainCard content={false} border={false} sx={{ bgcolor: 'background.default' }}>\n            <Stack alignItems=\"flex-start\" sx={{ p: 2 }} spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot componentDiv sx={{ bgcolor: 'primary.200' }} />\n                <Typography>Item02</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                $23,876\n                <Typography\n                  variant=\"caption\"\n                  color=\"text.secondary\"\n                  sx={{ fontWeight: 600, display: 'flex', alignItems: 'center', gap: 0.25 }}\n                >\n                  <ArrowUp size={14} /> +$76,343\n                </Typography>\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <MainCard content={false} border={false} sx={{ bgcolor: 'background.default' }}>\n            <Stack alignItems=\"flex-start\" sx={{ p: 2 }} spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot componentDiv color=\"warning\" />\n                <Typography>Item03</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                $23,876\n                <Typography\n                  variant=\"caption\"\n                  color=\"text.secondary\"\n                  sx={{ fontWeight: 600, display: 'flex', alignItems: 'center', gap: 0.25 }}\n                >\n                  <ArrowUp size={14} /> +$76,343\n                </Typography>\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <MainCard content={false} border={false} sx={{ bgcolor: 'background.default' }}>\n            <Stack alignItems=\"flex-start\" sx={{ p: 2 }} spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot componentDiv color=\"success\" />\n                <Typography>Item04</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                $23,876\n                <Typography\n                  variant=\"caption\"\n                  color=\"text.secondary\"\n                  sx={{ fontWeight: 600, display: 'flex', alignItems: 'center', gap: 0.25 }}\n                >\n                  <ArrowUp size={14} /> +$76,343\n                </Typography>\n              </Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":7911},"src/sections/apps/e-commerce/product-details/RelatedProducts.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Rating from '@mui/material/Rating';\nimport ListItem from '@mui/material/ListItem';\nimport Skeleton from '@mui/material/Skeleton';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { getRelatedProducts } from 'api/products';\nimport { openSnackbar } from 'api/snackbar';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Heart } from 'iconsax-react';\n\nfunction ListProduct({ product }) {\n  const theme = useTheme();\n  const history = useNavigate();\n\n  const [wishlisted, setWishlisted] = useState(false);\n  const addToFavourite = () => {\n    setWishlisted(!wishlisted);\n    openSnackbar({\n      open: true,\n      message: 'Added to favourites',\n      variant: 'alert',\n      alert: { color: 'success' }\n    });\n  };\n\n  const linkHandler = (id) => {\n    history(`/apps/e-commerce/product-details/${id}`);\n  };\n\n  return (\n    <ListItemButton divider onClick={() => linkHandler(product.id)}>\n      <ListItemAvatar>\n        <Avatar\n          alt=\"Avatar\"\n          size=\"xl\"\n          color=\"secondary\"\n          variant=\"rounded\"\n          type=\"combined\"\n          src={product.image ? getImageUrl(`thumbs/${product.image}`, ImagePath.ECOMMERCE) : ''}\n          sx={{ borderColor: theme.palette.divider, mr: 1.15 }}\n        />\n      </ListItemAvatar>\n      <ListItemText\n        disableTypography\n        primary={<Typography variant=\"subtitle1\">{product.name}</Typography>}\n        secondary={\n          <Stack spacing={1}>\n            <Typography color=\"text.secondary\">{product.description}</Typography>\n            <Stack spacing={1}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                <Typography variant=\"h5\">{product.salePrice ? `$${product.salePrice}` : `$${product.offerPrice}`}</Typography>\n                {product.salePrice && (\n                  <Typography variant=\"h6\" color=\"text.secondary\" sx={{ textDecoration: 'line-through' }}>\n                    ${product.offerPrice}\n                  </Typography>\n                )}\n              </Stack>\n              <Rating name=\"simple-controlled\" value={product.rating < 4 ? product.rating + 1 : product.rating} readOnly precision={0.1} />\n            </Stack>\n          </Stack>\n        }\n        sx={{ mt: 0 }}\n      />\n      <ListItemSecondaryAction>\n        <IconButton\n          size=\"medium\"\n          color=\"secondary\"\n          sx={{ opacity: wishlisted ? 1 : 0.5, '&:hover': { bgcolor: 'transparent' }, mt: -1 }}\n          onClick={addToFavourite}\n        >\n          {wishlisted ? (\n            <Heart variant=\"Bold\" style={{ fontSize: '1.15rem', color: theme.palette.error.main }} />\n          ) : (\n            <Heart style={{ fontSize: '1.15rem' }} />\n          )}\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItemButton>\n  );\n}\n\n// ==============================|| PRODUCT DETAILS - RELATED PRODUCTS ||============================== //\n\nexport default function RelatedProducts({ id }) {\n  const [related, setRelated] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  (async () => {\n    await getRelatedProducts(id).then((response) => {\n      setRelated(response.data);\n      setLoader(false);\n    });\n  })();\n\n  let productResult = (\n    <List>\n      {[1, 2, 3].map((index) => (\n        <ListItem key={index}>\n          <ListItemAvatar sx={{ minWidth: 72 }}>\n            <Skeleton variant=\"rectangular\" width={62} height={62} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={<Skeleton animation=\"wave\" height={22} />}\n            secondary={\n              <>\n                <Skeleton animation=\"wave\" height={14} width=\"60%\" />\n                <Skeleton animation=\"wave\" height={18} width=\"20%\" />\n                <Skeleton animation=\"wave\" height={14} width=\"35%\" />\n              </>\n            }\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n\n  if (related && !loader) {\n    productResult = (\n      <List\n        component=\"nav\"\n        sx={{\n          '& .MuiListItemButton-root': {\n            borderRadius: 0,\n            my: 0,\n            px: 3,\n            py: 2,\n            alignItems: 'flex-start',\n            '& .MuiListItemSecondaryAction-root': {\n              alignSelf: 'flex-start',\n              ml: 1,\n              position: 'relative',\n              right: 'auto',\n              top: 'auto',\n              transform: 'none'\n            },\n            '& .MuiListItemAvatar-root': { mr: '7px', mt: 0.75 }\n          },\n          p: 0\n        }}\n      >\n        {related.map((product, index) => (\n          <ListProduct key={index} product={product} />\n        ))}\n      </List>\n    );\n  }\n\n  return (\n    <SimpleBar sx={{ height: { xs: '100%', md: 'calc(100% - 62px)' } }}>\n      <Grid item>\n        <Stack>\n          {productResult}\n          <Button color=\"secondary\" variant=\"outlined\" sx={{ mx: 2, my: 4, textTransform: 'none' }}>\n            View all Products\n          </Button>\n        </Stack>\n      </Grid>\n    </SimpleBar>\n  );\n}\n\nListProduct.propTypes = { product: PropTypes.any };\n\nRelatedProducts.propTypes = { id: PropTypes.string };\n","size_bytes":5886},"src/components/third-party/react-table/EmptyTable.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| EMPTY TABLE - NO DATA ||============================== //\n\nconst StyledGridOverlay = styled(Stack)(({ theme }) => ({\n  height: '400px',\n  '& .ant-empty-img-1': { fill: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary[400] },\n  '& .ant-empty-img-2': { fill: theme.palette.secondary.light },\n  '& .ant-empty-img-3': { fill: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.A200 : theme.palette.secondary[200] },\n  '& .ant-empty-img-4': { fill: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.A300 : theme.palette.secondary.A100 },\n  '& .ant-empty-img-5': { fillOpacity: 0.95, fill: theme.palette.secondary.light }\n}));\n\nexport default function EmptyTable({ msg }) {\n  return (\n    <StyledGridOverlay alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n      <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <g transform=\"translate(24 31.67)\">\n            <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\n            <path\n              className=\"ant-empty-img-1\"\n              d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\n            />\n            <path className=\"ant-empty-img-2\" d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\" />\n            <path\n              className=\"ant-empty-img-3\"\n              d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\n            />\n          </g>\n          <path\n            className=\"ant-empty-img-3\"\n            d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\n          />\n          <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\n            <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\n            <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\n          </g>\n        </g>\n      </svg>\n      <Typography align=\"center\" color=\"secondary\">\n        {msg}\n      </Typography>\n    </StyledGridOverlay>\n  );\n}\n\nEmptyTable.propTypes = { msg: PropTypes.string };\n","size_bytes":3193},"src/sections/components-overview/select/ChipSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = { PaperProps: { style: { maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP, width: 250 } } };\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder'\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\n\n// ==============================|| SELECT - CHIP ||============================== //\n\nexport default function ChipSelect() {\n  const theme = useTheme();\n  const [personName, setPersonName] = useState(['Van Henry', 'Kelly Snyder']);\n\n  const handleChange = (event) => {\n    const {\n      target: { value }\n    } = event;\n    setPersonName(\n      // On autofill we get a the stringified value.\n      typeof value === 'string' ? value.split(',') : value\n    );\n  };\n\n  const chipSelectCodeString = `// ChipSelect.tsx\n<FormControl fullWidth>\n  <InputLabel id=\"demo-multiple-chip-label\">Chip</InputLabel>\n  <Select\n    labelId=\"demo-multiple-chip-label\"\n    id=\"demo-multiple-chip\"\n    multiple\n    value={personName}\n    onChange={handleChange}\n    input={<OutlinedInput id=\"select-multiple-chip\" placeholder=\"Chip\" />}\n    renderValue={(selected) => (\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n        {selected.map((value) => (\n          <Chip key={value} label={value} variant=\"light\" color=\"primary\" size=\"small\" />\n        ))}\n      </Box>\n    )}\n    MenuProps={MenuProps}\n  >\n    {names.map((name) => (\n      <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n        {name}\n      </MenuItem>\n    ))}\n  </Select>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"With Chip\" codeString={chipSelectCodeString}>\n      <Stack spacing={1}>\n        <InputLabel id=\"demo-multiple-chip-label\">Chip</InputLabel>\n        <FormControl fullWidth>\n          <Select\n            labelId=\"demo-multiple-chip-label\"\n            id=\"demo-multiple-chip\"\n            multiple\n            value={personName}\n            onChange={handleChange}\n            input={<OutlinedInput id=\"select-multiple-chip\" placeholder=\"Chip\" />}\n            renderValue={(selected) => (\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {selected.map((value) => (\n                  <Chip key={value} label={value} variant=\"light\" color=\"primary\" size=\"small\" />\n                ))}\n              </Box>\n            )}\n            MenuProps={MenuProps}\n          >\n            {names.map((name) => (\n              <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":3482},"src/layout/Simple/FooterBlock.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { motion } from 'framer-motion';\n\n// project-imports\nimport Logo from 'components/logo';\n\n// assets\nimport { Dribbble, Facebook, Link2, Youtube, Xrp } from 'iconsax-react';\n\n// link - custom style\nconst FooterLink = styled(Link)(({ theme }) => ({\n  color: theme.palette.text.primary,\n  '&:hover, &:active': {\n    color: theme.palette.primary.main\n  }\n}));\n\n// ==============================|| LANDING - FOOTER PAGE ||============================== //\n\nexport default function FooterBlock({ isFull }) {\n  const theme = useTheme();\n\n  const linkSX = {\n    color: theme.palette.text.secondary,\n    fontWeight: 400,\n    opacity: '0.6',\n    cursor: 'pointer',\n    '&:hover': {\n      opacity: '1'\n    }\n  };\n\n  return (\n    <>\n      <Box sx={{ pt: isFull ? 5 : 10, pb: 10, bgcolor: 'secondary.200', borderTop: `1px solid ${theme.palette.divider}` }}>\n        <Container>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={4}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30\n                }}\n              >\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Logo to=\"/\" />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 400, maxWidth: 320 }}>\n                      Phoenixcoded has gained the trust of over 5.5K customers since 2015, thanks to our commitment to delivering\n                      high-quality products. Our experienced team players are responsible for managing Able Pro.\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </motion.div>\n            </Grid>\n            <Grid item xs={12} md={8}>\n              <Grid container spacing={{ xs: 5, md: 2 }}>\n                <Grid item xs={6} sm={4}>\n                  <Stack spacing={3}>\n                    <Typography variant=\"h5\">Company</Typography>\n                    <Stack spacing={{ xs: 1.5, md: 2.5 }}>\n                      <FooterLink href=\"https://1.envato.market/xk3bQd\" target=\"_blank\" underline=\"none\">\n                        Profile\n                      </FooterLink>\n                      <FooterLink href=\"https://1.envato.market/Qyre4x\" target=\"_blank\" underline=\"none\">\n                        Portfolio\n                      </FooterLink>\n                      <FooterLink href=\"https://1.envato.market/Py9k4X\" target=\"_blank\" underline=\"none\">\n                        Follow Us\n                      </FooterLink>\n                      <FooterLink href=\"https://phoenixcoded.net\" target=\"_blank\" underline=\"none\">\n                        Website\n                      </FooterLink>\n                    </Stack>\n                  </Stack>\n                </Grid>\n                <Grid item xs={6} sm={4}>\n                  <Stack spacing={3}>\n                    <Typography variant=\"h5\">Help & Support</Typography>\n                    <Stack spacing={{ xs: 1.5, md: 2.5 }}>\n                      <FooterLink href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/\" target=\"_blank\" underline=\"none\">\n                        Documentation\n                      </FooterLink>\n                      <FooterLink href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/roadmap/\" target=\"_blank\" underline=\"none\">\n                        Feature Request\n                      </FooterLink>\n                      <FooterLink href=\"https://phoenixcoded.gitbook.io/able-pro/v/react/roadmap/\" target=\"_blank\" underline=\"none\">\n                        RoadMap\n                      </FooterLink>\n                      <FooterLink href=\"https://phoenixcoded.authordesk.app/\" target=\"_blank\" underline=\"none\">\n                        Support\n                      </FooterLink>\n                      <FooterLink href=\"https://themeforest.net/user/phoenixcoded#contact\" target=\"_blank\" underline=\"none\">\n                        Email Us\n                      </FooterLink>\n                    </Stack>\n                  </Stack>\n                </Grid>\n                <Grid item xs={6} sm={4}>\n                  <Stack spacing={3}>\n                    <Typography variant=\"h5\">Useful Resources</Typography>\n                    <Stack spacing={{ xs: 1.5, md: 2.5 }}>\n                      <FooterLink href=\"https://themeforest.net/page/item_support_policy\" target=\"_blank\" underline=\"none\">\n                        Support Policy\n                      </FooterLink>\n                      <FooterLink href=\"https://themeforest.net/licenses/standard\" target=\"_blank\" underline=\"none\">\n                        Licenses Term\n                      </FooterLink>\n                    </Stack>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n      <Box\n        sx={{\n          py: 2.4,\n          borderTop: `1px solid ${theme.palette.divider}`,\n          bgcolor: 'secondary.200'\n        }}\n      >\n        <Container>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} sm={8}>\n              <Typography>\n                © Handcrafted by Team{' '}\n                <Link href=\"https://1.envato.market/xk3bQd\" underline=\"none\">\n                  {' '}\n                  Phoenixcoded\n                </Link>\n              </Typography>\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <Grid container spacing={2} alignItems=\"center\" sx={{ justifyContent: 'flex-end' }}>\n                <Grid item>\n                  <Tooltip title=\"Linkedin\">\n                    <Link href=\"https://in.linkedin.com/company/phoenixcoded\" underline=\"none\" target=\"_blank\" sx={linkSX}>\n                      <Link2 variant=\"Bold\" size={24} />\n                    </Link>\n                  </Tooltip>\n                </Grid>\n                <Grid item>\n                  <Tooltip title=\"Twitter\">\n                    <Link href=\"https://twitter.com/phoenixcoded?lang=en\" underline=\"none\" target=\"_blank\" sx={linkSX}>\n                      <Xrp variant=\"Bold\" size={16} />\n                    </Link>\n                  </Tooltip>\n                </Grid>\n                <Grid item>\n                  <Tooltip title=\"Facebook\">\n                    <Link href=\"https://www.facebook.com/Phoenixcoded/\" underline=\"none\" target=\"_blank\" sx={linkSX}>\n                      <Facebook variant=\"Bold\" size={20} />\n                    </Link>\n                  </Tooltip>\n                </Grid>\n                <Grid item>\n                  <Tooltip title=\"Dribbble\">\n                    <Link href=\"https://dribbble.com/Phoenixcoded\" underline=\"none\" target=\"_blank\" sx={linkSX}>\n                      <Dribbble variant=\"Bold\" size={20} />\n                    </Link>\n                  </Tooltip>\n                </Grid>\n                <Grid item>\n                  <Tooltip title=\"Youtube\">\n                    <Link href=\"https://www.youtube.com/@Phoenixcodedwebsolution?app=desktop\" underline=\"none\" target=\"_blank\" sx={linkSX}>\n                      <Youtube variant=\"Bold\" size={20} />\n                    </Link>\n                  </Tooltip>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n    </>\n  );\n}\n\nFooterBlock.propTypes = { isFull: PropTypes.bool };\n","size_bytes":7983},"src/components/Customization/ThemeMode.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nimport { ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport { Moon, Setting2, Sun1 } from 'iconsax-react';\n\n// ==============================|| CUSTOMIZATION - MODE ||============================== //\n\nexport default function ThemeModeLayout() {\n  const theme = useTheme();\n\n  const { mode, onChangeMode } = useConfig();\n\n  const handleModeChange = (event) => {\n    onChangeMode(event.target.value);\n  };\n\n  return (\n    <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={mode} onChange={handleModeChange}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value={ThemeMode.LIGHT} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{\n                  width: '100%',\n                  borderWidth: 2,\n                  p: 1,\n                  ...(mode === ThemeMode.LIGHT && { borderColor: theme.palette.primary.main })\n                }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ height: 44 }}>\n                  <Sun1 variant=\"Bold\" color={theme.palette.warning.main} />\n                </Stack>\n              </MainCard>\n              <Typography variant=\"caption\">Light</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value={ThemeMode.DARK} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{\n                  width: '100%',\n                  borderWidth: 2,\n                  p: 1,\n                  ...(mode === ThemeMode.DARK && { borderColor: theme.palette.primary.main })\n                }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ height: 44 }}>\n                  <Moon variant=\"Bold\" />\n                </Stack>\n              </MainCard>\n              <Typography variant=\"caption\">Dark</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value={ThemeMode.AUTO} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', height: 60, m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard\n                content={false}\n                sx={{ width: '100%', borderWidth: 2, p: 1, ...(mode === ThemeMode.AUTO && { borderColor: theme.palette.primary.main }) }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" sx={{ height: 44 }}>\n                  <Setting2 variant=\"Bold\" />\n                </Stack>\n              </MainCard>\n              <Typography variant=\"caption\">Auto</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":3663},"src/sections/apps/chat/ChatMessageAction.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { ThemeDirection } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// assets\nimport { Back, Copy, Next, Trash } from 'iconsax-react';\n\n// ==============================|| CHAT - ACTION ||============================== //\n\nexport default function ChatMessageAction({ index }) {\n  const { themeDirection } = useConfig();\n  const [anchorEl, setAnchorEl] = useState();\n\n  const handleClickSort = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleCloseSort = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <IconButton\n        id={`chat-action-button-${index}`}\n        aria-controls={open ? `chat-action-menu-${index}` : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClickSort}\n        size=\"small\"\n        color=\"secondary\"\n        sx={{ transform: 'rotate(90deg)' }}\n      >\n        <MoreIcon />\n      </IconButton>\n      <Menu\n        id={`chat-action-menu-${index}`}\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleCloseSort}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        MenuListProps={{ 'aria-labelledby': `chat-action-button-${index}` }}\n        sx={{ p: 0, '& .MuiMenu-list': { p: 0 } }}\n      >\n        <MenuItem>\n          <Back style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n          <Typography>Reply</Typography>\n        </MenuItem>\n        <MenuItem>\n          <Next style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n          <Typography>Forward</Typography>\n        </MenuItem>\n        <MenuItem>\n          <Copy style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n          <Typography>Copy</Typography>\n        </MenuItem>\n        <MenuItem>\n          <Trash style={themeDirection === ThemeDirection.RTL ? { paddingLeft: 8 } : { paddingRight: 8 }} />\n          <Typography>Delete</Typography>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n}\n\nChatMessageAction.propTypes = { index: PropTypes.number };\n","size_bytes":2592},"src/api/fetchData.js":{"content":"const urlToFileImage = async (url) => {\n  const response = await fetch('http://localhost:8000' + url);\n  const blob = await response.blob();\n  const fileName = url.split('/').pop();\n  const mimeType = blob.type || 'image/jpeg'; // Default to 'image/jpeg' if type is not available\n  return new File([blob], fileName, { type: mimeType });\n};\n\nconst returnImageObject = (value) => {\n  const isImageObject = (obj) => {\n    return obj && obj.type && obj.type.startsWith('image/');\n  };\n\n  const fetchFile = async (file) => {\n    const convertedFile = await urlToFileImage(file);\n    return convertedFile;\n  };\n\n  if (isImageObject(value)) {\n    return value;\n  }\n\n  if (value && value.startsWith('/images')) {\n    return fetchFile(value);\n  }\n\n  return null;\n};\n\nexport default returnImageObject;\n","size_bytes":792},"src/layout/Dashboard/Drawer/DrawerHeader/index.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n// project-imports\nimport DrawerHeaderStyled from './DrawerHeaderStyled';\n\nimport Logo from 'components/logo';\nimport { DRAWER_WIDTH, HEADER_HEIGHT, MenuOrientation } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| DRAWER HEADER ||============================== //\n\nexport default function DrawerHeader({ open }) {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { menuOrientation } = useConfig();\n  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;\n\n  return (\n    <DrawerHeaderStyled\n      theme={theme}\n      open={open}\n      sx={{\n        minHeight: isHorizontal ? 'unset' : HEADER_HEIGHT,\n        width: isHorizontal ? { xs: '100%', lg: DRAWER_WIDTH + 50 } : 'inherit',\n        paddingTop: isHorizontal ? { xs: '10px', lg: '0' } : '8px',\n        paddingBottom: isHorizontal ? { xs: '18px', lg: '0' } : '8px',\n        paddingLeft: isHorizontal ? { xs: '24px', lg: '0' } : open ? '24px' : 0\n      }}\n    >\n      <Logo isIcon={!open} sx={{ width: open ? 'auto' : 52, height: 'auto' }} />\n    </DrawerHeaderStyled>\n  );\n}\n\nDrawerHeader.propTypes = { open: PropTypes.bool };\n","size_bytes":1360},"src/pages/apps/invoice/edit.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport Select from '@mui/material/Select';\nimport Divider from '@mui/material/Divider';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableRow from '@mui/material/TableRow';\nimport TextField from '@mui/material/TextField';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport Typography from '@mui/material/Typography';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TableContainer from '@mui/material/TableContainer';\nimport FormHelperText from '@mui/material/FormHelperText';\n\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport { v4 as UIDV4 } from 'uuid';\nimport { format } from 'date-fns';\nimport { FieldArray, Form, Formik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport CircularLoader from 'components/CircularLoader';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport InvoiceItem from 'sections/apps/invoice/InvoiceItem';\nimport InvoiceModal from 'sections/apps/invoice/InvoiceModal';\nimport AddressModal from 'sections/apps/invoice/AddressModal';\n\nimport {\n  handlerCustomerTo,\n  handlerCustomerFrom,\n  handlerPreview,\n  selectCountry,\n  updateInvoice,\n  useGetInvoice,\n  useGetInvoiceMaster\n} from 'api/invoice';\nimport { openSnackbar } from 'api/snackbar';\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport { Add, Edit } from 'iconsax-react';\n\nconst validationSchema = yup.object({\n  date: yup.date().required('Invoice date is required'),\n  due_date: yup\n    .date()\n    .when('date', (date, schema) => date && schema.min(date, \"Due date can't be before invoice date\"))\n    .nullable()\n    .required('Due date is required'),\n  customerInfo: yup\n    .object({\n      name: yup.string().required('Invoice receiver information is required')\n    })\n    .required('Invoice receiver information is required'),\n  status: yup.string().required('Status selection is required'),\n  invoice_detail: yup\n    .array()\n    .required('Invoice details is required')\n    .of(\n      yup.object().shape({\n        name: yup.string().required('Product name is required')\n      })\n    )\n    .min(1, 'Invoice must have at least 1 items')\n});\n\nconst invoiceSingleList = {\n  name: '',\n  address: '',\n  phone: '',\n  email: ''\n};\n\n// ==============================|| INVOICE EDIT - FORM ||============================== //\n\nfunction EditForm({ list, invoiceMaster }) {\n  const theme = useTheme();\n  const navigation = useNavigate();\n\n  const notesLimit = 500;\n\n  const handlerEdit = (values) => {\n    const newList = {\n      id: Number(list?.id),\n      invoice_id: Number(values.invoice_id),\n      customer_name: values.cashierInfo?.name,\n      email: values.cashierInfo?.email,\n      avatar: Number(list?.avatar),\n      discount: Number(values.discount),\n      tax: Number(values.tax),\n      date: format(new Date(values.date), 'MM/dd/yyyy'),\n      due_date: format(new Date(values.due_date), 'MM/dd/yyyy'),\n      quantity: Number(\n        values.invoice_detail?.reduce((sum, i) => {\n          return sum + i.qty;\n        }, 0)\n      ),\n      status: values.status,\n      cashierInfo: values.cashierInfo,\n      customerInfo: values.customerInfo,\n      invoice_detail: values.invoice_detail,\n      notes: values.notes\n    };\n\n    updateInvoice(newList.id, newList);\n    openSnackbar({\n      open: true,\n      message: 'Invoice Updated successfully',\n      anchorOrigin: { vertical: 'top', horizontal: 'right' },\n      variant: 'alert',\n\n      alert: {\n        color: 'success'\n      },\n\n      close: true\n    });\n    navigation('/apps/invoice/list');\n  };\n\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{\n        id: list.id || '',\n        invoice_id: list.invoice_id || '',\n        status: list.status || '',\n        date: new Date(list.date) || null,\n        due_date: new Date(list.due_date) || null,\n        cashierInfo: list.cashierInfo || invoiceSingleList,\n        customerInfo: list.customerInfo || invoiceSingleList,\n        invoice_detail: list.invoice_detail || [],\n        discount: list.discount || 0,\n        tax: list.tax || 0,\n        notes: list.notes || ''\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values) => {\n        handlerEdit(values);\n      }}\n    >\n      {({ handleBlur, errors, handleChange, handleSubmit, values, isValid, setFieldValue, touched }) => {\n        const subtotal =\n          values?.invoice_detail?.reduce((prev, curr) => {\n            if (curr.name.trim().length > 0) return prev + Number(curr.price * Math.floor(curr.qty));\n            else return prev;\n          }, 0) || 0;\n        const taxRate = (values?.tax * subtotal) / 100;\n        const discountRate = (values.discount * subtotal) / 100;\n        const total = subtotal - discountRate + taxRate;\n\n        return (\n          <Form onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Invoice Id</InputLabel>\n                  <FormControl sx={{ width: '100%' }}>\n                    <TextField\n                      required\n                      disabled\n                      type=\"number\"\n                      name=\"invoice_id\"\n                      id=\"invoice_id\"\n                      value={values.invoice_id}\n                      onChange={handleChange}\n                    />\n                  </FormControl>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Status</InputLabel>\n                  <FormControl sx={{ width: '100%' }}>\n                    <Select\n                      value={values.status}\n                      displayEmpty\n                      name=\"status\"\n                      renderValue={(selected) => {\n                        if (selected.length === 0) {\n                          return <Box sx={{ color: 'secondary.400' }}>Select status</Box>;\n                        }\n                        return selected;\n                      }}\n                      onChange={handleChange}\n                      error={Boolean(errors.status && touched.status)}\n                    >\n                      <MenuItem disabled value=\"\">\n                        Select status\n                      </MenuItem>\n                      <MenuItem value=\"Paid\">Paid</MenuItem>\n                      <MenuItem value=\"Unpaid\">Unpaid</MenuItem>\n                      <MenuItem value=\"Cancelled\">Cancelled</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Stack>\n                {touched.status && errors.status && <FormHelperText error={true}>{errors.status}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Date</InputLabel>\n                  <FormControl sx={{ width: '100%' }} error={Boolean(touched.date && errors.date)}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <DatePicker format=\"dd/MM/yyyy\" value={values.date} onChange={(newValue) => setFieldValue('date', newValue)} />\n                    </LocalizationProvider>\n                  </FormControl>\n                </Stack>\n                {touched.date && errors.date && <FormHelperText error={true}>{errors.date}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Stack spacing={1}>\n                  <InputLabel>Due Date</InputLabel>\n                  <FormControl sx={{ width: '100%' }} error={Boolean(touched.due_date && errors.due_date)}>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                      <DatePicker\n                        format=\"dd/MM/yyyy\"\n                        value={values.due_date}\n                        onChange={(newValue) => setFieldValue('due_date', newValue)}\n                      />\n                    </LocalizationProvider>\n                  </FormControl>\n                </Stack>\n                {touched.due_date && errors.due_date && <FormHelperText error={true}>{errors.due_date}</FormHelperText>}\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <MainCard sx={{ minHeight: 168 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={8}>\n                      <Stack spacing={2}>\n                        <Typography variant=\"h5\">From:</Typography>\n                        <Stack sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{values?.cashierInfo?.name}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.address}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.phone}</Typography>\n                          <Typography color=\"secondary\">{values?.cashierInfo?.email}</Typography>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                      <Box textAlign={{ xs: 'left', sm: 'right' }} color=\"grey.200\">\n                        <Button\n                          variant=\"outlined\"\n                          startIcon={<Edit />}\n                          color=\"secondary\"\n                          onClick={() => handlerCustomerFrom(true)}\n                          size=\"small\"\n                        >\n                          Change\n                        </Button>\n                        <AddressModal\n                          open={invoiceMaster.open}\n                          setOpen={(value) => handlerCustomerFrom(value)}\n                          handlerAddress={(address) => setFieldValue('cashierInfo', address)}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </MainCard>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <MainCard sx={{ minHeight: 168 }}>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={8}>\n                      <Stack spacing={2}>\n                        <Typography variant=\"h5\">To:</Typography>\n                        <Stack sx={{ width: '100%' }}>\n                          <Typography variant=\"subtitle1\">{values?.customerInfo?.name}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.address}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.phone}</Typography>\n                          <Typography color=\"secondary\">{values?.customerInfo?.email}</Typography>\n                        </Stack>\n                      </Stack>\n                    </Grid>\n                    <Grid item xs={12} sm={4}>\n                      <Box textAlign=\"right\" color=\"secondary.200\">\n                        <Button\n                          size=\"small\"\n                          startIcon={<Add />}\n                          color=\"secondary\"\n                          variant=\"outlined\"\n                          onClick={() => handlerCustomerTo(true)}\n                        >\n                          Add\n                        </Button>\n                        <AddressModal\n                          open={invoiceMaster.isCustomerOpen}\n                          setOpen={(value) => handlerCustomerTo(value)}\n                          handlerAddress={(value) => setFieldValue('customerInfo', value)}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </MainCard>\n                {touched.customerInfo && errors.customerInfo && <FormHelperText error={true}>{errors?.customerInfo?.name}</FormHelperText>}\n              </Grid>\n\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Detail</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <FieldArray\n                  name=\"invoice_detail\"\n                  render={({ remove, push }) => {\n                    return (\n                      <>\n                        <TableContainer>\n                          <Table sx={{ minWidth: 650 }}>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>#</TableCell>\n                                <TableCell>Name</TableCell>\n                                <TableCell>Description</TableCell>\n                                <TableCell>Qty</TableCell>\n                                <TableCell>Price</TableCell>\n                                <TableCell align=\"right\">Amount</TableCell>\n                                <TableCell align=\"center\">Action</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {values?.invoice_detail?.map((item, index) => (\n                                <TableRow key={item.id}>\n                                  <TableCell>{values?.invoice_detail.indexOf(item) + 1}</TableCell>\n                                  <InvoiceItem\n                                    key={item.id}\n                                    id={item.id}\n                                    index={index}\n                                    name={item.name}\n                                    description={item.description}\n                                    qty={item.qty}\n                                    price={item.price}\n                                    onDeleteItem={(index) => remove(index)}\n                                    onEditItem={handleChange}\n                                    Blur={handleBlur}\n                                    errors={errors}\n                                    touched={touched}\n                                  />\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                        <Divider />\n                        {touched.invoice_detail && errors.invoice_detail && !Array.isArray(errors?.invoice_detail) && (\n                          <Stack direction=\"row\" justifyContent=\"center\" sx={{ p: 1.5 }}>\n                            <FormHelperText error={true}>{errors.invoice_detail}</FormHelperText>\n                          </Stack>\n                        )}\n                        <Grid container justifyContent=\"space-between\">\n                          <Grid item xs={12} md={8}>\n                            <Box sx={{ pt: 2.5, pr: 2.5, pb: 2.5, pl: 0 }}>\n                              <Button\n                                color=\"primary\"\n                                startIcon={<Add />}\n                                onClick={() =>\n                                  push({\n                                    id: UIDV4(),\n                                    name: '',\n                                    description: '',\n                                    qty: 1,\n                                    price: '1.00'\n                                  })\n                                }\n                                variant=\"dashed\"\n                                sx={{ bgcolor: 'transparent !important' }}\n                              >\n                                Add Item\n                              </Button>\n                            </Box>\n                          </Grid>\n                          <Grid item xs={12} md={4}>\n                            <Grid container justifyContent=\"space-between\" spacing={2} sx={{ pt: 2.5, pb: 2.5 }}>\n                              <Grid item xs={6}>\n                                <Stack spacing={1}>\n                                  <InputLabel>Discount(%)</InputLabel>\n                                  <TextField\n                                    type=\"number\"\n                                    fullWidth\n                                    name=\"discount\"\n                                    id=\"discount\"\n                                    placeholder=\"0.0\"\n                                    value={values.discount}\n                                    onChange={handleChange}\n                                    inputProps={{\n                                      min: 0\n                                    }}\n                                  />\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={6}>\n                                <Stack spacing={1}>\n                                  <InputLabel>Tax(%)</InputLabel>\n                                  <TextField\n                                    type=\"number\"\n                                    fullWidth\n                                    name=\"tax\"\n                                    id=\"tax\"\n                                    placeholder=\"0.0\"\n                                    value={values.tax}\n                                    onChange={handleChange}\n                                    inputProps={{\n                                      min: 0\n                                    }}\n                                  />\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                            <Grid item xs={12}>\n                              <Stack spacing={2}>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Sub Total:</Typography>\n                                  <Typography>{invoiceMaster.country?.prefix + '' + subtotal.toFixed(2)}</Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Discount:</Typography>\n                                  <Typography variant=\"h6\" color=\"success.main\">\n                                    {invoiceMaster.country?.prefix + '' + discountRate.toFixed(2)}\n                                  </Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography color={theme.palette.secondary.main}>Tax:</Typography>\n                                  <Typography>{invoiceMaster.country?.prefix + '' + taxRate.toFixed(2)}</Typography>\n                                </Stack>\n                                <Stack direction=\"row\" justifyContent=\"space-between\">\n                                  <Typography variant=\"subtitle1\">Grand Total:</Typography>\n                                  <Typography variant=\"subtitle1\">\n                                    {total % 1 === 0\n                                      ? invoiceMaster.country?.prefix + '' + total\n                                      : invoiceMaster.country?.prefix + '' + total.toFixed(2)}\n                                  </Typography>\n                                </Stack>\n                              </Stack>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </>\n                    );\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel>Notes</InputLabel>\n                  <TextField\n                    fullWidth\n                    placeholder=\"Address\"\n                    rows={3}\n                    value={values.notes}\n                    multiline\n                    name=\"notes\"\n                    onChange={handleChange}\n                    inputProps={{\n                      maxLength: notesLimit\n                    }}\n                    helperText={`${values.notes.length} / ${notesLimit}`}\n                    sx={{ '& .MuiFormHelperText-root': { mr: 0, display: 'flex', justifyContent: 'flex-end' } }}\n                  />\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <InputLabel>Set Currency*</InputLabel>\n                  <FormControl sx={{ width: { xs: '100%', sm: 250 } }}>\n                    <Autocomplete\n                      id=\"country-select-demo\"\n                      fullWidth\n                      options={invoiceMaster.countries}\n                      defaultValue={invoiceMaster.countries[2]}\n                      value={invoiceMaster.countries.find((option) => option.code === invoiceMaster.country?.code)}\n                      onChange={(event, value) => selectCountry(value)}\n                      autoHighlight\n                      getOptionLabel={(option) => option.label}\n                      renderOption={(props, option) => (\n                        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                          {option.code && (\n                            <img\n                              loading=\"lazy\"\n                              width=\"20\"\n                              src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                              srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                              alt=\"\"\n                            />\n                          )}\n                          {option.label}\n                        </Box>\n                      )}\n                      renderInput={(params) => {\n                        const selected = invoiceMaster.countries.find((option) => option.code === invoiceMaster.country?.code);\n                        return (\n                          <TextField\n                            {...params}\n                            name=\"phoneCode\"\n                            placeholder=\"Select\"\n                            InputProps={{\n                              ...params.InputProps,\n                              startAdornment: (\n                                <>\n                                  {selected && selected.code !== '' && (\n                                    <img\n                                      style={{ marginRight: 6 }}\n                                      loading=\"lazy\"\n                                      width=\"20\"\n                                      src={`https://flagcdn.com/w20/${selected.code.toLowerCase()}.png`}\n                                      srcSet={`https://flagcdn.com/w40/${selected.code.toLowerCase()}.png 2x`}\n                                      alt=\"\"\n                                    />\n                                  )}\n                                </>\n                              )\n                            }}\n                            inputProps={{\n                              ...params.inputProps,\n                              autoComplete: 'new-password' // disable autocomplete and autofill\n                            }}\n                          />\n                        );\n                      }}\n                    />\n                  </FormControl>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"flex-end\" spacing={2} sx={{ height: '100%' }}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    disabled={!isValid}\n                    sx={{ color: 'secondary.dark' }}\n                    onClick={() => handlerPreview(true)}\n                  >\n                    Preview\n                  </Button>\n                  <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                    Update & Send\n                  </Button>\n                  <InvoiceModal\n                    isOpen={invoiceMaster.isOpen}\n                    setIsOpen={(value) => handlerPreview(value)}\n                    key={values.invoice_id}\n                    invoiceInfo={{\n                      ...values,\n                      subtotal,\n                      taxRate,\n                      discountRate,\n                      total\n                    }}\n                    items={values?.invoice_detail}\n                    onAddNextInvoice={() => handlerPreview(false)}\n                  />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n}\n\n// ==============================|| INVOICE - EDIT ||============================== //\n\nexport default function EditInvoice() {\n  const { id } = useParams();\n  const { invoiceLoading, invoice } = useGetInvoice();\n  const { invoiceMasterLoading, invoiceMaster } = useGetInvoiceMaster();\n  const [list, seList] = useState(null);\n\n  useEffect(() => {\n    if (id && !invoiceLoading) {\n      seList(invoice.filter((item) => item.id.toString() === id)[0]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id, invoiceLoading]);\n\n  const loader = (\n    <Box sx={{ height: 'calc(100vh - 310px)' }}>\n      <CircularLoader />\n    </Box>\n  );\n\n  let breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Invoice', to: '/apps/invoice/dashboard' }, { title: 'Edit' }];\n\n  const isLoader = invoiceLoading || invoiceMasterLoading || invoiceMaster === undefined || list === null;\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"Edit Invoice\" links={breadcrumbLinks} />\n      <MainCard>{isLoader ? loader : <EditForm {...{ list: list, invoiceMaster }} />}</MainCard>\n    </>\n  );\n}\n\nEditForm.propTypes = { list: PropTypes.any, invoiceMaster: PropTypes.any };\n","size_bytes":26604},"src/sections/forms/plugins/ReactQuill.jsx":{"content":"import { useState } from 'react';\n\n// third-party\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\n// ==============================|| EDITOR - QUILL ||============================== //\n\nexport default function ReactQuillDemo() {\n  const [text, setText] = useState(\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\n  );\n  const handleChange = (value) => {\n    setText(value);\n  };\n  return <ReactQuill value={text} onChange={handleChange} />;\n}\n","size_bytes":1009},"src/sections/widget/data/MyTask.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Chip from '@mui/material/Chip';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\nimport { Folder, Send2, TickCircle } from 'iconsax-react';\n\n// ===========================|| DATA WIDGET - MY TASK ||=========================== //\n\nexport default function MyTask() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 3, pb: 0 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">My Task</Typography>\n          <IconButton\n            color=\"secondary\"\n            id=\"wallet-button\"\n            aria-controls={open ? 'wallet-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >\n            <MoreIcon />\n          </IconButton>\n          <Menu\n            id=\"wallet-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          >\n            <ListItemButton onClick={handleClose}>Today</ListItemButton>\n            <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n            <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n          </Menu>\n        </Stack>\n      </Box>\n      <List sx={{ '& .MuiListItem-root': { pl: 3 } }}>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton aria-label=\"delete\" color=\"success\">\n              <TickCircle />\n            </IconButton>\n          }\n        >\n          <Stack>\n            <ListItemText primary={<Typography variant=\"subtitle1\">Follow up client for feedback</Typography>} />\n            <Stack spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                <Send2 size={12} />\n                <Typography>Sending report</Typography>\n              </Stack>\n              <Box>\n                <Chip label=\"00 : 15\" color=\"error\" variant=\"filled\" size=\"small\" />\n              </Box>\n            </Stack>\n          </Stack>\n        </ListItem>\n        <ListItem\n          divider\n          secondaryAction={\n            <IconButton aria-label=\"delete\" color=\"secondary\">\n              <TickCircle />\n            </IconButton>\n          }\n        >\n          <Stack>\n            <ListItemText primary={<Typography variant=\"subtitle1\">Follow up client for feedback</Typography>} />\n            <Stack spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                <Folder size={12} />\n                <Typography>Received report</Typography>\n              </Stack>\n              <Box>\n                <Chip label=\"00 : 15\" color=\"success\" variant=\"filled\" size=\"small\" />\n              </Box>\n            </Stack>\n          </Stack>\n        </ListItem>\n        <ListItem\n          secondaryAction={\n            <IconButton aria-label=\"delete\" color=\"secondary\">\n              <TickCircle />\n            </IconButton>\n          }\n        >\n          <Stack>\n            <ListItemText primary={<Typography variant=\"subtitle1\">Follow up client for feedback</Typography>} />\n            <Stack spacing={0.5}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                <Send2 size={12} />\n                <Typography>Sending report</Typography>\n              </Stack>\n              <Box>\n                <Chip label=\"00 : 15\" color=\"error\" variant=\"filled\" size=\"small\" />\n              </Box>\n            </Stack>\n          </Stack>\n        </ListItem>\n      </List>\n    </MainCard>\n  );\n}\n","size_bytes":4557},"src/sections/components-overview/buttons/ToggleButtons/MultipleToggleButtons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// assets\nimport { ArrowDown2, Paintbucket, TextBold, TextItalic, TextUnderline } from 'iconsax-react';\n\n// ==============================|| TOGGLE BUTTON - MULTIPLE ||============================== //\n\nexport default function MultipleToggleButtons() {\n  const [formats, setFormats] = useState(() => ['bold', 'italic']);\n\n  const handleFormat = (event, newFormats) => {\n    setFormats(newFormats);\n  };\n\n  return (\n    <ToggleButtonGroup value={formats} onChange={handleFormat} aria-label=\"text formatting\">\n      <ToggleButton value=\"bold\" aria-label=\"bold\">\n        <TextBold />\n      </ToggleButton>\n      <ToggleButton value=\"italic\" aria-label=\"italic\">\n        <TextItalic />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n        <TextUnderline />\n      </ToggleButton>\n      <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n        <Paintbucket />\n        <ArrowDown2 style={{ fontSize: '0.625rem', marginLeft: 6 }} />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":1199},"src/sections/components-overview/dialogs/CustomizedDialog.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Typography from '@mui/material/Typography';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// ==============================|| CUSTOMIZED - CONTENT ||============================== //\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(3)\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1.25),\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nconst BootstrapDialogTitle = ({ children, onClose, ...other }) => (\n  <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n    {children}\n    {onClose ? (\n      <IconButton\n        aria-label=\"close\"\n        onClick={onClose}\n        color=\"secondary\"\n        sx={{\n          position: 'absolute',\n          right: 10,\n          top: 10\n        }}\n      >\n        <Add style={{ transform: 'rotate(45deg)' }} />\n      </IconButton>\n    ) : null}\n  </DialogTitle>\n);\n\n// ==============================|| DIALOG - CUSTOMIZED ||============================== //\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <BootstrapDialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Modal Title\n        </BootstrapDialogTitle>\n        <DialogContent dividers sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus,\n            porta ac consectetur ac, vestibulum at eros. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus\n            sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n          </Typography>\n          <Typography variant=\"h6\" gutterBottom>\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed\n            odio dui. Donec ullamcorper nulla non metus auctor fringilla.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" onClick={handleClose}>\n            Save changes\n          </Button>\n        </DialogActions>\n      </BootstrapDialog>\n    </>\n  );\n}\n\nBootstrapDialogTitle.propTypes = { children: PropTypes.node, onClose: PropTypes.func, other: PropTypes.any };\n","size_bytes":3082},"src/utils/mock-data.js":{"content":"// third-party\nimport { sub } from 'date-fns';\nimport { Chance } from 'chance';\nimport lodash from 'lodash';\n\nconst chance = new Chance();\n\nexport const range = (len) => {\n  const arr = [];\n  for (let i = 0; i < len; i += 1) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst skills = [\n  'UI Design',\n  'Mobile App',\n  'Web App',\n  'UX',\n  'Wireframing',\n  'Prototyping',\n  'Backend',\n  'React',\n  'Angular',\n  'Javascript',\n  'HTML',\n  'ES6',\n  'Figma',\n  'Codeigniter'\n];\n\nconst time = ['just now', '1 day ago', '2 min ago', '2 days ago', '1 week ago', '1 year ago', '5 months ago', '3 hours ago', '1 hour ago'];\n\n// ==============================|| CUSTOM FUNCTION - TABLE DATA ||============================== //\n\nexport default function mockData(index) {\n  return {\n    id: `${chance.bb_pin()}${index}`,\n    email: chance.email({ domain: 'gmail.com' }),\n    contact: chance.phone(),\n    datetime: sub(new Date(), {\n      days: chance.integer({ min: 0, max: 30 }),\n      hours: chance.integer({ min: 0, max: 23 }),\n      minutes: chance.integer({ min: 0, max: 59 })\n    }),\n    boolean: chance.bool(),\n    role: chance.profession(),\n    company: chance.company(),\n    address: {\n      full: `${chance.address()}, ${chance.city()}, ${chance.country({ full: true })} - ${chance.zip()}`,\n      country: chance.country({ full: true })\n    },\n    name: {\n      first: chance.first(),\n      last: chance.last(),\n      full: chance.name()\n    },\n    text: {\n      title: chance.sentence({ words: chance.integer({ min: 4, max: 12 }) }),\n      sentence: chance.sentence(),\n      description: chance.paragraph\n    },\n    number: {\n      percentage: chance.integer({ min: 0, max: 100 }),\n      rating: chance.floating({ min: 0, max: 5, fixed: 2 }),\n      status: (min, max) => chance.integer({ min, max }),\n      age: chance.age(),\n      amount: chance.integer({ min: 1, max: 10000 })\n    },\n    image: {\n      product: (index) => `product_${index}`,\n      avatar: (index) => `avatar_${index}`\n    },\n    skill: lodash.sampleSize(skills, chance.integer({ min: 2, max: 6 })),\n    time: lodash.sampleSize(time)\n  };\n}\n","size_bytes":2106},"src/themes/overrides/Accordion.js":{"content":"// ==============================|| OVERRIDES - ACCORDION ||============================== //\n\nexport default function Accordion(theme) {\n  return {\n    MuiAccordion: {\n      defaultProps: {\n        disableGutters: true,\n        square: true,\n        elevation: 0\n      },\n      styleOverrides: {\n        root: {\n          border: '1px solid',\n          borderColor: theme.palette.divider,\n          '&:not(:last-child)': {\n            borderBottom: 0\n          },\n          '&:before': {\n            display: 'none'\n          },\n          '&.Mui-disabled': {\n            backgroundColor: theme.palette.secondary.lighter\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":664},"src/menu-items/sample-page.jsx":{"content":"// This is example of menu item without group for horizontal layout. There will be no children.\n\n// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { DocumentCode2 } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  samplePage: DocumentCode2\n};\n\n// ==============================|| MENU ITEMS - SAMPLE PAGE ||============================== //\n\nconst samplePage = {\n  id: 'sample-page',\n  title: <FormattedMessage id=\"sample-page\" />,\n  type: 'group',\n  url: '/sample-page',\n  icon: icons.samplePage\n};\n\nexport default samplePage;\n","size_bytes":568},"src/themes/overrides/TableBody.js":{"content":"// ==============================|| OVERRIDES - TABLE BODY ||============================== //\n\nexport default function TableBody(theme) {\n  const hoverStyle = {\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.lighter\n    }\n  };\n\n  return {\n    MuiTableBody: {\n      styleOverrides: {\n        root: {\n          '&.striped .MuiTableRow-root': {\n            '&:nth-of-type(even)': {\n              backgroundColor: theme.palette.secondary.lighter\n            },\n            ...hoverStyle\n          },\n          '& .MuiTableRow-root': {\n            ...hoverStyle\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":618},"src/contexts/JWTContext.jsx":{"content":"import { createContext, useEffect, useReducer } from 'react';\n\n// third-party\nimport { Chance } from 'chance';\nimport { jwtDecode } from 'jwt-decode';\n\n// reducer - state management\nimport { LOGIN, LOGOUT } from 'contexts/auth-reducer/actions';\nimport authReducer from 'contexts/auth-reducer/auth';\n\n// project-imports\nimport Loader from 'components/Loader';\nimport axios from 'utils/axios';\n\nconst chance = new Chance();\n\n// constant\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n};\n\nconst verifyToken = (serviceToken) => {\n  if (!serviceToken) {\n    return false;\n  }\n  const decoded = jwtDecode(serviceToken);\n\n  /**\n   * Property 'exp' does not exist on type '<T = unknown>(token: string, options?: JwtDecodeOptions | undefined) => T'.\n   */\n  return decoded.exp > Date.now() / 1000;\n};\n\nconst setSession = (serviceToken) => {\n  if (serviceToken) {\n    localStorage.setItem('serviceToken', serviceToken);\n    axios.defaults.headers.common.Authorization = `Bearer ${serviceToken}`;\n  } else {\n    localStorage.removeItem('serviceToken');\n    delete axios.defaults.headers.common.Authorization;\n  }\n};\n\n// ==============================|| JWT CONTEXT & PROVIDER ||============================== //\n\nconst JWTContext = createContext(null);\n\nexport const JWTProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const serviceToken = window.localStorage.getItem('serviceToken');\n        if (serviceToken && verifyToken(serviceToken)) {\n          setSession(serviceToken);\n          const response = await axios.get('/api/account/me');\n          const { user } = response.data;\n\n          dispatch({\n            type: LOGIN,\n            payload: {\n              isLoggedIn: true,\n              user\n            }\n          });\n        } else {\n          dispatch({\n            type: LOGOUT\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: LOGOUT\n        });\n      }\n    };\n\n    init();\n  }, []);\n\n  const login = async (email, password) => {\n    const response = await axios.post('/api/account/login', { email, password });\n    const { serviceToken, user } = response.data;\n    setSession(serviceToken);\n    dispatch({\n      type: LOGIN,\n      payload: {\n        isLoggedIn: true,\n        user\n      }\n    });\n  };\n\n  const register = async (email, password, firstName, lastName) => {\n    // todo: this flow need to be recode as it not verified\n    const id = chance.bb_pin();\n    const response = await axios.post('/api/account/register', {\n      id,\n      email,\n      password,\n      firstName,\n      lastName\n    });\n    let users = response.data;\n\n    if (window.localStorage.getItem('users') !== undefined && window.localStorage.getItem('users') !== null) {\n      const localUsers = window.localStorage.getItem('users');\n      users = [\n        ...JSON.parse(localUsers),\n        {\n          id,\n          email,\n          password,\n          name: `${firstName} ${lastName}`\n        }\n      ];\n    }\n\n    window.localStorage.setItem('users', JSON.stringify(users));\n  };\n\n  const logout = () => {\n    setSession(null);\n    dispatch({ type: LOGOUT });\n  };\n\n  const resetPassword = async (email) => {\n    console.log('email - ', email);\n  };\n\n  const updateProfile = () => {};\n\n  if (state.isInitialized !== undefined && !state.isInitialized) {\n    return <Loader />;\n  }\n\n  return <JWTContext.Provider value={{ ...state, login, logout, register, resetPassword, updateProfile }}>{children}</JWTContext.Provider>;\n};\n\nexport default JWTContext;\n","size_bytes":3659},"src/components/Customization/ThemeFont.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Grid from '@mui/material/Grid';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { HEADER_HEIGHT } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| CUSTOMIZATION - FONT FAMILY ||============================== //\n\nexport default function ThemeFont() {\n  const theme = useTheme();\n\n  const { fontFamily, onChangeFontFamily } = useConfig();\n\n  const handleFontChange = (event) => {\n    onChangeFontFamily(event.target.value);\n  };\n\n  const fonts = [\n    {\n      id: 'inter',\n      value: `Inter var`,\n      label: 'Inter'\n    },\n    {\n      id: 'roboto',\n      value: `'Roboto', sans-serif`,\n      label: 'Roboto'\n    },\n    {\n      id: 'poppins',\n      value: `'Poppins', sans-serif`,\n      label: 'Poppins'\n    },\n    {\n      id: 'public-sans',\n      value: `'Public Sans', sans-serif`,\n      label: 'Public Sans'\n    }\n  ];\n\n  return (\n    <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={fontFamily} onChange={handleFontChange}>\n      <Grid container spacing={1.75} sx={{ ml: 0 }}>\n        {fonts.map((item, index) => (\n          <Grid item key={index}>\n            <FormControlLabel\n              control={<Radio value={item.value} sx={{ display: 'none' }} />}\n              sx={{ display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n              label={\n                <MainCard\n                  content={false}\n                  sx={{ bgcolor: fontFamily === item.value ? 'primary.lighter' : 'secondary.lighter', p: 1 }}\n                  border={false}\n                  {...(fontFamily === item.value && { boxShadow: true, shadow: theme.customShadows.primary })}\n                >\n                  <Box sx={{ minWidth: HEADER_HEIGHT, bgcolor: 'background.paper', p: 1, '&:hover': { bgcolor: 'background.paper' } }}>\n                    <Stack spacing={0.5} alignItems=\"center\">\n                      <Typography variant=\"h5\" color=\"text.primary\" sx={{ fontFamily: item.value }}>\n                        Aa\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {item.label}\n                      </Typography>\n                    </Stack>\n                  </Box>\n                </MainCard>\n              }\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </RadioGroup>\n  );\n}\n","size_bytes":2735},"src/themes/overrides/Radio.jsx":{"content":"import PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport { ThemeMode } from 'config';\n\n// ==============================|| RADIO - COLORS ||============================== //\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { lighter, main, dark } = colors;\n\n  return {\n    '& .dot': {\n      backgroundColor: main\n    },\n    '&:hover': {\n      backgroundColor: color === 'secondary' ? lighter : lighter + 50,\n      ...(theme.palette.mode === ThemeMode.DARK && {\n        backgroundColor: color === 'secondary' ? lighter + 50 : lighter + 20\n      })\n    },\n    '&.Mui-focusVisible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: -4\n    }\n  };\n}\n\nfunction getSizeStyle(size) {\n  switch (size) {\n    case 'small':\n      return { size: 16, dotSize: 8, position: 3 };\n    case 'large':\n      return { size: 24, dotSize: 12, position: 5 };\n    case 'medium':\n    default:\n      return { size: 20, dotSize: 10, position: 4 };\n  }\n}\n\n// ==============================|| CHECKBOX - STYLE ||============================== //\n\nfunction radioStyle(size) {\n  const sizes = getSizeStyle(size);\n\n  return {\n    '& .icon': {\n      width: sizes.size,\n      height: sizes.size,\n      '& .dot': {\n        width: sizes.dotSize,\n        height: sizes.dotSize,\n        top: sizes.position,\n        left: sizes.position\n      }\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - RADIO ||============================== //\n\nexport default function Radio(theme) {\n  const { palette } = theme;\n\n  return {\n    MuiRadio: {\n      defaultProps: {\n        className: 'size-medium',\n        icon: <Box className=\"icon\" sx={{ width: 16, height: 16, border: '1px solid', borderColor: 'inherit', borderRadius: '50%' }} />,\n        checkedIcon: (\n          <Box\n            className=\"icon\"\n            sx={{\n              width: 16,\n              height: 16,\n              border: '1px solid',\n              borderColor: 'inherit',\n              borderRadius: '50%',\n              position: 'relative'\n            }}\n          >\n            <Box\n              className=\"dot\"\n              sx={{\n                width: 8,\n                height: 8,\n                bgcolor: 'inherit',\n                borderRadius: '50%',\n                position: 'absolute',\n                top: 3,\n                left: 3\n              }}\n            />\n          </Box>\n        )\n      },\n      styleOverrides: {\n        root: {\n          color: palette.secondary[300],\n          '&.size-small': {\n            ...radioStyle('small')\n          },\n          '&.size-medium': {\n            ...radioStyle('medium')\n          },\n          '&.size-large': {\n            ...radioStyle('large')\n          }\n        },\n        colorPrimary: getColorStyle({ color: 'primary', theme }),\n        colorSecondary: getColorStyle({ color: 'secondary', theme }),\n        colorSuccess: getColorStyle({ color: 'success', theme }),\n        colorWarning: getColorStyle({ color: 'warning', theme }),\n        colorInfo: getColorStyle({ color: 'info', theme }),\n        colorError: getColorStyle({ color: 'error', theme })\n      }\n    }\n  };\n}\n\ngetColorStyle.propTypes = { color: PropTypes.any, theme: PropTypes.any };\n","size_bytes":3298},"src/sections/components-overview/buttons/ToggleButtons/TextToggleButtons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// ==============================|| TOGGLE BUTTON - TEXT ||============================== //\n\nexport default function TextToggleButtons() {\n  const [alignment, setAlignment] = useState('three');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n      <ToggleButton value=\"one\" aria-label=\"first\">\n        One\n      </ToggleButton>\n      <ToggleButton value=\"two\" aria-label=\"second\">\n        Two\n      </ToggleButton>\n      <ToggleButton value=\"three\" aria-label=\"third\">\n        Three\n      </ToggleButton>\n      <ToggleButton value=\"four\" aria-label=\"fourth\">\n        Four\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":960},"src/sections/widget/data/Products.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport Table from '@mui/material/Table';\nimport MenuItem from '@mui/material/MenuItem';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport Select from '@mui/material/Select';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport { flexRender, useReactTable, getCoreRowModel, getFilteredRowModel, getPaginationRowModel } from '@tanstack/react-table';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport { TablePagination, HeaderSort, DebouncedInput } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { ArrowDown, ArrowUp, Star1 } from 'iconsax-react';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data, title }) {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const [columnFilters, setColumnFilters] = useState([]);\n  const [rowSelection, setRowSelection] = useState({});\n  const [globalFilter, setGlobalFilter] = useState('');\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      columnFilters,\n      rowSelection,\n      globalFilter\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onGlobalFilterChange: setGlobalFilter,\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    debugTable: true\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  const [age, setAge] = useState('10');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  return (\n    <MainCard content={false} title={title}>\n      <Box sx={{ p: 3, pb: 0 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">Products</Typography>\n          <Box sx={{ minWidth: 120 }}>\n            <FormControl fullWidth>\n              <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n                <MenuItem value={10}>Today</MenuItem>\n                <MenuItem value={20}>Weekly</MenuItem>\n                <MenuItem value={30}>Monthly</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        </Stack>\n      </Box>\n      <Stack\n        direction={matchDownSM ? 'column' : 'row'}\n        spacing={2}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        sx={{ padding: 2.5 }}\n      >\n        <DebouncedInput\n          value={globalFilter ?? ''}\n          onFilterChange={(value) => setGlobalFilter(String(value))}\n          placeholder={`Search ${data.length} records...`}\n        />\n\n        <Stack direction={matchDownSM ? 'column' : 'row'} alignItems=\"center\" spacing={2}>\n          {/* <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns }} /> */}\n        </Stack>\n      </Stack>\n      <ScrollX>\n        <Stack>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                        Object.assign(header.column.columnDef.meta, {\n                          className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                        });\n                      }\n\n                      return (\n                        <TableCell\n                          key={header.id}\n                          {...header.column.columnDef.meta}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...(header.column.getCanSort() &&\n                            header.column.columnDef.meta === undefined && {\n                              className: 'cursor-pointer prevent-select'\n                            })}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                              <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                              {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                            </Stack>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <TableRow key={row.id}>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n                <TableRow sx={{ '&:hover': { bgcolor: 'transparent !important' } }}>\n                  <TableCell sx={{ p: 2, py: 3 }} colSpan={9}>\n                    <TablePagination\n                      {...{\n                        setPageSize: table.setPageSize,\n                        setPageIndex: table.setPageIndex,\n                        getState: table.getState,\n                        getPageCount: table.getPageCount,\n                        initialPageSize: 4\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - BASIC ||============================== //\n\nexport default function Products() {\n  const data = makeData(10);\n  const theme = useTheme();\n\n  function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'Products',\n        accessorKey: 'fatherName',\n        cell: ({ row }) => {\n          return (\n            <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n              <Avatar\n                alt=\"Avatar 1\"\n                size=\"lg\"\n                variant=\"rounded\"\n                src={getImageUrl(`img-prod-${randomIntFromInterval(1, 4)}.jpg`, ImagePath.WIDGET)}\n              />\n              <Stack spacing={0}>\n                <Typography variant=\"subtitle1\">{row.original.fatherName}</Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: { xs: 'none', lg: 'inherit' } }}>\n                  Leather panels. Laces. Rounded toe.\n                </Typography>\n              </Stack>\n            </Stack>\n          );\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Close\" size=\"small\" sx={{ borderRadius: 1 }} />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Active\" size=\"small\" sx={{ borderRadius: 1 }} />;\n            case 'Single':\n            default:\n              return <Chip color=\"warning\" label=\"Pending\" size=\"small\" sx={{ borderRadius: 1 }} />;\n          }\n        }\n      },\n      {\n        header: 'Price',\n        accessorKey: 'age',\n        cell: ({ row }) => <Typography variant=\"subtitle1\">${row.original.age}</Typography>\n      },\n      {\n        header: 'Sales',\n        accessorKey: 'visits',\n        cell: ({ row }) => {\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" spacing={0.75}>\n              <Typography variant=\"subtitle1\">{row.original.visits}</Typography>\n              <>\n                {row.original?.age > 30 ? (\n                  <Typography variant=\"caption\" color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.25 }}>\n                    +{(row.original.age * 3) / 10}\n                    <ArrowUp size={12} />\n                  </Typography>\n                ) : (\n                  <Typography variant=\"caption\" color=\"error.dark\" sx={{ display: 'flex', alignItems: 'center', gap: 0.25 }}>\n                    -{(row.original.age * 3) / 10}\n                    <ArrowDown size={12} />\n                  </Typography>\n                )}\n              </>\n              <Typography></Typography>\n            </Stack>\n          );\n        }\n      },\n      {\n        header: 'Rating',\n        accessorKey: 'progress',\n        cell: ({ row }) => {\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n              <Star1 variant=\"Bold\" color={theme.palette.warning.main} size={18} />\n              <Typography variant=\"subtitle1\">{randomIntFromInterval(1, 10) / 2}</Typography>\n              <Typography color=\"text.secondary\">({row.original.progress})</Typography>\n            </Stack>\n          );\n        }\n      }\n    ], // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <MainCard content={false}>\n      <ScrollX>\n        <ReactTable columns={columns} data={data} />\n      </ScrollX>\n    </MainCard>\n  );\n}\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array, title: PropTypes.string };\n","size_bytes":10470},"src/sections/components-overview/timeline/BasicTimeline.jsx":{"content":"// material-ui\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TIMELINE - BASIC ||============================== //\n\nexport default function BasicTimeline() {\n  const basicTimelineCodeString = `<Timeline>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Eat</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Code</TimelineContent>\n  </TimelineItem>\n  <TimelineItem sx={{ minHeight: 'auto' }}>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n    </TimelineSeparator>\n    <TimelineContent>Sleep</TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Basic\" codeString={basicTimelineCodeString}>\n      <Timeline>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Eat</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Code</TimelineContent>\n        </TimelineItem>\n        <TimelineItem sx={{ minHeight: 'auto' }}>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n          </TimelineSeparator>\n          <TimelineContent>Sleep</TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":2120},"src/sections/charts/apexchart/ApexPieChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\nimport { ThemeMode } from 'config';\n\n// chart options\nconst pieChartOptions = {\n  chart: {\n    type: 'pie',\n    width: 450,\n    height: 450\n  },\n  labels: ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],\n  legend: {\n    show: true,\n    fontFamily: `Inter var`,\n    offsetX: 10,\n    offsetY: 10,\n    labels: {\n      useSeriesColors: false\n    },\n    markers: {\n      width: 12,\n      height: 12,\n      radius: 5\n    },\n    itemMargin: {\n      horizontal: 25,\n      vertical: 4\n    }\n  },\n  responsive: [\n    {\n      breakpoint: 450,\n      chart: {\n        width: 280,\n        height: 280\n      },\n      options: {\n        legend: {\n          show: false,\n          position: 'bottom'\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| APEXCHART - PIE ||============================== //\n\nexport default function ApexPieChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n  const backColor = theme.palette.background.paper;\n\n  const [series] = useState([44, 55, 13, 43, 22]);\n  const [options, setOptions] = useState(pieChartOptions);\n\n  const secondary = theme.palette.primary[700];\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.main;\n  const error = theme.palette.error.main;\n  const orangeDark = theme.palette.warning.main;\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary, primaryMain, successDark, error, orangeDark],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      stroke: {\n        colors: [backColor]\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, backColor, secondary, primaryMain, successDark, error, orangeDark]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"pie\" />\n    </div>\n  );\n}\n","size_bytes":2548},"src/pages/forms/jobs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AddJobs from 'sections/forms/wizard/jobs-validation-wizard';\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormJobs() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <AddJobs />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":429},"src/sections/apps/invoice/InvoiceNotificationList.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { DocumentDownload, DocumentText, Link1, Setting3 } from 'iconsax-react';\n\n// ==============================|| INVOICE - NOTIFICATIONS ||============================== //\n\nexport default function InvoiceNotificationList() {\n  const theme = useTheme();\n  const iconSX = {\n    color: theme.palette.text.secondary\n  };\n\n  return (\n    <MainCard\n      title=\"Notification\"\n      secondary={\n        <IconButton edge=\"end\" aria-label=\"comments\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n          <MoreIcon />\n        </IconButton>\n      }\n    >\n      <Grid container spacing={3} alignItems=\"center\">\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 1\" color=\"success\">\n                <DocumentDownload />\n              </Avatar>\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Johnny sent you an invoice billed{' '}\n                <Link component={RouterLink} to=\"#\" underline=\"hover\">\n                  $1,000.\n                </Link>\n              </Typography>\n              <Typography variant=\"caption\" color=\"secondary\">\n                2 August\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Link1 size={18} style={iconSX} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 2\">\n                <DocumentText />\n              </Avatar>\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">\n                Sent an invoice to Aida Bugg amount of{' '}\n                <Link component={RouterLink} to=\"#\" underline=\"hover\">\n                  $200.\n                </Link>\n              </Typography>\n              <Typography variant=\"caption\" color=\"secondary\">\n                7 hours ago\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Link1 size={18} style={iconSX} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 2\" color=\"error\">\n                <Setting3 />\n              </Avatar>\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">There was a failure to your setup</Typography>\n              <Typography variant=\"caption\" color=\"secondary\">\n                7 hours ago\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Link1 size={18} style={iconSX} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 2\">C</Avatar>\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">Cristina danny invited to you join Meeting</Typography>\n              <Typography variant=\"caption\" color=\"secondary\">\n                7 hours ago\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Link1 size={18} style={iconSX} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Avatar alt=\"User 2\">C</Avatar>\n            </Grid>\n            <Grid item xs zeroMinWidth>\n              <Typography variant=\"subtitle1\">Cristina danny invited to you join Meeting</Typography>\n              <Typography variant=\"caption\" color=\"secondary\">\n                7 hours ago\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Link1 size={18} style={iconSX} />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            View All\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4712},"src/sections/charts/apexchart/ApexRadialChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst redialBarChartOptions = {\n  chart: {\n    type: 'radialBar',\n    width: 450,\n    height: 450\n  },\n  plotOptions: {\n    radialBar: {\n      offsetY: 0,\n      startAngle: 0,\n      endAngle: 270,\n      hollow: {\n        margin: 5,\n        size: '30%',\n        background: 'transparent',\n        image: undefined\n      },\n      dataLabels: {\n        name: {\n          show: false\n        },\n        value: {\n          show: false\n        }\n      }\n    }\n  },\n  labels: ['Vimeo', 'Messenger', 'Facebook', 'LinkedIn'],\n  legend: {\n    show: true,\n    floating: true,\n    fontSize: '14px',\n    position: 'left',\n    offsetX: -15,\n    offsetY: -15,\n    labels: {\n      useSeriesColors: true\n    },\n    markers: {\n      size: 4\n    },\n    formatter(seriesName, opts) {\n      return `${seriesName}:  ${opts.w.globals.series[opts.seriesIndex]}`;\n    },\n    itemMargin: {\n      vertical: 2\n    }\n  },\n  responsive: [\n    {\n      breakpoint: 450,\n      chart: {\n        width: 280,\n        height: 280\n      },\n      options: {\n        legend: {\n          show: true,\n          floating: true,\n          fontSize: '14px',\n          position: 'left',\n          offsetX: -20,\n          offsetY: -10,\n          labels: {\n            useSeriesColors: true\n          },\n          markers: {\n            size: 4\n          },\n          formatter(seriesName, opts) {\n            return `${seriesName}:  ${opts.w.globals.series[opts.seriesIndex]}`;\n          },\n          itemMargin: {\n            vertical: 2\n          }\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| APEXCHART - RADIAL ||============================== //\n\nexport default function ApexRedialBarChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n\n  const [series] = useState([76, 67, 61, 90]);\n  const [options, setOptions] = useState(redialBarChartOptions);\n\n  const secondary = theme.palette.primary[700];\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.main;\n  const error = theme.palette.error.main;\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary, primaryMain, successDark, error],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      plotOptions: {\n        radialBar: {\n          track: {\n            background: line\n          }\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, secondary, primaryMain, successDark, error]);\n\n  return (\n    <Box id=\"chart\" sx={{ bgcolor: 'transparent' }}>\n      <ReactApexChart options={options} series={series} type=\"radialBar\" />\n    </Box>\n  );\n}\n","size_bytes":3369},"src/pages/forms/work.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AddWorkPage from 'sections/forms/wizard/works-validation-wizard';\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormWork() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <AddWorkPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":438},"src/sections/forms/wizard/jobs-validation-wizard/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\n\nimport { List, ListItem } from '@mui/material';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.jobTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Internship Status\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.isInternship ? 'Yes' : 'No'}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta Description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta Keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Location\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.location}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Job type\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.type}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First section list\n            </Typography>\n            <List>\n              {data.firstSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second section list\n            </Typography>\n            <List>\n              {data.secondSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.thirdSectionList}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third section list\n            </Typography>\n            <List>\n              {data.thirdSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth section heading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.fourthSectionHeading}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth section list\n            </Typography>\n            <List>\n              {data.fourthSectionList.map((d, index) => (\n                <ListItem key={index}>{d}</ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5484},"src/components/cards/skeleton/EmptyUserCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport UserCard from './UserCard';\n\n// ==============================|| SKELETON - EMPTY STATE ||============================== //\n\nexport default function EmptyUserCard({ title }) {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Box\n          sx={{\n            p: { xs: 2.5, sm: 6 },\n            height: `calc(100vh - 192px)`,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            bgcolor: 'transparent'\n          }}\n        >\n          <Grid container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n              <Box sx={{ ml: -9, mb: { xs: -8, sm: -5 } }}>\n                <Box sx={{ position: 'relative' }}>\n                  <UserCard />\n                </Box>\n                <Box sx={{ position: 'relative', top: -120, left: 72 }}>\n                  <UserCard />\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item>\n              <Stack spacing={1}>\n                <Typography align=\"center\" variant=\"h4\">\n                  {title}\n                </Typography>\n              </Stack>\n            </Grid>\n          </Grid>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nEmptyUserCard.propTypes = { title: PropTypes.string };\n","size_bytes":1542},"src/api/calender.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// project import\nimport { v4 as UIDV4 } from 'uuid';\n\n// utils\nimport { fetcher } from 'utils/axios';\n\n// ----------------------------------------------------------------------\n\nexport const endpoints = {\n  key: 'api/calendar/events',\n  add: '/add', // server URL\n  udpate: '/update', // server URL\n  delete: '/delete' // server URL\n};\n\nexport function useGetEvents() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      events: data?.events,\n      eventsLoading: isLoading,\n      eventsError: error,\n      eventsValidating: isValidating,\n      eventsEmpty: !isLoading && !data?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function createEvent(newEvent) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentEvents) => {\n      const addedEvents = [...currentEvents.events, { ...newEvent, id: UIDV4() }];\n\n      return {\n        ...currentEvents,\n        events: addedEvents\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newEvent };\n  //   await axios.post(endpoints.key + endpoints.add, data);\n}\n\nexport async function updateEvent(eventId, updatedEvent) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentEvents) => {\n      const updatedEvents = currentEvents.events.map((event) => (event.id === eventId ? { ...event, ...updatedEvent } : event));\n\n      return {\n        ...currentEvents,\n        events: updatedEvents\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newEvent };\n  //   await axios.post(endpoints.key + endpoints.udpate, data);\n}\n\nexport async function deleteEvent(eventId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentEvents) => {\n      const nonDeletedEvent = currentEvents.events.filter((event) => event.id !== eventId);\n\n      return {\n        ...currentEvents,\n        events: nonDeletedEvent\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newEvent };\n  //   await axios.post(endpoints.key + endpoints.delete, data);\n}\n","size_bytes":2581},"src/pages/components-overview/badges.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Badge from '@mui/material/Badge';\nimport Switch from '@mui/material/Switch';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport Typography from '@mui/material/Typography';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport AntAvatar from 'components/@extended/Avatar';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { Add, Minus, Profile, Sms } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - BADGES ||============================== //\n\nexport default function ComponentBadge() {\n  const [count, setCount] = useState(1);\n  const [invisible, setInvisible] = useState(false);\n\n  const handleBadgeVisibility = () => {\n    setInvisible(!invisible);\n  };\n\n  const basicBadgesCodeString = `<Badge badgeContent={4} color=\"primary\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"secondary\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"success\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"warning\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"info\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"error\"><Sms /></Badge>`;\n\n  const lightBadgesCodeString = `<Badge badgeContent={4} color=\"primary\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"secondary\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"success\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"warning\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"info\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={4} color=\"error\" variant=\"light\"><Sms /></Badge>`;\n\n  const maxBadgesCodeString = `<Badge badgeContent={99} color=\"primary\"><Sms /></Badge>\n<Badge badgeContent={100} color=\"secondary\"><Sms /></Badge>\n<Badge badgeContent={1000} max={999} color=\"primary\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={99} color=\"secondary\" variant=\"light\"><Sms /></Badge>\n<Badge badgeContent={99} color=\"error\"><Sms /></Badge>`;\n\n  const dotBadgesCodeString = `<Badge color=\"primary\" variant=\"dot\"><Sms /></Badge>\n<Badge color=\"secondary\" variant=\"dot\"><Sms /></Badge>\n<Badge max={999} color=\"success\" variant=\"dot\"><Sms /></Badge>\n<Badge color=\"warning\" variant=\"dot\"><Sms /></Badge>\n<Badge color=\"info\" variant=\"dot\"><Sms /></Badge>\n<Badge color=\"error\" variant=\"dot\"><Typography variant=\"h6\">Typography</Typography></Badge>`;\n\n  const alignmentBadgesCodeString = `<Badge badgeContent={9} color=\"primary\">\n  <Sms />\n</Badge>\n<Badge color=\"primary\" variant=\"dot\">\n  <Sms />\n</Badge>\n<Badge\n  badgeContent={9}\n  color=\"primary\"\n  anchorOrigin={{\n    vertical: 'bottom',\n    horizontal: 'right'\n  }}\n>\n  <Sms />\n</Badge>\n<Badge\n  badgeContent={9}\n  color=\"primary\"\n  anchorOrigin={{\n    vertical: 'top',\n    horizontal: 'left'\n  }}\n>\n  <Sms />\n</Badge>\n<Badge\n  badgeContent={99}\n  color=\"primary\"\n  anchorOrigin={{\n    vertical: 'bottom',\n    horizontal: 'left'\n  }}\n>\n  <Sms />\n</Badge>`;\n\n  const overlapBadgesCodeString = `<Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n  <AntAvatar alt=\"Basic\">\n    <Profile variant=\"Bold\" />\n  </AntAvatar>\n</Badge>\n<Badge color=\"error\" variant=\"dot\">\n  <AntAvatar alt=\"Basic\" variant=\"rounded\" type=\"filled\">\n    <Profile />\n  </AntAvatar>\n</Badge>\n<Badge color=\"error\" variant=\"dot\">\n  <AntAvatar alt=\"Basic\" variant=\"square\" type=\"outlined\">\n    <Profile variant=\"Bold\" />\n  </AntAvatar>\n</Badge>\n<Badge badgeContent=\" \" color=\"error\" overlap=\"circular\">\n  <AntAvatar alt=\"Basic\" type=\"outlined\">\n    U\n  </AntAvatar>\n</Badge>\n<Badge badgeContent=\" \" color=\"error\">\n  <AntAvatar alt=\"Basic\" variant=\"rounded\" type=\"filled\">\n    U\n  </AntAvatar>\n</Badge>\n<Badge badgeContent=\" \" color=\"error\">\n  <AntAvatar alt=\"Basic\" variant=\"square\" type=\"outlined\">\n    U\n  </AntAvatar>\n</Badge>`;\n\n  const visibleBadgesCodeString = `<Badge color=\"primary\" badgeContent={count}><Sms /></Badge>\n<ButtonGroup>\n  <Button\n    aria-label=\"reduce\"\n    onClick={() => {\n      setCount(Math.max(count - 1, 0));\n    }}\n  >\n    <Minus />\n  </Button>\n  <Button\n    aria-label=\"increase\"\n    onClick={() => {\n      setCount(count + 1);\n    }}\n  >\n    <Add />\n  </Button>\n</ButtonGroup>\n<Badge color=\"primary\" variant=\"dot\" invisible={invisible}><Sms /></Badge>\n<FormControlLabel\n  sx={{ color: 'text.primary' }}\n  control={<Switch checked={!invisible} onChange={handleBadgeVisibility} />}\n  label=\"Show Badge\"\n  labelPlacement=\"start\"\n/>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Badge\"\n        caption=\"Badge generates a small badge to the top-right of its child(ren).\"\n        directory=\"src/pages/components-overview/badges\"\n        link=\"https://mui.com/material-ui/react-badge/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeHighlight codeString={basicBadgesCodeString}>\n              <Grid container spacing={3}>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"primary\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"secondary\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"success\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"warning\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"info\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"error\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Light\" codeString={lightBadgesCodeString}>\n              <Grid container spacing={3}>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"primary\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"secondary\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"success\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"warning\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"info\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={4} color=\"error\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Maximmum Value\" codeString={maxBadgesCodeString}>\n              <Grid container spacing={4}>\n                <Grid item>\n                  <Badge badgeContent={99} color=\"primary\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={100} color=\"secondary\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={1000} max={999} color=\"primary\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={99} color=\"secondary\" variant=\"light\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent={99} color=\"error\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Dot Badges\" codeString={dotBadgesCodeString}>\n              <Grid container spacing={3}>\n                <Grid item>\n                  <Badge color=\"primary\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"secondary\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge max={999} color=\"success\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"warning\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"info\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"error\" variant=\"dot\">\n                    <Typography variant=\"h6\">Typography</Typography>\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Alignment\" codeString={alignmentBadgesCodeString}>\n              <Grid container spacing={4}>\n                <Grid item>\n                  <Badge badgeContent={9} color=\"primary\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"primary\" variant=\"dot\">\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge\n                    badgeContent={9}\n                    color=\"primary\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right'\n                    }}\n                  >\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge\n                    badgeContent={9}\n                    color=\"primary\"\n                    anchorOrigin={{\n                      vertical: 'top',\n                      horizontal: 'left'\n                    }}\n                  >\n                    <Sms />\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge\n                    badgeContent={99}\n                    color=\"primary\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    }}\n                  >\n                    <Sms />\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Overlap\" codeString={overlapBadgesCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n                    <AntAvatar alt=\"Basic\">\n                      <Profile variant=\"Bold\" />\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"error\" variant=\"dot\">\n                    <AntAvatar alt=\"Basic\" variant=\"rounded\" type=\"filled\">\n                      <Profile />\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge color=\"error\" variant=\"dot\">\n                    <AntAvatar alt=\"Basic\" variant=\"square\" type=\"outlined\">\n                      <Profile variant=\"Bold\" />\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent=\" \" color=\"error\" overlap=\"circular\">\n                    <AntAvatar alt=\"Basic\" type=\"outlined\">\n                      U\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent=\" \" color=\"error\">\n                    <AntAvatar alt=\"Basic\" variant=\"rounded\" type=\"filled\">\n                      U\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n                <Grid item>\n                  <Badge badgeContent=\" \" color=\"error\">\n                    <AntAvatar alt=\"Basic\" variant=\"square\" type=\"outlined\">\n                      U\n                    </AntAvatar>\n                  </Badge>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Visibility\" codeString={visibleBadgesCodeString}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" spacing={3} alignItems=\"center\">\n                    <Badge color=\"primary\" badgeContent={count}>\n                      <Sms />\n                    </Badge>\n                    <ButtonGroup>\n                      <Button\n                        aria-label=\"reduce\"\n                        onClick={() => {\n                          setCount(Math.max(count - 1, 0));\n                        }}\n                      >\n                        <Minus />\n                      </Button>\n                      <Button\n                        aria-label=\"increase\"\n                        onClick={() => {\n                          setCount(count + 1);\n                        }}\n                      >\n                        <Add />\n                      </Button>\n                    </ButtonGroup>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack direction=\"row\" spacing={3} alignItems=\"center\">\n                    <Badge color=\"primary\" variant=\"dot\" invisible={invisible}>\n                      <Sms />\n                    </Badge>\n                    <FormControlLabel\n                      sx={{ color: 'text.primary' }}\n                      control={<Switch checked={!invisible} onChange={handleBadgeVisibility} />}\n                      label=\"Show Badge\"\n                      labelPlacement=\"start\"\n                    />\n                  </Stack>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":15349},"src/themes/overrides/ButtonGroup.js":{"content":"// ==============================|| OVERRIDES - BUTTON GROUP ||============================== //\n\nexport default function ButtonGroup() {\n  return {\n    MuiButtonGroup: {\n      defaultProps: {\n        disableRipple: false\n      }\n    }\n  };\n}\n","size_bytes":243},"src/themes/overrides/ListItemButton.jsx":{"content":"// ==============================|| OVERRIDES - LIST ITEM BUTTON ||============================== //\n\nexport default function ListItemButton(theme) {\n  return {\n    MuiListItemButton: {\n      styleOverrides: {\n        root: {\n          color: theme.palette.secondary.main,\n          borderRadius: 8,\n          marginTop: 2,\n          marginBottom: 2,\n          '&.Mui-selected': {\n            color: theme.palette.primary.main,\n            '& .MuiListItemIcon-root': {\n              color: theme.palette.primary.main\n            }\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":574},"src/sections/components-overview/notistack/IconVariants.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { handlerIconVariants } from 'api/snackbar';\n\n// ==============================|| NOTISTACK - CUSTOM ICON ||============================== //\n\nexport default function IconVariants() {\n  const [value, setValue] = useState('usedefault');\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const NotiStackIconVariantsSnackbarCodeString = `<Button\nvariant=\"contained\"\nfullWidth\nsx={{ marginBlockStart: 2 }}\nonClick={() => {\n  enqueueSnackbar('Your notification here', { variant: 'info' });\n  dispatch(\n    handlerIconVariants({\n      iconVariant: value\n    })\n  );\n}}\n>\n  Show Snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"With Icons\" codeString={NotiStackIconVariantsSnackbarCodeString}>\n      <FormControl>\n        <RadioGroup\n          row\n          aria-labelledby=\"demo-row-radio-buttons-group-label\"\n          value={value}\n          onChange={handleChange}\n          name=\"row-radio-buttons-group\"\n        >\n          <FormControlLabel value=\"usedefault\" control={<Radio />} label=\"Use Default\" />\n          <FormControlLabel value=\"useemojis\" control={<Radio />} label=\"Use Emojis\" />\n          <FormControlLabel value=\"hide\" control={<Radio />} label=\"Hide\" />\n        </RadioGroup>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        fullWidth\n        sx={{ marginBlockStart: 2 }}\n        onClick={() => {\n          enqueueSnackbar('Your notification here', { variant: 'info' });\n          handlerIconVariants(value);\n        }}\n      >\n        Show Snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":1991},"src/sections/apps/profiles/account/TabSettings.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport Divider from '@mui/material/Divider';\nimport Checkbox from '@mui/material/Checkbox';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| ACCOUNT PROFILE - SETTINGS ||============================== //\n\nexport default function TabSettings() {\n  const [checked, setChecked] = useState(['en', 'email-1', 'email-3', 'order-1', 'order-3']);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} sm={6}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"Email Settings\">\n              <Stack spacing={2.5}>\n                <Typography variant=\"subtitle1\">Setup Email Notification</Typography>\n                <List sx={{ p: 0, '& .MuiListItem-root': { p: 0, py: 0.25 } }}>\n                  <ListItem>\n                    <ListItemText id=\"switch-list-label-en\" primary={<Typography color=\"secondary\">Email Notification</Typography>} />\n                    <Switch\n                      edge=\"end\"\n                      onChange={handleToggle('en')}\n                      checked={checked.indexOf('en') !== -1}\n                      inputProps={{ 'aria-labelledby': 'switch-list-label-en' }}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText\n                      id=\"switch-list-label-sctp\"\n                      primary={<Typography color=\"secondary\">Send Copy To Personal Email</Typography>}\n                    />\n                    <Switch\n                      edge=\"end\"\n                      onChange={handleToggle('sctp')}\n                      checked={checked.indexOf('sctp') !== -1}\n                      inputProps={{ 'aria-labelledby': 'switch-list-label-sctp' }}\n                    />\n                  </ListItem>\n                </List>\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Updates from System Notification\">\n              <Stack spacing={2.5}>\n                <Typography variant=\"subtitle1\">Email you with?</Typography>\n                <List sx={{ p: 0, '& .MuiListItem-root': { p: 0, py: 0.25 } }}>\n                  <ListItem>\n                    <ListItemText primary={<Typography color=\"secondary\">News about PCT-themes products and feature updates</Typography>} />\n                    <Checkbox defaultChecked />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary={<Typography color=\"secondary\">Tips on getting more out of PCT-themes</Typography>} />\n                    <Checkbox defaultChecked />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText\n                      primary={<Typography color=\"secondary\">Things you missed since you last logged into PCT-themes</Typography>}\n                    />\n                    <Checkbox />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary={<Typography color=\"secondary\">News about products and other services</Typography>} />\n                    <Checkbox />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText primary={<Typography color=\"secondary\">Tips and Document business products</Typography>} />\n                    <Checkbox />\n                  </ListItem>\n                </List>\n              </Stack>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <MainCard title=\"Activity Related Emails\">\n          <Stack spacing={2.5}>\n            <Typography variant=\"subtitle1\">When to email?</Typography>\n            <List sx={{ p: 0, '& .MuiListItem-root': { p: 0, py: 0.25 } }}>\n              <ListItem>\n                <ListItemText id=\"switch-list-label-email-1\" primary={<Typography color=\"secondary\">Have new notifications</Typography>} />\n                <Switch\n                  edge=\"end\"\n                  onChange={handleToggle('email-1')}\n                  checked={checked.indexOf('email-1') !== -1}\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-email-1' }}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText\n                  id=\"switch-list-label-email-2\"\n                  primary={<Typography color=\"secondary\">You&apos;re sent a direct message</Typography>}\n                />\n                <Switch\n                  edge=\"end\"\n                  onChange={handleToggle('email-2')}\n                  checked={checked.indexOf('email-2') !== -1}\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-email-2' }}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText\n                  id=\"switch-list-label-email-3\"\n                  primary={<Typography color=\"secondary\">Someone adds you as a connection</Typography>}\n                />\n                <Switch\n                  edge=\"end\"\n                  onChange={handleToggle('email-3')}\n                  checked={checked.indexOf('email-3') !== -1}\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-email-3' }}\n                />\n              </ListItem>\n            </List>\n            <Divider />\n            <Typography variant=\"subtitle1\">When to escalate emails?</Typography>\n            <List sx={{ p: 0, '& .MuiListItem-root': { p: 0, py: 0.25 } }}>\n              <ListItem>\n                <ListItemText id=\"switch-list-label-order-1\" primary={<Typography color=\"secondary.400\">Upon new order</Typography>} />\n                <Switch\n                  edge=\"end\"\n                  onChange={handleToggle('order-1')}\n                  checked={checked.indexOf('order-1') !== -1}\n                  disabled\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-order-1' }}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText\n                  id=\"switch-list-label-order-2\"\n                  primary={<Typography color=\"secondary.400\">New membership approval</Typography>}\n                />\n                <Switch\n                  edge=\"end\"\n                  disabled\n                  onChange={handleToggle('order-2')}\n                  checked={checked.indexOf('order-2') !== -1}\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-order-2' }}\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemText id=\"switch-list-label-order-3\" primary={<Typography color=\"secondary\">Member registration</Typography>} />\n                <Switch\n                  edge=\"end\"\n                  onChange={handleToggle('order-3')}\n                  checked={checked.indexOf('order-3') !== -1}\n                  inputProps={{ 'aria-labelledby': 'switch-list-label-order-3' }}\n                />\n              </ListItem>\n            </List>\n          </Stack>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n          <Button variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button variant=\"contained\">Update Profile</Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":8052},"src/sections/maps/GeoJSONAnimation.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect, memo } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport Map, { Layer, Source } from 'react-map-gl';\n\n// project-import\nimport MapControl from 'components/third-party/map/MapControl';\n\n// ==============================|| GEO JSON ANIMATION ||============================== //\n\nfunction GeoJSONAnimation({ ...other }) {\n  const theme = useTheme();\n\n  const pointLayer = {\n    id: 'point',\n    type: 'circle',\n    paint: {\n      'circle-radius': 10,\n      'circle-color': theme.palette.error.main\n    }\n  };\n\n  const [pointData, setPointData] = useState(null);\n\n  useEffect(() => {\n    const animation = window.requestAnimationFrame(() =>\n      setPointData(\n        pointOnCircle({\n          center: [72.8636084, 21.2335611],\n          angle: Date.now() / 1000,\n          radius: 2\n        })\n      )\n    );\n\n    return () => window.cancelAnimationFrame(animation);\n  });\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 21.2335611,\n        longitude: 72.8636084,\n        zoom: 6\n      }}\n      mapStyle=\"mapbox://styles/mapbox/satellite-streets-v11\"\n      {...other}\n    >\n      <MapControl />\n      {pointData && (\n        <Source type=\"geojson\" data={pointData}>\n          <Layer {...pointLayer} />\n        </Source>\n      )}\n    </Map>\n  );\n}\n\nexport default memo(GeoJSONAnimation);\n\nfunction pointOnCircle({ center, angle, radius }) {\n  return {\n    type: 'Point',\n    coordinates: [center[0] + Math.cos(angle) * radius, center[1] + Math.sin(angle) * radius]\n  };\n}\n\nGeoJSONAnimation.propTypes = { other: PropTypes.any };\n\npointOnCircle.propTypes = { center: PropTypes.number, angle: PropTypes.number, radius: PropTypes.number };\n","size_bytes":1768},"src/pages/components-overview/date-time-picker.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport StaticDatePicker from 'sections/components-overview/date-time-picker/StaticDatePicker';\nimport SubComponentsPickers from 'sections/components-overview/date-time-picker/SubComponentsPickers';\nimport LandscapeDatePicker from 'sections/components-overview/date-time-picker/LandscapeDatePicker';\nimport BasicPickers from 'sections/components-overview/date-time-picker/BasicPickers';\nimport NativePickers from 'sections/components-overview/date-time-picker/NativePickers';\nimport LocalizedPicker from 'sections/components-overview/date-time-picker/LocalizedPicker';\nimport HelperText from 'sections/components-overview/date-time-picker/HelperText';\nimport DisabledPickers from 'sections/components-overview/date-time-picker/DisabledPickers';\n\n// ===============================|| COMPONENTS - DATE / TIME PICKER ||=============================== //\n\nexport default function ComponentDateTimePicker() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Date / Time Picker\"\n        caption=\"Date pickers let the user select a date.\"\n        directory=\"src/pages/components-overview/date-time-picker\"\n        link=\"https://mui.com/x/react-date-pickers/getting-started/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <StaticDatePicker />\n              <SubComponentsPickers />\n              <LandscapeDatePicker />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <BasicPickers />\n              <HelperText />\n              <NativePickers />\n              <LocalizedPicker />\n              <DisabledPickers />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":2162},"src/sections/dashboard/SalesChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Checkbox from '@mui/material/Checkbox';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormGroup from '@mui/material/FormGroup';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// chart options\nconst columnChartOptions = {\n  chart: {\n    type: 'bar',\n    height: 430,\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '30%',\n      borderRadius: 4\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    show: true,\n    width: 8,\n    colors: ['transparent']\n  },\n  xaxis: {\n    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\n  },\n  yaxis: {\n    title: {\n      text: '$ (thousands)'\n    }\n  },\n  fill: {\n    opacity: 1\n  },\n  tooltip: {\n    y: {\n      formatter(val) {\n        return `$ ${val} thousands`;\n      }\n    }\n  },\n  legend: {\n    show: false\n  },\n  responsive: [\n    {\n      breakpoint: 600,\n      options: {\n        yaxis: {\n          show: false\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| DASHBOARD - SALES COLUMN CHART ||============================== //\n\nexport default function SalesChart() {\n  const theme = useTheme();\n\n  const [age, setAge] = useState('30');\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const [legend, setLegend] = useState({\n    income: true,\n    cos: true\n  });\n\n  const { income, cos } = legend;\n\n  const mode = theme.palette.mode;\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const warning = theme.palette.warning.main;\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.dark;\n\n  const initialSeries = [\n    {\n      name: 'Income',\n      data: [180, 90, 135, 114, 120, 145]\n    },\n    {\n      name: 'Cost Of Sales',\n      data: [120, 45, 78, 150, 168, 99]\n    }\n  ];\n\n  const [series, setSeries] = useState(initialSeries);\n\n  const handleLegendChange = (event) => {\n    setLegend({ ...legend, [event.target.name]: event.target.checked });\n  };\n\n  const xsDown = useMediaQuery(theme.breakpoints.down('sm'));\n  const [options, setOptions] = useState(columnChartOptions);\n\n  useEffect(() => {\n    if (income && cos) {\n      setSeries(initialSeries);\n    } else if (income) {\n      setSeries([\n        {\n          name: 'Income',\n          data: [180, 90, 135, 114, 120, 145]\n        }\n      ]);\n    } else if (cos) {\n      setSeries([\n        {\n          name: 'Cost Of Sales',\n          data: [120, 45, 78, 150, 168, 99]\n        }\n      ]);\n    } else {\n      setSeries([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [income, cos]);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: !(income && cos) && cos ? [primaryMain] : [warning, primaryMain],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [secondary, secondary, secondary, secondary, secondary, secondary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: xsDown ? '60%' : '30%'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, warning, primaryMain, successDark, income, cos, xsDown]);\n\n  return (\n    <MainCard>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n        <Typography variant=\"h5\">Sales Report</Typography>\n        <Box sx={{ minWidth: 120 }}>\n          <FormControl fullWidth>\n            <Select id=\"demo-simple-select\" value={age} onChange={handleChange}>\n              <MenuItem value={10}>Today</MenuItem>\n              <MenuItem value={20}>Weekly</MenuItem>\n              <MenuItem value={30}>Monthly</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n      </Stack>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ mt: 1.5 }}>\n        <Stack>\n          <Typography variant=\"h6\" color=\"secondary\">\n            Net Profit\n          </Typography>\n          <Typography variant=\"h4\">$1560</Typography>\n        </Stack>\n        <FormControl component=\"fieldset\" sx={{ width: 136 }}>\n          <FormGroup row>\n            <FormControlLabel\n              control={<Checkbox color=\"warning\" checked={income} onChange={handleLegendChange} name=\"income\" />}\n              label=\"Income\"\n            />\n            <FormControlLabel control={<Checkbox checked={cos} onChange={handleLegendChange} name=\"cos\" />} label=\"Cost of Sales\" />\n          </FormGroup>\n        </FormControl>\n      </Stack>\n      <div id=\"chart\">\n        <ReactApexChart options={options} series={series} type=\"bar\" height={360} />\n      </div>\n    </MainCard>\n  );\n}\n","size_bytes":5433},"src/components/@extended/IconButton.jsx":{"content":"import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { alpha, styled, useTheme } from '@mui/material/styles';\nimport MuiIconButton from '@mui/material/IconButton';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport getShadow from 'utils/getShadow';\n\nfunction getColorStyle({ variant, theme, color }) {\n  const colors = getColors(theme, color);\n  const { lighter, light, dark, main, contrastText } = colors;\n\n  const buttonShadow = `${color}Button`;\n  const shadows = getShadow(theme, buttonShadow);\n\n  const commonShadow = {\n    '&::after': {\n      boxShadow: `0 0 6px 6px ${alpha(main, 0.9)}`\n    },\n    '&:active::after': {\n      boxShadow: `0 0 0 0 ${alpha(main, 0.9)}`\n    },\n    '&:focus-visible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: 2\n    }\n  };\n\n  switch (variant) {\n    case 'contained':\n      return {\n        color: contrastText,\n        backgroundColor: main,\n        '&:hover': {\n          backgroundColor: dark\n        },\n        ...commonShadow\n      };\n    case 'light':\n      return {\n        color: main,\n        backgroundColor: lighter,\n        '&:hover': {\n          backgroundColor: light\n        },\n        ...commonShadow\n      };\n    case 'shadow':\n      return {\n        boxShadow: shadows,\n        color: contrastText,\n        backgroundColor: main,\n        '&:hover': {\n          boxShadow: 'none',\n          backgroundColor: dark\n        },\n        ...commonShadow\n      };\n    case 'outlined':\n      return {\n        '&:hover': {\n          backgroundColor: 'transparent',\n          color: dark,\n          borderColor: dark\n        },\n        ...commonShadow\n      };\n    case 'dashed':\n      return {\n        backgroundColor: lighter,\n        '&:hover': {\n          color: dark,\n          borderColor: dark\n        },\n        ...commonShadow\n      };\n    case 'text':\n    default:\n      return {\n        '&:hover': {\n          color: dark,\n          backgroundColor: lighter\n        },\n        ...commonShadow\n      };\n  }\n}\n\nconst IconButtonStyle = styled(MuiIconButton, { shouldForwardProp: (prop) => prop !== 'variant' && prop !== 'shape' })(\n  ({ theme, variant, shape, color }) => ({\n    position: 'relative',\n    '::after': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: shape === 'rounded' ? '50%' : 8,\n      opacity: 0,\n      transition: 'all 0.5s'\n    },\n\n    ':active::after': {\n      position: 'absolute',\n      borderRadius: shape === 'rounded' ? '50%' : 8,\n      left: 0,\n      top: 0,\n      opacity: 1,\n      transition: '0s'\n    },\n    ...(shape === 'rounded' && {\n      borderRadius: '50%'\n    }),\n    ...(variant === 'outlined' && {\n      border: '1px solid',\n      borderColor: 'inherit'\n    }),\n    ...(variant === 'dashed' && {\n      border: '1px dashed',\n      borderColor: 'inherit'\n    }),\n    ...(variant !== 'text' && {\n      '&.Mui-disabled': {\n        backgroundColor: theme.palette.secondary[200]\n      }\n    }),\n    ...getColorStyle({ variant, theme, color })\n  })\n);\n\n// ==============================|| ICON BUTTON - EXTENDED ||============================== //\n\nfunction IconButton({ variant = 'text', shape = 'square', children, color = 'primary', ...others }, ref) {\n  const theme = useTheme();\n\n  return (\n    <IconButtonStyle ref={ref} variant={variant} shape={shape} theme={theme} color={color} {...others}>\n      {children}\n    </IconButtonStyle>\n  );\n}\n\nIconButton.displayName = 'IconButton';\n\nexport default forwardRef(IconButton);\n\ngetColorStyle.propTypes = { variant: PropTypes.any, theme: PropTypes.any, color: PropTypes.any };\n\nIconButton.propTypes = {\n  variant: PropTypes.string,\n  shape: PropTypes.string,\n  children: PropTypes.node,\n  color: PropTypes.string,\n  others: PropTypes.any\n};\n","size_bytes":3866},"src/components/@extended/Avatar.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport MuiAvatar from '@mui/material/Avatar';\n\n// project-imports\nimport { ThemeMode } from 'config';\nimport getColors from 'utils/getColors';\n\nfunction getColorStyle({ theme, color, type }) {\n  const colors = getColors(theme, color);\n  const { lighter, light, main, contrastText } = colors;\n\n  switch (type) {\n    case 'filled':\n      return {\n        color: color === 'secondary' && theme.palette.mode === ThemeMode.DARK ? lighter : contrastText,\n        backgroundColor: main\n      };\n    case 'outlined':\n      return {\n        color: main,\n        border: '1px solid',\n        borderColor: main,\n        backgroundColor: 'transparent'\n      };\n    case 'combined':\n      return {\n        color: main,\n        border: '1px solid',\n        borderColor: light,\n        backgroundColor: lighter + 80\n      };\n    default:\n      return {\n        color: main,\n        backgroundColor: lighter + 80\n      };\n  }\n}\n\n// ==============================|| AVATAR - SIZE STYLE ||============================== //\n\nfunction getSizeStyle(size) {\n  switch (size) {\n    case 'badge':\n      return {\n        border: '2px solid',\n        fontSize: '0.675rem',\n        width: 20,\n        height: 20,\n        '& svg': {\n          width: 10,\n          height: 10\n        }\n      };\n    case 'xs':\n      return {\n        fontSize: '0.75rem',\n        width: 24,\n        height: 24,\n        '& svg': {\n          width: 14,\n          height: 14\n        }\n      };\n    case 'sm':\n      return {\n        fontSize: '0.875rem',\n        width: 32,\n        height: 32,\n        '& svg': {\n          width: 18,\n          height: 18\n        }\n      };\n    case 'lg':\n      return {\n        fontSize: '1.2rem',\n        width: 52,\n        height: 52,\n        '& svg': {\n          width: 28,\n          height: 28\n        }\n      };\n    case 'xl':\n      return {\n        fontSize: '1.5rem',\n        width: 64,\n        height: 64,\n        '& svg': {\n          width: 36,\n          height: 36\n        }\n      };\n    case 'md':\n    default:\n      return {\n        fontSize: '1rem',\n        width: 40,\n        height: 40,\n        '& svg': {\n          width: 20,\n          height: 20\n        }\n      };\n  }\n}\n\nconst AvatarStyle = styled(MuiAvatar, { shouldForwardProp: (prop) => prop !== 'color' && prop !== 'type' && prop !== 'size' })(\n  ({ theme, color, type, size }) => ({\n    ...getSizeStyle(size),\n    ...getColorStyle({ theme, color, type }),\n    ...(size === 'badge' && {\n      borderColor: theme.palette.background.default\n    })\n  })\n);\n\nexport default function Avatar({ children, color = 'primary', type, size = 'md', ...others }) {\n  const theme = useTheme();\n\n  return (\n    <AvatarStyle theme={theme} color={color} type={type} size={size} {...others}>\n      {children}\n    </AvatarStyle>\n  );\n}\n\ngetColorStyle.propTypes = { theme: PropTypes.any, color: PropTypes.any, type: PropTypes.any };\n\nAvatar.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  color: PropTypes.string,\n  type: PropTypes.any,\n  size: PropTypes.string,\n  others: PropTypes.any\n};\n","size_bytes":3169},"src/menu-items/applications.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// project-imports\nimport { handlerCustomerDialog } from 'api/customer';\nimport { NavActionType } from 'config';\n\n// assets\nimport { Add, Link1, KyberNetwork, Messages2, Calendar1, Kanban, Profile2User, Bill, UserSquare, ShoppingBag } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  applications: KyberNetwork,\n  chat: Messages2,\n  calendar: Calendar1,\n  kanban: Kanban,\n  customer: Profile2User,\n  invoice: Bill,\n  profile: UserSquare,\n  ecommerce: ShoppingBag,\n  add: Add,\n  link: Link1\n};\n\n// ==============================|| MENU ITEMS - APPLICATIONS ||============================== //\n\nconst applications = {\n  id: 'group-applications',\n  title: <FormattedMessage id=\"applications\" />,\n  icon: icons.applications,\n  type: 'group',\n  children: [\n    {\n      id: 'chat',\n      title: <FormattedMessage id=\"chat\" />,\n      type: 'item',\n      url: '/apps/chat',\n      icon: icons.chat,\n      breadcrumbs: false\n    },\n    {\n      id: 'calendar',\n      title: <FormattedMessage id=\"calendar\" />,\n      type: 'item',\n      url: '/apps/calendar',\n      icon: icons.calendar,\n      actions: [\n        {\n          type: NavActionType.LINK,\n          label: 'Full Calendar',\n          icon: icons.link,\n          url: 'https://fullcalendar.io/docs/react',\n          target: true\n        }\n      ]\n    },\n    {\n      id: 'kanban',\n      title: <FormattedMessage id=\"kanban\" />,\n      type: 'item',\n      icon: icons.kanban,\n      url: '/apps/kanban/board',\n      link: '/apps/kanban/:tab',\n      breadcrumbs: false\n    },\n    {\n      id: 'customer',\n      title: <FormattedMessage id=\"customer\" />,\n      type: 'collapse',\n      icon: icons.customer,\n      children: [\n        {\n          id: 'customer-list',\n          title: <FormattedMessage id=\"list\" />,\n          type: 'item',\n          url: '/apps/customer/customer-list',\n          actions: [\n            {\n              type: NavActionType.FUNCTION,\n              label: 'Add Customer',\n              function: () => handlerCustomerDialog(true),\n              icon: icons.add\n            }\n          ]\n        },\n        {\n          id: 'customer-card',\n          title: <FormattedMessage id=\"cards\" />,\n          type: 'item',\n          url: '/apps/customer/customer-card'\n        }\n      ]\n    },\n    {\n      id: 'invoice',\n      title: <FormattedMessage id=\"invoice\" />,\n      url: '/apps/invoice/dashboard',\n      type: 'collapse',\n      icon: icons.invoice,\n      breadcrumbs: false,\n      children: [\n        {\n          id: 'create',\n          title: <FormattedMessage id=\"create\" />,\n          type: 'item',\n          url: '/apps/invoice/create',\n          breadcrumbs: false\n        },\n        {\n          id: 'details',\n          title: <FormattedMessage id=\"details\" />,\n          type: 'item',\n          url: '/apps/invoice/details/1',\n          link: '/apps/invoice/details/:id',\n          breadcrumbs: false\n        },\n        {\n          id: 'list',\n          title: <FormattedMessage id=\"list\" />,\n          type: 'item',\n          url: '/apps/invoice/list',\n          breadcrumbs: false\n        },\n        {\n          id: 'edit',\n          title: <FormattedMessage id=\"edit\" />,\n          type: 'item',\n          url: '/apps/invoice/edit/1',\n          link: '/apps/invoice/edit/:id',\n          breadcrumbs: false\n        }\n      ]\n    },\n    {\n      id: 'profile',\n      title: <FormattedMessage id=\"profile\" />,\n      type: 'collapse',\n      icon: icons.profile,\n      children: [\n        {\n          id: 'user-profile',\n          title: <FormattedMessage id=\"user-profile\" />,\n          type: 'item',\n          link: '/apps/profiles/user/:tab',\n          url: '/apps/profiles/user/personal',\n          breadcrumbs: false\n        },\n        {\n          id: 'account-profile',\n          title: <FormattedMessage id=\"account-profile\" />,\n          type: 'item',\n          url: '/apps/profiles/account/basic',\n          link: '/apps/profiles/account/:tab',\n          breadcrumbs: false\n        }\n      ]\n    },\n\n    {\n      id: 'e-commerce',\n      title: <FormattedMessage id=\"e-commerce\" />,\n      type: 'collapse',\n      icon: icons.ecommerce,\n      children: [\n        {\n          id: 'products',\n          title: <FormattedMessage id=\"products\" />,\n          type: 'item',\n          url: '/apps/e-commerce/products'\n        },\n        {\n          id: 'product-details',\n          title: <FormattedMessage id=\"product-details\" />,\n          type: 'item',\n          link: '/apps/e-commerce/product-details/:id',\n          url: '/apps/e-commerce/product-details/1',\n          breadcrumbs: false\n        },\n        {\n          id: 'product-list',\n          title: <FormattedMessage id=\"product-list\" />,\n          type: 'item',\n          url: '/apps/e-commerce/product-list',\n          breadcrumbs: false\n        },\n        {\n          id: 'add-new-product',\n          title: <FormattedMessage id=\"add-new-product\" />,\n          type: 'item',\n          url: '/apps/e-commerce/add-new-product'\n        },\n        {\n          id: 'checkout',\n          title: <FormattedMessage id=\"checkout\" />,\n          type: 'item',\n          url: '/apps/e-commerce/checkout'\n        }\n      ]\n    }\n  ]\n};\n\nexport default applications;\n","size_bytes":5265},"src/sections/forms/wizard/jobs-validation-wizard/index.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { CircularProgress } from '@mui/material';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport axiosInstance from 'api/axios-instance';\n\n// step options\nconst steps = ['Add Text', 'Review Page'];\n\nconst getStepContent = (step, handleNext, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function AddJobs() {\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.post('jobs', data);\n      // const response = await axios.post(\"https://cors-anywhere.herokuapp.com/https://httpbin.org/post\", getAxiosObject(data))\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n      setData({});\n    }\n  };\n\n  return (\n    <MainCard title=\"Add a job page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      {/* <InputLabel>{isAdding ? 'Add new member' : 'Edit the member'}</InputLabel>\n      <Switch checked={isAdding} onChange={() => setIsAdding((prevState) => !prevState)} /> */}\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully added a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5973},"src/themes/overrides/TableHead.js":{"content":"// ==============================|| OVERRIDES - TABLE HEAD ||============================== //\n\nexport default function TableHead(theme) {\n  return {\n    MuiTableHead: {\n      styleOverrides: {\n        root: {\n          backgroundColor: theme.palette.secondary.lighter,\n          borderTop: `1px solid ${theme.palette.divider}`,\n          borderBottom: `2px solid ${theme.palette.divider}`\n        }\n      }\n    }\n  };\n}\n","size_bytes":421},"src/sections/apps/calendar/CalendarStyled.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport { ThemeDirection } from 'config';\n\n// ==============================|| CALENDAR - STYLED ||============================== //\n\nconst ExperimentalStyled = styled(Box)(({ theme }) => ({\n  width: 'calc(100% + 2px)',\n  marginLeft: -1,\n  marginBottom: '-50px',\n\n  // hide license message\n  '& .fc-license-message': {\n    display: 'none'\n  },\n  '& .fc .fc-daygrid .fc-scroller-liquid-absolute': {\n    overflow: 'hidden !important'\n  },\n\n  // basic style\n  '& .fc': {\n    '--fc-bg-event-opacity': 1,\n    '--fc-border-color': theme.palette.divider,\n    '--fc-daygrid-event-dot-width': '10px',\n    '--fc-today-bg-color': theme.palette.primary.lighter,\n    '--fc-list-event-dot-width': '10px',\n    '--fc-event-border-color': theme.palette.primary.dark,\n    '--fc-now-indicator-color': theme.palette.error.main,\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.background.paper,\n    fontFamily: theme.typography.fontFamily\n  },\n\n  // date text\n  '& .fc .fc-daygrid-day-top': {\n    display: 'grid',\n    '& .fc-daygrid-day-number': {\n      textAlign: 'center',\n      marginTop: 12,\n      marginBottom: 12\n    }\n  },\n\n  // weekday\n  '& .fc .fc-col-header-cell': {\n    backgroundColor: theme.palette.secondary[100]\n  },\n\n  '& .fc .fc-col-header-cell-cushion': {\n    color: theme.palette.secondary.darker,\n    padding: 16\n  },\n\n  // events\n  '& .fc-direction-ltr .fc-daygrid-event.fc-event-end, .fc-direction-rtl .fc-daygrid-event.fc-event-start': {\n    marginLeft: 4,\n    marginBottom: 6,\n    borderRadius: 4,\n    backgroundColor: theme.palette.primary.main,\n    border: 'none'\n  },\n\n  '& .fc-h-event .fc-event-main': {\n    padding: 4,\n    paddingLeft: 8\n  },\n\n  // popover when multiple events\n  '& .fc .fc-more-popover': {\n    border: 'none',\n    borderRadius: 6,\n    zIndex: 1200\n  },\n\n  '& .fc .fc-more-popover .fc-popover-body': {\n    backgroundColor: theme.palette.secondary[200],\n    borderBottomLeftRadius: 4,\n    borderBottomRightRadius: 4\n  },\n\n  '& .fc .fc-popover-header': {\n    padding: 12,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12,\n    backgroundColor: theme.palette.secondary[200],\n    color: theme.palette.text.primary\n  },\n\n  // agenda view\n  '& .fc-theme-standard .fc-list-day-cushion': {\n    backgroundColor: theme.palette.secondary[100]\n  },\n\n  '& .fc .fc-day': {\n    cursor: 'pointer'\n  },\n\n  '& .fc .fc-timeGridDay-view .fc-timegrid-slot': {\n    backgroundColor: theme.palette.background.paper\n  },\n\n  '& .fc .fc-timegrid-slot': {\n    cursor: 'pointer'\n  },\n\n  '& .fc .fc-list-event:hover td': {\n    cursor: 'pointer',\n    backgroundColor: theme.palette.secondary[100]\n  },\n\n  '& .fc-timegrid-event-harness-inset .fc-timegrid-event, .fc-timegrid-event.fc-event-mirror, .fc-timegrid-more-link': {\n    padding: 8,\n    margin: 2\n  },\n  ...(theme.direction === ThemeDirection.RTL && { overflow: 'hidden' })\n}));\n\nexport default ExperimentalStyled;\n","size_bytes":3018},"src/sections/components-overview/autocomplete/GitHubAutocomplete.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Popper from '@mui/material/Popper';\nimport InputBase from '@mui/material/InputBase';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { CloseCircle, Setting3, TickCircle } from 'iconsax-react';\n\nconst StyledAutocompletePopper = styled(Box)(({ theme }) => ({\n  [`& .${autocompleteClasses.paper}`]: {\n    boxShadow: 'none',\n    margin: 0,\n    color: 'inherit',\n    fontSize: 13\n  },\n  [`& .${autocompleteClasses.listbox}`]: {\n    backgroundColor: theme.palette.background.default,\n    padding: 0,\n    [`& .${autocompleteClasses.option}`]: {\n      minHeight: 'auto',\n      alignItems: 'flex-start',\n      padding: 8,\n      borderBottom: `1px solid ${theme.palette.divider}`,\n      '&[aria-selected=\"true\"]': { backgroundColor: 'transparent' },\n      '&[data-focus=\"true\"], &[data-focus=\"true\"][aria-selected=\"true\"]': {\n        backgroundColor: theme.palette.action.hover\n      }\n    }\n  },\n  [`&.${autocompleteClasses.popperDisablePortal}`]: { position: 'relative' }\n}));\n\nfunction PopperComponent({ ...other }) {\n  return <StyledAutocompletePopper {...other} />;\n}\n\nconst StyledPopper = styled(Popper)(({ theme }) => ({\n  border: '1px solid',\n  borderColor: theme.palette.divider,\n  boxShadow: theme.customShadows.z1,\n  borderRadius: 6,\n  width: 300,\n  zIndex: theme.zIndex.modal,\n  fontSize: 13,\n  color: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.light : theme.palette.secondary.dark,\n  backgroundColor: theme.palette.background.default\n}));\n\nconst StyledInput = styled(InputBase)(({ theme }) => ({\n  padding: 10,\n  width: '100%',\n  borderBottom: '1px solid ',\n  borderColor: theme.palette.divider,\n  '& input': {\n    borderRadius: 4,\n    backgroundColor: theme.palette.background.paper,\n    padding: 8,\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    border: '1px solid',\n    borderColor: theme.palette.primary.main,\n    fontSize: 14,\n    '&:focus-visible': {\n      boxShadow: theme.customShadows.primary,\n      borderColor: theme.palette.primary.main\n    }\n  }\n}));\n\nconst Button = styled(ButtonBase)(({ theme }) => ({\n  fontSize: 13,\n  width: '100%',\n  textAlign: 'left',\n  marginBottom: 8,\n  color: theme.palette.text.primary,\n  fontWeight: 600,\n  '&:hover': {\n    color: theme.palette.primary.main\n  },\n  '&:focus-visible': {\n    borderRadius: 1,\n    outline: `2px solid ${theme.palette.secondary.dark}`,\n    outlineOffset: 2\n  },\n  '& span': {\n    width: '100%'\n  },\n  '& svg': {\n    width: 16,\n    height: 16\n  }\n}));\n\n// ==============================|| AUTOCOMPLETE - GITHUB ||============================== //\n\nexport default function GitHubLabel() {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [value, setValue] = useState([labels[1], labels[11]]);\n  const [pendingValue, setPendingValue] = useState([]);\n  const theme = useTheme();\n\n  const handleClick = (event) => {\n    setPendingValue(value);\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setValue(pendingValue);\n    if (anchorEl) {\n      anchorEl.focus();\n    }\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'github-label' : undefined;\n\n  const gitAutocompleteCodeString = `<StyledPopper id={id} open={open} anchorEl={anchorEl} placement=\"bottom-start\">\n  <ClickAwayListener onClickAway={handleClose}>\n    <Box sx={{ bgcolor: 'background.default' }}>\n      <Box\n        sx={{\n          borderBottom: '1px solid ${theme.palette.divider}',\n          padding: '8px 10px',\n          fontWeight: 600\n        }}\n      >\n        Apply labels to this pull request\n      </Box>\n      <Autocomplete\n        open\n        multiple\n        onClose={(event: ChangeEvent<{}>, reason: AutocompleteCloseReason) => {\n          if (reason === 'escape') {\n            handleClose();\n          }\n        }}\n        value={pendingValue}\n        onChange={(event, newValue, reason) => {\n          if (event.type === 'keydown' && (event as KeyboardEvent).key === 'Backspace' && reason === 'removeOption') {\n            return;\n          }\n          setPendingValue(newValue);\n        }}\n        disableCloseOnSelect\n        PopperComponent={PopperComponent}\n        renderTags={() => null}\n        noOptionsText=\"No labels\"\n        renderOption={(props, option, { selected }) => (\n          <li {...props}>\n            <Box\n              component={TickCircle}\n              sx={{ width: 17, height: 17, mr: '5px', ml: '-2px', mt: 0.25, color: 'success.main' }}\n              style={{\n                visibility: selected ? 'visible' : 'hidden'\n              }}\n            />\n            <Box\n              sx={{\n                width: 14,\n                height: 14,\n                flexShrink: 0,\n                borderRadius: '3px',\n                mr: 1,\n                mt: '2px'\n              }}\n              style={{ backgroundColor: option.color }}\n            />\n            <Box\n              sx={{\n                flexGrow: 1,\n                '& span': {\n                  color: theme.palette.text.primary\n                }\n              }}\n            >\n              {option.name}\n              <br />\n              <span>{option.description}</span>\n            </Box>\n            <Box\n              component={CloseCircle}\n              sx={{ opacity: 0.6, width: 18, height: 18, mt: 0.25, color: 'error.main' }}\n              style={{\n                visibility: selected ? 'visible' : 'hidden'\n              }}\n            />\n          </li>\n        )}\n        options={[...labels].sort((a, b) => {\n          // Display the selected labels first.\n          let ai = value.indexOf(a);\n          ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n          let bi = value.indexOf(b);\n          bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n          return ai - bi;\n        })}\n        getOptionLabel={(option) => option.name}\n        renderInput={(params) => (\n          <StyledInput ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus placeholder=\"Filter labels\" />\n        )}\n      />\n    </Box>\n  </ClickAwayListener>\n</StyledPopper>`;\n\n  return (\n    <MainCard title=\"GitHub's Picker\" codeString={gitAutocompleteCodeString}>\n      <Box sx={{ width: 221, fontSize: 13 }}>\n        <Button\n          disableRipple\n          aria-describedby={id}\n          onClick={handleClick}\n          sx={{ justifyContent: 'space-between', '& span': { width: 'auto' } }}\n        >\n          <span>Labels</span>\n          <Setting3 variant=\"Bold\" />\n        </Button>\n        {value.map((label, index) => (\n          <Box\n            key={index}\n            sx={{\n              mt: '3px',\n              height: 20,\n              padding: '.15em 4px',\n              fontWeight: 600,\n              lineHeight: '15px',\n              borderRadius: '2px'\n            }}\n            style={{\n              backgroundColor: label.color,\n              color: theme.palette.getContrastText(label.color)\n            }}\n          >\n            {label.name}\n          </Box>\n        ))}\n      </Box>\n      <StyledPopper id={id} open={open} anchorEl={anchorEl} placement=\"bottom-start\">\n        <ClickAwayListener onClickAway={handleClose}>\n          <Box sx={{ bgcolor: 'background.default' }}>\n            <Box\n              sx={{\n                borderBottom: `1px solid ${theme.palette.divider}`,\n                padding: '8px 10px',\n                fontWeight: 600\n              }}\n            >\n              Apply labels to this pull request\n            </Box>\n            <Autocomplete\n              open\n              multiple\n              onClose={(event, reason) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }}\n              value={pendingValue}\n              onChange={(event, newValue, reason) => {\n                if (event.type === 'keydown' && event.key === 'Backspace' && reason === 'removeOption') {\n                  return;\n                }\n                setPendingValue(newValue);\n              }}\n              disableCloseOnSelect\n              PopperComponent={PopperComponent}\n              renderTags={() => null}\n              noOptionsText=\"No labels\"\n              renderOption={(props, option, { selected }) => (\n                <li {...props}>\n                  <Box\n                    component={TickCircle}\n                    sx={{\n                      width: 17,\n                      height: 17,\n                      mr: '5px',\n                      ml: '-2px',\n                      mt: 0.25,\n                      color: 'success.main',\n                      visibility: selected ? 'visible' : 'hidden'\n                    }}\n                  />\n                  <Box sx={{ width: 14, height: 14, flexShrink: 0, borderRadius: '3px', mr: 1, mt: '2px', bgcolor: option.color }} />\n                  <Box sx={{ flexGrow: 1, '& span': { color: theme.palette.text.primary } }}>\n                    {option.name}\n                    <br />\n                    <span>{option.description}</span>\n                  </Box>\n                  <Box\n                    component={CloseCircle}\n                    sx={{ opacity: 0.6, width: 18, height: 18, mt: 0.25, color: 'error.main', visibility: selected ? 'visible' : 'hidden' }}\n                  />\n                </li>\n              )}\n              options={[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })}\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <StyledInput ref={params.InputProps.ref} inputProps={params.inputProps} autoFocus placeholder=\"Filter labels\" />\n              )}\n            />\n          </Box>\n        </ClickAwayListener>\n      </StyledPopper>\n    </MainCard>\n  );\n}\n\n// From https://github.com/abdonrd/github-labels\nconst labels = [\n  {\n    name: 'good first issue',\n    color: '#7057ff',\n    description: 'Good for newcomers'\n  },\n  {\n    name: 'help wanted',\n    color: '#008672',\n    description: 'Extra attention is needed'\n  },\n  {\n    name: 'priority: critical',\n    color: '#b60205',\n    description: ''\n  },\n  {\n    name: 'priority: high',\n    color: '#d93f0b',\n    description: ''\n  },\n  {\n    name: 'priority: low',\n    color: '#0e8a16',\n    description: ''\n  },\n  {\n    name: 'priority: medium',\n    color: '#fbca04',\n    description: ''\n  },\n  {\n    name: \"status: can't reproduce\",\n    color: '#fec1c1',\n    description: ''\n  },\n  {\n    name: 'status: confirmed',\n    color: '#215cea',\n    description: ''\n  },\n  {\n    name: 'status: duplicate',\n    color: '#cfd3d7',\n    description: 'This issue or pull request already exists'\n  },\n  {\n    name: 'status: needs information',\n    color: '#fef2c0',\n    description: ''\n  },\n  {\n    name: 'status: wont do/fix',\n    color: '#eeeeee',\n    description: 'This will not be worked on'\n  },\n  {\n    name: 'type: bug',\n    color: '#d73a4a',\n    description: \"Something isn't working\"\n  },\n  {\n    name: 'type: discussion',\n    color: '#d4c5f9',\n    description: ''\n  },\n  {\n    name: 'type: documentation',\n    color: '#006b75',\n    description: ''\n  },\n  {\n    name: 'type: enhancement',\n    color: '#84b6eb',\n    description: ''\n  },\n  {\n    name: 'type: epic',\n    color: '#3e4b9e',\n    description: 'A theme of work that contain sub-tasks'\n  },\n  {\n    name: 'type: feature request',\n    color: '#fbca04',\n    description: 'New feature or request'\n  },\n  {\n    name: 'type: question',\n    color: '#d876e3',\n    description: 'Further information is requested'\n  }\n];\n","size_bytes":12206},"src/components/@extended/Snackbar.jsx":{"content":"// material-ui\nimport Alert from '@mui/material/Alert';\nimport Button from '@mui/material/Button';\nimport Fade from '@mui/material/Fade';\nimport Grow from '@mui/material/Grow';\nimport Slide from '@mui/material/Slide';\nimport Stack from '@mui/material/Stack';\nimport MuiSnackbar from '@mui/material/Snackbar';\n\n// project-imports\nimport IconButton from './IconButton';\nimport { closeSnackbar, useGetSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// animation function\nfunction TransitionSlideLeft(props) {\n  return <Slide {...props} direction=\"left\" />;\n}\n\nfunction TransitionSlideUp(props) {\n  return <Slide {...props} direction=\"up\" />;\n}\n\nfunction TransitionSlideRight(props) {\n  return <Slide {...props} direction=\"right\" />;\n}\n\nfunction TransitionSlideDown(props) {\n  return <Slide {...props} direction=\"down\" />;\n}\n\nfunction GrowTransition(props) {\n  return <Grow {...props} />;\n}\n\n// animation options\nconst animation = {\n  SlideLeft: TransitionSlideLeft,\n  SlideUp: TransitionSlideUp,\n  SlideRight: TransitionSlideRight,\n  SlideDown: TransitionSlideDown,\n  Grow: GrowTransition,\n  Fade\n};\n\n// ==============================|| SNACKBAR ||============================== //\n\nexport default function Snackbar() {\n  const { snackbar } = useGetSnackbar();\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    closeSnackbar();\n  };\n\n  return (\n    <>\n      {/* default snackbar */}\n      {snackbar.variant === 'default' && (\n        <MuiSnackbar\n          anchorOrigin={snackbar.anchorOrigin}\n          open={snackbar.open}\n          autoHideDuration={1500}\n          onClose={handleClose}\n          message={snackbar.message}\n          TransitionComponent={animation[snackbar.transition]}\n          action={\n            <>\n              <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n                UNDO\n              </Button>\n              <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                <Add style={{ transform: 'rotate(45deg)' }} />\n              </IconButton>\n            </>\n          }\n        />\n      )}\n\n      {/* alert snackbar */}\n      {snackbar.variant === 'alert' && (\n        <MuiSnackbar\n          TransitionComponent={animation[snackbar.transition]}\n          anchorOrigin={snackbar.anchorOrigin}\n          open={snackbar.open}\n          autoHideDuration={1500}\n          onClose={handleClose}\n        >\n          <Alert\n            variant={snackbar.alert.variant}\n            color={snackbar.alert.color}\n            action={\n              <Stack direction=\"row\" alignItems=\"center\">\n                {snackbar.actionButton !== false && (\n                  <Button color={snackbar.alert.color} size=\"small\" onClick={handleClose}>\n                    UNDO\n                  </Button>\n                )}\n                {snackbar.close && (\n                  <IconButton size=\"small\" aria-label=\"close\" variant=\"contained\" color={snackbar.alert.color} onClick={handleClose}>\n                    <Add style={{ transform: 'rotate(45deg)' }} />\n                  </IconButton>\n                )}\n              </Stack>\n            }\n            sx={{\n              ...snackbar.alert.sx,\n              ...(snackbar.alert.variant === 'outlined' && {\n                bgcolor: 'background.default'\n              })\n            }}\n          >\n            {snackbar.message}\n          </Alert>\n        </MuiSnackbar>\n      )}\n    </>\n  );\n}\n","size_bytes":3500},"src/sections/components-overview/modal/ServerModal.jsx":{"content":"import { useRef } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| MODAL - SERVER ||============================== //\n\nexport default function ServerModal() {\n  const rootRef = useRef(null);\n\n  return (\n    <MainCard content={false}>\n      <Box\n        sx={{\n          height: 300,\n          flexGrow: 1,\n          minWidth: 300,\n          transform: 'translateZ(0)',\n          // The position fixed scoping doesn't work in IE11.\n          // Disable this demo to preserve the others.\n          '@media all and (-ms-high-contrast: none)': {\n            display: 'none'\n          }\n        }}\n        ref={rootRef}\n      >\n        <Modal\n          disablePortal\n          disableEnforceFocus\n          disableAutoFocus\n          open\n          aria-labelledby=\"server-modal-title\"\n          aria-describedby=\"server-modal-description\"\n          sx={{ display: 'flex', p: 1, alignItems: 'center', justifyContent: 'center' }}\n          container={() => rootRef.current}\n        >\n          <MainCard title=\"Server Side Modal\" modal darkTitle content={false}>\n            <CardContent>\n              <Typography id=\"modal-modal-description\">If you disable JavaScript, you will still see me.</Typography>\n            </CardContent>\n            <Divider />\n            <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ px: 2.5, py: 2 }}>\n              <Button color=\"error\" size=\"small\">\n                Cancel\n              </Button>\n              <Button variant=\"contained\" size=\"small\">\n                Submit\n              </Button>\n            </Stack>\n          </MainCard>\n        </Modal>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":2038},"src/sections/apps/invoice/export-pdf/Content.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport { Text, View, StyleSheet } from '@react-pdf/renderer';\n\nconst textPrimary = '#262626';\nconst textSecondary = '#8c8c8c';\nconst border = '#f0f0f0';\n\n// custom Style\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 16,\n    '@media max-width: 400': {\n      paddingTop: 10,\n      paddingLeft: 0\n    }\n  },\n  card: {\n    border: `1px solid ${border}`,\n    borderRadius: '2px',\n    padding: '20px',\n    width: '48%'\n  },\n  title: {\n    color: textPrimary,\n    fontSize: '12px',\n    fontWeight: 500\n  },\n  caption: {\n    color: textSecondary,\n    fontSize: '10px'\n  },\n  tableTitle: {\n    color: textPrimary,\n    fontSize: '10px',\n    fontWeight: 500\n  },\n  tableCell: {\n    color: textPrimary,\n    fontSize: '10px'\n  },\n\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 24\n  },\n\n  subRow: {\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    margin: 0,\n    paddingBottom: 20\n  },\n  column: {\n    flexDirection: 'column'\n  },\n\n  paragraph: {\n    color: '#1F2937',\n    fontSize: '12px'\n  },\n\n  tableHeader: {\n    justifyContent: 'space-between',\n    borderBottom: '1px solid #f0f0f0',\n    borderTop: '1px solid #f0f0f0',\n    paddingTop: '10px',\n    paddingBottom: '10px',\n    margin: 0,\n    paddingLeft: 10\n  },\n  tableRow: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderBottom: '1px solid #f0f0f0',\n    paddingBottom: 10,\n    paddingTop: 10,\n    margin: 0,\n    paddingLeft: 10\n  },\n  amountSection: { margin: 0, paddingRight: 25, paddingTop: 16, justifyContent: 'flex-end' },\n  amountRow: { margin: 0, width: '40%', justifyContent: 'space-between' },\n  pb5: { paddingBottom: 5 },\n  flex03: { flex: '0.3 1 0px' },\n  flex07: { flex: '0.7 1 0px' },\n  flex17: { flex: '1.7 1 0px' },\n  flex20: { flex: '2 1 0px' }\n});\n\n// ==============================|| INVOICE EXPORT - CONTENT  ||============================== //\n\nexport default function Content({ list }) {\n  const theme = useTheme();\n  const subtotal = list?.invoice_detail?.reduce((prev, curr) => {\n    if (curr.name.trim().length > 0) return prev + Number(curr.price * Math.floor(curr.qty));\n    else return prev;\n  }, 0);\n\n  const taxRate = (Number(list?.tax) * subtotal) / 100;\n  const discountRate = (Number(list?.discount) * subtotal) / 100;\n  const total = subtotal - discountRate + taxRate;\n  return (\n    <View style={styles.container}>\n      <View style={[styles.row, styles.subRow]}>\n        <View style={styles.card}>\n          <Text style={[styles.title, { marginBottom: 8 }]}>From:</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.cashierInfo?.name}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.cashierInfo?.address}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.cashierInfo?.phone}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.cashierInfo?.email}</Text>\n        </View>\n        <View style={styles.card}>\n          <Text style={[styles.title, { marginBottom: 8 }]}>To:</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.customerInfo?.name}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.customerInfo?.address}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.customerInfo?.phone}</Text>\n          <Text style={[styles.caption, styles.pb5]}>{list?.customerInfo?.email}</Text>\n        </View>\n      </View>\n      <View>\n        <View style={[styles.row, styles.tableHeader, { backgroundColor: theme.palette.secondary[100] }]}>\n          <Text style={[styles.tableTitle, styles.flex03]}>#</Text>\n          <Text style={[styles.tableTitle, styles.flex17]}>NAME</Text>\n          <Text style={[styles.tableTitle, styles.flex20]}>DESCRIPTION</Text>\n          <Text style={[styles.tableTitle, styles.flex07]}>QTY</Text>\n          <Text style={[styles.tableTitle, styles.flex07]}>PRICE</Text>\n          <Text style={[styles.tableTitle, styles.flex07]}>AMOUNT</Text>\n        </View>\n        {list?.invoice_detail.map((row, index) => {\n          return (\n            <View style={[styles.row, styles.tableRow]} key={row.id}>\n              <Text style={[styles.tableCell, styles.flex03]}>{index + 1}</Text>\n              <Text style={[styles.tableCell, styles.flex17, { textOverflow: 'ellipsis' }]}>{row.name}</Text>\n              <Text style={[styles.tableCell, styles.flex20]}>{row.description}</Text>\n              <Text style={[styles.tableCell, styles.flex07]}>{row.qty}</Text>\n              <Text style={[styles.tableCell, styles.flex07]}>{`$${Number(row.price).toFixed(2)}`}</Text>\n              <Text style={[styles.tableCell, styles.flex07]}>{`$${Number(row.price * row.qty).toFixed(2)}`}</Text>\n            </View>\n          );\n        })}\n      </View>\n      <View style={[styles.row, { paddingTop: 25, margin: 0, paddingRight: 25, justifyContent: 'flex-end' }]}>\n        <View style={[styles.row, styles.amountRow]}>\n          <Text style={styles.caption}>Sub Total:</Text>\n          <Text style={styles.tableCell}>${subtotal?.toFixed(2)}</Text>\n        </View>\n      </View>\n      <View style={[styles.row, styles.amountSection]}>\n        <View style={[styles.row, styles.amountRow]}>\n          <Text style={styles.caption}>Discount:</Text>\n          <Text style={[styles.caption, { color: theme.palette.success.main }]}>${discountRate?.toFixed(2)}</Text>\n        </View>\n      </View>\n      <View style={[styles.row, styles.amountSection]}>\n        <View style={[styles.row, styles.amountRow]}>\n          <Text style={styles.caption}>Tax:</Text>\n          <Text style={[styles.caption]}>${taxRate?.toFixed(2)}</Text>\n        </View>\n      </View>\n      <View style={[styles.row, styles.amountSection]}>\n        <View style={[styles.row, styles.amountRow]}>\n          <Text style={styles.tableCell}>Grand Total:</Text>\n          <Text style={styles.tableCell}>${total % 1 === 0 ? total : total?.toFixed(2)}</Text>\n        </View>\n      </View>\n      <View style={[styles.row, { alignItems: 'flex-start', marginTop: 20, width: '95%' }]}>\n        <Text style={styles.caption}>Notes </Text>\n        <Text style={styles.tableCell}>\n          {' '}\n          It was a pleasure working with you and your team. We hope you will keep us in mind for future freelance projects. Thank You!\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nContent.propTypes = { list: PropTypes.any };\n","size_bytes":6494},"src/sections/widget/data/ProductSales.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Table from '@mui/material/Table';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\n// table data\nconst createData = (sales, product, price, colorClass = '') => ({ sales, product, price, colorClass });\n\nconst rows = [\n  createData('2136', 'Head Phone', '$ 926.23'),\n  createData('2546', 'Iphone V', '$ 485.85'),\n  createData('2681', 'Jacket', '$ 786.4'),\n  createData('2756', 'Head Phone', '$ 563.45'),\n  createData('8765', 'Sofa', '$ 769.45'),\n  createData('3652', 'Iphone X', '$ 754.45'),\n  createData('7456', 'Jacket', '$ 743.23'),\n  createData('6502', 'T-Shirt', '$ 642.23')\n];\n\n// ===========================|| DATA WIDGET - PRODUCT SALES ||=========================== //\n\nexport default function ProductSales() {\n  return (\n    <MainCard title=\"Product Sales\" content={false}>\n      <Grid sx={{ p: 2.5 }} container direction=\"row\" justifyContent=\"space-around\" alignItems=\"center\">\n        <Grid item>\n          <Grid container direction=\"column\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <Grid item>\n              <Typography variant=\"subtitle2\" color=\"secondary\">\n                Earning\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\">20,569$</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container direction=\"column\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <Grid item>\n              <Typography variant=\"subtitle2\" color=\"secondary\">\n                Yesterday\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\">580$</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid container direction=\"column\" spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <Grid item>\n              <Typography variant=\"subtitle2\" color=\"secondary\">\n                This Week\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\">5,789$</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <SimpleBar sx={{ height: 290 }}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell sx={{ pl: 3 }}>Last Sales</TableCell>\n                <TableCell>Product Name</TableCell>\n                <TableCell align=\"right\" sx={{ pr: 3 }}>\n                  Price\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, index) => (\n                <TableRow hover key={index}>\n                  <TableCell sx={{ pl: 3 }}>\n                    <span className={row.colorClass}>{row.sales}</span>\n                  </TableCell>\n                  <TableCell>{row.product}</TableCell>\n                  <TableCell align=\"right\" sx={{ pr: 3 }}>\n                    <span>{row.price}</span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </SimpleBar>\n    </MainCard>\n  );\n}\n","size_bytes":3619},"src/menu-items/charts-map.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { Graph, Chart21, Map1 } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  charts: Chart21,\n  chart: Graph,\n  map: Map1\n};\n\n// ==============================|| MENU ITEMS - CHARTS & MAPS ||============================== //\n\nconst chartsMap = {\n  id: 'group-charts-map',\n  title: <FormattedMessage id=\"charts-map\" />,\n  icon: icons.charts,\n  type: 'group',\n  children: [\n    {\n      id: 'react-chart',\n      title: <FormattedMessage id=\"charts\" />,\n      type: 'collapse',\n      icon: icons.chart,\n      children: [\n        {\n          id: 'apexchart',\n          title: <FormattedMessage id=\"apexchart\" />,\n          type: 'item',\n          url: '/charts/apexchart'\n        },\n        {\n          id: 'org-chart',\n          title: <FormattedMessage id=\"org-chart\" />,\n          type: 'item',\n          url: '/charts/org-chart'\n        }\n      ]\n    },\n    {\n      id: 'map',\n      title: <FormattedMessage id=\"map\" />,\n      type: 'item',\n      url: '/map',\n      icon: icons.map\n    }\n  ]\n};\n\nexport default chartsMap;\n","size_bytes":1108},"src/sections/widget/data/UserPersonalData.jsx":{"content":"// material-ui\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Clock, Google, Location, Notepad } from 'iconsax-react';\n\n// ===========================|| DATA WIDGET - USER PERSONAL DATA ||=========================== //\n\nexport default function UserPersonalData() {\n  return (\n    <MainCard\n      title={\n        <List disablePadding>\n          <ListItem\n            sx={{ p: 0 }}\n            secondaryAction={\n              <IconButton edge=\"end\" aria-label=\"delete\" color=\"secondary\">\n                <Notepad />\n              </IconButton>\n            }\n          >\n            <ListItemAvatar>\n              <Avatar color=\"error\" variant=\"rounded\">\n                <Google variant=\"Bold\" />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText\n              sx={{ my: 0 }}\n              primary={<Typography>Google LLC</Typography>}\n              secondary={<Typography variant=\"subtitle1\">Sr. UI designer</Typography>}\n            />\n          </ListItem>\n        </List>\n      }\n    >\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle1\">Description</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard\n            dummy text ever since the 1500s, when an unknown printer took a galley.\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1.25}>\n            <Chip label=\"Fulltime\" variant=\"combined\" sx={{ color: 'text.primary' }} />\n            <Chip label=\"Remote\" variant=\"combined\" sx={{ color: 'text.primary' }} />\n            <Chip label=\"Hourly\" variant=\"combined\" sx={{ color: 'text.primary' }} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1} sx={{ mt: 1.5 }}>\n            <Typography sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              <Location size={14} /> NY, USA <Clock size={14} style={{ marginLeft: 8 }} /> 2 days ago\n            </Typography>\n            <Button variant=\"contained\">Apply</Button>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2904},"src/sections/apps/kanban/Board/AddItem.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport { sub } from 'date-fns';\nimport { Chance } from 'chance';\n\n// project-imports\nimport SubCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { addItem } from 'api/kanban';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, Calculator, Profile2User } from 'iconsax-react';\n\nconst chance = new Chance();\n\n// ==============================|| KANBAN BOARD - ADD ITEM ||============================== //\n\nexport default function AddItem({ columnId }) {\n  const [addTaskBox, setAddTaskBox] = useState(false);\n\n  const handleAddTaskChange = () => {\n    setAddTaskBox((prev) => !prev);\n  };\n\n  const [title, setTitle] = useState('');\n  const [isTitle, setIsTitle] = useState(false);\n\n  const handleAddTask = (event) => {\n    if (event.key === 'Enter' || event.keyCode === 13) {\n      addTask();\n    }\n  };\n\n  const addTask = () => {\n    if (title.length > 0) {\n      const newItem = {\n        id: `${chance.integer({ min: 1000, max: 9999 })}`,\n        title,\n        dueDate: sub(new Date(), { days: 0, hours: 1, minutes: 45 }),\n        image: false,\n        assign: '',\n        description: '',\n        priority: 'low',\n        attachments: []\n      };\n\n      addItem(columnId, newItem, '0');\n      openSnackbar({\n        open: true,\n        message: 'Task Added successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n      handleAddTaskChange();\n      setTitle('');\n    } else {\n      setIsTitle(true);\n    }\n  };\n\n  const handleTaskTitle = (event) => {\n    const newTitle = event.target.value;\n    setTitle(newTitle);\n    if (newTitle.length <= 0) {\n      setIsTitle(true);\n    } else {\n      setIsTitle(false);\n    }\n  };\n\n  return (\n    <Grid container alignItems=\"center\" spacing={1} sx={{ marginTop: 1 }}>\n      {addTaskBox && (\n        <Grid item xs={12}>\n          <SubCard content={false}>\n            <Box sx={{ p: 2, pb: 1.5, transition: 'background-color 0.25s ease-out' }}>\n              <Grid container alignItems=\"center\" spacing={0.5}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    placeholder=\"Add Task\"\n                    value={title}\n                    onChange={handleTaskTitle}\n                    sx={{\n                      mb: 3,\n                      '& input': { bgcolor: 'transparent', p: 0, borderRadius: '0px' },\n                      '& fieldset': { display: 'none' },\n                      '& .MuiFormHelperText-root': { ml: 0 },\n                      '& .MuiOutlinedInput-root': { bgcolor: 'transparent', '&.Mui-focused': { boxShadow: 'none' } }\n                    }}\n                    onKeyUp={handleAddTask}\n                    helperText={isTitle ? 'Task title is required.' : ''}\n                    error={isTitle}\n                  />\n                </Grid>\n                <Grid item>\n                  <IconButton>\n                    <Profile2User />\n                  </IconButton>\n                </Grid>\n                <Grid item>\n                  <IconButton>\n                    <Calculator />\n                  </IconButton>\n                </Grid>\n                <Grid item xs zeroMinWidth />\n                <Grid item>\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                    <Tooltip title=\"Cancel\">\n                      <IconButton size=\"small\" color=\"error\" onClick={handleAddTaskChange}>\n                        <Add style={{ transform: 'rotate(45deg)' }} />\n                      </IconButton>\n                    </Tooltip>\n                    <Button variant=\"contained\" color=\"primary\" onClick={addTask} size=\"small\">\n                      Add\n                    </Button>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Box>\n          </SubCard>\n        </Grid>\n      )}\n      {!addTaskBox && (\n        <Grid item xs={12}>\n          <Button variant=\"dashed\" color=\"secondary\" fullWidth onClick={handleAddTaskChange}>\n            Add Task\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n\nAddItem.propTypes = { columnId: PropTypes.string };\n","size_bytes":4588},"src/sections/apps/invoice/AddressModal.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport InputAdornment from '@mui/material/InputAdornment';\n\n// third-party\nimport { Add, SearchNormal1 } from 'iconsax-react';\n\n// ==============================|| INVOICE - SELECT ADDRESS ||============================== //\n\nexport default function AddressModal({ open, setOpen, handlerAddress }) {\n  function closeAddressModal() {\n    setOpen(false);\n  }\n\n  return (\n    <Dialog\n      maxWidth=\"sm\"\n      open={open}\n      onClose={closeAddressModal}\n      sx={{ '& .MuiDialog-paper': { p: 0 }, '& .MuiBackdrop-root': { opacity: '0.5 !important' } }}\n    >\n      <DialogTitle>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h5\">Select Address</Typography>\n          <Button startIcon={<Add />} onClick={closeAddressModal} color=\"primary\">\n            Add New\n          </Button>\n        </Stack>\n      </DialogTitle>\n      <Divider />\n      <DialogContent sx={{ p: 2.5 }}>\n        <FormControl sx={{ width: '100%', pb: 2 }}>\n          <TextField\n            autoFocus\n            id=\"name\"\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchNormal1 size={18} />\n                </InputAdornment>\n              )\n            }}\n            placeholder=\"Search\"\n            fullWidth\n          />\n        </FormControl>\n        <Stack spacing={2}>\n          <Address handlerAddress={handlerAddress} />\n        </Stack>\n      </DialogContent>\n      <Divider />\n      <DialogActions sx={{ p: 2.5 }}>\n        <Button color=\"error\" onClick={closeAddressModal}>\n          Cancel\n        </Button>\n        <Button onClick={closeAddressModal} color=\"primary\" variant=\"contained\">\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction Address({ handlerAddress }) {\n  const theme = useTheme();\n\n  const addressData = [\n    {\n      name: 'Ian Carpenter',\n      address: '1754 Ureate, RhodSA5 5BO',\n      phone: '+91 1234567890',\n      email: 'iacrpt65@gmail.com'\n    },\n    { name: 'Belle J. Richter', address: '1300 Mine RoadQuemado, NM 87829', phone: '305-829-7809', email: 'belljrc23@gmail.com' },\n    { name: 'Ritika Yohannan', address: '3488 Arbutus DriveMiami, FL', phone: '+91 1234567890', email: 'rtyhn65@gmail.com' },\n    { name: 'Jesse G. Hassen', address: '3488 Arbutus DriveMiami, FL 33012', phone: '+91 1234567890', email: 'jessghs78@gmail.com' },\n    {\n      name: 'Christopher P. Iacovelli',\n      address: '4388 House DriveWesrville, OH',\n      phone: '+91 1234567890',\n      email: 'crpthl643@gmail.com'\n    },\n    { name: 'Thomas D. Johnson', address: '4388 House DriveWestville, OH +91', phone: '1234567890', email: 'thomshj56@gmail.com' }\n  ];\n\n  return (\n    <>\n      {addressData.map((address) => (\n        <Box\n          onClick={() => handlerAddress(address)}\n          key={address.email}\n          sx={{\n            width: '100%',\n            border: '1px solid',\n            borderColor: 'secondary.200',\n            borderRadius: 1,\n            p: 1.25,\n            '&:hover': { bgcolor: theme.palette.primary.lighter, borderColor: theme.palette.primary.lighter }\n          }}\n        >\n          <Typography variant=\"subtitle1\">{address.name}</Typography>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={1}>\n            <Typography variant=\"body2\" color=\"secondary\">\n              {address.address}\n            </Typography>\n            <Typography variant=\"body2\" color=\"secondary\">\n              {address.phone}\n            </Typography>\n            <Typography variant=\"body2\" color=\"secondary\">\n              {address.email}\n            </Typography>\n          </Stack>\n        </Box>\n      ))}\n    </>\n  );\n}\n\nAddressModal.propTypes = { open: PropTypes.bool, setOpen: PropTypes.func, handlerAddress: PropTypes.func };\n\nAddress.propTypes = { handlerAddress: PropTypes.func };\n","size_bytes":4528},"src/layout/Component/Drawer/Navigation/index.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport NavGroup from './NavGroup';\nimport menuItem from 'menu-items/components';\n\n// ==============================|| DRAWER - NAVIGATION ||============================== //\n\nexport default function Navigation({ searchValue }) {\n  let filteredMenuItems = [];\n\n  // if no value searched, we will render all menu items\n  if (searchValue === null || searchValue === undefined || searchValue === '') {\n    filteredMenuItems = menuItem;\n  } else {\n    menuItem.forEach((parentMenu) => {\n      const matchedChildren = [];\n\n      parentMenu.children?.forEach((child) => {\n        if (child.search?.trim().toLowerCase().includes(searchValue)) {\n          // todo: consider other filed then id\n          // if match\n          matchedChildren.push(child); // get the filter menuitem and push it to children\n        }\n      });\n\n      const parent = filteredMenuItems.filter((xx) => xx === parentMenu); // get the parent menu item/header\n      if (parent.length === 0 && matchedChildren.length > 0) {\n        const clonedParent = { ...parentMenu }; // clone children as we dont want entire children but just filtered\n        clonedParent.children = matchedChildren;\n        filteredMenuItems.push(clonedParent);\n      }\n    });\n  }\n\n  const navGroups = filteredMenuItems.map((item) => {\n    switch (item.type) {\n      case 'group':\n        return <NavGroup key={item.id} item={item} />;\n      default:\n        return (\n          <Typography key={item.id} variant=\"h6\" color=\"error\" align=\"center\">\n            Fix - Navigation Group\n          </Typography>\n        );\n    }\n  });\n\n  return <Box sx={{ pt: 1 }}>{navGroups}</Box>;\n}\n\nNavigation.propTypes = { searchValue: PropTypes.string };\n","size_bytes":1838},"src/sections/forms/edit-forms/works/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\nimport { List, ListItem, ListItemText } from '@mui/material';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label image\n            </Typography>\n            <ImageDisplay file={data.imageLabelSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Work title image\n            </Typography>\n            <ImageDisplay file={data.titleImagePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Work tags\n            </Typography>\n            <List>\n              {data.workTags.map((tag, index) => (\n                <ListItem key={index}>\n                  <ListItemText primary={tag} />\n                </ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title of page\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.title}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.titleParagraph}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Visit website link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.visitWebsiteLink}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Call to action title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.callToActionTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Call to action paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.callToActionParagraph}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First column\n            </Typography>\n            {data.firstColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second column\n            </Typography>\n            {data.secondColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third column\n            </Typography>\n            {data.firstColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\">{project.text}</Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth column\n            </Typography>\n            {data.fourthColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review text\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.text}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review author\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.author}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review position\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.position}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review portrait image\n            </Typography>\n            <ImageDisplay file={data.review.imageSrc} />\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":7305},"src/pages/widget/statistics.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ReportCard from 'components/cards/statistics/ReportCard';\nimport HoverSocialCard from 'components/cards/statistics/HoverSocialCard';\nimport RoundIconCard from 'components/cards/statistics/RoundIconCard';\nimport AnalyticEcommerce from 'components/cards/statistics/AnalyticEcommerce';\nimport EcommerceMetrix from 'components/cards/statistics/EcommerceMetrix';\n\nimport WalletProfile from 'sections/widget/statistics/WalletProfile';\nimport AssignUsers from 'sections/widget/statistics/AssignUsers';\nimport PermissionBlock from 'sections/widget/statistics/PermissionBlock';\nimport DropboxStorage from 'sections/widget/statistics/DropboxStorage';\nimport SwitchBalanace from 'sections/widget/statistics/SwitchBalanace';\nimport { ThemeMode } from 'config';\n\n// assets\nimport {\n  Apple,\n  Calendar,\n  CalendarAdd,\n  Chart,\n  Clock,\n  DocumentDownload,\n  DocumentText,\n  DollarCircle,\n  Dribbble,\n  Eye,\n  Facebook,\n  Gps,\n  ShoppingCart,\n  Youtube\n} from 'iconsax-react';\n\n// ===========================|| WIDGET - STATISTICS ||=========================== //\n\nexport default function WidgetStatistics() {\n  const theme = useTheme();\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <ReportCard primary=\"$30200\" secondary=\"All Earnings\" color={theme.palette.secondary.main} iconPrimary={Chart} />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <ReportCard primary=\"145\" secondary=\"Task\" color={theme.palette.error.main} iconPrimary={Calendar} />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <ReportCard primary=\"290+\" secondary=\"Page Views\" color={theme.palette.success.main} iconPrimary={DocumentText} />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <ReportCard primary=\"500\" secondary=\"Downloads\" color={theme.palette.primary.main} iconPrimary={DocumentDownload} />\n      </Grid>\n\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <HoverSocialCard primary=\"Facebook Users\" secondary=\"1165 +\" iconPrimary={Facebook} color={theme.palette.primary.main} />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <HoverSocialCard primary=\"Dribbble Posts\" secondary=\"780 +\" iconPrimary={Dribbble} color={theme.palette.info.main} />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <HoverSocialCard\n          primary=\"iOS Users\"\n          secondary=\"998 +\"\n          iconPrimary={Apple}\n          color={theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary[200] : theme.palette.secondary.dark}\n        />\n      </Grid>\n      <Grid item xs={12} md={4} lg={3} sm={6}>\n        <HoverSocialCard primary=\"Youtube Videos\" secondary=\"650 +\" iconPrimary={Youtube} color={theme.palette.error.main} />\n      </Grid>\n\n      <Grid item xs={12} sm={6} md={4} lg={3}>\n        <AnalyticEcommerce title=\"Total Page Views\" count=\"4,42,236\" percentage={59.3} extra=\"35,000\" />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4} lg={3}>\n        <AnalyticEcommerce title=\"Total Users\" count=\"78,250\" percentage={70.5} color=\"success\" extra=\"8,900\" />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4} lg={3}>\n        <AnalyticEcommerce title=\"Total Order\" count=\"18,800\" percentage={27.4} isLoss color=\"warning\" extra=\"1,943\" />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4} lg={3}>\n        <AnalyticEcommerce title=\"Total Sales\" count=\"$35,078\" percentage={27.4} isLoss color=\"error\" extra=\"$20,395\" />\n      </Grid>\n\n      <Grid item xs={12} sm={6} md={4}>\n        <WalletProfile />\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <AssignUsers />\n          </Grid>\n          <Grid item xs={12}>\n            <PermissionBlock />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <DropboxStorage />\n          </Grid>\n          <Grid item xs={12}>\n            <SwitchBalanace />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} lg={4} sm={6}>\n        <EcommerceMetrix\n          primary=\"Revenue\"\n          secondary=\"$4,500\"\n          content=\"$50,032 Last Month\"\n          color={theme.palette.primary.main}\n          iconPrimary={DollarCircle}\n        />\n      </Grid>\n      <Grid item xs={12} lg={4} sm={6}>\n        <EcommerceMetrix\n          primary=\"Orders Received\"\n          secondary=\"486\"\n          content=\"20% Increase\"\n          color={theme.palette.warning.main}\n          iconPrimary={CalendarAdd}\n        />\n      </Grid>\n      <Grid item xs={12} lg={4} sm={12}>\n        <EcommerceMetrix\n          primary=\"Total Sales\"\n          secondary=\"1641\"\n          content=\"$1,055 Revenue Generated\"\n          color={theme.palette.success.main}\n          iconPrimary={ShoppingCart}\n        />\n      </Grid>\n\n      <Grid item xs={12} lg={4} sm={6}>\n        <RoundIconCard\n          primary=\"Impressions\"\n          secondary=\"1,563\"\n          content=\"May 23 - June 01 (2018)\"\n          iconPrimary={Eye}\n          color=\"primary.darker\"\n          bgcolor=\"primary.lighter\"\n        />\n      </Grid>\n      <Grid item xs={12} lg={4} sm={6}>\n        <RoundIconCard\n          primary=\"Goal\"\n          secondary=\"30,564\"\n          content=\"May 28 - June 01 (2018)\"\n          iconPrimary={Gps}\n          color=\"success.darker\"\n          bgcolor=\"success.lighter\"\n        />\n      </Grid>\n      <Grid item xs={12} lg={4} md={12}>\n        <RoundIconCard\n          primary=\"Impact\"\n          secondary=\"42.6%\"\n          content=\"May 30 - June 01 (2018)\"\n          iconPrimary={Clock}\n          color=\"warning.darker\"\n          bgcolor=\"warning.lighter\"\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":5896},"src/sections/components-overview/autocomplete/MultipleAutocomplete.jsx":{"content":"// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - MULTIPLE ||============================== //\n\nexport default function MultipleAutocomplete() {\n  const multiAutocompleteCodeString = `<Autocomplete\n  multiple\n  id=\"tags-outlined\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={[data[7], data[13]]}\n  filterSelectedOptions\n  renderInput={(params) => <TextField {...params} placeholder=\"Favorites\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Multiple Tags\" codeString={multiAutocompleteCodeString}>\n      <Autocomplete\n        multiple\n        id=\"tags-outlined\"\n        options={data}\n        getOptionLabel={(option) => option.label}\n        defaultValue={[data[7], data[13]]}\n        filterSelectedOptions\n        renderInput={(params) => <TextField {...params} placeholder=\"Favorites\" />}\n        sx={{\n          '& .MuiOutlinedInput-root': { p: 1 },\n          '& .MuiAutocomplete-tag': {\n            bgcolor: 'primary.lighter',\n            border: '1px solid',\n            borderColor: 'primary.light',\n            '& .MuiSvgIcon-root': { color: 'primary.main', '&:hover': { color: 'primary.dark' } }\n          }\n        }}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":1736},"src/pages/components-overview/typography.jsx":{"content":"// material-ui\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ==============================|| COMPONENTS - TYPOGRAPHY ||============================== //\n\nexport default function ComponentTypography() {\n  const basicTypographyCodeString = `<Typography variant=\"h1\">Inter</Typography>\n<Typography variant=\"h5\">Font Family</Typography>\n<Breadcrumbs aria-label=\"breadcrumb\">\n  <Typography variant=\"h6\">Regular</Typography>\n  <Typography variant=\"h6\">Medium</Typography>\n  <Typography variant=\"h6\">Bold</Typography>\n</Breadcrumbs>`;\n\n  const headingTypographyCodeString = `<Typography variant=\"h1\">H1 Heading</Typography>\n<Typography variant=\"h2\">H2 Heading</Typography>\n<Typography variant=\"h3\">H3 Heading</Typography>\n<Typography variant=\"h4\">H4 Heading</Typography>\n<Typography variant=\"h5\">H5 Heading</Typography>\n<Typography variant=\"h6\">H6 Heading / Subheading</Typography>`;\n\n  const body1TypographyCodeString = `<Typography variant=\"body1\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const body2TypographyCodeString = `<Typography variant=\"body2\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const subtitle1TypographyCodeString = `<Typography variant=\"subtitle1\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const subtitle2TypographyCodeString = `<Typography variant=\"subtitle2\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const captionTypographyCodeString = `<Typography variant=\"caption\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const alignmentTypographyCodeString = `<Typography variant=\"body2\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n</Typography>\n<Typography variant=\"body2\" textAlign=\"center\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n</Typography>\n<Typography variant=\"body2\" textAlign=\"right\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n</Typography>`;\n\n  const gutterTypographyCodeString = `<Typography variant=\"body1\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>\n<Typography variant=\"body2\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const overlineTypographyCodeString = `<Typography variant=\"overline\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  const lineTypographyCodeString = `<Link href=\"#\">#able-pro</Link>`;\n\n  const colorTypographyCodeString = `<Typography variant=\"h6\" color=\"text.primary\" gutterBottom>\n  This is textPrimary text color.\n</Typography>\n<Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n  This is textSecondary text color.\n</Typography>\n<Typography variant=\"h6\" color=\"primary\" gutterBottom>\n  This is primary text color.\n</Typography>\n<Typography variant=\"h6\" color=\"secondary\" gutterBottom>\n  This is secondary text color.\n</Typography>\n<Typography variant=\"h6\" color=\"success\" gutterBottom>\n  This is success text color.\n</Typography>\n<Typography variant=\"h6\" sx={{ color: 'warning.main' }} gutterBottom>\n  This is warning text color.\n</Typography>\n<Typography variant=\"h6\" color=\"error\" gutterBottom>\n  This is error text color.\n</Typography>`;\n\n  const parapraphyTypographyCodeString = `<Typography variant=\"body1\" gutterBottom>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore\n  magna aliqua.\n</Typography>`;\n\n  const fontTypographyCodeString = `<Typography variant=\"body1\" gutterBottom sx={{ fontStyle: 'italic' }}>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>\n<Typography variant=\"subtitle1\" gutterBottom sx={{ fontStyle: 'italic' }}>\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua.\n</Typography>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Typography\"\n        caption=\"Use typography to present your design and content as clearly and efficiently as possible.\"\n        directory=\"src/pages/components-overview/typography\"\n        link=\"https://mui.com/material-ui/react-typography/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicTypographyCodeString}>\n                <Stack spacing={0.75} sx={{ mt: -1.5 }}>\n                  <Typography variant=\"h1\">Inter</Typography>\n                  <Typography variant=\"h5\">Font Family</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Regular</Typography>\n                    <Typography variant=\"h6\">Medium</Typography>\n                    <Typography variant=\"h6\">Bold</Typography>\n                  </Breadcrumbs>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Heading\" codeString={headingTypographyCodeString}>\n                <Stack spacing={2}>\n                  <Typography variant=\"h1\">H1 Heading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 38px</Typography>\n                    <Typography variant=\"h6\">Weight: Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 46px</Typography>\n                  </Breadcrumbs>\n                  <Divider />\n\n                  <Typography variant=\"h2\">H2 Heading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 30px</Typography>\n                    <Typography variant=\"h6\">Weight: Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 38px</Typography>\n                  </Breadcrumbs>\n                  <Divider />\n\n                  <Typography variant=\"h3\">H3 Heading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 24px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular & Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 32px</Typography>\n                  </Breadcrumbs>\n                  <Divider />\n\n                  <Typography variant=\"h4\">H4 Heading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 20px</Typography>\n                    <Typography variant=\"h6\">Weight: Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 28px</Typography>\n                  </Breadcrumbs>\n                  <Divider />\n\n                  <Typography variant=\"h5\">H5 Heading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 16px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular & Medium & Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 24px</Typography>\n                  </Breadcrumbs>\n                  <Divider />\n\n                  <Typography variant=\"h6\">H6 Heading / Subheading</Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 14px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 22px</Typography>\n                  </Breadcrumbs>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Body 1\" codeString={body1TypographyCodeString}>\n                <>\n                  <Typography variant=\"body1\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 14px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 22px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Body 2\" codeString={body2TypographyCodeString}>\n                <>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Subtitle 1\" codeString={subtitle1TypographyCodeString}>\n                <>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 14px</Typography>\n                    <Typography variant=\"h6\">Weight: Medium</Typography>\n                    <Typography variant=\"h6\">Line Height: 22px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Subtitle 2\" codeString={subtitle2TypographyCodeString}>\n                <>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Medium</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Caption\" codeString={captionTypographyCodeString}>\n                <Stack spacing={1}>\n                  <Typography variant=\"caption\">\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </Stack>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Alignment\" codeString={alignmentTypographyCodeString}>\n                <>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  </Typography>\n                  <Typography variant=\"body2\" textAlign=\"center\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  </Typography>\n                  <Typography variant=\"body2\" textAlign=\"right\">\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua. sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n                  </Typography>\n                </>\n              </MainCard>\n              <MainCard title=\"Gutter Bottom\" codeString={gutterTypographyCodeString}>\n                <>\n                  <Typography variant=\"body1\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Overline\" codeString={overlineTypographyCodeString}>\n                <Stack spacing={1.5}>\n                  <Typography variant=\"overline\">\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Link\" codeString={lineTypographyCodeString}>\n                <Stack spacing={1.5}>\n                  <Link href=\"#\">#able-pro</Link>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 12px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 20px</Typography>\n                  </Breadcrumbs>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Colors\" codeString={colorTypographyCodeString}>\n                <>\n                  <Typography variant=\"h6\" color=\"text.primary\" gutterBottom>\n                    This is textPrimary text color.\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n                    This is textSecondary text color.\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                    This is primary text color.\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"secondary\" gutterBottom>\n                    This is secondary text color.\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"success\" gutterBottom>\n                    This is success text color.\n                  </Typography>\n                  <Typography variant=\"h6\" sx={{ color: 'warning.main' }} gutterBottom>\n                    This is warning text color.\n                  </Typography>\n                  <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                    This is error text color.\n                  </Typography>\n                </>\n              </MainCard>\n              <MainCard title=\"Paragraph\" codeString={parapraphyTypographyCodeString}>\n                <>\n                  <Typography variant=\"body1\" gutterBottom>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore\n                    magna aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 14px</Typography>\n                    <Typography variant=\"h6\">Weight: Regular</Typography>\n                    <Typography variant=\"h6\">Line Height: 22px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n              <MainCard title=\"Font Style\" codeString={fontTypographyCodeString}>\n                <>\n                  <Typography variant=\"body1\" gutterBottom sx={{ fontStyle: 'italic' }}>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Typography variant=\"subtitle1\" gutterBottom sx={{ fontStyle: 'italic' }}>\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n                    aliqua.\n                  </Typography>\n                  <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Typography variant=\"h6\">Size: 14px</Typography>\n                    <Typography variant=\"h6\">Weight: Italic Regular & Italic Bold</Typography>\n                    <Typography variant=\"h6\">Line Height: 22px</Typography>\n                  </Breadcrumbs>\n                </>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":19654},"src/pages/extra-pages/sample-page.jsx":{"content":"// material-ui\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nexport default function SamplePage() {\n  return (\n    <MainCard title=\"Sample Card\">\n      <Typography variant=\"body1\">\n        Do you Know? Able is used by more than 2.4K+ Customers worldwide. This new v9 version is the major release of Able Pro Dashboard\n        Template with having brand new modern User Interface.\n      </Typography>\n    </MainCard>\n  );\n}\n","size_bytes":578},"src/pages/extra-pages/price/price2.jsx":{"content":"import { useState, Fragment } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Link from '@mui/material/Link';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Switch from '@mui/material/Switch';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// assets\nimport { InfoCircle, TickSquare } from 'iconsax-react';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// plan list\nconst plans = [\n  {\n    active: false,\n    title: 'Basic',\n    description: '03 Services',\n    price: 69,\n    permission: [0, 1, 2]\n  },\n  {\n    active: true,\n    title: 'Standard',\n    description: '05 Services',\n    price: 129,\n    permission: [0, 1, 2, 3, 4]\n  },\n  {\n    active: false,\n    title: 'Premium',\n    description: '08 Services',\n    price: 599,\n    permission: [0, 1, 2, 3, 4, 5, 6, 7]\n  }\n];\n\nconst planList = [\n  'One End Product', // 0\n  'No attribution required', // 1\n  'TypeScript', // 2\n  'Figma Design Resources', // 3\n  'Create Multiple Products', // 4\n  'Create a SaaS Project', // 5\n  'Resale Product', // 6\n  'Separate sale of our UI Elements?' // 7\n];\n\n// ==============================|| PRICING ||============================== //\n\nexport default function Pricing() {\n  const theme = useTheme();\n  const [timePeriod, setTimePeriod] = useState(true);\n\n  const priceListDisable = {\n    opacity: 0.4,\n    textDecoration: 'line-through'\n  };\n\n  const priceSelectedPlan = {\n    padding: 3,\n    borderRadius: 1,\n    border: '1px solid',\n    borderColor: theme.palette.divider,\n    bgcolor: theme.palette.primary.lighter\n  };\n\n  const priceUnselectedPlan = {\n    padding: 3,\n    borderRadius: 1,\n    border: '1px solid',\n    borderColor: theme.palette.divider,\n    bgcolor: theme.palette.background.paper\n  };\n\n  const [price, setPrice] = useState('Standard');\n  const handlePriceMethod = (value) => {\n    setPrice(value);\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Alert\n          color=\"warning\"\n          variant=\"border\"\n          icon={<InfoCircle variant=\"Bold\" />}\n          sx={{ '&.MuiAlert-colorWarning': { backgroundColor: alpha(theme.palette.warning.lighter, 0.15) } }}\n        >\n          <AlertTitle sx={{ fontWeight: 500, color: 'warning.dark' }}>Note</AlertTitle>\n          <Typography variant=\"h6\">\n            The pricing provided is for demonstration purposes only. For actual product pricing, please refer to the official\n            <Link\n              color=\"warning.dark\"\n              sx={{ textDecoration: 'none', ml: 0.5 }}\n              variant=\"subtitle1\"\n              target=\"_blank\"\n              href=\"https://themeforest.net/item/able-pro-react-mui-admin-dashboard-template/50427053?s_rank=4\"\n            >\n              pricing page\n            </Link>\n          </Typography>\n        </Alert>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack spacing={2} direction={{ xs: 'column', md: 'row' }} justifyContent=\"space-between\">\n          <Stack spacing={0}>\n            <Typography variant=\"h5\">Quality is never an accident. It is always the result of interlligent effort</Typography>\n            <Typography color=\"text.secondary\">It makes no difference what the price is, it all makes senses to us.</Typography>\n          </Stack>\n          <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n            <Typography variant=\"subtitle1\" color={timePeriod ? 'text.secondary' : 'text.primary'}>\n              Billed Yearly\n            </Typography>\n            <Switch checked={timePeriod} onChange={() => setTimePeriod(!timePeriod)} inputProps={{ 'aria-label': 'container' }} />\n            <Typography variant=\"subtitle1\" color={timePeriod ? 'text.primary' : 'text.secondary'}>\n              Billed Monthly\n            </Typography>\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6} lg={7}>\n            <MainCard>\n              {plans.map((plan, index) => (\n                <Box key={index} sx={{ display: price === plan.title ? 'block' : 'none' }}>\n                  <List\n                    sx={{\n                      m: 0,\n                      p: 0,\n                      '&> li': {\n                        px: 0,\n                        py: 0.625\n                      }\n                    }}\n                    component=\"ul\"\n                  >\n                    {planList.map((list, i) => (\n                      <Fragment key={i}>\n                        <ListItem sx={!plan.permission.includes(i) ? priceListDisable : {}} divider>\n                          <ListItemIcon>\n                            <TickSquare\n                              size=\"16\"\n                              color={plan.permission.includes(i) ? theme.palette.success.main : theme.palette.secondary.main}\n                            />\n                          </ListItemIcon>\n                          <ListItemText primary={list} />\n                        </ListItem>\n                      </Fragment>\n                    ))}\n                  </List>\n                </Box>\n              ))}\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6} lg={5}>\n            <MainCard>\n              <RadioGroup\n                aria-label=\"delivery-options\"\n                value={price}\n                onChange={(e) => handlePriceMethod(e.target.value)}\n                name=\"Price-options\"\n              >\n                <Stack spacing={2}>\n                  {plans.map((plan, index) => (\n                    <Box key={index} sx={price === plan.title ? priceSelectedPlan : priceUnselectedPlan}>\n                      <FormControlLabel\n                        value={plan.title}\n                        control={<Radio />}\n                        label={\n                          <Stack spacing={0.5} direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ width: '100%' }}>\n                            <Stack spacing={0}>\n                              <Stack spacing={1} direction=\"row\">\n                                <Typography variant=\"h5\">{plan.title}</Typography>\n                                {plan.active && <Chip label=\"Popular\" size=\"small\" color=\"success\" />}\n                              </Stack>\n                              <Typography>{plan.description}</Typography>\n                            </Stack>\n                            <Stack spacing={0} alignItems=\"flex-end\" direction={{ sm: 'row', xs: 'column' }}>\n                              {timePeriod && <Typography variant=\"h4\">${plan.price}</Typography>}\n                              {!timePeriod && <Typography variant=\"h4\">${plan.price * 12 - 99}</Typography>}\n                              <Typography variant=\"h6\" color=\"text.secondary\">\n                                /Lifetime\n                              </Typography>\n                            </Stack>\n                          </Stack>\n                        }\n                        sx={{\n                          width: '100%',\n                          alignItems: 'flex-start',\n                          '& .MuiSvgIcon-root': { fontSize: 32 },\n                          '& .MuiFormControlLabel-label': { width: '100%' },\n                          '& .MuiRadio-root': { p: 0, pl: 1, pr: 1, pt: 0.5 }\n                        }}\n                      />\n                    </Box>\n                  ))}\n                </Stack>\n              </RadioGroup>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":8128},"src/menu-items/widget.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { Story, Fatrows, PresentionChart } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  widgets: Story,\n  statistics: Story,\n  data: Fatrows,\n  chart: PresentionChart\n};\n\n// ==============================|| MENU ITEMS - WIDGETS ||============================== //\n\nconst widget = {\n  id: 'group-widget',\n  title: <FormattedMessage id=\"widgets\" />,\n  icon: icons.widgets,\n  type: 'group',\n  children: [\n    {\n      id: 'statistics',\n      title: <FormattedMessage id=\"statistics\" />,\n      type: 'item',\n      url: '/widget/statistics',\n      icon: icons.statistics\n    },\n    {\n      id: 'data',\n      title: <FormattedMessage id=\"data\" />,\n      type: 'item',\n      url: '/widget/data',\n      icon: icons.data\n    },\n    {\n      id: 'chart',\n      title: <FormattedMessage id=\"chart\" />,\n      type: 'item',\n      url: '/widget/chart',\n      icon: icons.chart\n    }\n  ]\n};\n\nexport default widget;\n","size_bytes":985},"src/pages/components-overview/stepper.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport HorizontalLinearStepper from 'sections/components-overview/stepper/HorizontalLinearStepper';\nimport HorizontalNonLinearStepper from 'sections/components-overview/stepper/HorizontalNonLinearStepper';\nimport VerticalLinearStepper from 'sections/components-overview/stepper/VerticalLinearStepper';\nimport CarouselEffectStepper from 'sections/components-overview/stepper/CarouselEffectStepper';\n\n// ==============================|| COMPONENTS - STEPPER ||============================== //\n\nexport default function ComponentStepper() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Stepper\"\n        caption=\"Steppers convey progress through numbered steps. It provides a wizard-like workflow.\"\n        directory=\"src/pages/components-overview/stepper\"\n        link=\"https://mui.com/material-ui/react-stepper/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={8}>\n            <Stack spacing={3}>\n              <HorizontalLinearStepper />\n              <HorizontalNonLinearStepper />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={4}>\n            <Stack spacing={3}>\n              <VerticalLinearStepper />\n              <CarouselEffectStepper />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1704},"src/pages/edit-form-grids/services.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport EditServicePage from 'sections/forms/edit-forms/services';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormEditServices() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <EditServicePage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":443},"src/components/third-party/react-table/CellEditable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Slider from '@mui/material/Slider';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport * as yup from 'yup';\nimport { Formik, Form } from 'formik';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\n// assets\nimport { Send } from 'iconsax-react';\n\n// ==============================|| EDITABLE CELL ||============================== //\n\nexport default function CellEditable({ getValue: initialValue, row: { index }, column: { id, columnDef }, table }) {\n  const [value, setValue] = useState(initialValue);\n  const [showSelect, setShowSelect] = useState(false);\n\n  const onChange = (e) => {\n    setValue(e.target?.value);\n  };\n\n  const onBlur = () => {\n    table.options.meta?.updateData(index, id, value);\n  };\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  let element;\n  let userInfoSchema;\n  switch (id) {\n    case 'email':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.string().email('Enter valid email ').required('Email is a required field')\n      });\n      break;\n    case 'age':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup\n          .number()\n          .typeError('Age must be number')\n          .required('Age is required')\n          .min(18, 'You must be at least 18 years')\n          .max(65, 'You must be at most 65 years')\n      });\n      break;\n    case 'visits':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.number().typeError('Visits must be number').required('Required')\n      });\n      break;\n    default:\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Name is Required')\n      });\n      break;\n  }\n\n  switch (columnDef.dataType) {\n    case 'text':\n      element = (\n        <>\n          <Formik\n            initialValues={{\n              userInfo: value\n            }}\n            enableReinitialize\n            validationSchema={userInfoSchema}\n            onSubmit={() => {}}\n          >\n            {({ values, handleChange, handleBlur, errors, touched }) => (\n              <Form>\n                <TextField\n                  fullWidth\n                  value={values.userInfo}\n                  id={`${index}-${id}`}\n                  name=\"userInfo\"\n                  onChange={(e) => {\n                    handleChange(e);\n                    onChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  error={touched.userInfo && Boolean(errors.userInfo)}\n                  helperText={touched.userInfo && errors.userInfo && errors.userInfo}\n                  sx={{\n                    '& .MuiOutlinedInput-input': { py: 0.75, px: 1, minWidth: { xs: 100 } },\n                    '& .MuiOutlinedInput-notchedOutline': { border: 'none' }\n                  }}\n                />\n              </Form>\n            )}\n          </Formik>\n        </>\n      );\n      break;\n    case 'select':\n      element = (\n        <>\n          <Select\n            labelId=\"editable-select-status-label\"\n            sx={{ boxShadow: 'none', '.MuiOutlinedInput-notchedOutline': { border: 0 }, svg: { display: 'none' } }}\n            id=\"editable-select-status\"\n            value={value}\n            onChange={onChange}\n            onBlur={onBlur}\n          >\n            <MenuItem value=\"Complicated\">\n              <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />\n            </MenuItem>\n            <MenuItem value=\"Relationship\">\n              <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />\n            </MenuItem>\n            <MenuItem value=\"Single\">\n              <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />\n            </MenuItem>\n          </Select>\n        </>\n      );\n      break;\n    case 'progress':\n      element = (\n        <>\n          {!showSelect ? (\n            <Box onClick={() => setShowSelect(true)}>\n              <LinearWithLabel value={value} sx={{ minWidth: 75 }} />\n            </Box>\n          ) : (\n            <>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ pl: 1, minWidth: 120 }}>\n                <Slider\n                  value={value}\n                  min={0}\n                  max={100}\n                  step={1}\n                  onBlur={onBlur}\n                  onChange={(event, newValue) => {\n                    setValue(newValue);\n                  }}\n                  valueLabelDisplay=\"auto\"\n                  aria-labelledby=\"non-linear-slider\"\n                />\n                <Tooltip title={'Submit'}>\n                  <IconButton color=\"success\" onClick={() => setShowSelect(false)}>\n                    <Send variant=\"Outline\" />\n                  </IconButton>\n                </Tooltip>\n              </Stack>\n            </>\n          )}\n        </>\n      );\n      break;\n    default:\n      element = <span></span>;\n      break;\n  }\n\n  return element;\n}\n\nCellEditable.propTypes = { getValue: PropTypes.func, row: PropTypes.object, column: PropTypes.object, table: PropTypes.object };\n","size_bytes":5530},"src/sections/apps/e-commerce/checkout/PaymentSelect.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Typography from '@mui/material/Typography';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| CHECKOUT - PAYMENT SELECT ||============================== //\n\nexport default function PaymentSelect({ item }) {\n  const theme = useTheme();\n\n  return (\n    <MainCard content={false} sx={{ '&:hover': { boxShadow: theme.customShadows.primary } }}>\n      <Box sx={{ p: 2, py: 1, pr: 0 }}>\n        <FormControlLabel\n          value={item.value}\n          control={<Radio />}\n          label={\n            <Stack spacing={0.5} sx={{ width: '100%' }}>\n              <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={2.5} sx={{ width: '100%' }}>\n                <Typography variant=\"subtitle1\">{item.title}</Typography>\n                <Box\n                  sx={{\n                    backgroundImage: `url(${item.image})`,\n                    backgroundSize: 'contain',\n                    backgroundPosition: 'right',\n                    borderColor: 'error.light',\n                    ...item.size\n                  }}\n                />\n              </Stack>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {item.caption}\n              </Typography>\n            </Stack>\n          }\n          sx={{\n            width: '100%',\n            alignItems: 'flex-start',\n            '& .MuiSvgIcon-root': { fontSize: 32 },\n            '& .MuiFormControlLabel-label': { width: '100%' },\n            '& .MuiRadio-root': { p: 0, pl: 1, pr: 1, pt: 0.5 }\n          }}\n        />\n      </Box>\n    </MainCard>\n  );\n}\n\nPaymentSelect.propTypes = { item: PropTypes.any };\n","size_bytes":1957},"src/utils/incrementer.js":{"content":"// ==============================|| CUSTOM FUNCTION - ITEM INCREMENTER ||============================== //\n\nexport default function incrementer(string) {\n  // args to string\n  const str = string.toString();\n\n  // extract string's number\n  let number = str.match(/\\d+/) === null ? 0 : str.match(/\\d+/)[0];\n\n  // store number's length\n  const numberLength = number.length;\n\n  // increment number by 1\n  number = (parseInt(number) + 1).toString();\n\n  // if there were leading 0s, add them again\n  while (number.length < numberLength) {\n    number = '0' + number;\n  }\n\n  return str.replace(/[0-9]/g, '').concat(number);\n}\n","size_bytes":618},"src/sections/components-overview/tabs/VerticalTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`vertical-tabpanel-${index}`} aria-labelledby={`vertical-tab-${index}`} {...other}>\n      {value === index && <Box sx={{ p: 3, height: { xs: '100%', sm: 'auto' }, overflowX: { xs: 'scroll', sm: 'auto' } }}>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`\n  };\n}\n\n// ==============================|| TABS - VERTICAL ||============================== //\n\nexport default function VerticalTabs() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const verticalTabCodeString = `// VerticalTabs.tsx\n<Tabs\n  orientation=\"vertical\"\n  variant=\"scrollable\"\n  value={value}\n  onChange={handleChange}\n  aria-label=\"Vertical tabs example\"\n  sx={{ borderRight: 1, borderColor: 'divider' }}\n>\n  <Tab label=\"Tab 1\" {...a11yProps(0)} />\n  <Tab label=\"Tab 2\" {...a11yProps(1)} />\n  <Tab label=\"Tab 3\" {...a11yProps(2)} />\n  <Tab label=\"Tab 4\" {...a11yProps(3)} />\n  <Tab label=\"Tab 5\" {...a11yProps(4)} />\n  <Tab label=\"Tab 6\" {...a11yProps(5)} />\n  <Tab label=\"Tab 7\" {...a11yProps(6)} />\n</Tabs>\n<TabPanel value={value} index={0}>\n  <Typography variant=\"h6\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In est quam, mattis non dui sed, pretium dignissim elit. Nam auctor\n    augue et magna rutrum dictum. Nulla facilisi. Sed consectetur libero vitae sem ultrices fermentum. Donec ac tortor ullamcorper,\n    posuere est congue, pharetra velit. Nullam vehicula elit elementum pellentesque elementum. Duis consectetur sapien purus, et\n    scelerisque erat fringilla quis.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={1}>\n  <Typography variant=\"h6\">\n    Vestibulum felis felis, venenatis non eleifend nec, eleifend gravida enim. In tristique nunc ut dui sodales dapibus. Aenean\n    consequat eros sed erat sagittis lobortis. Proin turpis leo, pulvinar ac eros feugiat, feugiat varius odio. Nullam quam massa,\n    tempus ac egestas ac, dapibus sed nisl. Vivamus vehicula cursus magna vitae pretium. Nunc dictum elit at felis malesuada, id\n    sollicitudin leo elementum.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={2}>\n  <Typography variant=\"h6\">\n    Curabitur vitae condimentum magna. In posuere rhoncus dolor sit amet mattis. Suspendisse ligula enim, varius at consequat\n    aliquam, pharetra ac velit. Morbi a augue vel leo suscipit convallis. Proin semper pretium dolor, ac pharetra diam gravida non.\n    Etiam velit orci, elementum et viverra ornare, vestibulum accumsan dui. Suspendisse sagittis tristique metus non interdum.\n    Nullam mollis sagittis dolor.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={3}>\n  <Typography variant=\"h6\">\n    Quisque posuere luctus turpis vel aliquam. Maecenas consequat tempus nisl, ac ultrices lacus laoreet dignissim. Donec pretium\n    quis turpis sed rutrum. Etiam fermentum ipsum vel urna scelerisque vulputate. Phasellus nulla dui, bibendum id ligula et,\n    eleifend efficitur orci. Integer vel purus nec lectus porta interdum. Aliquam finibus lectus id odio dictum, in facilisis quam\n    hendrerit. Ut vitae tellus enim.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={4}>\n  <Typography variant=\"h6\">\n    Vestibulum ullamcorper sem ac velit dictum ultricies. Vestibulum orci dolor, laoreet vehicula eleifend et, pharetra eget nulla.\n    Vivamus arcu nisl, tincidunt et turpis semper, ultrices porta neque. Nam vestibulum, sapien sit amet malesuada dignissim, justo\n    nisi dictum nisl, non maximus quam risus vitae nisi. Fusce vitae nisl ultrices, hendrerit libero non, pellentesque ipsum.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={5}>\n  <Typography variant=\"h6\">\n    Vestibulum felis felis, venenatis non eleifend nec, eleifend gravida enim. In tristique nunc ut dui sodales dapibus. Aenean\n    consequat eros sed erat sagittis lobortis. Proin turpis leo, pulvinar ac eros feugiat, feugiat varius odio. Nullam quam massa,\n    tempus ac egestas ac, dapibus sed nisl. Vivamus vehicula cursus magna vitae pretium. Nunc dictum elit at felis malesuada, id\n    sollicitudin leo elementum.\n  </Typography>\n</TabPanel>\n<TabPanel value={value} index={6}>\n  <Typography variant=\"h6\">\n    Vestibulum ullamcorper sem ac velit dictum ultricies. Vestibulum orci dolor, laoreet vehicula eleifend et, pharetra eget nulla.\n    Vivamus arcu nisl, tincidunt et turpis semper, ultrices porta neque. Nam vestibulum, sapien sit amet malesuada dignissim, justo\n    nisi dictum nisl, non maximus quam risus vitae nisi. Fusce vitae nisl ultrices, hendrerit libero non, pellentesque ipsum.\n  </Typography>\n</TabPanel>`;\n\n  return (\n    <MainCard codeString={verticalTabCodeString}>\n      <Box sx={{ flexGrow: 1, bgcolor: 'background.paper', display: 'flex', height: 224 }}>\n        <Tabs\n          orientation=\"vertical\"\n          variant=\"scrollable\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"Vertical tabs example\"\n          sx={{ borderRight: 1, borderColor: 'divider' }}\n        >\n          <Tab label=\"Tab 1\" {...a11yProps(0)} />\n          <Tab label=\"Tab 2\" {...a11yProps(1)} />\n          <Tab label=\"Tab 3\" {...a11yProps(2)} />\n          <Tab label=\"Tab 4\" {...a11yProps(3)} />\n          <Tab label=\"Tab 5\" {...a11yProps(4)} />\n          <Tab label=\"Tab 6\" {...a11yProps(5)} />\n          <Tab label=\"Tab 7\" {...a11yProps(6)} />\n        </Tabs>\n        <TabPanel value={value} index={0}>\n          <Typography variant=\"h6\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. In est quam, mattis non dui sed, pretium dignissim elit. Nam auctor\n            augue et magna rutrum dictum. Nulla facilisi. Sed consectetur libero vitae sem ultrices fermentum. Donec ac tortor ullamcorper,\n            posuere est congue, pharetra velit. Nullam vehicula elit elementum pellentesque elementum. Duis consectetur sapien purus, et\n            scelerisque erat fringilla quis.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <Typography variant=\"h6\">\n            Vestibulum felis felis, venenatis non eleifend nec, eleifend gravida enim. In tristique nunc ut dui sodales dapibus. Aenean\n            consequat eros sed erat sagittis lobortis. Proin turpis leo, pulvinar ac eros feugiat, feugiat varius odio. Nullam quam massa,\n            tempus ac egestas ac, dapibus sed nisl. Vivamus vehicula cursus magna vitae pretium. Nunc dictum elit at felis malesuada, id\n            sollicitudin leo elementum.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <Typography variant=\"h6\">\n            Curabitur vitae condimentum magna. In posuere rhoncus dolor sit amet mattis. Suspendisse ligula enim, varius at consequat\n            aliquam, pharetra ac velit. Morbi a augue vel leo suscipit convallis. Proin semper pretium dolor, ac pharetra diam gravida non.\n            Etiam velit orci, elementum et viverra ornare, vestibulum accumsan dui. Suspendisse sagittis tristique metus non interdum.\n            Nullam mollis sagittis dolor.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={3}>\n          <Typography variant=\"h6\">\n            Quisque posuere luctus turpis vel aliquam. Maecenas consequat tempus nisl, ac ultrices lacus laoreet dignissim. Donec pretium\n            quis turpis sed rutrum. Etiam fermentum ipsum vel urna scelerisque vulputate. Phasellus nulla dui, bibendum id ligula et,\n            eleifend efficitur orci. Integer vel purus nec lectus porta interdum. Aliquam finibus lectus id odio dictum, in facilisis quam\n            hendrerit. Ut vitae tellus enim.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={4}>\n          <Typography variant=\"h6\">\n            Vestibulum ullamcorper sem ac velit dictum ultricies. Vestibulum orci dolor, laoreet vehicula eleifend et, pharetra eget nulla.\n            Vivamus arcu nisl, tincidunt et turpis semper, ultrices porta neque. Nam vestibulum, sapien sit amet malesuada dignissim, justo\n            nisi dictum nisl, non maximus quam risus vitae nisi. Fusce vitae nisl ultrices, hendrerit libero non, pellentesque ipsum.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={5}>\n          <Typography variant=\"h6\">\n            Vestibulum felis felis, venenatis non eleifend nec, eleifend gravida enim. In tristique nunc ut dui sodales dapibus. Aenean\n            consequat eros sed erat sagittis lobortis. Proin turpis leo, pulvinar ac eros feugiat, feugiat varius odio. Nullam quam massa,\n            tempus ac egestas ac, dapibus sed nisl. Vivamus vehicula cursus magna vitae pretium. Nunc dictum elit at felis malesuada, id\n            sollicitudin leo elementum.\n          </Typography>\n        </TabPanel>\n        <TabPanel value={value} index={6}>\n          <Typography variant=\"h6\">\n            Vestibulum ullamcorper sem ac velit dictum ultricies. Vestibulum orci dolor, laoreet vehicula eleifend et, pharetra eget nulla.\n            Vivamus arcu nisl, tincidunt et turpis semper, ultrices porta neque. Nam vestibulum, sapien sit amet malesuada dignissim, justo\n            nisi dictum nisl, non maximus quam risus vitae nisi. Fusce vitae nisl ultrices, hendrerit libero non, pellentesque ipsum.\n          </Typography>\n        </TabPanel>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":10099},"src/components/cards/skeleton/UserCard.jsx":{"content":"// material-ui\nimport Avatar from '@mui/material/Avatar';\nimport CardContent from '@mui/material/CardContent';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Skeleton from '@mui/material/Skeleton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ProfileAdd } from 'iconsax-react';\n\n// ===========================|| SKELETON - USER EMPTY CARD ||=========================== //\n\nexport default function UserCard() {\n  return (\n    <MainCard\n      border={false}\n      content={false}\n      sx={{ boxShadow: `rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px`, borderRadius: 2 }}\n    >\n      <CardContent sx={{ p: 2 }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Stack flexDirection=\"row\" alignItems=\"center\">\n              <Avatar>\n                <ProfileAdd style={{ visibility: 'inherit' }} />\n              </Avatar>\n              <Stack sx={{ width: '100%', pl: 2.5 }}>\n                <Skeleton animation={false} height={20} width=\"80%\" />\n                <Skeleton animation={false} height={20} width=\"40%\" />\n              </Stack>\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Skeleton animation={false} height={20} width={45} />\n            <Skeleton animation={false} height={20} />\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n              <Skeleton animation={false} height={20} width={90} />\n              <Skeleton animation={false} height={20} width={38} />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Grid container spacing={1}>\n                <Grid item>\n                  <Skeleton animation={false} height={20} width={40} />\n                </Grid>\n                <Grid item>\n                  <Skeleton animation={false} height={17} width={20} />\n                </Grid>\n              </Grid>\n              <Skeleton animation={false} height={32} width={47} />\n            </Stack>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":2210},"src/assets/images/auth/AuthBackground.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n//project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| AUTH BLUR BACK SVG ||============================== //\n\nconst AuthBackground = () => {\n  const theme = useTheme();\n\n  return (\n    <Box\n      sx={{\n        position: 'absolute',\n        filter: 'blur(140px)',\n        zIndex: -1,\n        bottom: 0,\n        left: 0,\n        top: 0,\n        right: 0,\n        overflow: 'hidden',\n        '&:before': {\n          content: `\" \"`,\n          width: 300,\n          height: 300,\n          borderRadius: '50%',\n          bgcolor: 'warning.lighter',\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          opacity: theme.palette.mode === ThemeMode.DARK ? 0.6 : 1\n        }\n      }}\n    >\n      <Box\n        sx={{\n          width: 250,\n          height: 250,\n          borderRadius: '50%',\n          bgcolor: 'success.lighter',\n          ml: 20,\n          position: 'absolute',\n          bottom: 180,\n          opacity: theme.palette.mode === ThemeMode.DARK ? 0.8 : 1\n        }}\n      />\n      <Box\n        sx={{\n          width: 200,\n          height: 200,\n          borderRadius: '50%',\n          bgcolor: 'error.light',\n          position: 'absolute',\n          bottom: 0,\n          left: -50,\n          opacity: theme.palette.mode === ThemeMode.DARK ? 0.8 : 1\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default AuthBackground;\n","size_bytes":1490},"src/pages/apps/e-commerce/product-details.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState, useMemo } from 'react';\nimport { useParams, useLoaderData, Link } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Chip from '@mui/material/Chip';\nimport Tabs from '@mui/material/Tabs';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport FloatingCart from 'components/cards/e-commerce/FloatingCart';\n\nimport ProductFeatures from 'sections/apps/e-commerce/product-details/ProductFeatures';\nimport ProductImages from 'sections/apps/e-commerce/product-details/ProductImages';\nimport ProductInfo from 'sections/apps/e-commerce/product-details/ProductInfo';\nimport ProductReview from 'sections/apps/e-commerce/product-details/ProductReview';\nimport ProductSpecifications from 'sections/apps/e-commerce/product-details/ProductSpecifications';\nimport RelatedProducts from 'sections/apps/e-commerce/product-details/RelatedProducts';\n\nimport { resetCart, useGetCart } from 'api/cart';\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`product-details-tabpanel-${index}`}\n      aria-labelledby={`product-details-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `product-details-tab-${index}`,\n    'aria-controls': `product-details-tabpanel-${index}`\n  };\n}\n\n// ==============================|| ECOMMERCE - PRODUCT DETAILS ||============================== //\n\nexport default function ProductDetails() {\n  const { id } = useParams();\n\n  const product = useLoaderData();\n  const { cart } = useGetCart();\n\n  // product description tabs\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    // clear cart if complete order\n    if (cart && cart.step > 2) {\n      resetCart();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  const productImages = useMemo(() => <ProductImages product={product} />, [product]);\n  const relatedProducts = useMemo(() => <RelatedProducts id={id} />, [id]);\n\n  return (\n    <>\n      {product && product.id === Number(id) && (\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={8} md={5} lg={4}>\n                {productImages}\n              </Grid>\n\n              <Grid item xs={12} md={7} lg={8}>\n                <MainCard border={false} sx={{ height: '100%', bgcolor: 'secondary.lighter' }}>\n                  <ProductInfo product={product} />\n                </MainCard>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} md={7} xl={8}>\n            <MainCard>\n              <Stack spacing={3}>\n                <Stack>\n                  <Tabs\n                    value={value}\n                    indicatorColor=\"primary\"\n                    onChange={handleChange}\n                    aria-label=\"product description tabs example\"\n                    variant=\"scrollable\"\n                  >\n                    <Tab component={Link} to=\"#\" label=\"Features\" {...a11yProps(0)} />\n                    <Tab component={Link} to=\"#\" label=\"Specifications\" {...a11yProps(1)} />\n                    <Tab component={Link} to=\"#\" label=\"Overview\" {...a11yProps(2)} />\n                    <Tab\n                      component={Link}\n                      to=\"#\"\n                      label={\n                        <Stack direction=\"row\" alignItems=\"center\">\n                          Reviews{' '}\n                          <Chip\n                            label={String(product.offerPrice?.toFixed(0))}\n                            size=\"small\"\n                            sx={{\n                              ml: 0.5,\n                              color: value === 3 ? 'primary.main' : 'common.white',\n                              bgcolor: value === 3 ? 'primary.lighter' : 'secondary.400',\n                              borderRadius: '10px'\n                            }}\n                          />\n                        </Stack>\n                      }\n                      {...a11yProps(3)}\n                    />\n                  </Tabs>\n                  <Divider />\n                </Stack>\n                <TabPanel value={value} index={0}>\n                  <ProductFeatures />\n                </TabPanel>\n                <TabPanel value={value} index={1}>\n                  <ProductSpecifications />\n                </TabPanel>\n                <TabPanel value={value} index={2}>\n                  <Stack spacing={2.5}>\n                    <Typography color=\"text.secondary\">\n                      Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard\n                      dummy text ever since the 1500s,{' '}\n                      <Typography component=\"span\" variant=\"subtitle1\">\n                        {' '}\n                        &ldquo;When an unknown printer took a galley of type and scrambled it to make a type specimen book.&rdquo;\n                      </Typography>{' '}\n                      It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially\n                      unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and\n                      more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently\n                      with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n                    </Typography>\n                  </Stack>\n                </TabPanel>\n                <TabPanel value={value} index={3}>\n                  <ProductReview product={product} />\n                </TabPanel>\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={5} xl={4} sx={{ position: 'relative' }}>\n            <MainCard\n              title=\"Related Products\"\n              sx={{\n                height: 'calc(100% - 16px)',\n                position: { xs: 'relative', md: 'absolute' },\n                top: '16px',\n                left: { xs: 0, md: 16 },\n                right: 0\n              }}\n              content={false}\n            >\n              {relatedProducts}\n            </MainCard>\n          </Grid>\n        </Grid>\n      )}\n      <FloatingCart />\n    </>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.any, value: PropTypes.any, index: PropTypes.any, other: PropTypes.any };\n","size_bytes":7152},"src/pages/components-overview/treeview.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicTreeView from 'sections/components-overview/tree-view/BasicTreeView';\nimport MultiSelectTreeView from 'sections/components-overview/tree-view/MultiSelectTreeView';\nimport ControlledTreeView from 'sections/components-overview/tree-view/ControlledTreeView';\nimport RichObjectTreeView from 'sections/components-overview/tree-view/RichObjectTreeView';\nimport DisabledTreeView from 'sections/components-overview/tree-view/DisabledTreeView';\nimport CustomizedTreeView from 'sections/components-overview/tree-view/CustomizedTreeView';\nimport GmailTreeView from 'sections/components-overview/tree-view/GmailTreeView';\n\n// ==============================|| COMPONENTS - TREE VIEW ||============================== //\n\nexport default function ComponentTreeView() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Tree View\"\n        caption=\"A tree view widget presents a hierarchical list.\"\n        directory=\"src/pages/components-overview/treeview\"\n        link=\"https://mui.com/material-ui/react-tree-view/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <BasicTreeView />\n              <MultiSelectTreeView />\n              <ControlledTreeView />\n              <RichObjectTreeView />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <DisabledTreeView />\n              <CustomizedTreeView />\n              <GmailTreeView />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1981},"src/components/cards/e-commerce/FloatingCart.jsx":{"content":"import { sum } from 'lodash';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Fab from '@mui/material/Fab';\nimport Badge from '@mui/material/Badge';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\nimport { useGetCart } from 'api/cart';\n\n// assets\nimport { ShoppingCart } from 'iconsax-react';\n\n// ==============================|| CART ITEMS - FLOATING BUTTON ||============================== //\n\nexport default function FloatingCart() {\n  const theme = useTheme();\n\n  const { cart } = useGetCart();\n\n  let totalQuantity = 0;\n  if (cart && cart.products && cart.products.length > 0) {\n    totalQuantity = sum(cart.products.map((item) => item.quantity));\n  }\n\n  return (\n    <Fab\n      component={Link}\n      to=\"/apps/e-commerce/checkout\"\n      size=\"large\"\n      variant=\"circular\"\n      sx={{\n        borderRadius: 0,\n        borderTopLeftRadius: '50%',\n        borderBottomLeftRadius: '50%',\n        borderTopRightRadius: '4px',\n        borderBottomRightRadius: '4px',\n        top: '65%',\n        position: 'fixed',\n        right: 0,\n        zIndex: theme.zIndex.speedDial,\n        boxShadow: theme.customShadows.z1,\n        bgcolor: 'background.paper',\n        border: '4px solid ',\n        borderColor: 'background.paper',\n        borderRight: 'none',\n        '&:hover': {\n          bgcolor: 'warning.lighter'\n        }\n      }}\n    >\n      <IconButton\n        aria-label=\"settings toggler\"\n        size=\"large\"\n        sx={{ p: 0, '& :hover': { bgcolor: 'red' }, '& svg': { width: 26, height: 26 }, color: 'warning.dark' }}\n        color=\"warning\"\n      >\n        <Badge showZero badgeContent={totalQuantity} color=\"error\">\n          <ShoppingCart variant=\"Bulk\" />\n        </Badge>\n      </IconButton>\n    </Fab>\n  );\n}\n","size_bytes":1821},"src/sections/widget/data/NewCustomers.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport Dot from 'components/@extended/Dot';\n\n// assets\nimport { Clock } from 'iconsax-react';\n\nimport Avatar1 from 'assets/images/users/avatar-1.png';\nimport Avatar2 from 'assets/images/users/avatar-2.png';\nimport Avatar3 from 'assets/images/users/avatar-3.png';\nimport Avatar4 from 'assets/images/users/avatar-4.png';\nimport Avatar5 from 'assets/images/users/avatar-5.png';\n\n// ===========================|| DATA WIDGET - NEW CUSTOMERS ||=========================== //\n\nexport default function NewCustomers() {\n  return (\n    <MainCard title=\"New Customers\" content={false}>\n      <SimpleBar sx={{ height: 432 }}>\n        <CardContent>\n          <Grid container spacing={3} alignItems=\"center\">\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar1} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Alex Thompson</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex' }}>\n                      <Dot color=\"success\" size={10} />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar2} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">John Doue</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">stay hungry stay foolish!</Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex' }}>\n                      <Dot color=\"success\" size={10} />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar3} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Alex Thompson</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">30 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar4} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">John Doue</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">stay hungry stay foolish!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">10 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar5} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Shirley Hoe</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">30 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar1} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Alex Thompson</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex' }}>\n                      <Dot color=\"success\" size={10} />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar2} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">John Doue</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">stay hungry stay foolish!</Typography>\n                    </Grid>\n                    <Grid item sx={{ display: 'flex' }}>\n                      <Dot color=\"success\" size={10} />\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar3} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Alex Thompson</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">10 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar4} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">John Doue</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">stay hungry stay foolish!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">10 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Avatar alt=\"coverimage\" src={Avatar5} />\n                </Grid>\n                <Grid item xs zeroMinWidth>\n                  <Typography variant=\"subtitle1\">Shirley Hoe</Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs zeroMinWidth>\n                      <Typography color=\"text.secondary\">Cheers!</Typography>\n                    </Grid>\n                    <Grid item>\n                      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                        <Clock size={14} />\n                        <Typography color=\"text.secondary\">30 min ago</Typography>\n                      </Stack>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </SimpleBar>\n    </MainCard>\n  );\n}\n","size_bytes":9545},"src/pages/forms/layouts/multi-column.jsx":{"content":"// material-ui\nimport Checkbox from '@mui/material/Checkbox';\nimport Grid from '@mui/material/Grid';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Divider from '@mui/material/Divider';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Link2, Lock } from 'iconsax-react';\n\n// ==============================|| LAYOUTS -  COLUMNS ||============================== //\n\nexport default function ColumnsLayouts() {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard title=\"2 Columns Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} lg={6}>\n              <Stack spacing={1}>\n                <InputLabel>Name</InputLabel>\n                <TextField fullWidth placeholder=\"Enter full name\" />\n              </Stack>\n              <FormHelperText>Please enter your full name</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Stack spacing={1}>\n                <InputLabel>Email</InputLabel>\n                <TextField fullWidth placeholder=\"Enter email\" />\n              </Stack>\n              <FormHelperText>Please enter your Email</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Stack spacing={1}>\n                <InputLabel>Password</InputLabel>\n                <TextField\n                  type=\"password\"\n                  fullWidth\n                  placeholder=\"Enter Password\"\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <Lock />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              </Stack>\n              <FormHelperText>Please enter Password</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Stack spacing={1}>\n                <InputLabel>Profile URL</InputLabel>\n                <TextField\n                  fullWidth\n                  placeholder=\"Please enter your Profile URL\"\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <Link2 />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              </Stack>\n              <FormHelperText>Please enter your Profile URL</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n                language:\n              </Typography>\n              <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n              <FormControlLabel control={<Checkbox />} label=\"French\" />\n              <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"2 Columns Horizontal Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} lg={6}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} lg={3}>\n                  <InputLabel>Name:</InputLabel>\n                </Grid>\n                <Grid item xs={12} lg={9}>\n                  <TextField fullWidth placeholder=\"Enter full name\" />\n                  <FormHelperText>Please enter your full name</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} lg={3}>\n                  <InputLabel>Email:</InputLabel>\n                </Grid>\n                <Grid item xs={12} lg={9}>\n                  <TextField fullWidth placeholder=\"Enter email\" />\n                  <FormHelperText>Please enter your Email</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} lg={3}>\n                  <InputLabel>Password:</InputLabel>\n                </Grid>\n                <Grid item xs={12} lg={9}>\n                  <TextField\n                    type=\"password\"\n                    fullWidth\n                    placeholder=\"Enter Password\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <Lock />\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>Please enter Password</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} lg={3}>\n                  <InputLabel>Profile URL:</InputLabel>\n                </Grid>\n                <Grid item xs={12} lg={9}>\n                  <TextField\n                    fullWidth\n                    placeholder=\"Please enter your Profile URL\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <Link2 />\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>Please enter your Profile URL</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} lg={4}>\n                  <InputLabel>language</InputLabel>\n                </Grid>\n                <Grid item xs={12} lg={8}>\n                  <FormControlLabel control={<Checkbox defaultChecked />} label=\"English\" />\n                  <FormControlLabel control={<Checkbox />} label=\"French\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Dutch\" />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"3 Columns Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Name</InputLabel>\n                <TextField fullWidth placeholder=\"Enter full name\" />\n              </Stack>\n              <FormHelperText>Please enter your full name</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Email</InputLabel>\n                <TextField fullWidth placeholder=\"Enter email\" />\n              </Stack>\n              <FormHelperText>Please enter your Email</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Password</InputLabel>\n                <TextField\n                  type=\"password\"\n                  fullWidth\n                  placeholder=\"Enter Password\"\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <Lock />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              </Stack>\n              <FormHelperText>Please enter Password</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Contact</InputLabel>\n                <TextField fullWidth placeholder=\"Enter contact number\" />\n              </Stack>\n              <FormHelperText>Please enter your contact</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Profile URL</InputLabel>\n                <TextField\n                  fullWidth\n                  placeholder=\"Please enter your Profile URL\"\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <Link2 />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              </Stack>\n              <FormHelperText>Please enter your Profile URL</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Pincode</InputLabel>\n                <TextField fullWidth placeholder=\"Enter your postcode\" />\n              </Stack>\n              <FormHelperText>Please enter your postcode</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Stack spacing={1}>\n                <InputLabel>Address</InputLabel>\n                <TextField fullWidth placeholder=\"Enter your address\" />\n              </Stack>\n              <FormHelperText>Please enter your address</FormHelperText>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n              <InputLabel>User Type</InputLabel>\n              <FormControlLabel control={<Checkbox defaultChecked />} label=\"Administrator\" />\n              <FormControlLabel control={<Checkbox />} label=\"Author\" />\n              <FormHelperText>Please select User Type</FormHelperText>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"3 Columns Horizontal Form Layout\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Name :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField fullWidth placeholder=\"Enter full name\" />\n                  <FormHelperText>Please enter your full name</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Email :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField fullWidth placeholder=\"Enter email\" />\n                  <FormHelperText>Please enter your Email</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Password :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField\n                    type=\"password\"\n                    fullWidth\n                    placeholder=\"Enter Password\"\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <Lock />\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>Please enter Password</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Contact :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField fullWidth placeholder=\"Enter contact number\" />\n                  <FormHelperText>Please enter your contact</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Profile URL :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField\n                    fullWidth\n                    placeholder=\"Please enter your Profile URL\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <Link2 />\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>Please enter your Profile URL</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Pincode :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField fullWidth placeholder=\"Enter your postcode\" />\n                  <FormHelperText>Please enter your postcode</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>Address :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <TextField fullWidth placeholder=\"Enter your address\" />\n                  <FormHelperText>Please enter your address</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} lg={4}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs={12} sm={3} lg={4} sx={{ pt: { xs: 2, sm: '0 !important' } }}>\n                  <InputLabel sx={{ textAlign: { xs: 'left', sm: 'right' } }}>User Type :</InputLabel>\n                </Grid>\n                <Grid item xs={12} sm={9} lg={8}>\n                  <RadioGroup aria-label=\"gender\" name=\"controlled-radio-buttons-group\">\n                    <FormControlLabel value=\"female\" control={<Radio />} label=\"Administrator\" />\n                    <FormControlLabel value=\"male\" control={<Radio />} label=\"Author\" />\n                  </RadioGroup>\n                  <FormHelperText>Please select User Type</FormHelperText>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":16018},"src/pages/forms/services.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\n// import BasicWizard from 'sections/forms/wizard/basic-wizard';\nimport AddServicesPages from 'sections/forms/wizard/services-validation-wizard';\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormServices() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <AddServicesPages />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":520},"src/menu-items/index.jsx":{"content":"// project-imports\n// import applications from './applications';\n// import widget from './widget';\nimport formsTables from './forms-tables';\n// import samplePage from './sample-page';\n// import chartsMap from './charts-map';\n// import support from './support';\n// import pages from './pages';\n\n// ==============================|| MENU ITEMS ||============================== //\n\nconst menuItems = {\n  items: [formsTables]\n};\n\nexport default menuItems;\n","size_bytes":451},"src/pages/maintenance/coming-soon/coming-soon.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { Facebook, Google, Notification } from 'iconsax-react';\nimport coming1 from 'assets/images/maintenance/img-soon-1-1.png';\nimport coming2 from 'assets/images/maintenance/img-soon-1-2.png';\nimport AuthBackground from 'assets/images/auth/AuthBackground';\n\n// ==============================|| COMING SOON ||============================== //\n\nexport default function ComingSoon() {\n  return (\n    <>\n      <AuthBackground />\n      <Container fixed>\n        <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\" sx={{ minHeight: '100vh' }}>\n          <Grid item md={6}>\n            {/* <Box sx={{ margin: '0 auto' }}> */}\n            <Box sx={{ width: { xs: 300, md: 'auto' }, margin: '0 auto' }}>\n              <Grid container spacing={3} direction=\"column\">\n                <Grid item xs={12}>\n                  <Stack spacing={3}>\n                    <Typography variant=\"h4\">Coming Soon</Typography>\n                    <Typography variant=\"h2\">\n                      <Box sx={{ color: 'primary.main', display: 'inline-block' }}>Able Pro</Box> - The Bootstrap Admin Template\n                    </Typography>\n                    <Typography color=\"text.secondary\">\n                      Presenting Material-UI based React Dashboard Template to build performance centric websites and applications.\n                    </Typography>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} sx={{ width: { xs: 320, md: 380 } }}>\n                  <Stack spacing={3} sx={{ mt: 2 }}>\n                    <Stack direction=\"row\" spacing={1}>\n                      <TextField fullWidth placeholder=\"Email Address\" />\n                      <Button variant=\"contained\" sx={{ width: '50%' }} startIcon={<Notification variant=\"Bold\" />}>\n                        Notify Me\n                      </Button>\n                    </Stack>\n                    <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                      <IconButton shape=\"rounded\" color=\"secondary\">\n                        <Facebook variant=\"Bulk\" size={20} />\n                      </IconButton>\n                      <IconButton shape=\"rounded\" color=\"secondary\">\n                        <Google variant=\"Bulk\" size={20} />\n                      </IconButton>\n                    </Stack>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Box>\n          </Grid>\n          <Grid item md={6}>\n            <Stack\n              direction=\"row\"\n              spacing={2}\n              alignItems=\"start\"\n              sx={{ width: { xs: 360, sm: 'auto' }, height: '100vh', overflow: 'hidden' }}\n            >\n              <Box sx={{ position: 'relative', width: '280px' }}>\n                <Box\n                  sx={{\n                    lineHeight: 0,\n                    position: 'absolute',\n                    animation: 'img-l1 50s infinite linear',\n                    '@keyframes img-l1': { '0%': { transform: 'translateY(-100%)' }, '100%': { transform: 'translateY(0%)' } }\n                  }}\n                >\n                  <img src={coming1} alt=\"coming soon 1\" style={{ width: '100%' }} />\n                </Box>\n                <Box\n                  sx={{\n                    lineHeight: 0,\n                    position: 'absolute',\n                    animation: 'img-l2 50s infinite linear',\n                    '@keyframes img-l2': { '0%': { transform: 'translateY(0%)' }, '100%': { transform: 'translateY(100%)' } }\n                  }}\n                >\n                  <img src={coming1} alt=\"coming soon 1\" style={{ width: '100%' }} />\n                </Box>\n              </Box>\n              <Box sx={{ position: 'relative', width: '280px' }}>\n                <Box\n                  sx={{\n                    position: 'absolute',\n                    animation: 'img-r1 50s infinite linear',\n                    '@keyframes img-r1': { '0%': { transform: 'translateY(0%)' }, '100%': { transform: 'translateY(-100%)' } }\n                  }}\n                >\n                  <img src={coming2} alt=\"coming soon 1\" style={{ width: '100%' }} />\n                </Box>\n                <Box\n                  sx={{\n                    position: 'absolute',\n                    animation: 'img-r2 50s infinite linear',\n                    '@keyframes img-r2': { '0%': { transform: 'translateY(100%)' }, '100%': { transform: 'translateY(0%)' } }\n                  }}\n                >\n                  <img src={coming2} alt=\"coming soon 1\" style={{ width: '100%' }} />\n                </Box>\n              </Box>\n            </Stack>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n","size_bytes":5099},"src/utils/route-guard/AuthGuard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\n\n// ==============================|| AUTH GUARD ||============================== //\n\nexport default function AuthGuard({ children }) {\n  const { isLoggedIn } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      navigate('login', {\n        state: {\n          from: location.pathname\n        },\n        replace: true\n      });\n    }\n  }, [isLoggedIn, navigate, location]);\n\n  return children;\n}\n\nAuthGuard.propTypes = { children: PropTypes.any };\n","size_bytes":712},"src/sections/components-overview/tree-view/MultiSelectTreeView.jsx":{"content":"// material-ui\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| TREE VIEW - MULTI SELECT ||============================== //\n\nexport default function MultiSelectTreeView() {\n  const multiTreeviewCodeString = `<TreeView\n  aria-label=\"multi-select\"\n  slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n  multiSelect\n  defaultExpandedItems={['1']}\n  sx={{ height: 216, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n>\n  <TreeItem itemId=\"1\" label=\"Applications\">\n    <TreeItem itemId=\"2\" label=\"Calendar\" />\n    <TreeItem itemId=\"3\" label=\"Chrome\" />\n    <TreeItem itemId=\"4\" label=\"Webstorm\" />\n  </TreeItem>\n  <TreeItem itemId=\"5\" label=\"Documents\">\n    <TreeItem itemId=\"6\" label=\"MUI\">\n      <TreeItem itemId=\"7\" label=\"src\">\n        <TreeItem itemId=\"8\" label=\"index.js\" />\n        <TreeItem itemId=\"9\" label=\"tree-view.js\" />\n      </TreeItem>\n    </TreeItem>\n  </TreeItem>\n</TreeView>`;\n\n  return (\n    <MainCard title=\"Multi-Select\" codeString={multiTreeviewCodeString}>\n      <SimpleTreeView\n        aria-label=\"multi-select\"\n        slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }}\n        multiSelect\n        defaultExpandedItems={['1']}\n        sx={{ height: 216, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n      >\n        <TreeItem itemId=\"1\" label=\"Applications\">\n          <TreeItem itemId=\"2\" label=\"Calendar\" />\n          <TreeItem itemId=\"3\" label=\"Chrome\" />\n          <TreeItem itemId=\"4\" label=\"Webstorm\" />\n        </TreeItem>\n        <TreeItem itemId=\"5\" label=\"Documents\">\n          <TreeItem itemId=\"6\" label=\"MUI\">\n            <TreeItem itemId=\"7\" label=\"src\">\n              <TreeItem itemId=\"8\" label=\"index.js\" />\n              <TreeItem itemId=\"9\" label=\"tree-view.js\" />\n            </TreeItem>\n          </TreeItem>\n        </TreeItem>\n      </SimpleTreeView>\n    </MainCard>\n  );\n}\n","size_bytes":2024},"src/sections/maps/heatmap/control-panel.jsx":{"content":"import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\nimport Switch from '@mui/material/Switch';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { format } from 'date-fns';\n\n// project-import\nimport ControlPanelStyled from 'components/third-party/map/ControlPanelStyled';\n\n// ==============================|| HEATMAP - CONTROL ||============================== //\n\nfunction ControlPanel({ startTime, endTime, allDays, selectedTime, onChangeTime, onChangeAllDays }) {\n  const day = 24 * 60 * 60 * 1000;\n  const days = Math.round((endTime - startTime) / day);\n  const selectedDay = Math.round((selectedTime - startTime) / day);\n\n  const handleChangeDays = (value) => {\n    const daysToAdd = value;\n    const newTime = startTime + daysToAdd * day;\n    onChangeTime(newTime);\n  };\n\n  return (\n    <ControlPanelStyled>\n      <Box\n        sx={{\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between'\n        }}\n      >\n        <Typography variant=\"subtitle2\">All Days</Typography>\n        <Switch size=\"small\" checked={allDays} onChange={(event) => onChangeAllDays(event.target.checked)} />\n      </Box>\n\n      <br />\n\n      <Typography gutterBottom variant=\"body2\" sx={{ color: allDays ? 'text.disabled' : 'text.primary' }}>\n        Each Day: {format(new Date(selectedTime), 'dd MMM yyyy')}\n      </Typography>\n\n      <Slider\n        min={1}\n        step={1}\n        max={days}\n        disabled={allDays}\n        value={selectedDay}\n        color=\"primary\"\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'number') handleChangeDays(newValue);\n        }}\n      />\n    </ControlPanelStyled>\n  );\n}\n\nexport default memo(ControlPanel);\n\nControlPanel.propTypes = {\n  startTime: PropTypes.number,\n  endTime: PropTypes.number,\n  allDays: PropTypes.bool,\n  selectedTime: PropTypes.number,\n  onChangeTime: PropTypes.func,\n  onChangeAllDays: PropTypes.func\n};\n","size_bytes":2076},"src/components/@extended/Transitions.jsx":{"content":"import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport Collapse from '@mui/material/Collapse';\nimport Box from '@mui/material/Box';\nimport Fade from '@mui/material/Fade';\nimport Grow from '@mui/material/Grow';\nimport Slide from '@mui/material/Slide';\nimport Zoom from '@mui/material/Zoom';\n\n// ==============================|| TRANSITIONS ||============================== //\n\nfunction Transitions({ children, position = 'top-left', type = 'grow', direction = 'up', ...others }, ref) {\n  let positionSX = {\n    transformOrigin: '0 0 0'\n  };\n\n  switch (position) {\n    case 'top-right':\n      positionSX = {\n        transformOrigin: 'top right'\n      };\n      break;\n    case 'top':\n      positionSX = {\n        transformOrigin: 'top'\n      };\n      break;\n    case 'bottom-left':\n      positionSX = {\n        transformOrigin: 'bottom left'\n      };\n      break;\n    case 'bottom-right':\n      positionSX = {\n        transformOrigin: 'bottom right'\n      };\n      break;\n    case 'bottom':\n      positionSX = {\n        transformOrigin: 'bottom'\n      };\n      break;\n    case 'top-left':\n    default:\n      positionSX = {\n        transformOrigin: '0 0 0'\n      };\n      break;\n  }\n\n  return (\n    <Box ref={ref}>\n      {type === 'grow' && (\n        <Grow\n          {...others}\n          timeout={{\n            appear: 0,\n            enter: 150,\n            exit: 150\n          }}\n        >\n          <Box sx={positionSX}>{children}</Box>\n        </Grow>\n      )}\n\n      {type === 'collapse' && (\n        <Collapse {...others} sx={positionSX}>\n          {children}\n        </Collapse>\n      )}\n\n      {type === 'fade' && (\n        <Fade\n          {...others}\n          timeout={{\n            appear: 0,\n            enter: 300,\n            exit: 150\n          }}\n        >\n          <Box sx={positionSX}>{children}</Box>\n        </Fade>\n      )}\n\n      {type === 'slide' && (\n        <Slide\n          {...others}\n          timeout={{\n            appear: 0,\n            enter: 150,\n            exit: 150\n          }}\n          direction={direction}\n        >\n          <Box sx={positionSX}>{children}</Box>\n        </Slide>\n      )}\n\n      {type === 'zoom' && (\n        <Zoom {...others}>\n          <Box sx={positionSX}>{children}</Box>\n        </Zoom>\n      )}\n    </Box>\n  );\n}\n\nexport default forwardRef(Transitions);\n\n// ==============================|| POPUP / DIALOG - TRANSITIONS ||============================== //\n\nexport const PopupTransition = forwardRef(function Transition(props, ref) {\n  return <Zoom ref={ref} timeout={200} {...props} />;\n});\n\nTransitions.propTypes = {\n  children: PropTypes.node,\n  position: PropTypes.string,\n  type: PropTypes.string,\n  direction: PropTypes.oneOf(['up', 'right', 'left', 'down']),\n  others: PropTypes.any\n};\n","size_bytes":2794},"src/components/@extended/progress/LinearWithLabel.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Typography from '@mui/material/Typography';\n\n// ==============================|| PROGRESS - LINEAR WITH LABEL ||============================== //\n\nexport default function LinearWithLabel({ value, ...others }) {\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      <Box sx={{ width: '100%', mr: 1 }}>\n        <LinearProgress variant=\"determinate\" value={value} {...others} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearWithLabel.propTypes = { value: PropTypes.any, others: PropTypes.any };\n","size_bytes":804},"src/sections/widget/chart/LanguagesSupport.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowRight } from 'iconsax-react';\n\n// ==============================|| CHART ||============================== //\n\nfunction DataChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-users-chart',\n      type: 'area',\n      sparkline: { enabled: true }\n    },\n    stroke: {\n      width: 1.5\n    },\n    plotOptions: { bar: { columnWidth: '80%' } },\n    xaxis: { crosshairs: { width: 1 } },\n    tooltip: {\n      fixed: { enabled: false },\n      x: { show: false },\n      y: {\n        title: {\n          formatter: () => ''\n        }\n      }\n    }\n  };\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series] = useState([\n    {\n      data: [100, 140, 100, 250, 115, 125, 90, 100, 140, 100, 230, 115, 215, 90, 190, 100, 120, 180]\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={130} />;\n}\n\n// ==============================|| CHART WIDGETS - LANGUAGE SUPPORT ||============================== //\n\nexport default function LanguagesSupport() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Languages support</Typography>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <ListItemButton onClick={handleClose}>Name</ListItemButton>\n              <ListItemButton onClick={handleClose}>Date</ListItemButton>\n              <ListItemButton onClick={handleClose}>Rating</ListItemButton>\n              <ListItemButton onClick={handleClose}>Unread</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n            <Avatar size=\"sm\" color=\"secondary\" variant=\"rounded\" sx={{ color: 'text.secondary' }}>\n              <ArrowRight />\n            </Avatar>\n            <Typography variant=\"subtitle1\">Update version</Typography>\n            <Chip color=\"success\" size=\"small\" label=\"v1.1.0\" sx={{ borderRadius: 1, bgcolor: 'success.main' }} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <DataChart />\n        </Grid>\n        <Grid item xs={6}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            React\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            Angular\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            Bootstrap\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button fullWidth variant=\"outlined\" color=\"secondary\">\n            MUI\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":4958},"src/pages/components-overview/avatars.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Badge from '@mui/material/Badge';\nimport Divider from '@mui/material/Divider';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport AvatarGroup from '@mui/material/AvatarGroup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport Avatar from 'components/@extended/Avatar';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { Add, Coin, InfoCircle, Profile, Setting2, Sms, TickCircle, Trash, Warning2 } from 'iconsax-react';\n\nimport avatar1 from 'assets/images/users/avatar-1.png';\nimport avatar2 from 'assets/images/users/avatar-2.png';\nimport avatar3 from 'assets/images/users/avatar-3.png';\nimport avatar4 from 'assets/images/users/avatar-4.png';\nimport avatar5 from 'assets/images/users/avatar-5.png';\nimport avatar6 from 'assets/images/users/avatar-6.png';\nimport avatar7 from 'assets/images/users/avatar-7.png';\nimport avatar8 from 'assets/images/users/avatar-8.png';\nimport avatar9 from 'assets/images/users/avatar-9.png';\nimport avatar10 from 'assets/images/users/avatar-10.png';\n\nimport vector1 from 'assets/images/users/vector-1.png';\nimport vector2 from 'assets/images/users/vector-2.png';\nimport vector3 from 'assets/images/users/vector-3.png';\nimport vector4 from 'assets/images/users/vector-4.png';\n\n// ==============================|| COMPONENTS - AVATAR ||============================== //\n\nexport default function ComponentAvatar() {\n  const [open, setOpen] = useState(false);\n  const [show, setShow] = useState(false);\n\n  const basicAvatarCodeString = `<Avatar alt=\"Basic\"><Profile variant=\"Bold\" /></Avatar>`;\n\n  const imageAvatarCodeString = `<Avatar alt=\"Avatar 1\" src={('/assets/images/users/avatar-1.png')} />\n<Avatar alt=\"Avatar 2\" src={('/assets/images/users/avatar-2.png')} />\n<Avatar alt=\"Avatar 3\" src={('/assets/images/users/avatar-3.png')} />\n<Avatar alt=\"Avatar 4\" src={('/assets/images/users/avatar-4.png')} />`;\n\n  const vectorAvatarCodeString = `<Avatar><img alt=\"Natacha\" src={('/assets/images/users/vector-1.png')} height={40} /></Avatar>\n<Avatar><img alt=\"Natacha\" src={('/assets/images/users/vector-2.png')} height={40} /></Avatar>\n<Avatar><img alt=\"Natacha\" src={('/assets/images/users/vector-3.png')} height={40} /></Avatar>\n<Avatar><img alt=\"Natacha\" src={('/assets/images/users/vector-4.png')} height={40} /></Avatar>`;\n\n  const letterAvatarCodeString = `<Avatar alt=\"Natacha\" size=\"sm\">U</Avatar>\n<Avatar color=\"error\" alt=\"Natacha\" size=\"sm\">UI</Avatar>\n<Avatar color=\"error\" type=\"filled\" alt=\"Natacha\" size=\"sm\">A</Avatar>`;\n\n  const variantsAvatarCodeString = `<Avatar alt=\"Natacha\"><Profile variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Natacha\" variant=\"rounded\" type=\"combined\" variant=\"Bold\"><Profile /></Avatar>\n<Avatar alt=\"Natacha\" variant=\"square\" type=\"filled\"><Profile /></Avatar>\n<Avatar alt=\"Natacha\">U</Avatar>\n<Avatar alt=\"Natacha\" variant=\"rounded\" type=\"combined\">U</Avatar>\n<Avatar alt=\"Natacha\" variant=\"square\" type=\"filled\">U</Avatar>`;\n\n  const outlinedAvatarCodeString = `<Avatar alt=\"Natacha\" type=\"outlined\"><Profile variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Natacha\" variant=\"rounded\" type=\"outlined\"><Profile variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Natacha\" variant=\"square\" type=\"outlined\"><Profile variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Natacha\" type=\"outlined\">U</Avatar>\n<Avatar alt=\"Natacha\" variant=\"rounded\" type=\"outlined\">U</Avatar>\n<Avatar alt=\"Natacha\" variant=\"square\" type=\"outlined\">U</Avatar>`;\n\n  const iconAvatarCodeString = `<Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\"><Profile /></Avatar>\n<Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\" color=\"success\"><SearchZoomIn /></Avatar>\n<Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\" color=\"error\"><SearchZoomOut1 /></Avatar>\n<Avatar alt=\"Natacha\" size=\"sm\"><Add /></Avatar>`;\n\n  const groupAvatarCodeString = `<AvatarGroup max={4}>\n  <Avatar alt=\"Trevor Henderson\" src={('/assets/images/users/avatar-5.png')} />\n  <Avatar alt=\"Jone Doe\" src={('/assets/images/users/avatar-6.png')} />\n  <Avatar alt=\"Lein Ket\" src={('/assets/images/users/avatar-7.png')} />\n  <Avatar alt=\"Stebin Ben\" src={('/assets/images/users/avatar-8.png')} />\n  <Avatar alt=\"Wungh Tend\" src={('/assets/images/users/avatar-9.png')} />\n  <Avatar alt=\"Trevor Das\" src={('/assets/images/users/avatar-10.png')} />\n</AvatarGroup>\n<Box sx={{ width: 186 }}>\n  <Tooltip\n    open={show}\n    placement=\"top-end\"\n    title={\n      <AvatarGroup max={10}>\n        <Avatar alt=\"Trevor Henderson\" src={('/assets/images/users/avatar-5.png')} />\n        <Avatar alt=\"Jone Doe\" src={('/assets/images/users/avatar-6.png')} />\n        <Avatar alt=\"Lein Ket\" src={('/assets/images/users/avatar-7.png')} />\n        <Avatar alt=\"Stebin Ben\" src={('/assets/images/users/avatar-8.png')} />\n        <Avatar alt=\"Wungh Tend\" src={('/assets/images/users/avatar-9.png')} />\n        <Avatar alt=\"Trevor Das\" src={('/assets/images/users/avatar-10.png')} />\n      </AvatarGroup>\n    }\n  >\n    <AvatarGroup\n      sx={{ '& .MuiAvatarGroup-avatar': { bgcolor: 'primary.main', cursor: 'pointer' } }}\n      componentsProps={{\n        additionalAvatar: {\n          onMouseEnter: () => {\n            setShow(true);\n          },\n          onMouseLeave: () => {\n            setShow(false);\n          }\n        }\n      }}\n    >\n      <Avatar alt=\"Remy Sharp\" src={('/assets/images/users/avatar-1.png')} />\n      <Avatar alt=\"Travis Howard\" src={('/assets/images/users/avatar-2.png')} />\n      <Avatar alt=\"Cindy Baker\" src={('/assets/images/users/avatar-3.png')} />\n      <Avatar alt=\"Agnes Walker\" src={('/assets/images/users/avatar-4.png')} />\n      <Avatar alt=\"Trevor Henderson\" src={('/assets/images/users/avatar-5.png')} />\n      <Avatar alt=\"Jone Doe\" src={('/assets/images/users/avatar-6.png')} />\n      <Avatar alt=\"Lein Ket\" src={('/assets/images/users/avatar-7.png')} />\n      <Avatar alt=\"Stebin Ben\" src={('/assets/images/users/avatar-8.png')} />\n      <Avatar alt=\"Wungh Tend\" src={('/assets/images/users/avatar-9.png')} />\n      <Avatar alt=\"Trevor Das\" src={('/assets/images/users/avatar-10.png')} />\n    </AvatarGroup>\n  </Tooltip>\n</Box>\n<Box sx={{ width: 222 }}>\n  <Tooltip\n    open={open}\n    placement=\"top-end\"\n    title={\n      <AvatarGroup max={10}>\n        <Avatar alt=\"Jone Doe\" src={('/assets/images/users/avatar-6.png')} />\n        <Avatar alt=\"Lein Ket\" src={('/assets/images/users/avatar-7.png')} />\n        <Avatar alt=\"Stebin Ben\" src={('/assets/images/users/avatar-8.png')} />\n        <Avatar alt=\"Wungh Tend\" src={('/assets/images/users/avatar-9.png')} />\n        <Avatar alt=\"Trevor Das\" src={('/assets/images/users/avatar-10.png')} />\n      </AvatarGroup>\n    }\n  >\n    <AvatarGroup\n      max={6}\n      sx={{ '& .MuiAvatarGroup-avatar': { bgcolor: 'primary.main', cursor: 'pointer' } }}\n      componentsProps={{\n        additionalAvatar: {\n          onClick: () => {\n            setOpen(!open);\n          }\n        }\n      }}\n    >\n      <Avatar alt=\"Remy Sharp\" src={('/assets/images/users/avatar-1.png')} />\n      <Avatar alt=\"Travis Howard\" src={('/assets/images/users/avatar-2.png')} />\n      <Avatar alt=\"Cindy Baker\" src={('/assets/images/users/avatar-3.png')} />\n      <Avatar alt=\"Agnes Walker\" src={('/assets/images/users/avatar-4.png')} />\n      <Avatar alt=\"Trevor Henderson\" src={('/assets/images/users/avatar-5.png')} />\n      <Avatar alt=\"Jone Doe\" src={('/assets/images/users/avatar-6.png')} />\n      <Avatar alt=\"Lein Ket\" src={('/assets/images/users/avatar-7.png')} />\n      <Avatar alt=\"Stebin Ben\" src={('/assets/images/users/avatar-8.png')} />\n      <Avatar alt=\"Wungh Tend\" src={('/assets/images/users/avatar-9.png')} />\n      <Avatar alt=\"Trevor Das\" src={('/assets/images/users/avatar-10.png')} />\n    </AvatarGroup>\n  </Tooltip>\n</Box>`;\n\n  const badgeAvatarCodeString = `<Badge badgeContent={4} color=\"error\" overlap=\"circular\">\n  <Avatar alt=\"Natacha\" type=\"filled\" src={('/assets/images/users/avatar-6.png')} />\n</Badge>\n<Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n  <Avatar alt=\"Natacha\" color=\"secondary\" type=\"filled\">\n    <Profile />\n  </Avatar>\n</Badge>\n<Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n  <Avatar alt=\"Natacha\" type=\"filled\" src={('/assets/images/users/avatar-2.png')} />\n</Badge>\n<Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n  <Avatar alt=\"Natacha\" type=\"outlined\">\n    U\n  </Avatar>\n</Badge>\n<Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n  <Avatar>\n    <img alt=\"Natacha\" src={('/assets/images/users/vector-2.png')} width={40} />\n  </Avatar>\n</Badge>\n<Badge color=\"success\" variant=\"dot\">\n  <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"filled\" src={('/assets/images/users/avatar-1.png')} />\n</Badge>\n<Badge\n  overlap=\"circular\"\n  anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n  badgeContent={<Avatar size=\"badge\" alt=\"Remy Sharp\" src={('/assets/images/users/avatar-6.png')} />}\n>\n  <Avatar alt=\"Travis Howard\" src={('/assets/images/users/avatar-1.png')} />\n</Badge>`;\n\n  const sizesAvatarCodeString = `<Avatar size=\"xs\" alt=\"Avatar 1\" src={('/assets/images/users/avatar-1.png')} />\n<Avatar size=\"xl\" alt=\"Avatar 5\" src={('/assets/images/users/avatar-5.png')} />\n<Avatar size=\"lg\" alt=\"Avatar 4\" src={('/assets/images/users/avatar-4.png')} />\n<Avatar size=\"md\" alt=\"Avatar 3\" src={('/assets/images/users/avatar-3.png')} />\n<Avatar size=\"sm\" alt=\"Avatar 2\" src={('/assets/images/users/avatar-2.png')} />`;\n\n  const colorsAvatarCodeString = `<Avatar alt=\"Basic\" type=\"filled\"><Profile variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Basic\" type=\"filled\" color=\"error\"><Trash variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Basic\" type=\"filled\" color=\"info\"><InfoCircle variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Basic\" type=\"filled\" color=\"warning\"><Warning2 variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Basic\" type=\"filled\" color=\"success\"><TickCircle variant=\"Bold\" /></Avatar>\n<Avatar alt=\"Basic\" type=\"filled\" color=\"secondary\"><Coin variant=\"Bold\" /></Avatar>`;\n\n  const fallbacksAvatarCodeString = `<Avatar alt=\"Remy Sharp\" src=\"/broken-image.jpg\" color=\"error\" type=\"filled\">B</Avatar>\n<Avatar src=\"/broken-image.jpg\" color=\"error\" />\n<Avatar alt=\"Remy Sharp\" src=\"/broken-image.jpg\" color=\"error\" type=\"outlined\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Avatar\"\n        caption=\"Avatars are found throughout material design with uses in everything from tables to dialog menus.\"\n        directory=\"src/pages/components-overview/avatars\"\n        link=\"https://mui.com/material-ui/react-avatar/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicAvatarCodeString}>\n                <Avatar alt=\"Basic\">\n                  <Profile variant=\"Bold\" />\n                </Avatar>\n              </MainCard>\n              <MainCard title=\"Vector\" codeString={vectorAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar>\n                      <img alt=\"Natacha\" src={vector1} height={40} />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar>\n                      <img alt=\"Natacha\" src={vector2} height={40} />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar>\n                      <img alt=\"Natacha\" src={vector3} height={40} />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar>\n                      <img alt=\"Natacha\" src={vector4} height={40} />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Variants\" codeString={variantsAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"combined\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"square\" type=\"filled\">\n                      <Profile />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\">U</Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"combined\">\n                      U\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"square\" type=\"filled\">\n                      U\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Icon\" codeString={iconAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\" color=\"success\">\n                      <Sms variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" size=\"sm\" type=\"filled\" color=\"error\">\n                      <Setting2 variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" size=\"sm\">\n                      <Add />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"With Badge\" codeString={badgeAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Badge badgeContent={4} color=\"error\" overlap=\"circular\">\n                      <Avatar alt=\"Natacha\" type=\"filled\" src={avatar6} />\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n                      <Avatar alt=\"Natacha\" color=\"secondary\" type=\"filled\">\n                        <Profile />\n                      </Avatar>\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n                      <Avatar alt=\"Natacha\" type=\"filled\" src={avatar2} />\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n                      <Avatar alt=\"Natacha\" type=\"outlined\">\n                        U\n                      </Avatar>\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge color=\"error\" overlap=\"circular\" variant=\"dot\">\n                      <Avatar>\n                        <img alt=\"Natacha\" src={vector2} width={40} />\n                      </Avatar>\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge color=\"success\" variant=\"dot\">\n                      <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"filled\" src={avatar1} />\n                    </Badge>\n                  </Grid>\n                  <Grid item>\n                    <Badge\n                      overlap=\"circular\"\n                      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                      badgeContent={<Avatar size=\"badge\" alt=\"Remy Sharp\" src={avatar6} />}\n                    >\n                      <Avatar alt=\"Travis Howard\" src={avatar1} />\n                    </Badge>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Image\" codeString={imageAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Avatar 1\" src={avatar1} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Avatar 2\" src={avatar2} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Avatar 3\" src={avatar3} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Avatar 4\" src={avatar4} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Colors\" codeString={colorsAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\">\n                      <Profile />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\" color=\"secondary\">\n                      <Coin />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\" color=\"success\">\n                      <TickCircle />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\" color=\"warning\">\n                      <Warning2 />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\" color=\"info\">\n                      <InfoCircle />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Basic\" type=\"filled\" color=\"error\">\n                      <Trash />\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Letter\" codeString={letterAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" size=\"sm\">\n                      U\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"error\" alt=\"Natacha\" size=\"sm\">\n                      UI\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar color=\"error\" type=\"filled\" alt=\"Natacha\" size=\"sm\">\n                      A\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Outlined\" codeString={outlinedAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" type=\"outlined\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"outlined\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"square\" type=\"outlined\">\n                      <Profile variant=\"Bold\" />\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" type=\"outlined\">\n                      U\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"rounded\" type=\"outlined\">\n                      U\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Natacha\" variant=\"square\" type=\"outlined\">\n                      U\n                    </Avatar>\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Avatar Group\" codeString={groupAvatarCodeString}>\n                <Stack spacing={2}>\n                  <Typography variant=\"subtitle1\">Default</Typography>\n                  <Box sx={{ width: 148 }}>\n                    <AvatarGroup max={4}>\n                      <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                      <Avatar alt=\"Jone Doe\" src={avatar6} />\n                      <Avatar alt=\"Lein Ket\" src={avatar7} />\n                      <Avatar alt=\"Stebin Ben\" src={avatar8} />\n                      <Avatar alt=\"Wungh Tend\" src={avatar9} />\n                      <Avatar alt=\"Trevor Das\" src={avatar10} />\n                    </AvatarGroup>\n                  </Box>\n                  <Divider sx={{ my: 2 }} />\n                  <Typography variant=\"subtitle1\">On Hover</Typography>\n                  <Box sx={{ width: 186 }}>\n                    <Tooltip\n                      open={show}\n                      placement=\"top-end\"\n                      title={\n                        <AvatarGroup max={10}>\n                          <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                          <Avatar alt=\"Jone Doe\" src={avatar6} />\n                          <Avatar alt=\"Lein Ket\" src={avatar7} />\n                          <Avatar alt=\"Stebin Ben\" src={avatar8} />\n                          <Avatar alt=\"Wungh Tend\" src={avatar9} />\n                          <Avatar alt=\"Trevor Das\" src={avatar10} />\n                        </AvatarGroup>\n                      }\n                    >\n                      <AvatarGroup\n                        sx={{ '& .MuiAvatarGroup-avatar': { bgcolor: 'primary.main', cursor: 'pointer' } }}\n                        componentsProps={{\n                          additionalAvatar: {\n                            onMouseEnter: () => {\n                              setShow(true);\n                            },\n                            onMouseLeave: () => {\n                              setShow(false);\n                            }\n                          }\n                        }}\n                      >\n                        <Avatar alt=\"Remy Sharp\" src={avatar1} />\n                        <Avatar alt=\"Travis Howard\" src={avatar2} />\n                        <Avatar alt=\"Cindy Baker\" src={avatar3} />\n                        <Avatar alt=\"Agnes Walker\" src={avatar4} />\n                        <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                        <Avatar alt=\"Jone Doe\" src={avatar6} />\n                        <Avatar alt=\"Lein Ket\" src={avatar7} />\n                        <Avatar alt=\"Stebin Ben\" src={avatar8} />\n                        <Avatar alt=\"Wungh Tend\" src={avatar9} />\n                        <Avatar alt=\"Trevor Das\" src={avatar10} />\n                      </AvatarGroup>\n                    </Tooltip>\n                  </Box>\n                </Stack>\n                <Divider sx={{ my: 2 }} />\n                <Stack spacing={2}>\n                  <Typography variant=\"subtitle1\">On Click</Typography>\n                  <Box sx={{ width: 222 }}>\n                    <Tooltip\n                      open={open}\n                      placement=\"top-end\"\n                      title={\n                        <AvatarGroup max={10}>\n                          <Avatar alt=\"Jone Doe\" src={avatar6} />\n                          <Avatar alt=\"Lein Ket\" src={avatar7} />\n                          <Avatar alt=\"Stebin Ben\" src={avatar8} />\n                          <Avatar alt=\"Wungh Tend\" src={avatar9} />\n                          <Avatar alt=\"Trevor Das\" src={avatar10} />\n                        </AvatarGroup>\n                      }\n                    >\n                      <AvatarGroup\n                        max={6}\n                        sx={{ '& .MuiAvatarGroup-avatar': { bgcolor: 'primary.main', cursor: 'pointer' } }}\n                        componentsProps={{\n                          additionalAvatar: {\n                            onClick: () => {\n                              setOpen(!open);\n                            }\n                          }\n                        }}\n                      >\n                        <Avatar alt=\"Remy Sharp\" src={avatar1} />\n                        <Avatar alt=\"Travis Howard\" src={avatar2} />\n                        <Avatar alt=\"Cindy Baker\" src={avatar3} />\n                        <Avatar alt=\"Agnes Walker\" src={avatar4} />\n                        <Avatar alt=\"Trevor Henderson\" src={avatar5} />\n                        <Avatar alt=\"Jone Doe\" src={avatar6} />\n                        <Avatar alt=\"Lein Ket\" src={avatar7} />\n                        <Avatar alt=\"Stebin Ben\" src={avatar8} />\n                        <Avatar alt=\"Wungh Tend\" src={avatar9} />\n                        <Avatar alt=\"Trevor Das\" src={avatar10} />\n                      </AvatarGroup>\n                    </Tooltip>\n                  </Box>\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Sizes\" codeString={sizesAvatarCodeString}>\n                <Grid container spacing={1} alignItems=\"center\">\n                  <Grid item>\n                    <Avatar size=\"xs\" alt=\"Avatar 1\" src={avatar1} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar size=\"sm\" alt=\"Avatar 2\" src={avatar2} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar size=\"md\" alt=\"Avatar 3\" src={avatar3} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar size=\"lg\" alt=\"Avatar 4\" src={avatar4} />\n                  </Grid>\n                  <Grid item>\n                    <Avatar size=\"xl\" alt=\"Avatar 5\" src={avatar5} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Fallbacks\" codeString={fallbacksAvatarCodeString}>\n                <Grid container spacing={1}>\n                  <Grid item>\n                    <Avatar alt=\"Remy Sharp\" src=\"/broken-image.jpg\" color=\"error\" type=\"filled\">\n                      B\n                    </Avatar>\n                  </Grid>\n                  <Grid item>\n                    <Avatar alt=\"Remy Sharp\" src=\"/broken-image.jpg\" color=\"error\" type=\"outlined\" />\n                  </Grid>\n                  <Grid item>\n                    <Avatar src=\"/broken-image.jpg\" color=\"error\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":27155},"src/sections/components-overview/date-time-picker/DisabledPickers.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - DISABLED ||============================== //\n\nexport default function DisabledPickers() {\n  const [value, setValue] = useState(null);\n\n  const disabledDatepickerCodeString = `<MainCard title=\"Disabled Pickers\" codeString={disabledDatepickerCodeString}>\n  <Stack spacing={3}>\n    <Typography variant=\"h6\">Date Picker</Typography>\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DatePicker\n        label=\"disabled\"\n        disabled\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n      <DatePicker\n        label=\"read-only\"\n        readOnly\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n\n    <Typography variant=\"h6\">Date Time Picker</Typography>\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DateTimePicker\n        label=\"disabled\"\n        disabled\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n      <DateTimePicker\n        label=\"read-only\"\n        readOnly\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n\n      <Typography variant=\"h6\">Time Picker</Typography>\n      <TimePicker\n        label=\"disabled\"\n        disabled\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n      <TimePicker\n        label=\"read-only\"\n        readOnly\n        value={value}\n        onChange={(newValue: any) => {\n          setValue(newValue);\n        }}\n        renderInput={(params: any) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  </Stack>\n</MainCard>`;\n\n  return (\n    <MainCard title=\"Disabled Pickers\" codeString={disabledDatepickerCodeString}>\n      <Stack spacing={3} sx={{ '& .MuiInputLabel-root': { overflow: 'visible' } }}>\n        <Typography variant=\"h6\">Date Picker</Typography>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <DatePicker\n            disabled\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'disabled' } }}\n          />\n          <DatePicker\n            readOnly\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'disabled' } }}\n          />\n        </LocalizationProvider>\n\n        <Typography variant=\"h6\">Date Time Picker</Typography>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <DateTimePicker\n            disabled\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'disabled' } }}\n          />\n          <DateTimePicker\n            readOnly\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'read-only' } }}\n          />\n\n          <Typography variant=\"h6\">Time Picker</Typography>\n          <TimePicker\n            disabled\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'disabled' } }}\n          />\n          <TimePicker\n            readOnly\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n            slotProps={{ textField: { placeholder: 'read-only' } }}\n          />\n        </LocalizationProvider>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":4673},"src/components/Customization/ThemeMenuLayout.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport CardMedia from '@mui/material/CardMedia';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport useConfig from 'hooks/useConfig';\n\nimport { MenuOrientation } from 'config';\nimport { handlerDrawerOpen } from 'api/menu';\n\n// assets\nimport defaultLayout from 'assets/images/customization/vertical.svg';\nimport horizontalLayout from 'assets/images/customization/horizontal.svg';\n\n// ==============================|| CUSTOMIZATION - CONTAINER ||============================== //\n\nexport default function ThemeMenuLayout() {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { menuOrientation, onChangeMenuOrientation, onChangeMiniDrawer } = useConfig();\n  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;\n\n  const handleContainerChange = (e) => {\n    onChangeMiniDrawer(true);\n    onChangeMenuOrientation(e.target.value);\n    handlerDrawerOpen(e.target.value !== MenuOrientation.HORIZONTAL);\n  };\n\n  return (\n    <RadioGroup row aria-label=\"payment-card\" name=\"payment-card\" value={menuOrientation} onChange={handleContainerChange}>\n      <Stack direction=\"row\" alignItems=\"center\" spacing={2.5} sx={{ width: '100%' }}>\n        <FormControlLabel\n          control={<Radio value={MenuOrientation.VERTICAL} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(!isHorizontal && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={defaultLayout} alt=\"defaultLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">Vertical</Typography>\n            </Stack>\n          }\n        />\n        <FormControlLabel\n          control={<Radio value={MenuOrientation.HORIZONTAL} sx={{ display: 'none' }} />}\n          sx={{ width: '100%', m: 0, display: 'flex', '& .MuiFormControlLabel-label': { flex: 1 } }}\n          label={\n            <Stack alignItems=\"center\" spacing={0.5}>\n              <MainCard content={false} sx={{ borderWidth: 2, p: 1, ...(isHorizontal && { borderColor: theme.palette.primary.main }) }}>\n                <CardMedia component=\"img\" src={horizontalLayout} alt=\"horizontalLayout\" />\n              </MainCard>\n              <Typography variant=\"caption\">Horizontal</Typography>\n            </Stack>\n          }\n        />\n      </Stack>\n    </RadioGroup>\n  );\n}\n","size_bytes":2930},"src/sections/forms/edit-forms/services/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label Image of page\n            </Typography>\n            <ImageDisplay file={data.imageLabelSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title of the page\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.title}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.titleDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First icon title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstIconTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Icon\n            </Typography>\n            <ImageDisplay file={data.firstIconPath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First icon description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstIconDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second icon title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondIconTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Icon\n            </Typography>\n            <ImageDisplay file={data.secondIconPath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second icon description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondIconDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.imageTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image\n            </Typography>\n            <ImageDisplay file={data.imageTitlePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.imageTitleDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5023},"src/components/third-party/map/MapControlsStyled.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport GlobalStyles from '@mui/material/GlobalStyles';\n\n// ==============================|| MAP BOX - CONTROL STYLED ||============================== //\n\nexport default function MapControlsStyled() {\n  const theme = useTheme();\n\n  return (\n    <GlobalStyles\n      styles={{\n        '.mapboxgl-ctrl.mapboxgl-ctrl-group': { borderRadius: '4px', boxShadow: theme.customShadows.z1 },\n\n        '.mapboxgl-ctrl-fullscreen': { '.mapboxgl-ctrl-icon': { transform: ' scale(0.75)' } },\n\n        '.mapboxgl-ctrl-zoom-in': { borderRadius: '4px 4px 0 0' },\n        '.mapboxgl-ctrl-compass': { borderRadius: '0 0 4px 4px' },\n\n        '.mapboxgl-ctrl-group button+button': { borderTop: `1px solid ${theme.palette.divider}` },\n\n        '.mapboxgl-ctrl.mapboxgl-ctrl-scale': {\n          border: 'none',\n          lineHeight: '14px',\n          borderRadius: '4px',\n          color: theme.palette.common.white,\n          fontWeight: theme.typography.fontWeightBold,\n          backgroundImage: `linear-gradient(to right, #8a2387, #e94057, #f27121)`\n        }\n      }}\n    />\n  );\n}\n","size_bytes":1126},"src/components/cards/ComponentHeader.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n//project-imports\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Code1, Link1 } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - BREADCRUMBS  ||============================== //\n\nexport default function ComponentHeader({ title, caption, directory, link }) {\n  const theme = useTheme();\n\n  return (\n    <Box sx={{ pl: { xs: 1.5, sm: 3, xl: 8 } }}>\n      <Stack spacing={1.25}>\n        <Typography variant=\"h2\" sx={{ fontWeight: 700 }}>\n          {title}\n        </Typography>\n        {caption && (\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            {caption}\n          </Typography>\n        )}\n        {directory && (\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            <Stack direction=\"row\" alignItems=\"center\" columnGap={1}>\n              <Code1 size={14} />\n              {directory}\n            </Stack>\n          </Typography>\n        )}\n        {link && (\n          <Box>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<Link1 size={16} />}\n              component={Link}\n              href={link}\n              target=\"_blank\"\n              sx={{\n                fontWeight: 500,\n                bgcolor: 'secondary.light',\n                color: 'secondary.darker',\n                '&:hover': {\n                  color: 'secondary.lighter',\n                  ...(theme.palette.mode === ThemeMode.DARK && {\n                    bgcolor: 'secondary.200',\n                    color: 'secondary.darker'\n                  })\n                }\n              }}\n            >\n              Reference\n            </Button>\n          </Box>\n        )}\n      </Stack>\n    </Box>\n  );\n}\n\nComponentHeader.propTypes = { title: PropTypes.string, caption: PropTypes.string, directory: PropTypes.string, link: PropTypes.string };\n","size_bytes":2172},"src/pages/components-overview/color.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ===============================|| COLOR BOX ||=============================== //\n\nfunction ColorBox({ bgcolor, title, data, dark, main }) {\n  return (\n    <>\n      <Card sx={{ '&.MuiPaper-root': { borderRadius: '0px' } }}>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            py: 2.5,\n            bgcolor,\n            color: dark ? 'secondary.700' : '#ffffff',\n            border: main ? '1px dashed' : '1px solid transparent'\n          }}\n        >\n          {title && (\n            <Grid container justifyContent=\"space-around\" alignItems=\"center\">\n              <Grid item>\n                {data && (\n                  <Stack spacing={0.75} alignItems=\"center\">\n                    <Typography variant=\"subtitle2\">{data.label}</Typography>\n                    <Typography variant=\"subtitle1\">{data.color}</Typography>\n                  </Stack>\n                )}\n              </Grid>\n              <Grid item>\n                <Typography variant=\"subtitle1\" color=\"inherit\">\n                  {title}\n                </Typography>\n              </Grid>\n            </Grid>\n          )}\n        </Box>\n      </Card>\n    </>\n  );\n}\n\n// ===============================|| COMPONENTS - COLOR ||=============================== //\n\nexport default function ComponentColor() {\n  const theme = useTheme();\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Color\"\n        caption=\"Convey meaning through color. Out of the box you get access to all colors in the Material Design guidelines.\"\n        directory=\"src/pages/components-overview/color\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <MainCard title=\"Primary Color\">\n              <Stack>\n                <ColorBox\n                  bgcolor=\"primary.lighter\"\n                  data={{ label: 'Blue-1', color: `${theme.palette.primary.lighter}` }}\n                  title=\"primary.lighter\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"primary.100\"\n                  data={{ label: 'Blue-2', color: `${theme.palette.primary[100]}` }}\n                  title=\"primary[100]\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"primary.200\"\n                  data={{ label: 'Blue-3', color: `${theme.palette.primary[200]}` }}\n                  title=\"primary[200]\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"primary.light\"\n                  data={{ label: 'Blue-4', color: `${theme.palette.primary.light}` }}\n                  title=\"primary.light\"\n                  dark\n                />\n                <ColorBox bgcolor=\"primary.400\" data={{ label: 'Blue-5', color: `${theme.palette.primary[400]}` }} title=\"primary[400]\" />\n                <ColorBox\n                  bgcolor=\"primary.main\"\n                  data={{ label: 'Blue-6', color: `${theme.palette.primary.main}` }}\n                  title=\"primary.main\"\n                  main\n                />\n                <ColorBox bgcolor=\"primary.dark\" data={{ label: 'Blue-7', color: `${theme.palette.primary.dark}` }} title=\"primary.dark\" />\n                <ColorBox bgcolor=\"primary.700\" data={{ label: 'Blue-8', color: `${theme.palette.primary[700]}` }} title=\"primary[700]\" />\n                <ColorBox\n                  bgcolor=\"primary.darker\"\n                  data={{ label: 'Blue-9', color: `${theme.palette.primary.darker}` }}\n                  title=\"primary.darker\"\n                />\n                <ColorBox bgcolor=\"primary.900\" data={{ label: 'Blue-10', color: `${theme.palette.primary[900]}` }} title=\"primary.900\" />\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <MainCard title=\"Secondary Color\">\n              <Stack>\n                <ColorBox\n                  bgcolor=\"secondary.lighter\"\n                  data={{ label: 'Blue-1', color: `${theme.palette.secondary.lighter}` }}\n                  title=\"secondary.lighter\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"secondary.100\"\n                  data={{ label: 'Blue-2', color: `${theme.palette.secondary[100]}` }}\n                  title=\"secondary[100]\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"secondary.200\"\n                  data={{ label: 'Blue-3', color: `${theme.palette.secondary[200]}` }}\n                  title=\"secondary[200]\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"secondary.light\"\n                  data={{ label: 'Blue-4', color: `${theme.palette.secondary.light}` }}\n                  title=\"secondary.light\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"secondary.400\"\n                  data={{ label: 'Blue-5', color: `${theme.palette.secondary[400]}` }}\n                  title=\"secondary[400]\"\n                />\n                <ColorBox\n                  bgcolor=\"secondary.500\"\n                  data={{ label: 'Blue-6', color: `${theme.palette.secondary[500]}` }}\n                  title=\"secondary.500\"\n                  main\n                />\n                <ColorBox\n                  bgcolor=\"secondary.main\"\n                  data={{ label: 'Blue-7', color: `${theme.palette.secondary.main}` }}\n                  title=\"secondary.main\"\n                />\n                <ColorBox\n                  bgcolor=\"secondary.dark\"\n                  data={{ label: 'Blue-8', color: `${theme.palette.secondary.dark}` }}\n                  title=\"secondary.dark\"\n                />\n                <ColorBox\n                  bgcolor=\"secondary.800\"\n                  data={{ label: 'Blue-9', color: `${theme.palette.secondary[800]}` }}\n                  title=\"secondary.800\"\n                />\n                <ColorBox\n                  bgcolor=\"secondary.darker\"\n                  data={{ label: 'Blue-10', color: `${theme.palette.secondary.darker}` }}\n                  title=\"secondary.darker\"\n                />\n              </Stack>\n            </MainCard>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={4}>\n            <MainCard title=\"Success Color\">\n              <Stack>\n                <ColorBox\n                  bgcolor=\"success.lighter\"\n                  data={{ label: 'Green-1', color: `${theme.palette.success.lighter}` }}\n                  title=\"success.lighter\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"success.light\"\n                  data={{ label: 'Green-4', color: `${theme.palette.success.light}` }}\n                  title=\"success.light\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"success.main\"\n                  data={{ label: 'Green-6', color: `${theme.palette.success.main}` }}\n                  title=\"success.main\"\n                  main\n                />\n                <ColorBox bgcolor=\"success.dark\" data={{ label: 'Green-8', color: `${theme.palette.success.dark}` }} title=\"success.dark\" />\n                <ColorBox\n                  bgcolor=\"success.darker\"\n                  data={{ label: 'Green-10', color: `${theme.palette.success.darker}` }}\n                  title=\"success.darker\"\n                />\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <MainCard title=\"Error Color\">\n              <Stack>\n                <ColorBox\n                  bgcolor=\"error.lighter\"\n                  data={{ label: 'Red-1', color: `${theme.palette.error.lighter}` }}\n                  title=\"error.lighter\"\n                  dark\n                />\n                <ColorBox bgcolor=\"error.light\" data={{ label: 'Red-4', color: `${theme.palette.error.light}` }} title=\"error.light\" dark />\n                <ColorBox bgcolor=\"error.main\" data={{ label: 'Red-6', color: `${theme.palette.error.main}` }} title=\"error.main\" main />\n                <ColorBox bgcolor=\"error.dark\" data={{ label: 'Red-8', color: `${theme.palette.error.dark}` }} title=\"error.dark\" />\n                <ColorBox bgcolor=\"error.darker\" data={{ label: 'Red-10', color: `${theme.palette.error.darker}` }} title=\"error.darker\" />\n              </Stack>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <MainCard title=\"Warning Color\">\n              <Stack>\n                <ColorBox\n                  bgcolor=\"warning.lighter\"\n                  data={{ label: 'Gold-1', color: `${theme.palette.warning.lighter}` }}\n                  title=\"warning.lighter\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"warning.light\"\n                  data={{ label: 'Gold-4', color: `${theme.palette.warning.light}` }}\n                  title=\"warning.light\"\n                  dark\n                />\n                <ColorBox\n                  bgcolor=\"warning.main\"\n                  data={{ label: 'Gold-6', color: `${theme.palette.warning.main}` }}\n                  title=\"warning.main\"\n                  main\n                />\n                <ColorBox bgcolor=\"warning.dark\" data={{ label: 'Gold-8', color: `${theme.palette.warning.dark}` }} title=\"warning.dark\" />\n                <ColorBox\n                  bgcolor=\"warning.darker\"\n                  data={{ label: 'Gold-10', color: `${theme.palette.warning.darker}` }}\n                  title=\"warning.darker\"\n                />\n              </Stack>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n\nColorBox.propTypes = {\n  bgcolor: PropTypes.string,\n  title: PropTypes.string,\n  data: PropTypes.object,\n  dark: PropTypes.bool,\n  main: PropTypes.bool\n};\n","size_bytes":10582},"src/sections/apps/e-commerce/checkout/AddressCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Edit } from 'iconsax-react';\n\n// ==============================|| CHECKOUT - ADDRESS CARD ||============================== //\n\nexport default function AddressCard({ address, change, handleClickOpen, billingAddressHandler }) {\n  const theme = useTheme();\n\n  return (\n    <MainCard\n      sx={{ '&:hover': { boxShadow: theme.customShadows.primary }, cursor: 'pointer' }}\n      onClick={() => {\n        if (billingAddressHandler && address) {\n          billingAddressHandler(address);\n        }\n      }}\n    >\n      {address && (\n        <Grid container spacing={0.5}>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\">\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                <Typography variant=\"subtitle1\">{address.name}</Typography>\n                <Typography color=\"text.secondary\" sx={{ textTransform: 'capitalize' }}>\n                  ({address.destination})\n                </Typography>\n                {address.isDefault && (\n                  <Chip sx={{ color: 'primary.main', bgcolor: 'primary.lighter', borderRadius: '10px' }} label=\"Default\" size=\"small\" />\n                )}\n              </Stack>\n              {change && (\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color=\"secondary\"\n                  startIcon={<Edit />}\n                  onClick={() => {\n                    if (handleClickOpen) {\n                      handleClickOpen(address);\n                    }\n                  }}\n                >\n                  Change\n                </Button>\n              )}\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={2}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {`${address.building}, ${address.street}, ${address.city}, ${address.state}, ${address.country} - ${address.post}`}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {address.phone}\n              </Typography>\n            </Stack>\n          </Grid>\n        </Grid>\n      )}\n    </MainCard>\n  );\n}\n\nAddressCard.propTypes = {\n  address: PropTypes.any,\n  change: PropTypes.bool,\n  handleClickOpen: PropTypes.func,\n  billingAddressHandler: PropTypes.func\n};\n","size_bytes":2735},"src/sections/components-overview/dialogs/AlertDialog.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// ==============================|| DIALOG - ALERT ||============================== //\n\nexport default function AlertDialog() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle id=\"alert-dialog-title\">Use Google&apos;s location service?</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"error\" onClick={handleClose}>\n              Disagree\n            </Button>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Agree\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":1672},"src/pages/apps/customer/list.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState, Fragment } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport Button from '@mui/material/Button';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TableContainer from '@mui/material/TableContainer';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  getPaginationRowModel,\n  getFilteredRowModel,\n  useReactTable\n} from '@tanstack/react-table';\n\n// project-import\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\n\nimport CustomerModal from 'sections/apps/customer/CustomerModal';\nimport AlertCustomerDelete from 'sections/apps/customer/AlertCustomerDelete';\nimport CustomerView from 'sections/apps/customer/CustomerView';\nimport EmptyReactTable from 'pages/tables/react-table/empty';\n\nimport {\n  CSVExport,\n  DebouncedInput,\n  HeaderSort,\n  IndeterminateCheckbox,\n  RowSelection,\n  SelectColumnSorting,\n  TablePagination\n} from 'components/third-party/react-table';\n\nimport { useGetCustomer } from 'api/customer';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add, Edit, Eye, Trash } from 'iconsax-react';\n\n// ==============================|| REACT TABLE - LIST ||============================== //\n\nfunction ReactTable({ data, columns, modalToggler }) {\n  const theme = useTheme();\n  const [sorting, setSorting] = useState([{ id: 'name', desc: false }]);\n  const [columnFilters, setColumnFilters] = useState([]);\n  const [rowSelection, setRowSelection] = useState({});\n  const [globalFilter, setGlobalFilter] = useState('');\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      columnFilters,\n      sorting,\n      rowSelection,\n      globalFilter\n    },\n    enableRowSelection: true,\n    onSortingChange: setSorting,\n    onRowSelectionChange: setRowSelection,\n    onGlobalFilterChange: setGlobalFilter,\n    onColumnFiltersChange: setColumnFilters,\n    getRowCanExpand: () => true,\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    debugTable: true\n  });\n  const backColor = alpha(theme.palette.primary.lighter, 0.1);\n\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  return (\n    <MainCard content={false}>\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\" justifyContent=\"space-between\" sx={{ padding: 3 }}>\n        <DebouncedInput\n          value={globalFilter ?? ''}\n          onFilterChange={(value) => setGlobalFilter(String(value))}\n          placeholder={`Search ${data.length} records...`}\n        />\n\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          <Button variant=\"contained\" startIcon={<Add />} onClick={modalToggler} size=\"large\">\n            Add Customer\n          </Button>\n          <CSVExport\n            {...{ data: table.getSelectedRowModel().flatRows.map((row) => row.original), headers, filename: 'customer-list.csv' }}\n          />\n        </Stack>\n      </Stack>\n      <ScrollX>\n        <Stack>\n          <RowSelection selected={Object.keys(rowSelection).length} />\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                        Object.assign(header.column.columnDef.meta, {\n                          className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                        });\n                      }\n\n                      return (\n                        <TableCell\n                          key={header.id}\n                          {...header.column.columnDef.meta}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...(header.column.getCanSort() &&\n                            header.column.columnDef.meta === undefined && {\n                              className: 'cursor-pointer prevent-select'\n                            })}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                              <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                              {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                            </Stack>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <Fragment key={row.id}>\n                    <TableRow>\n                      {row.getVisibleCells().map((cell) => (\n                        <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    {row.getIsExpanded() && (\n                      <TableRow sx={{ bgcolor: backColor, '&:hover': { bgcolor: `${backColor} !important` }, overflow: 'hidden' }}>\n                        <TableCell colSpan={row.getVisibleCells().length} sx={{ p: 2.5, overflow: 'hidden' }}>\n                          <CustomerView data={row.original} />\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </Fragment>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount\n                }}\n              />\n            </Box>\n          </>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n// ==============================|| CUSTOMER LIST ||============================== //\n\nexport default function CustomerListPage() {\n  const theme = useTheme();\n\n  const { customersLoading: loading, customers: lists } = useGetCustomer();\n\n  const [open, setOpen] = useState(false);\n\n  const [customerModal, setCustomerModal] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n  const [customerDeleteId, setCustomerDeleteId] = useState('');\n\n  const handleClose = () => {\n    setOpen(!open);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'Row Selection',\n        header: ({ table }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n              onChange: table.getToggleAllRowsSelectedHandler()\n            }}\n          />\n        ),\n        cell: ({ row }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.getToggleSelectedHandler()\n            }}\n          />\n        )\n      },\n      {\n        header: '#',\n        accessorKey: 'id',\n        meta: {\n          className: 'cell-center'\n        }\n      },\n      {\n        header: 'Customer Name',\n        accessorKey: 'name',\n        cell: ({ row, getValue }) => (\n          <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n            <Avatar\n              alt=\"Avatar\"\n              size=\"sm\"\n              src={getImageUrl(`avatar-${!row.original.avatar ? 1 : row.original.avatar}.png`, ImagePath.USERS)}\n            />\n            <Stack spacing={0}>\n              <Typography variant=\"subtitle1\">{getValue()}</Typography>\n              <Typography color=\"text.secondary\">{row.original.email}</Typography>\n            </Stack>\n          </Stack>\n        )\n      },\n      {\n        header: 'Contact',\n        accessorKey: 'contact',\n        cell: ({ getValue }) => <PatternFormat displayType=\"text\" format=\"+1 (###) ###-####\" mask=\"_\" defaultValue={getValue()} />\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Country',\n        accessorKey: 'country'\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 3:\n              return <Chip color=\"error\" label=\"Rejected\" size=\"small\" variant=\"light\" />;\n            case 1:\n              return <Chip color=\"success\" label=\"Verified\" size=\"small\" variant=\"light\" />;\n            case 2:\n            default:\n              return <Chip color=\"info\" label=\"Pending\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Actions',\n        meta: {\n          className: 'cell-center'\n        },\n        disableSortBy: true,\n        cell: ({ row }) => {\n          const collapseIcon =\n            row.getCanExpand() && row.getIsExpanded() ? (\n              <Add style={{ color: theme.palette.error.main, transform: 'rotate(45deg)' }} />\n            ) : (\n              <Eye />\n            );\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={0}>\n              <Tooltip title=\"View\">\n                <IconButton color=\"secondary\" onClick={row.getToggleExpandedHandler()}>\n                  {collapseIcon}\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Edit\">\n                <IconButton\n                  color=\"primary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setSelectedCustomer(row.original);\n                    setCustomerModal(true);\n                  }}\n                >\n                  <Edit />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Delete\">\n                <IconButton\n                  color=\"error\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleClose();\n                    setCustomerDeleteId(Number(row.original.id));\n                  }}\n                >\n                  <Trash />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          );\n        }\n      }\n    ], // eslint-disable-next-line\n    [theme]\n  );\n\n  if (loading) return <EmptyReactTable />;\n\n  return (\n    <>\n      <ReactTable\n        {...{\n          data: lists,\n          columns,\n          modalToggler: () => {\n            setCustomerModal(true);\n            setSelectedCustomer(null);\n          }\n        }}\n      />\n      <AlertCustomerDelete id={Number(customerDeleteId)} title={customerDeleteId} open={open} handleClose={handleClose} />\n      <CustomerModal open={customerModal} modalToggler={setCustomerModal} customer={selectedCustomer} />\n    </>\n  );\n}\n\nReactTable.propTypes = { data: PropTypes.array, columns: PropTypes.array, modalToggler: PropTypes.func };\n","size_bytes":12452},"src/sections/apps/customer/CustomerCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Fade from '@mui/material/Fade';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Menu from '@mui/material/Menu';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport ListItem from '@mui/material/ListItem';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\n\n// project-imports\nimport CustomerModal from './CustomerModal';\nimport CustomerPreview from './CustomerPreview';\nimport AlertCustomerDelete from './AlertCustomerDelete';\nimport ListSmallCard from './export-pdf/ListSmallCard';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { CallCalling, Link2, Location, Sms } from 'iconsax-react';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// ==============================|| CUSTOMER - CARD ||============================== //\n\nexport default function CustomerCard({ customer }) {\n  const [open, setOpen] = useState(false);\n  const [customerModal, setCustomerModal] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const handleAlertClose = () => {\n    setOpenAlert(!openAlert);\n    handleMenuClose();\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const openMenu = Boolean(anchorEl);\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const editCustomer = () => {\n    setSelectedCustomer(customer);\n    setCustomerModal(true);\n  };\n\n  return (\n    <>\n      <MainCard sx={{ height: 1, '& .MuiCardContent-root': { height: 1, display: 'flex', flexDirection: 'column' } }}>\n        <Grid id=\"print\" container spacing={2.25}>\n          <Grid item xs={12}>\n            <List sx={{ width: 1, p: 0 }}>\n              <ListItem\n                disablePadding\n                secondaryAction={\n                  <IconButton\n                    edge=\"end\"\n                    aria-label=\"comments\"\n                    color=\"secondary\"\n                    onClick={handleMenuClick}\n                    sx={{ transform: 'rotate(90deg)' }}\n                  >\n                    <MoreIcon />\n                  </IconButton>\n                }\n              >\n                <ListItemAvatar>\n                  <Avatar alt={customer.name} src={getImageUrl(`avatar-${!customer.avatar ? 1 : customer.avatar}.png`, ImagePath.USERS)} />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={<Typography variant=\"subtitle1\">{customer.name}</Typography>}\n                  secondary={<Typography color=\"text.secondary\">{customer.role}</Typography>}\n                />\n              </ListItem>\n            </List>\n            <Menu\n              id=\"fade-menu\"\n              MenuListProps={{ 'aria-labelledby': 'fade-button' }}\n              anchorEl={anchorEl}\n              open={openMenu}\n              onClose={handleMenuClose}\n              TransitionComponent={Fade}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <MenuItem sx={{ a: { textDecoration: 'none', color: 'inherit' } }}>\n                <PDFDownloadLink document={<ListSmallCard customer={customer} />} fileName={`Customer-${customer.name}.pdf`}>\n                  Export PDF\n                </PDFDownloadLink>\n              </MenuItem>\n              <MenuItem onClick={editCustomer}>Edit</MenuItem>\n              <MenuItem onClick={handleAlertClose}>Delete</MenuItem>\n            </Menu>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>Hello, {customer.about}</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1} direction={{ xs: 'column', md: 'row' }}>\n              <Grid item xs={6}>\n                <List\n                  sx={{\n                    p: 0,\n                    overflow: 'hidden',\n                    '& .MuiListItem-root': { px: 0, py: 0.5 },\n                    '& .MuiListItemIcon-root': { minWidth: 28 }\n                  }}\n                >\n                  <ListItem alignItems=\"flex-start\">\n                    <ListItemIcon>\n                      <Sms size={18} />\n                    </ListItemIcon>\n                    <ListItemText primary={<Typography color=\"text.secondary\">{customer.email}</Typography>} />\n                  </ListItem>\n                  <ListItem alignItems=\"flex-start\">\n                    <ListItemIcon>\n                      <CallCalling size={18} />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        <Typography color=\"text.secondary\">\n                          <PatternFormat displayType=\"text\" format=\"+1 (###) ###-####\" mask=\"_\" defaultValue={customer.contact} />\n                        </Typography>\n                      }\n                    />\n                  </ListItem>\n                </List>\n              </Grid>\n              <Grid item xs={6}>\n                <List\n                  sx={{ p: 0, overflow: 'hidden', '& .MuiListItem-root': { px: 0, py: 0.5 }, '& .MuiListItemIcon-root': { minWidth: 28 } }}\n                >\n                  <ListItem alignItems=\"flex-start\">\n                    <ListItemIcon>\n                      <Location size={18} />\n                    </ListItemIcon>\n                    <ListItemText primary={<Typography color=\"text.secondary\">{customer.country}</Typography>} />\n                  </ListItem>\n                  <ListItem alignItems=\"flex-start\">\n                    <ListItemIcon>\n                      <Link2 size={18} />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        <Link href=\"https://google.com\" target=\"_blank\" sx={{ textTransform: 'lowercase' }}>\n                          https://{customer.firstName}.en\n                        </Link>\n                      }\n                    />\n                  </ListItem>\n                </List>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Box>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', listStyle: 'none', p: 0.5, m: 0 }} component=\"ul\">\n                {customer.skills.map((skill, index) => (\n                  <ListItem disablePadding key={index} sx={{ width: 'auto', pr: 0.75, pb: 0.75 }}>\n                    <Chip color=\"secondary\" variant=\"outlined\" size=\"small\" label={skill} sx={{ color: 'text.secondary' }} />\n                  </ListItem>\n                ))}\n              </Box>\n            </Box>\n          </Grid>\n        </Grid>\n        <Stack\n          direction=\"row\"\n          className=\"hideforPDf\"\n          alignItems=\"center\"\n          spacing={1}\n          justifyContent=\"space-between\"\n          sx={{ mt: 'auto', mb: 0, pt: 2.25 }}\n        >\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Updated in {customer.time}\n          </Typography>\n          <Button variant=\"outlined\" size=\"small\" onClick={handleClickOpen}>\n            Preview\n          </Button>\n        </Stack>\n      </MainCard>\n\n      <CustomerPreview customer={customer} open={open} onClose={handleClose} editCustomer={editCustomer} />\n      <AlertCustomerDelete id={customer.id} title={customer.name} open={openAlert} handleClose={handleAlertClose} />\n      <CustomerModal open={customerModal} modalToggler={setCustomerModal} customer={selectedCustomer} />\n    </>\n  );\n}\n\nCustomerCard.propTypes = { customer: PropTypes.any };\n","size_bytes":8575},"src/layout/Pages/index.jsx":{"content":"import { Outlet } from 'react-router-dom';\n\n// ==============================|| LAYOUT - BLANK PAGES ||============================== //\n\nexport default function PagesLayout() {\n  return <Outlet />;\n}\n","size_bytes":201},"src/sections/auth/AuthCard.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| AUTHENTICATION - CARD ||============================== //\n\nexport default function AuthCard({ children, ...other }) {\n  return (\n    <MainCard\n      sx={{\n        maxWidth: { xs: 400, md: 480 },\n        margin: { xs: 2.5, md: 3 },\n        '& > *': {\n          flexGrow: 1,\n          flexBasis: '50%'\n        }\n      }}\n      content={false}\n      {...other}\n    >\n      <Box sx={{ p: { xs: 2, sm: 3, md: 4, xl: 5 } }}>{children}</Box>\n    </MainCard>\n  );\n}\n\nAuthCard.propTypes = { children: PropTypes.any, other: PropTypes.any };\n","size_bytes":720},"src/components/MainCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Highlighter from 'components/third-party/Highlighter';\nimport useConfig from 'hooks/useConfig';\n\n// header style\nconst headerSX = { p: 2.5, '& .MuiCardHeader-action': { m: '0px auto', alignSelf: 'center' } };\n\n// ==============================|| CUSTOM - MAIN CARD ||============================== //\n\nfunction MainCard(\n  {\n    border = true,\n    boxShadow = true,\n    children,\n    subheader,\n    content = true,\n    contentSX = {},\n    darkTitle,\n    divider = true,\n    elevation,\n    secondary,\n    shadow,\n    sx = {},\n    title,\n    codeHighlight = false,\n    codeString,\n    modal = false,\n    ...others\n  },\n  ref\n) {\n  const theme = useTheme();\n  const { themeContrast } = useConfig();\n\n  return (\n    <Card\n      elevation={elevation || 0}\n      ref={ref}\n      {...others}\n      sx={{\n        position: 'relative',\n        border: border ? '1px solid' : 'none',\n        borderRadius: 1.5,\n        borderColor: theme.palette.divider,\n        ...(((themeContrast && boxShadow) || shadow) && {\n          boxShadow: shadow ? shadow : theme.customShadows.z1\n        }),\n        ...(codeHighlight && {\n          '& pre': {\n            m: 0,\n            p: '12px !important',\n            fontFamily: theme.typography.fontFamily,\n            fontSize: '0.75rem'\n          }\n        }),\n        ...(modal && {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          width: { xs: `calc( 100% - 50px)`, sm: 'auto' },\n          '& .MuiCardContent-root': {\n            overflowY: 'auto',\n            minHeight: 'auto',\n            maxHeight: `calc(100vh - 200px)`\n          }\n        }),\n        ...sx\n      }}\n    >\n      {/* card header and action */}\n      {!darkTitle && title && (\n        <CardHeader sx={headerSX} titleTypographyProps={{ variant: 'subtitle1' }} title={title} action={secondary} subheader={subheader} />\n      )}\n      {darkTitle && title && <CardHeader sx={headerSX} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\n\n      {/* content & header divider */}\n      {title && divider && <Divider />}\n\n      {/* card content */}\n      {content && <CardContent sx={contentSX}>{children}</CardContent>}\n      {!content && children}\n\n      {/* card footer - clipboard & highlighter  */}\n      {codeString && (\n        <>\n          <Divider sx={{ borderStyle: 'dashed' }} />\n          <Highlighter codeString={codeString} codeHighlight={codeHighlight} />\n        </>\n      )}\n    </Card>\n  );\n}\n\nexport default forwardRef(MainCard);\n\nMainCard.propTypes = {\n  border: PropTypes.bool,\n  boxShadow: PropTypes.bool,\n  children: PropTypes.node,\n  subheader: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  content: PropTypes.bool,\n  contentSX: PropTypes.object,\n  darkTitle: PropTypes.bool,\n  divider: PropTypes.bool,\n  elevation: PropTypes.number,\n  secondary: PropTypes.any,\n  shadow: PropTypes.string,\n  sx: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  codeHighlight: PropTypes.bool,\n  codeString: PropTypes.string,\n  modal: PropTypes.bool,\n  others: PropTypes.any\n};\n","size_bytes":3539},"src/themes/overrides/Backdrop.jsx":{"content":"// material-ui\nimport { alpha } from '@mui/material/styles';\n\n// ==============================|| OVERRIDES - BACKDROP ||============================== //\n\nexport default function Backdrop() {\n  return {\n    MuiBackdrop: {\n      styleOverrides: {\n        root: {\n          backgroundColor: alpha('#000', 0.2)\n        }\n      }\n    }\n  };\n}\n","size_bytes":340},"src/components/SecondaryAction.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Avatar from '@mui/material/Avatar';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport Link from '@mui/material/Link';\nimport Tooltip from '@mui/material/Tooltip';\n\n// ==============================|| CARD - SECONDARY ACTION ||============================== //\n\nexport default function CardSecondaryAction({ title, link, icon }) {\n  const theme = useTheme();\n\n  return (\n    <Tooltip title={title || 'Reference'} placement=\"left\">\n      <ButtonBase>\n        {!icon && (\n          <Avatar\n            component={Link}\n            href={link}\n            target=\"_blank\"\n            alt=\"MUI Logo\"\n            sx={{ width: 28, height: 28, bgcolor: 'transparent', border: '2px solid', borderColor: theme.palette.primary.light }}\n          >\n            <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <g clipPath=\"url(#clip0)\">\n                <path d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\" fill={theme.palette.primary.dark} />\n                <path\n                  d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\n                  fill={theme.palette.primary.main}\n                />\n                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary.dark} />\n                <path\n                  d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\n                  fill={theme.palette.primary.main}\n                />\n              </g>\n              <defs>\n                <clipPath id=\"clip0\">\n                  <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\n                </clipPath>\n              </defs>\n            </svg>\n          </Avatar>\n        )}\n        {icon && (\n          <Avatar\n            component={Link}\n            href={link}\n            target=\"_blank\"\n            sx={{ width: 28, height: 28, bgcolor: 'transparent', border: '2px solid', borderColor: theme.palette.primary.light }}\n          >\n            {icon}\n          </Avatar>\n        )}\n      </ButtonBase>\n    </Tooltip>\n  );\n}\n\nCardSecondaryAction.propTypes = {\n  title: PropTypes.string,\n  link: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\n};\n","size_bytes":2477},"src/sections/dashboard/default/ProjectRelease.jsx":{"content":"// material-ui\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\n\n// assets\nimport { Add, Link1 } from 'iconsax-react';\n\n// =========================|| DATA WIDGET - ADD NEW TASK ||========================= //\n\nexport default function ProjectRelease() {\n  return (\n    <MainCard title=\"Project - Able Pro    \">\n      <Grid container spacing={1.5}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n              <Typography>Release v1.2.0</Typography>\n              <Typography>72%</Typography>\n            </Stack>\n            <LinearProgress variant=\"determinate\" value={72} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            <ListItemButton sx={{ flexWrap: 'wrap', rowGap: 1 }}>\n              <ListItemIcon>\n                <Dot color=\"warning\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Horizontal Layout\" />\n              <Chip\n                label={\n                  <Typography sx={{ display: 'flex', alignItems: 'center', gap: 0.5, '& svg': { width: 12, height: 12 } }}>\n                    <Link1 />2\n                  </Typography>\n                }\n                size=\"small\"\n                sx={{ borderRadius: 1 }}\n              />\n            </ListItemButton>\n            <ListItemButton>\n              <ListItemIcon>\n                <Dot color=\"warning\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Invoice Generator\" />\n            </ListItemButton>\n            <ListItemButton>\n              <ListItemIcon>\n                <Dot />\n              </ListItemIcon>\n              <ListItemText primary=\"Package Upgrades\" />\n            </ListItemButton>\n            <ListItemButton>\n              <ListItemIcon>\n                <Dot color=\"success\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Figma Auto Layout\" />\n            </ListItemButton>\n          </List>\n        </Grid>\n        <Grid item xs={12}>\n          <Button fullWidth variant=\"contained\" startIcon={<Add />}>\n            Add task\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2742},"src/sections/forms/edit-forms/blogs/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\nimport returnImageObject from 'api/fetchData';\nimport { useEffect, useState } from 'react';\n\nconst validationSchema = yup.object({\n  titleImagePath: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath1: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath2: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath3: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath4: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstSubheadingImage: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const [initialValues, setInitialValues] = useState({\n    titleImagePath: null,\n    carouselImagePath1: null,\n    carouselImagePath2: null,\n    carouselImagePath3: null,\n    carouselImagePath4: null,\n    firstSubheadingImage: null\n  });\n\n  useEffect(() => {\n    const fetchInitialValues = async () => {\n      const titleImagePath = await returnImageObject(data.titleImagePath);\n      const carouselImagePath1 = await returnImageObject(data.carouselImagePath1);\n      const carouselImagePath2 = await returnImageObject(data.carouselImagePath2);\n      const carouselImagePath3 = await returnImageObject(data.carouselImagePath3);\n      const carouselImagePath4 = await returnImageObject(data.carouselImagePath4);\n      const firstSubheadingImage = await returnImageObject(data.firstSubheadingImage);\n\n      setInitialValues({\n        titleImagePath,\n        carouselImagePath1,\n        carouselImagePath2,\n        carouselImagePath3,\n        carouselImagePath4,\n        firstSubheadingImage\n      });\n    };\n\n    fetchInitialValues();\n  }, [data]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values) => {\n      const resolvedValues = {\n        titleImagePath: await values.titleImagePath,\n        carouselImagePath1: await values.carouselImagePath1,\n        carouselImagePath2: await values.carouselImagePath2,\n        carouselImagePath3: await values.carouselImagePath3,\n        carouselImagePath4: await values.carouselImagePath4,\n        firstSubheadingImage: await values.firstSubheadingImage\n      };\n      setData({\n        ...data,\n        ...resolvedValues\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"titleImagePath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}></Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath1\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath2\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath3\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath4\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>First subheading image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"firstSubheadingImage\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\">\n            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n              Back\n            </Button>\n            <AnimateButton>\n              <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                Next\n              </Button>\n            </AnimateButton>\n          </Stack>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":6701},"src/components/ImageDisplay.jsx":{"content":"import { convertFileToBase64 } from 'api/operation-with-files-object';\nimport { useEffect, useState } from 'react';\n\nconst ImageDisplay = ({ file }) => {\n  const [imageSrc, setImageSrc] = useState('');\n\n  useEffect(() => {\n    if (file && file instanceof File) {\n      convertFileToBase64(file)\n        .then((src) => setImageSrc(src))\n        .catch((error) => console.error('Error reading file:', error));\n    }\n  }, [file]);\n\n  return <div>{imageSrc ? <img src={imageSrc} alt=\"Review\" style={{ height: '200px' }} /> : <p>No image available</p>}</div>;\n};\n\nexport default ImageDisplay;\n","size_bytes":588},"src/pages/tables/jobs-sorting.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n// import Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\n// import makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\n// import LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { HeaderSort, SelectColumnSorting } from 'components/third-party/react-table';\nimport axiosInstance from 'api/axios-instance';\nimport { useNavigate } from 'react-router-dom';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const navigate = useNavigate();\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [sorting, setSorting] = useState([{ id: 'id', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={matchDownSM ? 'Jobs' : 'Jobs Table'}\n      content={false}\n      secondary={\n        <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1, sm: 2 }}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          {/* <CSVExport {...{ data: table.getSortedRowModel().rows.map((d) => d.original), headers, filename: 'sorting.csv' }} /> */}\n        </Stack>\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  onClick={() => navigate(`/forms/edit/jobs/${row.original.id}`)} // Handle row click navigation\n                  style={{ cursor: 'pointer' }} // Make the row look clickable\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - SORTING ||============================== //\n\nexport default function SortingTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveJobs = await axiosInstance.get('admin/jobs/list');\n        if (retrieveJobs.status === 200) {\n          setData(retrieveJobs.data);\n        } else {\n          console.error('Failed to retrieve jobs');\n        }\n      } catch (error) {\n        console.error('Error fetching jobs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'Page Name',\n        accessorKey: 'jobTitle'\n      },\n      {\n        header: 'Page ID',\n        accessorKey: 'id'\n      }\n    ],\n    []\n  );\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5978},"src/sections/components-overview/timeline/ColorsTimeline.jsx":{"content":"// material-ui\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| TIMELINE - COLOR ||============================== //\n\nexport default function ColorsTimeline() {\n  const colorTimelineCodeString = `<Timeline position=\"alternate\">\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"primary\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Eat</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"success\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Code</TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"warning\" />\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>Sleep</TimelineContent>\n  </TimelineItem>\n  <TimelineItem sx={{ minHeight: 'auto' }}>\n    <TimelineSeparator>\n      <TimelineDot variant=\"outlined\" color=\"error\" />\n    </TimelineSeparator>\n    <TimelineContent>Repeat</TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Colors\" codeString={colorTimelineCodeString}>\n      <Timeline position=\"alternate\">\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"primary\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Eat</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"success\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Code</TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"warning\" />\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>Sleep</TimelineContent>\n        </TimelineItem>\n        <TimelineItem sx={{ minHeight: 'auto' }}>\n          <TimelineSeparator>\n            <TimelineDot variant=\"outlined\" color=\"error\" />\n          </TimelineSeparator>\n          <TimelineContent>Repeat</TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":2632},"src/themes/overrides/Tab.js":{"content":"// ==============================|| OVERRIDES - TAB ||============================== //\n\nexport default function Tab(theme) {\n  return {\n    MuiTab: {\n      styleOverrides: {\n        root: {\n          minHeight: 46,\n          color: theme.palette.text.primary,\n          borderRadius: 4,\n          '&:hover': {\n            color: theme.palette.primary.main\n          },\n          '&:focus-visible': {\n            borderRadius: 4,\n            outline: `2px solid ${theme.palette.secondary.dark}`,\n            outlineOffset: -3\n          },\n          '& svg.MuiTab-iconWrapper': {\n            width: 18,\n            height: 18\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":668},"src/sections/forms/wizard/services-validation-wizard/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  title: yup.string().required('Title is required'),\n  firstIconTitle: yup.string().required('Icon title is required'),\n  firstIconDescription: yup.string().required('Icon description is required'),\n  secondIconDescription: yup.string().required('Icon description is required'),\n  secondIconTitle: yup.string().required('Icon title is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  imageTitle: yup.string().required('Principal image description is required'),\n  imageTitleDescription: yup.string().required('Principal image description is required'),\n  titleDescription: yup.string().required('Subheading is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id,\n      title: data.title,\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      firstIconTitle: data.firstIconTitle,\n      firstIconDescription: data.firstIconDescription,\n      secondIconTitle: data.secondIconTitle,\n      secondIconDescription: data.secondIconDescription,\n      imageTitle: data.imageTitle,\n      imageTitleDescription: data.imageTitleDescription,\n      titleDescription: data.titleDescription\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        id: values.id,\n        baseUrl: 'services',\n        title: values.title,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        firstIconTitle: values.firstIconTitle,\n        firstIconDescription: values.firstIconDescription,\n        secondIconTitle: values.secondIconTitle,\n        secondIconDescription: values.secondIconDescription,\n        imageTitle: values.imageTitle,\n        imageTitleDescription: values.imageTitleDescription,\n        titleDescription: values.titleDescription,\n        ...data\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Title of the page</InputLabel>\n              <TextField\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title of the page *\"\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                error={formik.touched.title && Boolean(formik.errors.title)}\n                helperText={formik.touched.title && formik.errors.title}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Subheading</InputLabel>\n              <TextField\n                id=\"titleDescription\"\n                name=\"titleDescription\"\n                multiline\n                minRows={2}\n                placeholder=\"Subheading *\"\n                value={formik.values.titleDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.titleDescription && Boolean(formik.errors.titleDescription)}\n                helperText={formik.touched.titleDescription && formik.errors.titleDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First icon title</InputLabel>\n              <TextField\n                id=\"firstIconTitle\"\n                name=\"firstIconTitle\"\n                placeholder=\"First icon title *\"\n                value={formik.values.firstIconTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.firstIconTitle && Boolean(formik.errors.firstIconTitle)}\n                helperText={formik.touched.firstIconTitle && formik.errors.firstIconTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First icon description</InputLabel>\n              <TextField\n                id=\"firstIconDescription\"\n                name=\"firstIconDescription\"\n                placeholder=\"First icon description *\"\n                multiline\n                minRows={2}\n                value={formik.values.firstIconDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.firstIconDescription && Boolean(formik.errors.firstIconDescription)}\n                helperText={formik.touched.firstIconDescription && formik.errors.firstIconDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second icon title</InputLabel>\n              <TextField\n                id=\"secondIconTitle\"\n                name=\"secondIconTitle\"\n                placeholder=\"Second icon title *\"\n                value={formik.values.secondIconTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.secondIconTitle && Boolean(formik.errors.secondIconTitle)}\n                helperText={formik.touched.secondIconTitle && formik.errors.secondIconTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second icon description</InputLabel>\n              <TextField\n                id=\"secondIconDescription\"\n                name=\"secondIconDescription\"\n                placeholder=\"Second icon description *\"\n                multiline\n                minRows={2}\n                value={formik.values.secondIconDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.secondIconDescription && Boolean(formik.errors.secondIconDescription)}\n                helperText={formik.touched.secondIconDescription && formik.errors.secondIconDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Principal image title</InputLabel>\n              <TextField\n                id=\"imageTitle\"\n                name=\"imageTitle\"\n                placeholder=\"Principal image title *\"\n                value={formik.values.imageTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.imageTitle && Boolean(formik.errors.imageTitle)}\n                helperText={formik.touched.imageTitle && formik.errors.imageTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Main image description</InputLabel>\n              <TextField\n                id=\"imageTitleDescription\"\n                name=\"imageTitleDescription\"\n                placeholder=\"Main image description *\"\n                value={formik.values.imageTitleDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.imageTitleDescription && Boolean(formik.errors.imageTitleDescription)}\n                helperText={formik.touched.imageTitleDescription && formik.errors.imageTitleDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":11034},"src/sections/forms/edit-forms/blogs/index.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function EditBlogPage() {\n  const idPage = useLocation().pathname.split('/').splice(-1).toString();\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.put('admin/edit/blogs/' + idPage, data);\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveBlogs = await axiosInstance.get('admin/edit/blogs/' + idPage);\n        if (retrieveBlogs.status === 200) {\n          console.log(retrieveBlogs);\n          setData(retrieveBlogs.data);\n        } else {\n          console.error('Failed to retrieve blog');\n        }\n      } catch (error) {\n        console.error('Error fetching blog:', error);\n      }\n    };\n\n    fetchData();\n  }, [idPage]);\n\n  return (\n    <MainCard title=\"Edit blog page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully edited a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6508},"src/sections/components-overview/dialogs/FormDialog.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport TextField from '@mui/material/TextField';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\n\n// ==============================|| DIALOG - FORM ||============================== //\n\nexport default function FormDialog() {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <Box sx={{ p: 1, py: 1.5 }}>\n          <DialogTitle>Subscribe</DialogTitle>\n          <DialogContent>\n            <DialogContentText sx={{ mb: 2 }}>\n              To subscribe to this website, please enter your email address here. We will send updates occasionally.\n            </DialogContentText>\n            <TextField id=\"name\" placeholder=\"Email Address\" type=\"email\" fullWidth variant=\"outlined\" />\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"error\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" onClick={handleClose}>\n              Subscribe\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":1657},"src/pages/components-overview/breadcrumbs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport Breadcrumb from 'components/@extended/Breadcrumbs';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { Minus } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - BREADCRUMBS ||============================== //\n\nexport default function ComponentBreadcrumb() {\n  const basicBreadcrumbsCodeString = `<Breadcrumb\n  card \n  title={false}\n/>`;\n\n  const separatorBreadcrumbsCodeString = `<Breadcrumb\n  card title={false} \n  separator={RightOutlined}\n/>`;\n\n  const titleBreadcrumbsCodeString = `<Breadcrumb\n  card\n  titleBottom={false} \n  separator={RightOutlined}\n/>`;\n\n  const bottomBreadcrumbsCodeString = `<Breadcrumb\n  card \n  separator={RightOutlined}\n/>`;\n\n  const iconsBreadcrumbsCodeString = `<Breadcrumb\n  card \n  icons \n  titleBottom={false} \n  separator={RightOutlined}\n/>`;\n\n  const dashboardBreadcrumbsCodeString = `<Breadcrumb\n  card \n  title \n  icon \n  titleBottom={false} \n  separator={RightOutlined}\n/>`;\n\n  const collapsedBreadcrumbsCodeString = `<Breadcrumb\n  card \n  title \n  titleBottom={false} \n  maxItems={2} \n  separator={RightOutlined}\n/>`;\n\n  const noCardBreadcrumbsCodeString = `<Breadcrumb title divider titleBottom={false} separator={RightOutlined} />`;\n\n  const noDividerBreadcrumbsCodeString = `<Breadcrumb\n  title \n  titleBottom={false} \n  separator={RightOutlined} \n  card={false}\n/>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Breadcrumbs\"\n        caption=\"Breadcrumbs allow users to make selections from a range of values.\"\n        directory=\"src/pages/components-overview/breadcrumbs\"\n        link=\"https://mui.com/material-ui/react-breadcrumbs/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeHighlight codeString={basicBreadcrumbsCodeString}>\n              <Breadcrumb card title={false} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Custom Separator\" codeString={separatorBreadcrumbsCodeString}>\n              <Breadcrumb card title={false} separator={Minus} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"With Title\" codeString={titleBreadcrumbsCodeString}>\n              <Breadcrumb card titleBottom={false} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"Title Bottom\" codeString={bottomBreadcrumbsCodeString}>\n              <Breadcrumb card sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"With Icons\" codeString={iconsBreadcrumbsCodeString}>\n              <Breadcrumb card icons titleBottom={false} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"Only Dashboard Icons\" codeString={dashboardBreadcrumbsCodeString}>\n              <Breadcrumb card title icon titleBottom={false} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"Collapsed Breadcrumbs\" codeString={collapsedBreadcrumbsCodeString}>\n              <Breadcrumb title maxItems={2} card titleBottom={false} sx={{ mb: '0px !important', bgcolor: 'secondary.lighter' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"No Card with Divider\" codeString={noCardBreadcrumbsCodeString}>\n              <Breadcrumb title divider titleBottom={false} sx={{ mb: '0px !important' }} />\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <MainCard title=\"No Card & No Divider\" codeString={noDividerBreadcrumbsCodeString}>\n              <Breadcrumb title titleBottom={false} sx={{ mb: '0px !important' }} />\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":4613},"src/sections/apps/profiles/account/TabPassword.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputAdornment from '@mui/material/InputAdornment';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport { openSnackbar } from 'api/snackbar';\nimport { isNumber, isLowercaseChar, isUppercaseChar, isSpecialChar, minLength } from 'utils/password-validation';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// assets\nimport { Eye, EyeSlash, Minus, TickCircle } from 'iconsax-react';\n\n// ==============================|| ACCOUNT PROFILE - PASSWORD CHANGE ||============================== //\n\nexport default function TabPassword() {\n  const [showOldPassword, setShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleClickShowOldPassword = () => {\n    setShowOldPassword(!showOldPassword);\n  };\n  const handleClickShowNewPassword = () => {\n    setShowNewPassword(!showNewPassword);\n  };\n  const handleClickShowConfirmPassword = () => {\n    setShowConfirmPassword(!showConfirmPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  return (\n    <MainCard title=\"Change Password\">\n      <Formik\n        initialValues={{\n          old: '',\n          password: '',\n          confirm: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          old: Yup.string().required('Old Password is required'),\n          password: Yup.string()\n            .required('New Password is required')\n            .matches(\n              /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\n              'Password must contain at least 8 characters, one uppercase, one number and one special case character'\n            ),\n          confirm: Yup.string()\n            .required('Confirm Password is required')\n            .test('confirm', `Passwords don't match.`, (confirm, yup) => yup.parent.password === confirm)\n        })}\n        onSubmit={async (values, { resetForm, setErrors, setStatus, setSubmitting }) => {\n          try {\n            openSnackbar({\n              open: true,\n              message: 'Password changed successfully.',\n              variant: 'alert',\n              alert: { color: 'success' }\n            });\n\n            resetForm();\n            setStatus({ success: false });\n            setSubmitting(false);\n          } catch (err) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item container spacing={3} xs={12} sm={6}>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-old\">Old Password</InputLabel>\n                    <OutlinedInput\n                      id=\"password-old\"\n                      placeholder=\"Enter Old Password\"\n                      type={showOldPassword ? 'text' : 'password'}\n                      value={values.old}\n                      name=\"old\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowOldPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showOldPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-old\"\n                    />\n                  </Stack>\n                  {touched.old && errors.old && (\n                    <FormHelperText error id=\"password-old-helper\">\n                      {errors.old}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-password\">New Password</InputLabel>\n                    <OutlinedInput\n                      id=\"password-password\"\n                      placeholder=\"Enter New Password\"\n                      type={showNewPassword ? 'text' : 'password'}\n                      value={values.password}\n                      name=\"password\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowNewPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showNewPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-password\"\n                    />\n                  </Stack>\n                  {touched.password && errors.password && (\n                    <FormHelperText error id=\"password-password-helper\">\n                      {errors.password}\n                    </FormHelperText>\n                  )}\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack spacing={1}>\n                    <InputLabel htmlFor=\"password-confirm\">Confirm Password</InputLabel>\n                    <OutlinedInput\n                      id=\"password-confirm\"\n                      placeholder=\"Enter Confirm Password\"\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      value={values.confirm}\n                      name=\"confirm\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowConfirmPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                            size=\"large\"\n                            color=\"secondary\"\n                          >\n                            {showConfirmPassword ? <Eye /> : <EyeSlash />}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      autoComplete=\"password-confirm\"\n                    />\n                  </Stack>\n                  {touched.confirm && errors.confirm && (\n                    <FormHelperText error id=\"password-confirm-helper\">\n                      {errors.confirm}\n                    </FormHelperText>\n                  )}\n                </Grid>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box sx={{ p: { xs: 0, sm: 2, md: 4, lg: 5 } }}>\n                  <Typography variant=\"h5\">New Password must contain:</Typography>\n                  <List sx={{ p: 0, mt: 1 }}>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: minLength(values.password) ? 'success.main' : 'inherit' }}>\n                        {minLength(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 8 characters\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isLowercaseChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isLowercaseChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 lower letter (a-z)\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isUppercaseChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isUppercaseChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 uppercase letter (A-Z)\" />\n                    </ListItem>\n                    <ListItem divider>\n                      <ListItemIcon sx={{ color: isNumber(values.password) ? 'success.main' : 'inherit' }}>\n                        {isNumber(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 number (0-9)\" />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemIcon sx={{ color: isSpecialChar(values.password) ? 'success.main' : 'inherit' }}>\n                        {isSpecialChar(values.password) ? <TickCircle /> : <Minus />}\n                      </ListItemIcon>\n                      <ListItemText primary=\"At least 1 special characters\" />\n                    </ListItem>\n                  </List>\n                </Box>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n                  <Button variant=\"outlined\" color=\"secondary\">\n                    Cancel\n                  </Button>\n                  <Button disabled={isSubmitting || Object.keys(errors).length !== 0} type=\"submit\" variant=\"contained\">\n                    Update Profile\n                  </Button>\n                </Stack>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </MainCard>\n  );\n}\n","size_bytes":10977},"src/sections/forms/wizard/works-validation-wizard/ImageForm.jsx":{"content":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik, FieldArray, ErrorMessage, FormikProvider } from 'formik';\nimport * as yup from 'yup';\nimport { Box, Button, Grid, InputLabel, Stack, Typography, TextField, FormHelperText } from '@mui/material';\n\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\n\nconst validationSchema = yup.object({\n  titleImagePath: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  imageLabelSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  reviewAuthorImageSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  secondColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  thirdColumnProjects: yup.array().of(\n    yup.object({\n      imagePath: yup\n        .mixed()\n        .required('Image is required')\n        .test('fileType', 'Only image files are allowed', (value) => {\n          return value && value.type && value.type.startsWith('image/');\n        }),\n      title: yup.string().required('Text is required')\n    })\n  ),\n  fourthColumnProjects: yup\n    .array()\n    .of(\n      yup.object({\n        imagePath: yup\n          .mixed()\n          .required('Image is required')\n          .test('fileType', 'Only image files are allowed', (value) => {\n            return value && value.type && value.type.startsWith('image/');\n          }),\n        title: yup.string().required('Text is required')\n      })\n    )\n    .min(1, 'At least one object is required')\n});\n\nexport default function ImageForm({ data, setData, handleNext, handleBack, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      titleImagePath: data.titleImagePath || undefined,\n      imageLabelSrc: data.imageLabelSrc || undefined,\n      reviewAuthorImageSrc: data.review.imagePath ?? undefined,\n      firstColumnProjects: data.firstColumnProjects ?? [{ imagePath: undefined, title: '' }],\n      secondColumnProjects: data.secondColumnProjects ?? [{ imagePath: undefined, title: '' }],\n      thirdColumnProjects: data.thirdColumnProjects ?? [{ imagePath: undefined, title: '' }],\n      fourthColumnProjects: data.fourthColumnProjects ?? [{ imagePath: undefined, title: '' }]\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        titleImagePath: values.titleImagePath,\n        imageLabelSrc: values.imageLabelSrc,\n        review: {\n          ...data.review,\n          imageSrc: values.reviewAuthorImageSrc\n        },\n        firstColumnProjects: values.firstColumnProjects,\n        secondColumnProjects: values.secondColumnProjects,\n        thirdColumnProjects: values.thirdColumnProjects,\n        fourthColumnProjects: values.fourthColumnProjects\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"titleImagePath\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label Image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"imageLabelSrc\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Review author image</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"reviewAuthorImageSrc\" />\n            </Stack>\n          </Grid>\n\n          <FormikProvider value={formik}>\n            {/* Parent container for first column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"firstColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.firstColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 1st column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`firstColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`firstColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`firstColumnProjects[${index}].title`}\n                            name={`firstColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            mul\n                            value={formik.values.firstColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.firstColumnProjects?.[index]?.text && Boolean(formik.errors.firstColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.firstColumnProjects?.[index]?.text && formik.errors.firstColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.firstColumnProjects &&\n                          //     formik.errors.firstColumnProjects[index] &&\n                          //     formik.errors.firstColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          md={2}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.firstColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.firstColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.firstColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.firstColumnProjects.length === 1 ? theme.palette.action.disabled : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.firstColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for second column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"secondColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.secondColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 2nd column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`secondColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`secondColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`secondColumnProjects[${index}].title`}\n                            name={`secondColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.secondColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.secondColumnProjects?.[index]?.text &&\n                              Boolean(formik.errors.secondColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.secondColumnProjects?.[index]?.text && formik.errors.secondColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          md={2}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.secondColumnProjects &&\n                          //     formik.errors.secondColumnProjects[index] &&\n                          //     formik.errors.secondColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.secondColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.secondColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.secondColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.secondColumnProjects.length === 1\n                                    ? theme.palette.action.disabled\n                                    : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.secondColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for third column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"thirdColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.thirdColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 3rd column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`thirdColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`thirdColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`thirdColumnProjects[${index}].title`}\n                            name={`thirdColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.thirdColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.thirdColumnProjects?.[index]?.text && Boolean(formik.errors.thirdColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.thirdColumnProjects?.[index]?.text && formik.errors.thirdColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          md={2}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.thirdColumnProjects &&\n                          //     formik.errors.thirdColumnProjects[index] &&\n                          //     formik.errors.thirdColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.thirdColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.thirdColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.thirdColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.thirdColumnProjects.length === 1 ? theme.palette.action.disabled : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.thirdColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n\n            {/* Parent container for fourth column */}\n            <Box sx={{ ml: 3, mt: 2 }}>\n              <FieldArray\n                name=\"fourthColumnProjects\"\n                render={(arrayHelpers) => (\n                  <>\n                    {formik.values.fourthColumnProjects.map((project, index) => (\n                      <Grid container spacing={2} key={index} alignItems=\"center\" justifyContent=\"flex-start\">\n                        {/* Project Image Upload */}\n                        <Grid item xs={12} md={5}>\n                          <Stack spacing={1}>\n                            <InputLabel>Project Image for 4th column</InputLabel>\n                            <DragDropFileUpload formik={formik} name={`fourthColumnProjects[${index}].imagePath`} />\n                            <ErrorMessage\n                              name={`fourthColumnProjects[${index}].imagePath`}\n                              sx={{ color: 'error.main', mt: 1 }}\n                              component={FormHelperText}\n                            />\n                          </Stack>\n                        </Grid>\n\n                        {/* Project Text Input */}\n                        <Grid item xs={12} md={5}>\n                          <TextField\n                            id={`fourthColumnProjects[${index}].title`}\n                            name={`fourthColumnProjects[${index}].title`}\n                            placeholder=\"Text\"\n                            value={formik.values.fourthColumnProjects[index].text}\n                            onChange={formik.handleChange}\n                            error={\n                              formik.touched.fourthColumnProjects?.[index]?.text &&\n                              Boolean(formik.errors.fourthColumnProjects?.[index]?.text)\n                            }\n                            helperText={\n                              formik.touched.fourthColumnProjects?.[index]?.text && formik.errors.fourthColumnProjects?.[index]?.text\n                            }\n                            fullWidth\n                          />\n                        </Grid>\n\n                        {/* Remove Button */}\n                        <Grid\n                          item\n                          xs={12}\n                          // sx={{\n                          //   mb: () =>\n                          //     formik.errors.fourthColumnProjects &&\n                          //     formik.errors.fourthColumnProjects[index] &&\n                          //     formik.errors.fourthColumnProjects[index].text\n                          //       ? 4\n                          //       : 0\n                          // }}\n                          md={2}\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          <Button\n                            type=\"button\"\n                            disabled={formik.values.fourthColumnProjects.length === 1}\n                            onClick={() => arrayHelpers.remove(index)}\n                            variant=\"outlined\"\n                            color=\"error\"\n                            sx={{\n                              backgroundColor: (theme) =>\n                                formik.values.fourthColumnProjects.length === 1 ? theme.palette.action.disabled : 'transparent', // Default background\n                              color: (theme) =>\n                                formik.values.fourthColumnProjects.length === 1 ? theme.palette.text.disabled : theme.palette.error.main, // Default text color\n                              '&:hover': {\n                                backgroundColor: (theme) =>\n                                  formik.values.fourthColumnProjects.length === 1\n                                    ? theme.palette.action.disabled\n                                    : theme.palette.error.main, // Keep disabled color on hover\n                                color: (theme) => (formik.values.fourthColumnProjects.length === 1 ? theme.palette.text.disabled : 'white') // Change text color on hover if enabled\n                              },\n                              transition: 'background-color 0.3s, color 0.3s'\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    {/* Add Project Button */}\n                    <Button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.push({ imagePath: undefined, text: '' })}\n                      variant=\"outlined\"\n                      sx={{ mt: 2 }}\n                    >\n                      Add Project\n                    </Button>\n                  </>\n                )}\n              />\n            </Box>\n          </FormikProvider>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\">\n            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n              Back\n            </Button>\n            <AnimateButton>\n              <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                Next\n              </Button>\n            </AnimateButton>\n          </Stack>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  handleBack: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":24960},"src/sections/components-overview/autocomplete/CreatableAutocomplete.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport dataCreatable from 'data/movies';\n\nconst data = dataCreatable;\n\nconst filter = createFilterOptions();\n\n// ==============================|| AUTOCOMPLETE - CREATABLE ||============================== //\n\nexport default function CreatableAutocomplete() {\n  const [value, setValue] = useState(null);\n\n  const createAutocompleteCodeString = `<Autocomplete\n  fullWidth\n  value={value}\n  onChange={(event, newValue) => {\n    if (typeof newValue === 'string') {\n      setValue({\n        label: newValue\n      });\n    } else if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n    } else {\n      setValue(newValue);\n    }\n  }}\n  filterOptions={(options, params) => {\n    const filtered = filter(options, params);\n\n    const { inputValue } = params;\n\n    const isExisting = options.some((option) => inputValue === option.label);\n    if (inputValue !== '' && !isExisting) {\n      filtered.push({\n        inputValue,\n        label: 'Add {inputValue}'\n      });\n    }\n\n    return filtered;\n  }}\n  selectOnFocus\n  clearOnBlur\n  handleHomeEndKeys\n  id=\"free-solo-with-text-demo\"\n  options={data}\n  getOptionLabel={(option) => {\n    // Value selected with enter, right from the input\n    if (typeof option === 'string') {\n      return option;\n    }\n    // Add \"xxx\" option created dynamically\n    if (option.inputValue) {\n      return option.inputValue;\n    }\n    // Regular option\n    return option.label;\n  }}\n  renderOption={(props, option) => <li {...props}>{option.label}</li>}\n  freeSolo\n  renderInput={(params) => <TextField {...params} placeholder=\"Free solo with text demo\" />}\n/>`;\n\n  return (\n    <MainCard title=\"Creatable\" codeString={createAutocompleteCodeString}>\n      <Autocomplete\n        fullWidth\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            setValue({\n              label: newValue\n            });\n          } else if (newValue && newValue.inputValue) {\n            setValue({\n              label: newValue.inputValue\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          const { inputValue } = params;\n\n          const isExisting = options.some((option) => inputValue === option.label);\n          if (inputValue !== '' && !isExisting) {\n            filtered.push({\n              inputValue,\n              label: `Add \"${inputValue}\"`\n            });\n          }\n\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        id=\"free-solo-with-text-demo\"\n        options={data}\n        getOptionLabel={(option) => {\n          // value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n\n          // add \"xxx\" option created dynamically\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n\n          // regular option\n          return option.label;\n        }}\n        renderOption={(props, option) => <li {...props}>{option.label}</li>}\n        freeSolo\n        renderInput={(params) => <TextField {...params} placeholder=\"Free solo with text demo\" />}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":3569},"src/themes/overrides/InputBase.js":{"content":"// ==============================|| OVERRIDES - INPUT BASE ||============================== //\n\nexport default function InputBase() {\n  return {\n    MuiInputBase: {\n      styleOverrides: {\n        sizeSmall: {\n          fontSize: '0.75rem'\n        }\n      }\n    }\n  };\n}\n","size_bytes":271},"src/sections/apps/invoice/export-pdf/index.jsx":{"content":"import PropTypes from 'prop-types';\n// third-party\nimport { Page, View, Document, StyleSheet } from '@react-pdf/renderer';\n\n// project-imports\nimport Header from './Header';\nimport Content from './Content';\n\nconst styles = StyleSheet.create({\n  page: { padding: 30 },\n  container: { flex: 1, flexDirection: 'row', '@media max-width: 400': { flexDirection: 'column' } }\n});\n\n// ==============================|| INVOICE EXPORT  ||============================== //\n\nexport default function ExportPDFView({ list }) {\n  let title = list?.invoiceId || list?.invoice_id;\n  let customer_name = list?.customer_name || list?.from?.name || list?.customerInfo?.name;\n\n  return (\n    <Document title={`${title} ${customer_name}`}>\n      <Page size=\"A4\" style={styles.page}>\n        <Header list={list} />\n        <View style={styles.container}>\n          <Content list={list} />\n        </View>\n      </Page>\n    </Document>\n  );\n}\n\nExportPDFView.propTypes = { list: PropTypes.any };\n","size_bytes":971},"src/sections/landing/Partner.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\n// third party\nimport { motion } from 'framer-motion';\n// project-imports\nimport FadeInWhenVisible from './Animation';\n\nimport client1 from 'assets/images/landing/client-eagames.svg';\nimport client2 from 'assets/images/landing/client-vodafone.svg';\nimport client3 from 'assets/images/landing/client-crystal-1.svg';\nimport client4 from 'assets/images/landing/client-haswent-2.svg';\nimport client5 from 'assets/images/landing/client-haxter-3.svg';\nimport client6 from 'assets/images/landing/client-montecito-4.svg';\nimport client7 from 'assets/images/landing/client-slingshot.svg';\nimport client8 from 'assets/images/landing/client-totalstudio-5.svg';\n\n// ==============================|| LANDING - PartnerPage ||============================== //\nexport default function PartnerPage() {\n  const items = [\n    { image: client1 },\n    { image: client2 },\n    { image: client3 },\n    { image: client4 },\n    { image: client5 },\n    { image: client6 },\n    { image: client7 },\n    { image: client8 }\n  ];\n  return (\n    <Container>\n      <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 15, xs: 2.5 }, mb: { md: 10, xs: 2.5 } }}>\n        <Grid item xs={12}>\n          <Grid container spacing={2} justifyContent=\"center\" sx={{ textAlign: 'center', marginBottom: 3 }}>\n            <Grid item xs={12}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.2\n                }}\n              >\n                <Typography variant=\"h2\">Trusted By</Typography>\n              </motion.div>\n            </Grid>\n            <Grid item xs={12} md={7}>\n              <motion.div\n                initial={{ opacity: 0, translateY: 550 }}\n                animate={{ opacity: 1, translateY: 0 }}\n                transition={{\n                  type: 'spring',\n                  stiffness: 150,\n                  damping: 30,\n                  delay: 0.4\n                }}\n              >\n                <Typography>From Startups to Fortune 500 companies using our Template for their product.</Typography>\n              </motion.div>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\">\n            {items.map((item, index) => (\n              <Grid item key={index}>\n                <FadeInWhenVisible>\n                  <Box\n                    sx={{\n                      '& img': {\n                        transition: 'all 0.08s cubic-bezier(0.37, 0.24, 0.53, 0.99)',\n                        filter: 'grayscale(1)',\n                        opacity: 0.4,\n                        cursor: 'pointer'\n                      },\n                      '&:hover img': { filter: 'grayscale(0)', opacity: 1 }\n                    }}\n                  >\n                    <CardMedia component=\"img\" image={item.image} sx={{ width: 'auto' }} />\n                  </Box>\n                </FadeInWhenVisible>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","size_bytes":3522},"src/pages/tables/team-sorting.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\n// import Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { getCoreRowModel, getSortedRowModel, flexRender, useReactTable } from '@tanstack/react-table';\n\n// project import\n// import makeData from 'data/react-table';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\n// import LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { HeaderSort, SelectColumnSorting } from 'components/third-party/react-table';\nimport axiosInstance from 'api/axios-instance';\nimport { useNavigate } from 'react-router-dom';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const navigate = useNavigate();\n  const matchDownSM = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [sorting, setSorting] = useState([{ id: 'id', desc: false }]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: { sorting },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard\n      title={matchDownSM ? 'Team' : 'Team Table'}\n      content={false}\n      secondary={\n        <Stack direction=\"row\" alignItems=\"center\" spacing={{ xs: 1, sm: 2 }}>\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          {/* <CSVExport {...{ data: table.getSortedRowModel().rows.map((d) => d.original), headers, filename: 'sorting.csv' }} /> */}\n        </Stack>\n      }\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => {\n                    if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                      Object.assign(header.column.columnDef.meta, {\n                        className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                      });\n                    }\n\n                    return (\n                      <TableCell\n                        key={header.id}\n                        {...header.column.columnDef.meta}\n                        onClick={header.column.getToggleSortingHandler()}\n                        {...(header.column.getCanSort() &&\n                          header.column.columnDef.meta === undefined && {\n                            className: 'cursor-pointer prevent-select'\n                          })}\n                      >\n                        {header.isPlaceholder ? null : (\n                          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                            <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                            {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                          </Stack>\n                        )}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  onClick={() => navigate(`/forms/edit/team/${row.original.id}`)} // Handle row click navigation\n                  style={{ cursor: 'pointer' }} // Make the row look clickable\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - SORTING ||============================== //\n\nexport default function SortingTable() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveTeam = await axiosInstance.get('admin/team/list');\n        if (retrieveTeam.status === 200) {\n          setData(retrieveTeam.data);\n        } else {\n          console.error('Failed to retrieve team');\n        }\n      } catch (error) {\n        console.error('Error fetching team:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'Full Name',\n        accessorKey: 'fullName'\n      }\n    ],\n    []\n  );\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nSortingTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5908},"src/sections/forms/wizard/works-validation-wizard/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\nimport { List, ListItem, ListItemText } from '@mui/material';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label image\n            </Typography>\n            <ImageDisplay file={data.imageLabelSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Work title image\n            </Typography>\n            <ImageDisplay file={data.titleImagePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Work tags\n            </Typography>\n            <List>\n              {data.workTags.map((tag, index) => (\n                <ListItem key={index}>\n                  <ListItemText primary={tag} />\n                </ListItem>\n              ))}\n            </List>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title of page\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.title}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.titleParagraph}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Visit website link\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.visitWebsiteLink}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Call to action title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.callToActionTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Call to action paragraph\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.callToActionParagraph}\n            </Typography>\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First column\n            </Typography>\n            {data.firstColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second column\n            </Typography>\n            {data.secondColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Third column\n            </Typography>\n            {data.firstColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\">{project.text}</Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Fourth column\n            </Typography>\n            {data.fourthColumnProjects.map((project, index) => (\n              <Stack key={index} spacing={1}>\n                <Typography variant=\"body\" gutterBottom>\n                  {project.text}\n                </Typography>\n                <ImageDisplay file={project.imagePath} />\n              </Stack>\n            ))}\n          </Stack>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review text\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.text}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review author\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.author}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review position\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.review.position}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Review portrait image\n            </Typography>\n            <ImageDisplay file={data.review.imageSrc} />\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":7305},"src/sections/components-overview/ComponentSkeleton.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Skeleton from '@mui/material/Skeleton';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\n\n// ===============================|| COMPONENT - SKELETON ||=============================== //\n\nexport default function ComponentSkeleton({ children }) {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    const skeletonCard = (\n      <MainCard\n        title={<Skeleton sx={{ width: { xs: 120, md: 180 } }} />}\n        secondary={<Skeleton animation=\"wave\" variant=\"circular\" width={24} height={24} />}\n      >\n        <Stack spacing={1}>\n          <Skeleton />\n          <Skeleton sx={{ height: 64 }} animation=\"wave\" variant=\"rectangular\" />\n          <Skeleton />\n          <Skeleton />\n        </Stack>\n      </MainCard>\n    );\n\n    return (\n      <>\n        <Box sx={{ pl: { xs: 3, xl: 8 } }}>\n          <Stack spacing={1.25}>\n            <Typography variant=\"h2\">\n              <Skeleton />\n            </Typography>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              <Skeleton />\n            </Typography>\n          </Stack>\n          <Grid container spacing={0.75} sx={{ mt: 1.75 }}>\n            <Grid item xs={12}>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                <Stack direction=\"row\" spacing={1}>\n                  <Skeleton animation=\"wave\" variant=\"circular\" width={16} height={16} />\n                  <Skeleton sx={{ width: { xs: 250, md: 450 } }} />\n                </Stack>\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                <Stack direction=\"row\" spacing={1}>\n                  <Skeleton animation=\"wave\" variant=\"circular\" width={16} height={16} />\n                  <Skeleton sx={{ width: { xs: 250, md: 450 } }} />\n                </Stack>\n              </Typography>\n            </Grid>\n          </Grid>\n        </Box>\n        <ComponentWrapper>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              {skeletonCard}\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {skeletonCard}\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {skeletonCard}\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {skeletonCard}\n            </Grid>\n          </Grid>\n        </ComponentWrapper>\n      </>\n    );\n  }\n\n  return <>{children}</>;\n}\n\nComponentSkeleton.propTypes = { children: PropTypes.node };\n","size_bytes":2917},"src/pages/components-overview/modal.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport ServerModal from 'sections/components-overview/modal/ServerModal';\nimport BasicModal from 'sections/components-overview/modal/BasicModal';\nimport NestedModal from 'sections/components-overview/modal/NestedModal';\nimport TransitionsModal from 'sections/components-overview/modal/TransitionsModal';\n\n// ==============================|| COMPONENTS - MODAL ||============================== //\n\nexport default function ComponentModal() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Modal\"\n        caption=\"The modal component provides a solid foundation for creating dialogs, popovers, lightboxes, or whatever else.\"\n        directory=\"src/pages/components-overview/modal\"\n        link=\"https://mui.com/material-ui/react-modal\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <ServerModal />\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <BasicModal />\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <NestedModal />\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <TransitionsModal />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1550},"src/sections/maps/MarkersPopups.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, memo } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport Map from 'react-map-gl';\n\n// project-import\nimport MapControl from 'components/third-party/map/MapControl';\nimport MapMarker from 'components/third-party/map/MapMarker';\nimport MapPopup from 'components/third-party/map/MapPopup';\n\n// ==============================|| MAPBOX - MARKERS AND POPUP ||============================== //\n\nfunction MarkersPopups({ data, ...other }) {\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 21.2335611,\n        longitude: 72.8636084,\n        zoom: 2\n      }}\n      {...other}\n    >\n      <MapControl />\n      {data.map((city, index) => (\n        <MapMarker\n          key={`marker-${index}`}\n          latitude={city.latlng[0]}\n          longitude={city.latlng[1]}\n          onClick={(event) => {\n            event.originalEvent.stopPropagation();\n            setPopupInfo(city);\n          }}\n        />\n      ))}\n\n      {popupInfo && (\n        <MapPopup latitude={popupInfo.latlng[0]} longitude={popupInfo.latlng[1]} onClose={() => setPopupInfo(null)}>\n          <Box sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>\n            <Box\n              sx={{\n                height: 18,\n                minWidth: 28,\n                mr: 1,\n                borderRadius: 2,\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundImage: `url(https://cdn.staticaly.com/gh/hjnilsson/country-flags/master/svg/${popupInfo.country_code.toLowerCase()}.svg)`\n              }}\n            />\n            <Typography variant=\"subtitle2\">{popupInfo.name}</Typography>\n          </Box>\n          <Stack spacing={0.5}>\n            <Typography variant=\"caption\">Timezones: {popupInfo.timezones}</Typography>\n            <Typography variant=\"caption\">Lat: {popupInfo.latlng[0]}</Typography>\n            <Typography variant=\"caption\">Long: {popupInfo.latlng[1]}</Typography>\n          </Stack>\n        </MapPopup>\n      )}\n    </Map>\n  );\n}\n\nexport default memo(MarkersPopups);\n\nMarkersPopups.propTypes = { data: PropTypes.array, other: PropTypes.any };\n","size_bytes":2389},"src/pages/apps/e-commerce/products-list.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState, Fragment } from 'react';\nimport { useLoaderData, useNavigate } from 'react-router-dom';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Tooltip from '@mui/material/Tooltip';\nimport Typography from '@mui/material/Typography';\nimport capitalize from '@mui/utils/capitalize';\n\n// third-party\nimport { NumericFormat } from 'react-number-format';\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  getPaginationRowModel,\n  getFilteredRowModel,\n  getExpandedRowModel,\n  useReactTable\n} from '@tanstack/react-table';\nimport { rankItem } from '@tanstack/match-sorter-utils';\n\n// project-import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport ProductView from 'sections/apps/e-commerce/product-list/ProductView';\nimport {\n  DebouncedInput,\n  HeaderSort,\n  IndeterminateCheckbox,\n  RowSelection,\n  SelectColumnSorting,\n  TablePagination\n} from 'components/third-party/react-table';\n\nimport { APP_DEFAULT_PATH } from 'config';\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { Add, Edit, Eye, Trash } from 'iconsax-react';\n\nexport const fuzzyFilter = (row, columnId, value, addMeta) => {\n  // rank the item\n  const itemRank = rankItem(row.getValue(columnId), value);\n\n  // store the ranking info\n  addMeta(itemRank);\n\n  // return if the item should be filtered in/out\n  return itemRank.passed;\n};\n\n// ==============================|| REACT TABLE - LIST ||============================== //\n\nfunction ReactTable({ data, columns }) {\n  const theme = useTheme();\n\n  const [sorting, setSorting] = useState([\n    {\n      id: 'name',\n      desc: false\n    }\n  ]);\n  const [rowSelection, setRowSelection] = useState({});\n  const [globalFilter, setGlobalFilter] = useState('');\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      rowSelection,\n      globalFilter\n    },\n    enableRowSelection: true,\n    onSortingChange: setSorting,\n    onRowSelectionChange: setRowSelection,\n    onGlobalFilterChange: setGlobalFilter,\n    getRowCanExpand: () => true,\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    globalFilterFn: fuzzyFilter,\n    debugTable: true\n  });\n\n  const backColor = alpha(theme.palette.primary.lighter, 0.1);\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  const history = useNavigate();\n\n  const handleAddProduct = () => {\n    history(`/apps/e-commerce/add-new-product`);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\" justifyContent=\"space-between\" sx={{ p: 3 }}>\n        <DebouncedInput\n          value={globalFilter ?? ''}\n          onFilterChange={(value) => setGlobalFilter(String(value))}\n          placeholder={`Search ${data.length} records...`}\n        />\n\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          <SelectColumnSorting {...{ getState: table.getState, getAllColumns: table.getAllColumns, setSorting }} />\n          <Button variant=\"contained\" startIcon={<Add />} onClick={handleAddProduct} size=\"large\">\n            Add Product\n          </Button>\n        </Stack>\n      </Stack>\n      <ScrollX>\n        <Stack>\n          <RowSelection selected={Object.keys(rowSelection).length} />\n          <TableContainer>\n            <Table>\n              <TableHead>\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                      if (header.column.columnDef.meta !== undefined && header.column.getCanSort()) {\n                        Object.assign(header.column.columnDef.meta, {\n                          className: header.column.columnDef.meta.className + ' cursor-pointer prevent-select'\n                        });\n                      }\n\n                      return (\n                        <TableCell\n                          key={header.id}\n                          {...header.column.columnDef.meta}\n                          onClick={header.column.getToggleSortingHandler()}\n                          {...(header.column.getCanSort() &&\n                            header.column.columnDef.meta === undefined && {\n                              className: 'cursor-pointer prevent-select'\n                            })}\n                        >\n                          {header.isPlaceholder ? null : (\n                            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                              <Box>{flexRender(header.column.columnDef.header, header.getContext())}</Box>\n                              {header.column.getCanSort() && <HeaderSort column={header.column} />}\n                            </Stack>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                ))}\n              </TableHead>\n              <TableBody>\n                {table.getRowModel().rows.map((row) => (\n                  <Fragment key={row.id}>\n                    <TableRow>\n                      {row.getVisibleCells().map((cell) => (\n                        <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                    {row.getIsExpanded() && (\n                      <TableRow sx={{ '&:hover': { bgcolor: `${backColor} !important` } }}>\n                        <TableCell colSpan={row.getVisibleCells().length}>\n                          <ProductView data={row.original} />\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </Fragment>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <>\n            <Divider />\n            <Box sx={{ p: 2 }}>\n              <TablePagination\n                {...{\n                  setPageSize: table.setPageSize,\n                  setPageIndex: table.setPageIndex,\n                  getState: table.getState,\n                  getPageCount: table.getPageCount,\n                  initialPageSize: 10\n                }}\n              />\n            </Box>\n          </>\n        </Stack>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| PRODUCT LIST ||============================== //\n\nexport default function ProductList() {\n  const products = useLoaderData();\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'Row Selection',\n        header: ({ table }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n              onChange: table.getToggleAllRowsSelectedHandler()\n            }}\n          />\n        ),\n        cell: ({ row }) => (\n          <IndeterminateCheckbox\n            {...{\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n              onChange: row.getToggleSelectedHandler()\n            }}\n          />\n        )\n      },\n      {\n        header: '#',\n        accessorKey: 'id',\n        meta: {\n          className: 'cell-center'\n        }\n      },\n      {\n        header: 'Product Detail',\n        accessorKey: 'name',\n        cell: ({ row, getValue }) => (\n          <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n            <Avatar\n              variant=\"rounded\"\n              alt={getValue()}\n              color=\"secondary\"\n              size=\"sm\"\n              src={getImageUrl(`thumbs/${!row.original.image ? 'prod-11.png' : row.original.image}`, ImagePath.ECOMMERCE)}\n            />\n            <Stack spacing={0}>\n              <Typography variant=\"subtitle1\">{getValue()}</Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {row.original.description}\n              </Typography>\n            </Stack>\n          </Stack>\n        )\n      },\n      {\n        header: 'Categories',\n        accessorKey: 'categories',\n        cell: ({ row }) => {\n          return row.original.categories ? (\n            <Stack direction=\"row\" spacing={0.25}>\n              {row.original?.categories.map((item, index) => (\n                <Typography variant=\"h6\" key={index} sx={{ textTransform: 'capitalize' }}>\n                  {capitalize(item)}\n                  {row.original.categories.length > index + 1 ? ',' : ''}\n                </Typography>\n              ))}\n            </Stack>\n          ) : (\n            <Typography variant=\"h6\">-</Typography>\n          );\n        }\n      },\n      {\n        header: 'Price',\n        accessorKey: 'offerPrice',\n        cell: ({ getValue }) => <NumericFormat value={getValue()} displayType=\"text\" thousandSeparator prefix=\"$\" />,\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Qty',\n        accessorKey: 'quantity',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'isStock',\n        cell: ({ getValue }) => (\n          <Chip color={getValue() ? 'success' : 'error'} label={getValue() ? 'In Stock' : 'Out of Stock'} size=\"small\" variant=\"light\" />\n        )\n      },\n      {\n        header: 'Actions',\n        meta: {\n          className: 'cell-center'\n        },\n        cell: ({ row }) => {\n          const collapseIcon = row.getCanExpand() && row.getIsExpanded() ? <Add style={{ transform: 'rotate(45deg)' }} /> : <Eye />;\n          return (\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={0}>\n              <Tooltip title=\"View\">\n                <IconButton color={row.getIsExpanded() ? 'error' : 'secondary'} onClick={row.getToggleExpandedHandler()}>\n                  {collapseIcon}\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Edit\">\n                <IconButton\n                  color=\"primary\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                >\n                  <Edit />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Delete\">\n                <IconButton\n                  color=\"error\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                >\n                  <Trash />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          );\n        }\n      }\n    ],\n    []\n  );\n  let breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Product List' }];\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"Product List\" links={breadcrumbLinks} />\n      <ReactTable {...{ data: products, columns }} />\n    </>\n  );\n}\n\nReactTable.propTypes = { data: PropTypes.array, columns: PropTypes.array };\n","size_bytes":12150},"src/sections/components-overview/autocomplete/AsynchronousAutocomplete.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CircularProgress from '@mui/material/CircularProgress';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// ==============================|| AUTOCOMPLETE - ASYNCHRONOUS ||============================== //\n\nexport default function AsynchronousAutocomplete() {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const loading = open && options.length === 0;\n\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    async () => {\n      await sleep(1e3);\n      if (active) {\n        setOptions([...topFilms]);\n      }\n    };\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  const asyancAutocompleteCodeString = `<Autocomplete\n  id=\"asynchronous-demo\"\n  sx={{ width: 300 }}\n  open={open}\n  onOpen={() => {\n    setOpen(true);\n  }}\n  onClose={() => {\n    setOpen(false);\n  }}\n  isOptionEqualToValue={(option, value) => option.title === value.title}\n  getOptionLabel={(option) => option.title}\n  options={options}\n  loading={loading}\n  renderInput={(params) => (\n    <TextField\n      {...params}\n      placeholder=\"Asynchronous\"\n      InputProps={{\n        ...params.InputProps,\n        endAdornment: (\n          <>\n            {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n            {params.InputProps.endAdornment}\n          </>\n        )\n      }}\n    />\n  )}\n/>`;\n\n  return (\n    <MainCard title=\"Asynchronous\" codeString={asyancAutocompleteCodeString}>\n      <Autocomplete\n        id=\"asynchronous-demo\"\n        sx={{ width: 300 }}\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        isOptionEqualToValue={(option, value) => option.title === value.title}\n        getOptionLabel={(option) => option.title}\n        options={options}\n        loading={loading}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            placeholder=\"Asynchronous\"\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              )\n            }}\n          />\n        )}\n      />\n    </MainCard>\n  );\n}\n\n// Top films as rated by IMDb users. http://www.imdb.com/chart/top\nconst topFilms = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  {\n    title: 'The Lord of the Rings: The Return of the King',\n    year: 2003\n  },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  {\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\n    year: 2001\n  },\n  {\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\n    year: 1980\n  },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  {\n    title: 'The Lord of the Rings: The Two Towers',\n    year: 2002\n  },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  {\n    title: 'Star Wars: Episode IV - A New Hope',\n    year: 1977\n  },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 }\n];\n","size_bytes":4447},"src/pages/auth/auth2/reset-password2.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\nimport AuthResetPassword from 'sections/auth/auth-forms/AuthResetPassword';\n\n// ================================|| RESET PASSWORD ||================================ //\n\nexport default function ResetPassword() {\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack sx={{ mb: { xs: -0.5, sm: 0.5 } }} spacing={1}>\n            <Typography variant=\"h3\">Reset Password</Typography>\n            <Typography color=\"secondary\">Please choose your new password</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthResetPassword />\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":894},"src/sections/auth/auth-forms/FirebaseSocial.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\n\n// assets\nimport Google from 'assets/images/icons/google.svg';\nimport Twitter from 'assets/images/icons/twitter.svg';\nimport Facebook from 'assets/images/icons/facebook.svg';\n\n// ==============================|| FIREBASE - SOCIAL BUTTON ||============================== //\n\nexport default function FirebaseSocial() {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // @ts-ignore\n  const { firebaseFacebookSignIn, firebaseGoogleSignIn, firebaseTwitterSignIn } = useAuth();\n  const googleHandler = async () => {\n    try {\n      await firebaseGoogleSignIn();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const twitterHandler = async () => {\n    try {\n      await firebaseTwitterSignIn();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const facebookHandler = async () => {\n    try {\n      await firebaseFacebookSignIn();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={matchDownSM ? 1 : 2}\n      justifyContent={matchDownSM ? 'space-around' : 'space-between'}\n      sx={{ '& .MuiButton-startIcon': { mr: matchDownSM ? 0 : 1, ml: matchDownSM ? 0 : -0.5 } }}\n    >\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        fullWidth={!matchDownSM}\n        startIcon={<img src={Google} alt=\"Google\" />}\n        onClick={googleHandler}\n      >\n        {!matchDownSM && 'Google'}\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        fullWidth={!matchDownSM}\n        startIcon={<img src={Twitter} alt=\"Twitter\" />}\n        onClick={twitterHandler}\n      >\n        {!matchDownSM && 'Twitter'}\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        fullWidth={!matchDownSM}\n        startIcon={<img src={Facebook} alt=\"Facebook\" />}\n        onClick={facebookHandler}\n      >\n        {!matchDownSM && 'Facebook'}\n      </Button>\n    </Stack>\n  );\n}\n","size_bytes":2237},"src/pages/forms/plugins/editor.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ReactDraft from 'sections/forms/plugins/ReactDraft';\nimport ReactQuill from 'sections/forms/plugins/ReactQuill';\nimport MainCard from 'components/MainCard';\n\nimport { ThemeDirection, ThemeMode } from 'config';\nimport useConfig from 'hooks/useConfig';\n\n// ==============================|| PLUGIN - EDITOR ||============================== //\n\nexport default function Editor() {\n  const theme = useTheme();\n  const { mode, themeDirection } = useConfig();\n\n  return (\n    <Grid container spacing={3}>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          '& .rdw-editor-wrapper': {\n            bgcolor: theme.palette.background.paper,\n            border: '1px solid',\n            borderColor: theme.palette.divider,\n            borderRadius: '4px',\n            overflow: 'visible',\n            '& .rdw-editor-main': { px: 2, py: 0.5, border: 'none' },\n            '& .rdw-editor-toolbar': {\n              pt: 1.25,\n              border: 'none',\n              borderBottom: '1px solid',\n              borderColor: theme.palette.divider,\n              bgcolor: 'secondary.lighter',\n              '& .rdw-option-wrapper': {\n                bgcolor: mode === ThemeMode.DARK ? 'dark.light' : 'secondary.lighter',\n                borderColor: theme.palette.divider\n              },\n              '& .rdw-dropdown-wrapper': {\n                bgcolor: mode === ThemeMode.DARK ? 'dark.light' : 'secondary.lighter',\n                borderColor: theme.palette.divider,\n                '& .rdw-dropdown-selectedtext': { color: mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.darker' },\n                '& .rdw-dropdownoption-default': { color: mode === ThemeMode.DARK ? 'secondary.100' : 'secondary.darker' },\n                '& .rdw-dropdown-carettoopen': { position: themeDirection === ThemeDirection.RTL ? 'initial' : 'absolute' }\n              },\n              '& .rdw-embedded-modal-link-input': { backgroundColor: 'secondary.lighter' },\n              '& .rdw-embedded-modal-size-input': { backgroundColor: 'secondary.lighter', color: 'secondary.main' },\n              '& .rdw-emoji-modal': { left: { xs: -140, sm: -195, md: 5 } },\n              '& .rdw-embedded-modal': { left: { xs: -100, sm: -165, md: 5 } },\n              '& .rdw-link-modal': { left: { xs: 0, sm: -100, md: 5 } },\n              '& .rdw-image-modal': { left: { xs: -190, sm: 30, md: 5 }, top: '15px' },\n              '& .rdw-colorpicker-modal': { left: { xs: -150, sm: 5 } }\n            },\n            ...(theme.direction === ThemeDirection.RTL && {\n              '.rdw-dropdown-carettoopen': {\n                position: 'absolute !important',\n                right: '10%',\n                left: 'inherit'\n              },\n              '.rdw-dropdown-carettoclose': { right: '10%', left: 'inherit' }\n            }),\n            ...(theme.palette.mode === ThemeMode.DARK && {\n              '& .rdw-link-modal-btn': {\n                color: 'common.black'\n              },\n              '& .rdw-image-modal-btn': {\n                color: 'common.black'\n              },\n              '& .rdw-embedded-modal-btn': {\n                color: 'common.black'\n              }\n            })\n          }\n        }}\n      >\n        <MainCard title=\"React Draft\" sx={{ overflow: 'visible' }}>\n          <ReactDraft />\n        </MainCard>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          '& .quill': {\n            bgcolor: mode === ThemeMode.DARK ? 'dark.main' : 'secondary.lighter',\n            borderRadius: '4px',\n            '& .ql-toolbar': {\n              bgcolor: mode === ThemeMode.DARK ? 'dark.light' : 'secondary.100',\n              borderColor: theme.palette.divider,\n              borderTopLeftRadius: '4px',\n              borderTopRightRadius: '4px'\n            },\n            '& .ql-container': {\n              borderColor: `${theme.palette.divider} !important`,\n              borderBottomLeftRadius: '4px',\n              borderBottomRightRadius: '4px',\n              '& .ql-editor': { minHeight: 135 }\n            },\n            '& .ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg': {\n              position: themeDirection === ThemeDirection.RTL ? 'initial' : 'absolute'\n            }\n          }\n        }}\n      >\n        <MainCard title=\"React Quill\">\n          <ReactQuill />\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":4492},"src/sections/auth/AuthWrapper3.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AuthSlider from './AuthSlider';\n\n// ==============================|| AUTHENTICATION - WRAPPER ||============================== //\n\nexport default function AuthWrapper3({ children }) {\n  return (\n    <Box sx={{ minHeight: '100vh' }}>\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        sx={{\n          minHeight: '100vh',\n          bgcolor: 'background.paper'\n        }}\n      >\n        <Grid item xs={12}>\n          <Grid\n            item\n            xs={12}\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            sx={{ minHeight: { xs: 'calc(100vh - 210px)', sm: 'calc(100vh - 134px)', md: 'calc(100vh - 112px)' } }}\n          >\n            <Grid\n              item\n              md={7}\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                flex: 1,\n                padding: 4,\n                minHeight: '100vh',\n                '& > .MuiPaper-root > .MuiBox-root': { minHeight: '100%', display: 'flex' }\n              }}\n            >\n              {children}\n            </Grid>\n            <Grid\n              item\n              md={5}\n              sx={{\n                display: { xs: 'none', lg: 'flex' },\n                width: 580,\n                overflow: 'hidden',\n                alignSelf: 'stretch',\n                position: 'relative',\n                bgcolor: 'primary.main'\n              }}\n            >\n              <AuthSlider />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nAuthWrapper3.propTypes = { children: PropTypes.node };\n","size_bytes":1800},"src/sections/apps/profiles/user/ProfileTab.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// material-ui\nimport List from '@mui/material/List';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// assets\nimport { CardCoin, Lock, Profile, Setting3 } from 'iconsax-react';\n\nfunction getPathIndex(pathname) {\n  let selectedTab = 0;\n  switch (pathname) {\n    case '/apps/profiles/user/payment':\n      selectedTab = 1;\n      break;\n    case '/apps/profiles/user/password':\n      selectedTab = 2;\n      break;\n    case '/apps/profiles/user/settings':\n      selectedTab = 3;\n      break;\n    case '/apps/profiles/user/personal':\n    default:\n      selectedTab = 0;\n  }\n  return selectedTab;\n}\n\n// ==============================|| USER PROFILE - BASIC ||============================== //\n\nexport default function ProfileTab() {\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n\n  const [selectedIndex, setSelectedIndex] = useState(getPathIndex(pathname));\n  const handleListItemClick = (index, route) => {\n    setSelectedIndex(index);\n    navigate(route);\n  };\n\n  useEffect(() => {\n    setSelectedIndex(getPathIndex(pathname));\n  }, [pathname]);\n\n  return (\n    <List component=\"nav\" sx={{ p: 0, '& .MuiListItemIcon-root': { minWidth: 32, color: 'secondary.main' } }}>\n      <ListItemButton selected={selectedIndex === 0} onClick={() => handleListItemClick(0, '/apps/profiles/user/personal')}>\n        <ListItemIcon>\n          <Profile size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Personal Information\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 1} onClick={() => handleListItemClick(1, '/apps/profiles/user/payment')}>\n        <ListItemIcon>\n          <CardCoin size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Payment\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 2} onClick={() => handleListItemClick(2, '/apps/profiles/user/password')}>\n        <ListItemIcon>\n          <Lock size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Change Password\" />\n      </ListItemButton>\n      <ListItemButton selected={selectedIndex === 3} onClick={() => handleListItemClick(3, '/apps/profiles/user/settings')}>\n        <ListItemIcon>\n          <Setting3 size={18} />\n        </ListItemIcon>\n        <ListItemText primary=\"Settings\" />\n      </ListItemButton>\n    </List>\n  );\n}\n","size_bytes":2544},"src/sections/apps/customer/AlertCustomerDelete.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\n\n// project-imports\nimport Avatar from 'components/@extended/Avatar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\nimport { deleteCustomer } from 'api/customer';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Trash } from 'iconsax-react';\n\n// ==============================|| CUSTOMER - DELETE ||============================== //\n\nexport default function AlertCustomerDelete({ id, title, open, handleClose }) {\n  const deletehandler = async () => {\n    await deleteCustomer(id).then(() => {\n      openSnackbar({\n        open: true,\n        message: 'Customer deleted successfully',\n        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n      handleClose();\n    });\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      keepMounted\n      TransitionComponent={PopupTransition}\n      maxWidth=\"xs\"\n      aria-labelledby=\"column-delete-title\"\n      aria-describedby=\"column-delete-description\"\n    >\n      <DialogContent sx={{ mt: 2, my: 1 }}>\n        <Stack alignItems=\"center\" spacing={3.5}>\n          <Avatar color=\"error\" sx={{ width: 72, height: 72, fontSize: '1.75rem' }}>\n            <Trash variant=\"Bold\" />\n          </Avatar>\n          <Stack spacing={2}>\n            <Typography variant=\"h4\" align=\"center\">\n              Are you sure you want to delete?\n            </Typography>\n            <Typography align=\"center\">\n              By deleting\n              <Typography variant=\"subtitle1\" component=\"span\">\n                {' '}\n                &quot;{title}&quot;{' '}\n              </Typography>\n              user, all task assigned to that user will also be deleted.\n            </Typography>\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2} sx={{ width: 1 }}>\n            <Button fullWidth onClick={handleClose} color=\"secondary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button fullWidth color=\"error\" variant=\"contained\" onClick={deletehandler} autoFocus>\n              Delete\n            </Button>\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nAlertCustomerDelete.propTypes = { id: PropTypes.number, title: PropTypes.string, open: PropTypes.bool, handleClose: PropTypes.func };\n","size_bytes":2638},"src/themes/overrides/Tabs.js":{"content":"// ==============================|| OVERRIDES - TABS ||============================== //\n\nexport default function Tabs() {\n  return {\n    MuiTabs: {\n      styleOverrides: {\n        vertical: {\n          overflow: 'visible'\n        }\n      }\n    }\n  };\n}\n","size_bytes":254},"src/pages/apps/invoice/dashboard.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport InvoiceWidgetCard from 'sections/apps/invoice/InvoiceWidgetCard';\nimport InvoiceIncomeAreaChart from 'sections/apps/invoice/InvoiceIncomeAreaChart';\nimport InvoiceUserList from 'sections/apps/invoice/InvoiceUserList';\nimport InvoiceNotificationList from 'sections/apps/invoice/InvoiceNotificationList';\nimport InvoicePieChart from 'sections/apps/invoice/InvoicePieChart';\nimport InvoiceCard from 'sections/apps/invoice/InvoiceCard';\nimport { APP_DEFAULT_PATH } from 'config';\n\n// ==============================|| INVOICE - DASHBOARD ||============================== //\n\nexport default function Dashboard() {\n  const theme = useTheme();\n  const [activeChart, setActiveChart] = useState(0);\n\n  const widgetData = [\n    {\n      title: 'Total',\n      count: '£5678.09',\n      percentage: 20.3,\n      isLoss: true,\n      invoice: '3',\n      color: theme.palette.warning\n    },\n    {\n      title: 'Paid',\n      count: '£5678.09',\n      percentage: -8.73,\n      isLoss: true,\n      invoice: '5',\n      color: theme.palette.error\n    },\n    {\n      title: 'Pending',\n      count: '£5678.09',\n      percentage: 10.73,\n      isLoss: false,\n      invoice: '20',\n      color: theme.palette.success\n    },\n    {\n      title: 'Overdue',\n      count: '£5678.09',\n      percentage: -4.73,\n      isLoss: true,\n      invoice: '5',\n      color: theme.palette.primary\n    }\n  ];\n\n  const [series, setSeries] = useState([\n    {\n      name: 'TEAM A',\n      type: 'column',\n      data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30, 25]\n    },\n    {\n      name: 'TEAM B',\n      type: 'line',\n      data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39, 35]\n    }\n  ]);\n\n  const handleSeries = (index) => {\n    setActiveChart(index);\n    switch (index) {\n      case 1:\n        setSeries([\n          {\n            name: 'TEAM A',\n            type: 'column',\n            data: [10, 15, 8, 12, 11, 7, 10, 13, 22, 10, 18, 4]\n          },\n          {\n            name: 'TEAM B',\n            type: 'line',\n            data: [12, 18, 15, 17, 12, 10, 14, 16, 25, 17, 20, 8]\n          }\n        ]);\n        break;\n      case 2:\n        setSeries([\n          {\n            name: 'TEAM A',\n            type: 'column',\n            data: [12, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30, 25]\n          },\n          {\n            name: 'TEAM B',\n            type: 'line',\n            data: [17, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39, 35]\n          }\n        ]);\n        break;\n      case 3:\n        setSeries([\n          {\n            name: 'TEAM A',\n            type: 'column',\n            data: [1, 2, 3, 5, 1, 0, 2, 0, 6, 1, 5, 3]\n          },\n          {\n            name: 'TEAM B',\n            type: 'line',\n            data: [5, 3, 5, 6, 7, 0, 3, 1, 7, 3, 5, 4]\n          }\n        ]);\n        break;\n      case 0:\n      default:\n        setSeries([\n          {\n            name: 'TEAM A',\n            type: 'column',\n            data: [23, 11, 22, 27, 13, 22, 37, 21, 44, 22, 30, 25]\n          },\n          {\n            name: 'TEAM B',\n            type: 'line',\n            data: [34, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39, 35]\n          }\n        ]);\n    }\n  };\n\n  let breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Invoice Summary' }];\n\n  return (\n    <>\n      <Breadcrumbs custom heading=\"My Dashboard\" links={breadcrumbLinks} />\n      <Grid container spacing={2.5}>\n        <Grid item xs={12} lg={9}>\n          <MainCard>\n            <Grid container spacing={2}>\n              {widgetData.map((data, index) => (\n                <Grid item xs={12} sm={6} md={3} key={index}>\n                  <Box onClick={() => handleSeries(index)} sx={{ cursor: 'pointer' }}>\n                    <InvoiceWidgetCard\n                      title={data.title}\n                      count={data.count}\n                      percentage={data.percentage}\n                      isLoss={data.isLoss}\n                      invoice={data.invoice}\n                      color={data.color.main}\n                      isActive={index === activeChart}\n                    />\n                  </Box>\n                </Grid>\n              ))}\n              <Grid item xs={12}>\n                <InvoiceIncomeAreaChart series={series} />\n              </Grid>\n            </Grid>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12} lg={3}>\n          <InvoiceCard />\n        </Grid>\n        <Grid item sm={6} md={4} xs={12}>\n          <InvoiceUserList />\n        </Grid>\n        <Grid item sm={6} md={4} xs={12}>\n          <InvoicePieChart />\n        </Grid>\n        <Grid item sm={12} md={4} xs={12}>\n          <InvoiceNotificationList />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":4962},"src/components/cards/statistics/AnalyticEcommerce.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowRight, ArrowUp } from 'iconsax-react';\n\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\n\nexport default function AnalyticEcommerce({ color = 'primary', title, count, percentage, isLoss, extra }) {\n  return (\n    <MainCard contentSX={{ p: 2.25 }}>\n      <Stack spacing={0.5}>\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          {title}\n        </Typography>\n        <Grid container alignItems=\"center\">\n          <Grid item>\n            <Typography variant=\"h4\" color=\"inherit\">\n              {count}\n            </Typography>\n          </Grid>\n          {percentage && (\n            <Grid item>\n              <Chip\n                variant=\"combined\"\n                color={color}\n                icon={\n                  <>\n                    {!isLoss && <ArrowUp style={{ transform: 'rotate(45deg)' }} />}\n                    {isLoss && <ArrowRight style={{ transform: 'rotate(45deg)' }} />}\n                  </>\n                }\n                label={`${percentage}%`}\n                sx={{ ml: 1.25, pl: 1, borderRadius: 1 }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n        </Grid>\n      </Stack>\n      <Box sx={{ pt: 2.25 }}>\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          You made an extra{' '}\n          <Typography variant=\"caption\" sx={{ color: `${color || 'primary'}.main` }}>\n            {extra}\n          </Typography>{' '}\n          this year\n        </Typography>\n      </Box>\n    </MainCard>\n  );\n}\n\nAnalyticEcommerce.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.number,\n  isLoss: PropTypes.bool,\n  extra: PropTypes.string\n};\n","size_bytes":2097},"src/sections/apps/profiles/user/ProfileTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Divider from '@mui/material/Divider';\nimport FormLabel from '@mui/material/FormLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport ProfileTab from './ProfileTab';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode, facebookColor, linkedInColor } from 'config';\nimport defaultImages from 'assets/images/users/default.png';\n\n// assets\nimport { Apple, Camera, Facebook, Google } from 'iconsax-react';\n\n// ==============================|| USER PROFILE - TABS ||============================== //\n\nexport default function ProfileTabs({ focusInput }) {\n  const theme = useTheme();\n  const [selectedImage, setSelectedImage] = useState(undefined);\n  const [avatar, setAvatar] = useState(defaultImages);\n\n  useEffect(() => {\n    if (selectedImage) {\n      setAvatar(URL.createObjectURL(selectedImage));\n    }\n  }, [selectedImage]);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event?.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={6}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"flex-end\">\n            <IconButton\n              variant=\"light\"\n              color=\"secondary\"\n              id=\"basic-button\"\n              aria-controls={open ? 'basic-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n              sx={{ transform: 'rotate(90deg)' }}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'basic-button' }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <MenuItem\n                component={Link}\n                to=\"/apps/profiles/user/personal\"\n                onClick={() => {\n                  handleClose();\n                  setTimeout(() => {\n                    focusInput();\n                  });\n                }}\n              >\n                Edit\n              </MenuItem>\n              <MenuItem onClick={handleClose} disabled>\n                Delete\n              </MenuItem>\n            </Menu>\n          </Stack>\n          <Stack spacing={2.5} alignItems=\"center\">\n            <FormLabel\n              htmlFor=\"change-avtar\"\n              sx={{\n                position: 'relative',\n                borderRadius: '50%',\n                overflow: 'hidden',\n                '&:hover .MuiBox-root': { opacity: 1 },\n                cursor: 'pointer'\n              }}\n            >\n              <Avatar alt=\"Avatar 1\" src={avatar} sx={{ width: 124, height: 124, border: '1px dashed' }} />\n              <Box\n                sx={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  backgroundColor: theme.palette.mode === ThemeMode.DARK ? 'rgba(255, 255, 255, .75)' : 'rgba(0,0,0,.65)',\n                  width: '100%',\n                  height: '100%',\n                  opacity: 0,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}\n              >\n                <Stack spacing={0.5} alignItems=\"center\">\n                  <Camera style={{ color: theme.palette.secondary.lighter, fontSize: '2rem' }} />\n                  <Typography sx={{ color: 'secondary.lighter' }}>Upload</Typography>\n                </Stack>\n              </Box>\n            </FormLabel>\n            <TextField\n              type=\"file\"\n              id=\"change-avtar\"\n              placeholder=\"Outlined\"\n              variant=\"outlined\"\n              sx={{ display: 'none' }}\n              onChange={(e) => setSelectedImage(e.target.files?.[0])}\n            />\n            <Stack spacing={0.5} alignItems=\"center\">\n              <Typography variant=\"h5\">Stebin Ben</Typography>\n              <Typography color=\"secondary\">Full Stack Developer</Typography>\n            </Stack>\n            <Stack direction=\"row\" spacing={3} sx={{ '& svg': { fontSize: '1.15rem', cursor: 'pointer' } }}>\n              <Google variant=\"Bold\" color={theme.palette.error.main} />\n              <Facebook variant=\"Bold\" color={facebookColor} />\n              <Apple variant=\"Bold\" color={linkedInColor} />\n            </Stack>\n          </Stack>\n        </Grid>\n        <Grid item sm={3} sx={{ display: { sm: 'block', md: 'none' } }} />\n        <Grid item xs={12} sm={6} md={12}>\n          <Stack direction=\"row\" justifyContent=\"space-around\" alignItems=\"center\">\n            <Stack spacing={0.5} alignItems=\"center\">\n              <Typography variant=\"h5\">86</Typography>\n              <Typography color=\"secondary\">Post</Typography>\n            </Stack>\n            <Divider orientation=\"vertical\" flexItem />\n            <Stack spacing={0.5} alignItems=\"center\">\n              <Typography variant=\"h5\">40</Typography>\n              <Typography color=\"secondary\">Project</Typography>\n            </Stack>\n            <Divider orientation=\"vertical\" flexItem />\n            <Stack spacing={0.5} alignItems=\"center\">\n              <Typography variant=\"h5\">4.5K</Typography>\n              <Typography color=\"secondary\">Members</Typography>\n            </Stack>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <ProfileTab />\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nProfileTabs.propTypes = { focusInput: PropTypes.func };\n","size_bytes":6381},"src/sections/forms/wizard/blog-validation-wizard/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\n\nconst validationSchema = yup.object({\n  titleImagePath: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath1: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath2: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath3: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  carouselImagePath4: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstSubheadingImage: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const formik = useFormik({\n    initialValues: {\n      titleImagePath: data.titleImagePath || null,\n      carouselImagePath1: data.carouselImagePath1 || null,\n      carouselImagePath2: data.carouselImagePath2 || null,\n      carouselImagePath3: data.carouselImagePath3 || null,\n      carouselImagePath4: data.carouselImagePath4 || null,\n      firstSubheadingImage: data.firstSubheadingImage || null\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        titleImagePath: values.titleImagePath,\n        carouselImagePath1: values.carouselImagePath1,\n        carouselImagePath2: values.carouselImagePath2,\n        carouselImagePath3: values.carouselImagePath3,\n        carouselImagePath4: values.carouselImagePath4,\n        firstSubheadingImage: values.firstSubheadingImage\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"titleImagePath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}></Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath1\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath2\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath3\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={3}>\n            <Stack spacing={1}>\n              <InputLabel>Carousel Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"carouselImagePath4\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>First subheading image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"firstSubheadingImage\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\">\n            <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n              Back\n            </Button>\n            <AnimateButton>\n              <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                Next\n              </Button>\n            </AnimateButton>\n          </Stack>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":5767},"src/themes/palette.js":{"content":"// material-ui\nimport { alpha, createTheme } from '@mui/material/styles';\n\n// project-imports\nimport ThemeOption from './theme';\nimport { ThemeMode } from 'config';\n\n// ==============================|| DEFAULT THEME - PALETTE  ||============================== //\n\nexport default function Palette(mode, presetColor, themeContrast) {\n  const paletteColor = ThemeOption(presetColor, mode);\n\n  return createTheme({\n    palette: {\n      mode: mode,\n      common: {\n        black: '#000',\n        white: '#fff'\n      },\n      ...paletteColor,\n      text: {\n        primary: mode === ThemeMode.DARK ? alpha(paletteColor.secondary.darker, 0.87) : paletteColor.secondary[800],\n        secondary: mode === ThemeMode.DARK ? alpha(paletteColor.secondary.darker, 0.45) : paletteColor.secondary.main,\n        disabled: mode === ThemeMode.DARK ? alpha(paletteColor.secondary.darker, 0.1) : paletteColor.secondary[400]\n      },\n      action: {\n        disabled: paletteColor.secondary.light\n      },\n      divider: mode === ThemeMode.DARK ? alpha(paletteColor.secondary.darker, 0.05) : alpha(paletteColor.secondary.light, 0.65),\n      background: {\n        paper: mode === ThemeMode.DARK ? paletteColor.secondary[100] : '#fff',\n        default: themeContrast && mode !== ThemeMode.DARK ? '#fff' : paletteColor.secondary.lighter\n      }\n    }\n  });\n}\n","size_bytes":1334},"src/pages/components-overview/accordion.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicAccordion from 'sections/components-overview/accordion/BasicAccordion';\nimport DisabledAccordion from 'sections/components-overview/accordion/DisabledAccordion';\nimport ControlledAccordion from 'sections/components-overview/accordion/ControlledAccordion';\nimport FixedAccordion from 'sections/components-overview/accordion/FixedAccordion';\nimport CustomizedAccordion from 'sections/components-overview/accordion/CustomizedAccordion';\n\n// ==============================|| COMPONENTS - ACCORDION ||============================== //\n\nexport default function ComponentAccordion() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Accordion\"\n        caption=\"Lists are continuous, vertical indexes of text or images.\"\n        directory=\"src/pages/components-overview/accordion\"\n        link=\"https://mui.com/material-ui/react-accordion/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <BasicAccordion />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <DisabledAccordion />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <ControlledAccordion />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <FixedAccordion />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <CustomizedAccordion />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":1754},"src/sections/maps/heatmap/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect, useMemo, memo } from 'react';\n\n// third-party\nimport Map, { Source, Layer } from 'react-map-gl';\n\n// project-import\nimport ControlPanel from './control-panel';\nimport heatmapLayer from './map-style';\n\n// tpyes\n\n// ==============================|| MAPBOX - HEATMAP ||============================== //\n\nfunction Heatmap({ ...other }) {\n  const [allDays, useAllDays] = useState(true);\n  const [timeRange, setTimeRange] = useState([0, 0]);\n  const [selectedTime, selectTime] = useState(0);\n  const [earthquakes, setEarthQuakes] = useState();\n\n  useEffect(() => {\n    fetch('https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson')\n      .then((resp) => resp.json())\n      .then((json) => {\n        const { features } = json;\n        const endTime = features[0].properties.time;\n        const startTime = features[features.length - 1].properties.time;\n        setTimeRange([startTime, endTime]);\n        setEarthQuakes(json);\n        selectTime(endTime);\n      })\n      .catch((error) => console.error('Could not load data', error));\n  }, []);\n\n  const data = useMemo(\n    () => (allDays ? earthquakes : filterFeaturesByDay(earthquakes, selectedTime)),\n    [earthquakes, allDays, selectedTime]\n  );\n\n  return (\n    <>\n      <Map\n        initialViewState={{\n          latitude: 40,\n          longitude: -100,\n          zoom: 3\n        }}\n        {...other}\n      >\n        {data && (\n          <Source type=\"geojson\" data={data}>\n            <Layer {...heatmapLayer} />\n          </Source>\n        )}\n      </Map>\n      <ControlPanel\n        startTime={timeRange[0]}\n        endTime={timeRange[1]}\n        selectedTime={selectedTime}\n        allDays={allDays}\n        onChangeTime={selectTime}\n        onChangeAllDays={useAllDays}\n      />\n    </>\n  );\n}\n\nexport default memo(Heatmap);\n\nfunction filterFeaturesByDay(featureCollection, time) {\n  const date = new Date(time);\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  const features = featureCollection?.features.filter((feature) => {\n    const featureDate = new Date(feature.properties?.time);\n    return featureDate.getFullYear() === year && featureDate.getMonth() === month && featureDate.getDate() === day;\n  });\n  return { type: 'FeatureCollection', features };\n}\n\nHeatmap.propTypes = { other: PropTypes.any };\n","size_bytes":2392},"src/components/third-party/map/MapContainerStyled.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// ==============================|| MAP BOX - CONTAINER STYLED ||============================== //\n\nconst MapContainerStyled = styled(Box)({\n  zIndex: 0,\n  height: 576,\n  overflow: 'hidden',\n  position: 'relative',\n  borderRadius: 4,\n  '& .mapboxgl-ctrl-logo, .mapboxgl-ctrl-bottom-right': {\n    display: 'none'\n  }\n});\n\nexport default MapContainerStyled;\n","size_bytes":456},"src/sections/tables/react-table/FooterTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableFooter from '@mui/material/TableFooter';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { flexRender, useReactTable, getCoreRowModel } from '@tanstack/react-table';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport { CSVExport } from 'components/third-party/react-table';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\nimport makeData from 'data/react-table';\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data }) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n\n  let headers = [];\n  table.getAllColumns().map((columns) =>\n    headers.push({\n      label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n      // @ts-ignore\n      key: columns.columnDef.accessorKey\n    })\n  );\n\n  return (\n    <MainCard title=\"Footer\" content={false} secondary={<CSVExport {...{ data, headers, filename: 'footer.csv' }} />}>\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              {table.getFooterGroups().map((footerGroup) => (\n                <TableRow key={footerGroup.id}>\n                  {footerGroup.headers.map((footer) => (\n                    <TableCell key={footer.id} {...footer.column.columnDef.meta}>\n                      {footer.isPlaceholder ? null : flexRender(footer.column.columnDef.header, footer.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - FOOTER ||============================== //\n\nexport default function FooterTable() {\n  const data = makeData(9);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'First Name',\n        footer: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        footer: 'LAST NAME',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        footer: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        footer: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Role',\n        footer: 'Role',\n        accessorKey: 'role'\n      },\n      {\n        header: 'Visits',\n        footer: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        footer: 'Status',\n        accessorKey: 'status',\n        cell: (props) => {\n          switch (props.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        footer: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (props) => <LinearWithLabel value={props.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    []\n  );\n\n  return <ReactTable {...{ data, columns }} />;\n}\n\nFooterTable.propTypes = { getValue: PropTypes.func };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array };\n","size_bytes":5080},"src/sections/components-overview/date-time-picker/StaticDatePicker.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| DATE PICKER - STATIC ||============================== //\n\nexport default function ComponentStaticDatePicker() {\n  const [value, setValue] = useState(new Date());\n\n  const staticDatepickerCodeString = `<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <StaticDatePicker\n    displayStaticWrapperAs=\"desktop\"\n    openTo=\"year\"\n    value={value}\n    onChange={(newValue) => {\n      setValue(newValue);\n    }}\n    renderInput={(params) => <TextField {...params} />}\n  />\n</LocalizationProvider>\n<LocalizationProvider dateAdapter={AdapterDateFns}>\n  <StaticDatePicker\n    displayStaticWrapperAs=\"desktop\"\n    openTo=\"day\"\n    value={value}\n    onChange={(newValue) => {\n      setValue(newValue);\n    }}\n    renderInput={(params) => <TextField {...params} />}\n  />\n</LocalizationProvider>`;\n\n  return (\n    <MainCard title=\"Static Mode\" codeHighlight codeString={staticDatepickerCodeString}>\n      <Stack spacing={3}>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <StaticDatePicker\n            displayStaticWrapperAs=\"desktop\"\n            openTo=\"year\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n          />\n        </LocalizationProvider>\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <StaticDatePicker\n            displayStaticWrapperAs=\"desktop\"\n            openTo=\"day\"\n            value={value}\n            onChange={(newValue) => {\n              setValue(newValue);\n            }}\n          />\n        </LocalizationProvider>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":2001},"src/sections/apps/invoice/InvoiceWidgetCard.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowDown2, ArrowUp2 } from 'iconsax-react';\n\nfunction TableWidgetCard({ color, title, count, percentage, isLoss, invoice, isActive }) {\n  return (\n    <MainCard {...(isActive && { sx: { bgcolor: 'secondary.lighter', borderColor: 'secondary.lighter' } })}>\n      <Grid container spacing={1.25}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Typography variant=\"subtitle1\">{title}</Typography>\n            {percentage && (\n              <Stack sx={{ ml: 1, pl: 0.5 }} direction=\"row\" alignItems=\"center\" spacing={0.5}>\n                {!isLoss && <ArrowUp2 variant=\"Bold\" size={16} style={{ color }} />}\n                {isLoss && <ArrowDown2 variant=\"Bold\" size={16} style={{ color }} />}\n                <Typography color=\"secondary\" sx={{ fontWeight: 500 }}>\n                  {percentage}%\n                </Typography>\n              </Stack>\n            )}\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={0.25}>\n            <Typography variant=\"h5\">{count}</Typography>\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n              <Typography variant=\"h5\">{invoice}</Typography>\n              <Typography color=\"secondary\">invoices</Typography>\n            </Stack>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\n// ==============================|| ORDERS CARD CHART ||============================== //\n\nexport const WidgetChart = ({ color, data }) => {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      height: 100,\n      type: 'area',\n      toolbar: {\n        show: false\n      },\n      sparkline: {\n        enabled: true\n      }\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 1,\n        type: 'vertical',\n        inverseColors: false,\n        opacityFrom: 0.5,\n        opacityTo: 0\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 0\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      },\n      tooltip: {\n        enabled: false\n      }\n    },\n    stroke: {\n      width: 1,\n      curve: 'smooth'\n    },\n    grid: {\n      show: false\n    },\n    yaxis: {\n      axisBorder: {\n        show: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        show: false\n      }\n    },\n    tooltip: {\n      x: {\n        show: false\n      },\n      y: {\n        formatter(val) {\n          return `$ ${val}`;\n        }\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [color.main],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme, color]);\n\n  const [series] = useState([\n    {\n      name: 'Sales',\n      data: data\n    }\n  ]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={80} />;\n};\n\nexport default TableWidgetCard;\n\nTableWidgetCard.propTypes = {\n  color: PropTypes.any,\n  title: PropTypes.string,\n  count: PropTypes.string,\n  percentage: PropTypes.number,\n  isLoss: PropTypes.bool,\n  invoice: PropTypes.string,\n  isActive: PropTypes.bool\n};\n","size_bytes":4048},"src/sections/auth/AuthWrapper.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AuthCard from './AuthCard';\n\n// assets\nimport AuthBackground from 'assets/images/auth/AuthBackground';\n\n// ==============================|| AUTHENTICATION - WRAPPER ||============================== //\n\nexport default function AuthWrapper({ children }) {\n  return (\n    <Box sx={{ minHeight: '100vh' }}>\n      <AuthBackground />\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        sx={{\n          minHeight: '100vh'\n        }}\n      >\n        <Grid item xs={12}>\n          <Grid\n            item\n            xs={12}\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            sx={{ minHeight: { xs: 'calc(100vh - 210px)', sm: 'calc(100vh - 134px)', md: 'calc(100vh - 112px)' } }}\n          >\n            <Grid item>\n              <AuthCard>{children}</AuthCard>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nAuthWrapper.propTypes = { children: PropTypes.node };\n","size_bytes":1144},"src/sections/components-overview/autocomplete/DisabledAutocomplete.jsx":{"content":"// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| AUTOCOMPLETE - DISABLED ||============================== //\n\nexport default function DisabledAutocomplete() {\n  const disabledAutocompleteCodeString = `<Autocomplete\n  fullWidth\n  id=\"disabled-options-demo\"\n  options={timeSlots}\n  getOptionDisabled={(option) => option === timeSlots[0] || option === timeSlots[2]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Disabled options\" />}\n/>`;\n\n  return (\n    <MainCard title=\"Disabled Options\" codeString={disabledAutocompleteCodeString}>\n      <Autocomplete\n        fullWidth\n        id=\"disabled-options-demo\"\n        options={timeSlots}\n        getOptionDisabled={(option) => option === timeSlots[0] || option === timeSlots[2]}\n        renderInput={(params) => <TextField {...params} placeholder=\"Disabled options\" />}\n      />\n    </MainCard>\n  );\n}\n\n// One time slot every 30 minutes.\nconst timeSlots = Array.from(new Array(24 * 2)).map(\n  (_, index) => `${index < 20 ? '0' : ''}${Math.floor(index / 2)}:${index % 2 === 0 ? '00' : '30'}`\n);\n","size_bytes":1227},"src/themes/overrides/ButtonBase.js":{"content":"// ==============================|| OVERRIDES - BUTTON BASE ||============================== //\n\nexport default function ButtonBase() {\n  return {\n    MuiButtonBase: {\n      defaultProps: {\n        disableRipple: false\n      },\n      styleOverrides: {\n        root: {\n          '&.MuiButtonBase-root:disabled': {\n            cursor: 'not-allowed',\n            pointerEvents: 'auto'\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":425},"src/sections/apps/invoice/InvoicePieChart.jsx":{"content":"import { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// chart options\nconst areaChartOptions = {\n  chart: {\n    width: 350,\n    type: 'donut',\n    stacked: false,\n    zoom: {\n      enabled: false\n    }\n  },\n  plotOptions: {\n    donut: {\n      size: '15%'\n    }\n  },\n  stroke: {\n    width: 0\n  },\n  dataLabels: {\n    enabled: false\n  },\n  responsive: [\n    {\n      breakpoint: 480,\n      options: {\n        chart: {\n          width: 200\n        }\n      }\n    }\n  ],\n  legend: {\n    show: false\n  }\n};\n\n// ==============================|| INVOICE - PIE CHART ||============================== //\n\nexport default function InvoicePieChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const downMD = useMediaQuery(theme.breakpoints.down('md'));\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      labels: ['Pending', 'Paid', 'Overdue', 'Draft'],\n      colors: [theme.palette.warning.main, theme.palette.success.main, theme.palette.error.main, theme.palette.primary.lighter],\n      tooltip: {\n        custom: function ({ series, seriesIndex, w }) {\n          return `<div class=\"pie_box\">\n          <span class=\"PieDot\" style='background-color:${w.globals.colors[seriesIndex]}'></span>\n          <span class=\"fontsize\">${w.globals.labels[seriesIndex]}${' '}\n          <span class=\"fontsizeValue\">${series[seriesIndex]}%</span></span></div>`;\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series, setSeries] = useState([44, 55, 41, 17]);\n\n  useEffect(() => {\n    setSeries([30, 28, 22, 20]);\n  }, []);\n\n  //sx style\n  const DotSize = { display: 'flex', alignItems: 'center', gap: 1 };\n  const ExpenseSize = { fontSize: '0.875rem', lineHeight: '1.5rem', fontWeight: 500 };\n\n  return (\n    <MainCard\n      title=\"Total Expenses\"\n      secondary={\n        <IconButton edge=\"end\" aria-label=\"comments\" color=\"secondary\" sx={{ transform: 'rotate(90deg)' }}>\n          <MoreIcon />\n        </IconButton>\n      }\n      sx={{\n        '.pie_box': { padding: 2, display: 'flex', gap: 1, alignItems: 'center', width: '100%' },\n        '.PieDot': { width: 12, height: 12, borderRadius: '50%' },\n        '.fontsize': { fontWeight: 500, fontSize: '0.875rem', lineHeight: '1.375rem', color: 'secondary.main' },\n        '.fontsizeValue': { color: 'secondary.dark' }\n      }}\n    >\n      <Grid container alignItems=\"center\" spacing={1}>\n        <Grid item xs={12} sx={{ '& .apexcharts-canvas': { margin: '0 auto' } }}>\n          <ReactApexChart options={options} series={series} type=\"donut\" height={downMD ? '100%' : 265} />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container>\n            <Grid item></Grid>\n            <Grid item xs sx={DotSize}>\n              <Dot color=\"warning\" size={12} />\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Pending\n              </Typography>\n            </Grid>\n            <Grid item sx={ExpenseSize}>\n              $3,202\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container>\n            <Grid item></Grid>\n            <Grid item xs sx={DotSize}>\n              <Dot color=\"success\" size={12} />\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Paid\n              </Typography>\n            </Grid>\n            <Grid item sx={ExpenseSize}>\n              $45,050\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container>\n            <Grid item></Grid>\n            <Grid item xs sx={DotSize}>\n              <Dot color=\"error\" size={12} />\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Overdue\n              </Typography>\n            </Grid>\n            <Grid item sx={ExpenseSize}>\n              $25,000\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container>\n            <Grid item></Grid>\n            <Grid item xs sx={DotSize}>\n              <Dot sx={{ bgcolor: 'primary.lighter' }} size={12} />\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\n                Draft\n              </Typography>\n            </Grid>\n            <Grid item sx={ExpenseSize}>\n              $7,694\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":5139},"src/sections/components-overview/autocomplete/LimitAutocomplete.jsx":{"content":"// material-ui\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - LIMIT ||============================== //\n\nexport default function LimitAutocomplete() {\n  const limitAutocompleteCodeString = `<Autocomplete\n  multiple\n  limitTags={2}\n  id=\"multiple-limit-tags\"\n  options={data}\n  getOptionLabel={(option) => option.label}\n  defaultValue={[data[13], data[12], data[11]]}\n  renderInput={(params) => <TextField {...params} placeholder=\"Limit Tags\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderRadius: 1,\n      height: 32,\n      pl: 1.5,\n      pr: 1.5,\n      lineHeight: '32px',\n      borderColor: 'primary.light',\n      '& .MuiChip-label': {\n        paddingLeft: 0,\n        paddingRight: 0\n      },\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        ml: 1,\n        mr: -0.75,\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Limit Tags\" codeString={limitAutocompleteCodeString}>\n      <Autocomplete\n        multiple\n        limitTags={2}\n        id=\"multiple-limit-tags\"\n        options={data}\n        getOptionLabel={(option) => option.label}\n        defaultValue={[data[13], data[12], data[11]]}\n        renderInput={(params) => <TextField {...params} placeholder=\"Limit Tags\" />}\n        sx={{\n          '& .MuiOutlinedInput-root': { p: 1 },\n          '& .MuiAutocomplete-tag': {\n            bgcolor: 'primary.lighter',\n            border: '1px solid',\n            borderRadius: 1,\n            height: 32,\n            pl: 1.5,\n            pr: 1.5,\n            lineHeight: '32px',\n            borderColor: 'primary.light',\n            '& .MuiChip-label': { paddingLeft: 0, paddingRight: 0 },\n            '& .MuiSvgIcon-root': {\n              color: 'primary.main',\n              ml: 1,\n              mr: -0.75,\n              '&:hover': { color: 'primary.dark' }\n            }\n          }\n        }}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":2245},"src/layout/Dashboard/Header/AppBarStyled.jsx":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\n\n// project-imports\nimport { DRAWER_WIDTH, MINI_DRAWER_WIDTH } from 'config';\n\n// ==============================|| HEADER - APP BAR STYLED ||============================== //\n\nconst AppBarStyled = styled(AppBar, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen\n  }),\n  ...(!open && {\n    width: `calc(100% - ${MINI_DRAWER_WIDTH})`\n  }),\n  ...(open && {\n    marginLeft: DRAWER_WIDTH,\n    width: `calc(100% - ${DRAWER_WIDTH}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  })\n}));\n\nexport default AppBarStyled;\n","size_bytes":969},"src/sections/apps/calendar/AddEventForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Switch from '@mui/material/Switch';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { LocalizationProvider, MobileDateTimePicker } from '@mui/x-date-pickers';\n\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\n// third-party\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { useFormik, Form, FormikProvider } from 'formik';\n\n// project-imports\nimport ColorPalette from './ColorPalette';\nimport IconButton from 'components/@extended/IconButton';\n\nimport { ThemeMode } from 'config';\nimport { openSnackbar } from 'api/snackbar';\nimport { createEvent, updateEvent, deleteEvent } from 'api/calender';\n\n// assets\nimport { Calendar, Trash } from 'iconsax-react';\n\n// constant\nconst getInitialValues = (event, range) => {\n  const newEvent = {\n    title: '',\n    description: '',\n    color: '#1890ff',\n    textColor: '#fff',\n    allDay: false,\n    start: range ? new Date(range.start) : new Date(),\n    end: range ? new Date(range.end) : new Date()\n  };\n\n  if (event || range) {\n    return _.merge({}, newEvent, event);\n  }\n\n  return newEvent;\n};\n\n// ==============================|| CALENDAR - EVENT ADD / EDIT / DELETE ||============================== //\n\nexport default function AddEventFrom({ event, range, onCancel, modalCallback }) {\n  const theme = useTheme();\n  const isCreating = !event;\n\n  const backgroundColor = [\n    {\n      value: theme.palette.primary.main,\n      color: 'primary.main'\n    },\n    {\n      value: theme.palette.error.main,\n      color: 'error.main'\n    },\n    {\n      value: theme.palette.success.main,\n      color: 'success.main'\n    },\n    {\n      value: theme.palette.secondary.main,\n      color: 'secondary.main'\n    },\n    {\n      value: theme.palette.warning.main,\n      color: 'warning.main'\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.primary.darker : theme.palette.primary.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'primary.darker' : 'primary.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.error.darker : theme.palette.error.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'error.darker' : 'error.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.success.darker : theme.palette.success.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'success.darker' : 'success.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.darker : theme.palette.secondary.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'secondary.darker' : 'secondary.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.warning.darker : theme.palette.warning.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'warning.darker' : 'warning.lighter',\n      isLight: true\n    }\n  ];\n\n  const textColor = [\n    {\n      value: '#fff',\n      color: 'white',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.error.darker : theme.palette.error.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'error.darker' : 'error.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.success.darker : theme.palette.success.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'success.darker' : 'success.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.secondary.darker : theme.palette.secondary.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'secondary.darker' : 'secondary.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.warning.darker : theme.palette.warning.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'warning.darker' : 'warning.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.mode === ThemeMode.DARK ? theme.palette.primary.darker : theme.palette.primary.lighter,\n      color: theme.palette.mode === ThemeMode.DARK ? 'primary.darker' : 'primary.lighter',\n      isLight: true\n    },\n    {\n      value: theme.palette.primary.main,\n      color: 'primary.main'\n    },\n    {\n      value: theme.palette.error.main,\n      color: 'error.main'\n    },\n    {\n      value: theme.palette.success.main,\n      color: 'success.main'\n    },\n    {\n      value: theme.palette.secondary.main,\n      color: 'secondary.main'\n    },\n    {\n      value: theme.palette.warning.main,\n      color: 'warning.main'\n    }\n  ];\n\n  const EventSchema = Yup.object().shape({\n    title: Yup.string().max(255).required('Title is required'),\n    description: Yup.string().max(5000),\n    end: Yup.date().when('start', (start, schema) => start && schema.min(start, 'End date must be later than start date')),\n    start: Yup.date(),\n    color: Yup.string().max(255),\n    textColor: Yup.string().max(255)\n  });\n\n  const deleteHandler = async () => {\n    await deleteEvent(event?.id);\n    openSnackbar({\n      open: true,\n      message: 'Event deleted successfully.',\n      variant: 'alert',\n\n      alert: {\n        color: 'success'\n      }\n    });\n    modalCallback(false);\n  };\n  const formik = useFormik({\n    initialValues: getInitialValues(event, range),\n    validationSchema: EventSchema,\n    onSubmit: async (values, { setSubmitting }) => {\n      try {\n        const newEvent = {\n          title: values.title,\n          description: values.description,\n          color: values.color,\n          textColor: values.textColor,\n          allDay: values.allDay,\n          start: values.start,\n          end: values.end\n        };\n\n        if (event) {\n          await updateEvent(event.id, newEvent);\n          openSnackbar({\n            open: true,\n            message: 'Event update successfully.',\n            variant: 'alert',\n\n            alert: {\n              color: 'success'\n            }\n          });\n          modalCallback(false);\n        } else {\n          await createEvent(newEvent);\n          openSnackbar({\n            open: true,\n            message: 'Event added successfully.',\n            variant: 'alert',\n\n            alert: {\n              color: 'success'\n            }\n          });\n          modalCallback(false);\n        }\n\n        setSubmitting(false);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  });\n\n  const { values, errors, touched, handleSubmit, isSubmitting, getFieldProps, setFieldValue } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <DialogTitle>{event ? 'Edit Event' : 'Add Event'}</DialogTitle>\n          <Divider />\n          <DialogContent sx={{ p: 2.5 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"cal-title\">Title</InputLabel>\n                  <TextField\n                    fullWidth\n                    id=\"cal-title\"\n                    placeholder=\"Title\"\n                    {...getFieldProps('title')}\n                    error={Boolean(touched.title && errors.title)}\n                    helperText={touched.title && errors.title}\n                  />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"cal-description\">Description</InputLabel>\n                  <TextField\n                    fullWidth\n                    id=\"cal-description\"\n                    multiline\n                    rows={3}\n                    placeholder=\"Description\"\n                    {...getFieldProps('description')}\n                    error={Boolean(touched.description && errors.description)}\n                    helperText={touched.description && errors.description}\n                  />\n                </Stack>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel control={<Switch checked={values.allDay} {...getFieldProps('allDay')} />} label=\"All day\" />\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"cal-start-date\">Start Date</InputLabel>\n                  <MobileDateTimePicker\n                    value={new Date(values.start)}\n                    format=\"dd/MM/yyyy hh:mm a\"\n                    onChange={(date) => setFieldValue('start', date)}\n                    slotProps={{\n                      textField: {\n                        InputProps: {\n                          endAdornment: (\n                            <InputAdornment position=\"end\" sx={{ cursor: 'pointer' }}>\n                              <Calendar />\n                            </InputAdornment>\n                          )\n                        }\n                      }\n                    }}\n                  />\n                </Stack>\n                {touched.start && errors.start && <FormHelperText error={true}>{errors.start}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"cal-end-date\">End Date</InputLabel>\n                  <MobileDateTimePicker\n                    value={new Date(values.end)}\n                    format=\"dd/MM/yyyy hh:mm a\"\n                    onChange={(date) => setFieldValue('end', date)}\n                    slotProps={{\n                      textField: {\n                        InputProps: {\n                          endAdornment: (\n                            <InputAdornment position=\"end\" sx={{ cursor: 'pointer' }}>\n                              <Calendar />\n                            </InputAdornment>\n                          )\n                        }\n                      }\n                    }}\n                  />\n                </Stack>\n                {touched.start && errors.start && <FormHelperText error={true}>{errors.start}</FormHelperText>}\n              </Grid>\n              <Grid item xs={12}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Background Color</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <FormControl>\n                      <RadioGroup\n                        row\n                        aria-label=\"color\"\n                        {...getFieldProps('color')}\n                        onChange={(e) => setFieldValue('color', e.target.value)}\n                        name=\"color-radio-buttons-group\"\n                        sx={{ '& .MuiFormControlLabel-root': { mr: 2 } }}\n                      >\n                        {backgroundColor.map((item, index) => (\n                          <ColorPalette key={index} value={item.value} color={item.color} isLight={item.isLight} />\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">Text Color</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        row\n                        aria-label=\"textColor\"\n                        {...getFieldProps('textColor')}\n                        onChange={(e) => setFieldValue('textColor', e.target.value)}\n                        name=\"text-color-radio-buttons-group\"\n                        sx={{ '& .MuiFormControlLabel-root': { mr: 2 } }}\n                      >\n                        {textColor.map((item, index) => (\n                          <ColorPalette key={index} value={item.value} color={item.color} isLight={item.isLight} />\n                        ))}\n                      </RadioGroup>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <Divider />\n          <DialogActions sx={{ p: 2.5 }}>\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\">\n              <Grid item>\n                {!isCreating && (\n                  <Tooltip title=\"Delete Event\" placement=\"top\">\n                    <IconButton onClick={deleteHandler} size=\"large\" color=\"error\">\n                      <Trash variant=\"Bold\" />\n                    </IconButton>\n                  </Tooltip>\n                )}\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                  <Button color=\"error\" onClick={onCancel}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" variant=\"contained\" disabled={isSubmitting}>\n                    {event ? 'Edit' : 'Add'}\n                  </Button>\n                </Stack>\n              </Grid>\n            </Grid>\n          </DialogActions>\n        </Form>\n      </LocalizationProvider>\n    </FormikProvider>\n  );\n}\n\nAddEventFrom.propTypes = { event: PropTypes.any, range: PropTypes.any, onCancel: PropTypes.func, modalCallback: PropTypes.func };\n","size_bytes":14423},"src/sections/components-overview/speeddial/OpenIconSpeedDial.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport SpeedDial from '@mui/material/SpeedDial';\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Copy, Edit, Heart, Printer, Save2, Share } from 'iconsax-react';\n\n// =============================|| SPEEDDIAL - CUSTOM CLOSE ICON ||============================= //\n\nexport default function OpenIconSpeedDial() {\n  // fab action options\n  const actions = [\n    { icon: <Copy />, name: 'Copy' },\n    { icon: <Save2 />, name: 'Save' },\n    { icon: <Printer />, name: 'Print' },\n    { icon: <Share />, name: 'Share' },\n    { icon: <Heart />, name: 'Like' }\n  ];\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [hidden, setHidden] = useState(false);\n  const handleVisibility = () => {\n    setHidden((prevHidden) => !prevHidden);\n  };\n\n  const customSpeeddialCodeString = `<Box sx={{ height: 430, transform: 'translateZ(0px)', flexGrow: 1 }}>\n  <Button onClick={handleVisibility}>Toggle Speed Dial</Button>\n  <SpeedDial\n    ariaLabel=\"SpeedDial openIcon example\"\n    hidden={hidden}\n    icon={<SpeedDialIcon openIcon={<Edit style={{ fontSize: '1.3rem' }} />} />}\n    onClose={handleClose}\n    onOpen={handleOpen}\n    open={open}\n    sx={{ position: 'absolute', bottom: 16, right: 16 }}\n  >\n    {actions.map((action) => (\n      <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} />\n    ))}\n  </SpeedDial>\n</Box>`;\n\n  return (\n    <MainCard title=\"Custom Close Icon\" codeString={customSpeeddialCodeString}>\n      <Box sx={{ height: 430, transform: 'translateZ(0px)', flexGrow: 1 }}>\n        <Button onClick={handleVisibility}>Toggle Speed Dial</Button>\n        <SpeedDial\n          ariaLabel=\"SpeedDial openIcon example\"\n          hidden={hidden}\n          icon={<SpeedDialIcon openIcon={<Edit style={{ fontSize: '1.3rem' }} />} />}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          open={open}\n          sx={{ position: 'absolute', bottom: 16, right: 16, '& .MuiSpeedDialAction-fab': { bgcolor: 'secondary.200' } }}\n        >\n          {actions.map((action) => (\n            <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} onClick={handleClose} />\n          ))}\n        </SpeedDial>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":2615},"src/sections/forms/validation/google-map-autocomplete/index.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport TextField from '@mui/material/TextField';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport countries from 'data/countries';\n\n// assets\nimport GoogleMaps from './GoogleMap';\nimport MainCard from 'components/MainCard';\nimport trimFc from 'utils/trimFc';\n\n// validation schema\nconst validationSchema = yup.object({\n  country: yup.string().required('Country is required').nullable(),\n  county: yup.string().required('Region required'),\n  city: yup.string().required('City required'),\n  address1: yup.string().required('Address1 is required'),\n  postCode: yup.string().required('Post Code is required')\n});\n\n// ==============================|| FORMS VALIDATION - ADDRESS ||============================== //\n\nexport default function GoogleMapAutocomplete() {\n  const theme = useTheme();\n\n  const formik = useFormik({\n    initialValues: {\n      address1: '',\n      address2: '',\n      city: '',\n      county: '',\n      country: '',\n      postCode: ''\n    },\n    validationSchema,\n    onSubmit: async () => {\n      // submit location\n    }\n  });\n\n  return (\n    <MainCard title=\"Google Map Autocomplete (Address)\">\n      <form onSubmit={formik.handleSubmit} id=\"google-map-forms\">\n        <Grid container spacing={3.5}>\n          <Grid item xs={12}>\n            <GoogleMaps formik={formik} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Country</InputLabel>\n              <Autocomplete\n                id=\"country\"\n                value={formik.values.country}\n                onChange={(event, newValue) => {\n                  formik.setFieldValue('country', newValue);\n                }}\n                options={countries.map((item) => item.label)}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    placeholder=\"Select Country\"\n                    sx={{ '& .MuiAutocomplete-input.Mui-disabled': { WebkitTextFillColor: theme.palette.text.primary } }}\n                  />\n                )}\n              />\n            </Stack>\n            {formik.touched.country && formik.errors.country && (\n              <FormHelperText error id=\"helper-text-country\">\n                {formik.errors.country}\n              </FormHelperText>\n            )}\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Post Code</InputLabel>\n              <TextField\n                id=\"postCode\"\n                name=\"postCode\"\n                placeholder=\"Post Code\"\n                value={formik.values.postCode}\n                onChange={trimFc(formik)}\n                onBlur={formik.handleBlur}\n                error={formik.touched.postCode && Boolean(formik.errors.postCode)}\n                helperText={formik.touched.postCode && formik.errors.postCode}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>City</InputLabel>\n              <TextField\n                id=\"city\"\n                name=\"city\"\n                placeholder=\"Enter City\"\n                value={formik.values.city}\n                onChange={trimFc(formik)}\n                onBlur={formik.handleBlur}\n                error={formik.touched.city && Boolean(formik.errors.city)}\n                helperText={formik.touched.city && formik.errors.city}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Region</InputLabel>\n              <TextField\n                id=\"county\"\n                name=\"county\"\n                placeholder=\"Enter Region/County\"\n                value={formik.values.county}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.county && Boolean(formik.errors.county)}\n                helperText={formik.touched.county && formik.errors.county}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>1st Line</InputLabel>\n              <TextField\n                id=\"address1\"\n                name=\"address1\"\n                placeholder=\"1st Line\"\n                value={formik.values.address1}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.address1 && Boolean(formik.errors.address1)}\n                helperText={formik.touched.address1 && formik.errors.address1}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>2nd Line (Optional)</InputLabel>\n              <TextField\n                id=\"address2\"\n                name=\"address2\"\n                placeholder=\"2nd Line\"\n                value={formik.values.address2}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                fullWidth\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" spacing={2}>\n              <Button variant=\"outlined\" color=\"secondary\" type=\"reset\" onClick={() => formik.resetForm()}>\n                Undo Changes\n              </Button>\n              <Button variant=\"contained\" type=\"submit\" disabled={formik.isSubmitting}>\n                Update\n              </Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":6271},"src/sections/forms/edit-forms/works/index.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function EditWorkPage() {\n  const idPage = useLocation().pathname.split('/').splice(-1).toString();\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      const response = await axiosInstance.put('admin/edit/works/' + idPage, data);\n      console.log('response:', response);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveArticles = await axiosInstance.get('admin/edit/works/' + idPage);\n        if (retrieveArticles.status === 200) {\n          console.log(retrieveArticles);\n          setData(retrieveArticles.data);\n        } else {\n          console.error('Failed to retrieve work');\n        }\n      } catch (error) {\n        console.error('Error fetching work:', error);\n      }\n    };\n\n    fetchData();\n  }, [idPage]);\n\n  return (\n    <MainCard title=\"Edit work page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully edited a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6520},"src/sections/apps/e-commerce/checkout/CartEmpty.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowRight2 } from 'iconsax-react';\n\nimport imageEmpty from 'assets/images/e-commerce/empty.png';\nimport imageDarkEmpty from 'assets/images/e-commerce/empty-dark.png';\n\n// ==============================|| CHECKOUT - EMPTY ||============================== //\n\nexport default function CartEmpty() {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('lg'));\n\n  return (\n    <MainCard content={false}>\n      <Grid\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={3}\n        sx={{ my: 3, height: { xs: 'auto', md: 'calc(100vh - 240px)' }, p: { xs: 2.5, md: 'auto' } }}\n      >\n        <Grid item>\n          <CardMedia\n            component=\"img\"\n            image={theme.palette.mode === ThemeMode.DARK ? imageDarkEmpty : imageEmpty}\n            title=\"Cart Empty\"\n            sx={{ width: { xs: 240, md: 320, lg: 440 } }}\n          />\n        </Grid>\n        <Grid item>\n          <Stack spacing={0.5}>\n            <Typography variant={matchDownMD ? 'h3' : 'h1'} color=\"inherit\">\n              Add items to your cart\n            </Typography>\n            <Typography variant=\"h5\" color=\"text.secondary\">\n              Explore around to add items in your shopping bag.\n            </Typography>\n            <Box sx={{ pt: 3 }}>\n              <Button variant=\"contained\" size=\"large\" endIcon={<ArrowRight2 />}>\n                Explore your bag\n              </Button>\n            </Box>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":2037},"src/components/@extended/Breadcrumbs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport MuiBreadcrumbs from '@mui/material/Breadcrumbs';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport navigation from 'menu-items';\nimport { ThemeDirection } from 'config';\n\n// assets\nimport { ArrowRight2, Buildings2, Home3 } from 'iconsax-react';\n\n// ==============================|| BREADCRUMBS ||============================== //\n\nexport default function Breadcrumbs({\n  card = false,\n  custom = false,\n  divider = false,\n  heading,\n  icon,\n  icons,\n  links,\n  maxItems,\n  rightAlign,\n  separator,\n  title = true,\n  titleBottom = true,\n  sx,\n  ...others\n}) {\n  const theme = useTheme();\n  const location = useLocation();\n  const [main, setMain] = useState();\n  const [item, setItem] = useState();\n\n  const iconSX = {\n    marginRight: theme.direction === ThemeDirection.RTL ? 0 : theme.spacing(0.75),\n    marginLeft: theme.direction === ThemeDirection.RTL ? theme.spacing(0.75) : 0,\n    width: '1rem',\n    height: '1rem',\n    color: theme.palette.secondary.main\n  };\n\n  let customLocation = location.pathname;\n\n  // only used for component demo breadcrumbs\n  if (customLocation.includes('/components-overview/breadcrumbs')) {\n    customLocation = '/apps/customer/customer-card';\n  }\n\n  useEffect(() => {\n    navigation?.items?.map((menu) => {\n      if (menu.type && menu.type === 'group') {\n        if (menu?.url && menu.url === customLocation) {\n          setMain(menu);\n          setItem(menu);\n        } else {\n          getCollapse(menu);\n        }\n      }\n      return false;\n    });\n  });\n\n  // set active item state\n  const getCollapse = (menu) => {\n    if (!custom && menu.children) {\n      menu.children.filter((collapse) => {\n        if (collapse.type && collapse.type === 'collapse') {\n          getCollapse(collapse);\n          if (collapse.url === customLocation) {\n            setMain(collapse);\n            setItem(collapse);\n          }\n        } else if (collapse.type && collapse.type === 'item') {\n          if (customLocation === collapse.url) {\n            setMain(menu);\n            setItem(collapse);\n          }\n        }\n        return false;\n      });\n    }\n  };\n\n  // item separator\n  const SeparatorIcon = separator;\n  const separatorIcon = separator ? <SeparatorIcon size={12} /> : <ArrowRight2 size={12} />;\n\n  let mainContent;\n  let itemContent;\n  let breadcrumbContent = <Typography />;\n  let itemTitle = '';\n  let CollapseIcon;\n  let ItemIcon;\n\n  // collapse item\n  if (!custom && main && main.type === 'collapse' && main.breadcrumbs === true) {\n    CollapseIcon = main.icon ? main.icon : Buildings2;\n    mainContent = (\n      <Typography\n        component={Link}\n        to={document.location.pathname}\n        variant=\"body1\"\n        sx={{ textDecoration: 'none', display: 'flex', alignItems: 'center' }}\n        color={window.location.pathname === main.url ? 'text.secondary' : 'text.primary'}\n      >\n        {icons && <CollapseIcon style={iconSX} />}\n        {main.title}\n      </Typography>\n    );\n    breadcrumbContent = (\n      <MainCard\n        border={card}\n        sx={card === false ? { mb: 3, bgcolor: 'transparent', ...sx } : { mb: 3, ...sx }}\n        {...others}\n        content={card}\n        boxShadow={false}\n      >\n        <Grid\n          container\n          direction={rightAlign ? 'row' : 'column'}\n          justifyContent={rightAlign ? 'space-between' : 'flex-start'}\n          alignItems={rightAlign ? 'center' : 'flex-start'}\n          spacing={0.5}\n        >\n          <Grid item>\n            <MuiBreadcrumbs aria-label=\"breadcrumb\" maxItems={maxItems || 8} separator={separatorIcon}>\n              <Typography\n                component={Link}\n                to=\"/\"\n                variant=\"body1\"\n                sx={{ textDecoration: 'none', display: 'flex', alignItems: 'center' }}\n                color=\"text.primary\"\n              >\n                {icons && <Home3 style={iconSX} />}\n                {icon && !icons && <Home3 variant=\"Bold\" style={{ ...iconSX, marginRight: 0 }} />}\n                {(!icon || icons) && 'Home'}\n              </Typography>\n              {mainContent}\n            </MuiBreadcrumbs>\n          </Grid>\n          {title && titleBottom && (\n            <Grid item sx={{ mt: card === false ? 0 : 1 }}>\n              <Typography variant=\"h2\" sx={{ fontWeight: 700 }}>\n                {main.title}\n              </Typography>\n            </Grid>\n          )}\n        </Grid>\n        {card === false && divider !== false && <Divider sx={{ mt: 2 }} />}\n      </MainCard>\n    );\n  }\n\n  // items\n  if ((item && item.type === 'item') || (item?.type === 'group' && item?.url) || custom) {\n    itemTitle = item?.title;\n\n    ItemIcon = item?.icon ? item.icon : Buildings2;\n    itemContent = (\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ display: 'flex', alignItems: 'center' }}>\n        {icons && <ItemIcon style={iconSX} />}\n        {itemTitle}\n      </Typography>\n    );\n\n    let tempContent = (\n      <MuiBreadcrumbs aria-label=\"breadcrumb\" maxItems={maxItems || 8} separator={separatorIcon}>\n        <Typography\n          component={Link}\n          to=\"/\"\n          color=\"text.secondary\"\n          variant=\"h6\"\n          sx={{ textDecoration: 'none', display: 'flex', alignItems: 'center' }}\n        >\n          {icons && <Home3 style={iconSX} />}\n          {icon && !icons && <Home3 variant=\"Bold\" style={{ ...iconSX, marginRight: 0 }} />}\n          {(!icon || icons) && 'Home'}\n        </Typography>\n        {mainContent}\n        {itemContent}\n      </MuiBreadcrumbs>\n    );\n\n    if (custom && links && links?.length > 0) {\n      tempContent = (\n        <MuiBreadcrumbs aria-label=\"breadcrumb\" maxItems={maxItems || 8} separator={separatorIcon}>\n          {links?.map((link, index) => {\n            CollapseIcon = link.icon ? link.icon : Buildings2;\n\n            return (\n              <Typography\n                key={index}\n                {...(link.to && { component: Link, to: link.to })}\n                variant=\"body1\"\n                sx={{ textDecoration: 'none', display: 'flex', alignItems: 'center' }}\n                color={link.to ? 'text.primary' : 'text.secondary'}\n              >\n                {link.icon && <CollapseIcon style={iconSX} />}\n                {link.title}\n              </Typography>\n            );\n          })}\n        </MuiBreadcrumbs>\n      );\n    }\n\n    // main\n    if (item?.breadcrumbs !== false || custom) {\n      breadcrumbContent = (\n        <MainCard\n          border={card}\n          sx={card === false ? { mb: 3, bgcolor: 'transparent', ...sx } : { mb: 3, ...sx }}\n          {...others}\n          content={card}\n          boxShadow={false}\n        >\n          <Grid\n            container\n            direction={rightAlign ? 'row' : 'column'}\n            justifyContent={rightAlign ? 'space-between' : 'flex-start'}\n            alignItems={rightAlign ? 'center' : 'flex-start'}\n            spacing={0.5}\n          >\n            {title && !titleBottom && (\n              <Grid item>\n                <Typography variant=\"h2\" sx={{ fontWeight: 700 }}>\n                  {custom ? heading : item?.title}\n                </Typography>\n              </Grid>\n            )}\n            <Grid item>{tempContent}</Grid>\n            {title && titleBottom && (\n              <Grid item sx={{ mt: card === false ? 0 : 1 }}>\n                <Typography variant=\"h2\" sx={{ fontWeight: 700 }}>\n                  {custom ? heading : item?.title}\n                </Typography>\n              </Grid>\n            )}\n          </Grid>\n          {card === false && divider !== false && <Divider sx={{ mt: 2 }} />}\n        </MainCard>\n      );\n    }\n  }\n\n  return breadcrumbContent;\n}\n\nBreadcrumbs.propTypes = {\n  card: PropTypes.bool,\n  custom: PropTypes.bool,\n  divider: PropTypes.bool,\n  heading: PropTypes.string,\n  icon: PropTypes.bool,\n  icons: PropTypes.bool,\n  links: PropTypes.array,\n  maxItems: PropTypes.number,\n  rightAlign: PropTypes.bool,\n  separator: PropTypes.any,\n  title: PropTypes.bool,\n  titleBottom: PropTypes.bool,\n  sx: PropTypes.any,\n  others: PropTypes.any\n};\n","size_bytes":8379},"src/themes/overrides/TreeItem.js":{"content":"// ==============================|| OVERRIDES - TREE ITEM ||============================== //\n\nexport default function TreeItem() {\n  return {\n    MuiTreeItem: {\n      styleOverrides: {\n        content: {\n          padding: 8\n        },\n        label: {\n          '& svg': {\n            width: 20,\n            height: 20\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":364},"src/themes/overrides/TablePagination.js":{"content":"// ==============================|| OVERRIDES - TABLE PAGINATION ||============================== //\n\nexport default function TablePagination() {\n  return {\n    MuiTablePagination: {\n      styleOverrides: {\n        selectLabel: {\n          fontSize: '0.875rem'\n        },\n        displayedRows: {\n          fontSize: '0.875rem'\n        }\n      }\n    }\n  };\n}\n","size_bytes":359},"src/menu-items/forms-tables.jsx":{"content":"// third-party\nimport { FormattedMessage } from 'react-intl';\n\n// assets\nimport { Book, PasswordCheck, Next, RowVertical, CpuCharge, TableDocument, Subtitle } from 'iconsax-react';\n\n// type\n\n// icons\nconst icons = {\n  formsTable: Book,\n  validation: PasswordCheck,\n  wizard: Next,\n  layout: RowVertical,\n  plugins: CpuCharge,\n  reactTables: TableDocument,\n  muiTables: Subtitle\n};\n\n// ==============================|| MENU ITEMS - FORMS & TABLES ||============================== //\n\nconst formsTables = {\n  id: 'group-blog-management',\n  title: <FormattedMessage id=\"Blog & Offers\" />,\n  icon: icons.formsTable,\n  type: 'group',\n  children: [\n    {\n      id: 'blog-management',\n      title: <FormattedMessage id=\"Blog Management\" />,\n      type: 'collapse',\n      icon: icons.wizard,\n      children: [\n        {\n          id: 'add-blog',\n          title: <FormattedMessage id=\"Add Blog Article\" />,\n          type: 'item',\n          url: '/forms/blog',\n          icon: icons.wizard\n        },\n        {\n          id: 'list-blogs',\n          title: <FormattedMessage id=\"Blog Articles List\" />,\n          type: 'item',\n          url: '/tables/blogs',\n          icon: icons.reactTables\n        }\n      ]\n    },\n    {\n      id: 'special-offer',\n      title: <FormattedMessage id=\"Special Offer Form\" />,\n      type: 'item',\n      url: '/forms/special-offer',\n      icon: icons.validation\n    }\n  ]\n};\n\nexport default formsTables;\n","size_bytes":1427},"src/sections/apps/chat/ChatHeader.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport List from '@mui/material/List';\nimport Skeleton from '@mui/material/Skeleton';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// project-import\nimport UserAvatar from './UserAvatar';\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { HambergerMenu } from 'iconsax-react';\n\n// ==============================|| CHAT HEADER ||============================== //\n\nexport default function ChatHeader({ loading, user, handleDrawerOpen }) {\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n      <IconButton onClick={handleDrawerOpen} color=\"secondary\" size=\"large\">\n        <HambergerMenu />\n      </IconButton>\n      {loading && Object.keys(user).length === 0 ? (\n        <List disablePadding>\n          <ListItem disablePadding disableGutters>\n            <ListItemAvatar>\n              <Skeleton variant=\"circular\" width={40} height={40} />\n            </ListItemAvatar>\n            <ListItemText\n              sx={{ my: 0 }}\n              primary={<Skeleton animation=\"wave\" height={24} width={50} />}\n              secondary={<Skeleton animation=\"wave\" height={16} width={80} />}\n            />\n          </ListItem>\n        </List>\n      ) : (\n        <>\n          <UserAvatar\n            user={{\n              online_status: user.online_status,\n              avatar: user.avatar,\n              name: user.name\n            }}\n          />\n          <Stack>\n            <Typography variant=\"subtitle1\">{user.name}</Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Active {user.lastMessage} ago\n            </Typography>\n          </Stack>\n        </>\n      )}\n    </Stack>\n  );\n}\n\nChatHeader.propTypes = { loading: PropTypes.bool, user: PropTypes.any, handleDrawerOpen: PropTypes.func };\n","size_bytes":2042},"src/data/location.js":{"content":"export const countries = [\n  {\n    timezones: ['Asia/Yerevan'],\n    latlng: [40.07, 45.04],\n    name: 'Armenia',\n    country_code: 'AM',\n    capital: 'Yerevan'\n  },\n  {\n    timezones: ['Asia/Kabul'],\n    latlng: [33.94, 67.71],\n    name: 'Afghanistan',\n    country_code: 'AF',\n    capital: 'Kabul'\n  },\n  {\n    timezones: ['Asia/Baku'],\n    latlng: [40.14, 47.58],\n    name: 'Azerbaijan',\n    country_code: 'AZ',\n    capital: 'Baku'\n  },\n  {\n    timezones: ['Asia/Dhaka'],\n    latlng: [23.68, 90.36],\n    name: 'Bangladesh',\n    country_code: 'BD',\n    capital: 'Dhaka'\n  },\n  {\n    timezones: ['Asia/Bahrain'],\n    latlng: [25.93, 50.64],\n    name: 'Bahrain',\n    country_code: 'BF',\n    capital: 'Manama'\n  },\n  {\n    timezones: ['Asia/Thimphu'],\n    latlng: [27.51, 90.43],\n    name: 'Bhutan',\n    country_code: 'BT',\n    capital: 'Thimphu'\n  },\n  {\n    timezones: ['Asia/Phnom_Penh'],\n    latlng: [12.57, 104.99],\n    name: 'Cambodia',\n    country_code: 'KH',\n    capital: 'Phnom Penh'\n  },\n  {\n    timezones: ['\tAsia/Shanghai'],\n    latlng: [35.86, 104.2],\n    name: 'China',\n    country_code: 'CN',\n    capital: 'Beijing'\n  },\n  {\n    timezones: ['\tAsia/Tbilisi'],\n    latlng: [42.32, 43.36],\n    name: 'Georgia',\n    country_code: 'GE',\n    capital: 'Tbilisi'\n  },\n  {\n    timezones: ['Asia/Kolkata'],\n    latlng: [20.59, 78.96],\n    name: 'India',\n    country_code: 'IN',\n    capital: 'Delhi'\n  },\n  {\n    timezones: ['Asia/Hong_Kong'],\n    latlng: [22.4, 114.11],\n    name: 'Hong Kong',\n    country_code: 'HK',\n    capital: 'Victoria'\n  }\n];\n\nexport const cities = [\n  {\n    city: 'Lucknow',\n    population: '3,945,000',\n    state: 'Uttar Pradesh',\n    latitude: 26.85,\n    longitude: 80.949997\n  },\n  {\n    city: 'Delhi',\n    population: '32,941,000',\n    state: 'Delhi',\n    latitude: 28.679079,\n    longitude: 77.06971\n  },\n  {\n    city: 'Mumbai',\n    population: '21,297,000',\n    state: 'Maharashtra',\n    latitude: 19.07609,\n    longitude: 72.877426\n  },\n  {\n    city: 'Sagar',\n    population: '3,306,057',\n    state: 'Karnataka',\n    latitude: 14.16704,\n    longitude: 75.040298\n  },\n  {\n    city: 'Ahmedabad',\n    population: '1,445,632',\n    state: 'Gujarat',\n    latitude: 23.0225,\n    longitude: 72.5714\n  },\n  {\n    city: '\tBengaluru ',\n    population: '8,443,675',\n    state: 'Karnataka',\n    latitude: 12.972,\n    longitude: 77.594\n  },\n  {\n    city: 'Hyderabad ',\n    population: '6,809,970',\n    state: 'Telangana',\n    latitude: 17.384,\n    longitude: 78.456\n  },\n  {\n    city: '\tChennai',\n    population: '4,681,087',\n    state: 'Tamil Nadu',\n    latitude: 13.088,\n    longitude: 80.278\n  },\n  {\n    city: 'Dallas',\n    population: '1,197,816',\n    state: 'Texas',\n    latitude: 32.7757,\n    longitude: -96.7967\n  },\n  {\n    city: 'Kolkata',\n    population: '4,631,392',\n    state: 'West Bengal',\n    latitude: 22.563,\n    longitude: 88.363\n  },\n  {\n    city: 'Surat ',\n    population: '\t4,591,246',\n    state: 'Gujarat',\n    latitude: 21.196,\n    longitude: 72.83\n  },\n  {\n    city: 'Pune ',\n    population: '3,124,458',\n    state: 'Maharashtra',\n    latitude: 18.52,\n    longitude: 73.855\n  },\n  {\n    city: '\tKanpur',\n    population: '2,823,249',\n    state: 'Uttar Pradesh',\n    latitude: 26.465,\n    longitude: 80.35\n  },\n  {\n    city: 'Jaipur',\n    population: '2,711,758',\n    state: 'Rajasthan',\n    latitude: 26.92,\n    longitude: 75.788\n  },\n  {\n    city: 'Patna',\n    population: '2,321,000',\n    state: 'Bihar',\n    latitude: 25.615379,\n    longitude: 85.101027\n  },\n  {\n    city: 'Āgra',\n    population: '2,426,000',\n    state: 'Uttar Pradesh',\n    latitude: 27.187935,\n    longitude: 78.003944\n  },\n  {\n    city: 'Vadodara',\n    population: '1,822,221',\n    state: 'Gujarat',\n    latitude: 22.299405,\n    longitude: 73.208119\n  },\n  {\n    city: 'Bhopal',\n    population: '2,565,000',\n    state: 'Madhya Pradesh',\n    latitude: 23.254688,\n    longitude: 77.402892\n  },\n  {\n    city: 'Coimbatore',\n    population: '3,009,000',\n    state: 'Tamil Nadu',\n    latitude: 11.005547,\n    longitude: 76.966122\n  },\n  {\n    city: 'Ludhiāna',\n    population: '1,951,000',\n    state: 'Punjab',\n    latitude: 30.912042,\n    longitude: 75.853789\n  }\n];\n","size_bytes":4180},"src/sections/charts/apexchart/ApexColumnChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\nimport { ThemeMode } from 'config';\n\n// chart options\nconst columnChartOptions = {\n  chart: {\n    type: 'bar',\n    height: 350\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      columnWidth: '55%',\n      endingShape: 'rounded'\n    }\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    show: true,\n    width: 2,\n    colors: ['transparent']\n  },\n  xaxis: {\n    categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct']\n  },\n  yaxis: {\n    title: {\n      text: '$ (thousands)'\n    }\n  },\n  fill: {\n    opacity: 1\n  },\n  tooltip: {\n    y: {\n      formatter(val) {\n        return `$ ${val} thousands`;\n      }\n    }\n  },\n  legend: {\n    show: true,\n    fontFamily: `Inter var`,\n    position: 'bottom',\n    offsetX: 10,\n    offsetY: 10,\n    labels: {\n      useSeriesColors: false\n    },\n    markers: {\n      width: 16,\n      height: 16,\n      radius: 5\n    },\n    itemMargin: {\n      horizontal: 15,\n      vertical: 8\n    }\n  },\n  responsive: [\n    {\n      breakpoint: 600,\n      options: {\n        yaxis: {\n          show: false\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| APEXCHART - COLUMN ||============================== //\n\nexport default function ApexColumnChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n\n  const secondary = theme.palette.primary[700];\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.main;\n\n  const [series] = useState([\n    {\n      name: 'Net Profit',\n      data: [44, 55, 57, 56, 61, 58, 63, 60, 66]\n    },\n    {\n      name: 'Revenue',\n      data: [76, 85, 101, 98, 87, 105, 91, 114, 94]\n    },\n    {\n      name: 'Free Cash Flow',\n      data: [35, 41, 36, 26, 45, 48, 52, 53, 41]\n    }\n  ]);\n\n  const [options, setOptions] = useState(columnChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary, primaryMain, successDark],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, secondary, primaryMain, successDark]);\n\n  return (\n    <Box id=\"chart\" sx={{ '& .apexcharts-legend': { flexDirection: matchDownMd ? 'column' : 'row' } }}>\n      <ReactApexChart options={options} series={series} type=\"bar\" height={350} />\n    </Box>\n  );\n}\n","size_bytes":3219},"src/components/third-party/react-table/DraggableRow.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\n\n// third-party\nimport { useDrag, useDrop } from 'react-dnd';\n\n// project-import\nimport IconButton from 'components/@extended/IconButton';\n\n// assets\nimport { HambergerMenu } from 'iconsax-react';\n\n// ==============================|| DRAGGABLE ROW ||============================== //\n\nexport default function DraggableRow({ row, reorderRow, children }) {\n  const [{ isOverCurrent }, dropRef] = useDrop({\n    accept: 'row',\n    drop: (draggedRow) => reorderRow(draggedRow.index, row.index),\n    collect: (monitor) => ({ isOver: monitor.isOver(), isOverCurrent: monitor.isOver({ shallow: true }) })\n  });\n\n  const [{ isDragging }, dragRef, previewRef] = useDrag({\n    collect: (monitor) => ({ isDragging: monitor.isDragging() }),\n    item: () => row,\n    type: 'row'\n  });\n\n  return (\n    <TableRow\n      //previewRef could go here\n      ref={previewRef}\n      sx={{ opacity: isDragging ? 0.5 : 1, bgcolor: isOverCurrent ? 'primary.lighter' : 'inherit' }}\n    >\n      <TableCell ref={dropRef}>\n        <IconButton\n          ref={dragRef}\n          size=\"small\"\n          sx={{ p: 0, width: 24, height: 24, fontSize: '1rem', mr: 0.75 }}\n          color=\"secondary\"\n          disabled={row.getIsGrouped()}\n        >\n          <HambergerMenu size=\"32\" variant=\"Outline\" />\n        </IconButton>\n      </TableCell>\n      {children}\n    </TableRow>\n  );\n}\n\nDraggableRow.propTypes = { row: PropTypes.object, reorderRow: PropTypes.func, children: PropTypes.node };\n","size_bytes":1604},"src/sections/widget/statistics/PermissionBlock.jsx":{"content":"// material-ui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { Lock1 } from 'iconsax-react';\n\n// ===========================|| STATISTICS - PERMISSION BLOCK ||=========================== //\n\nexport default function PermissionBlock() {\n  return (\n    <MainCard sx={{ bgcolor: 'primary.lighter' }}>\n      <Stack spacing={1.5} alignItems=\"center\">\n        <Avatar type=\"filled\" variant=\"rounded\">\n          <Lock1 />\n        </Avatar>\n        <Stack alignItems=\"center\" spacing={0.5}>\n          <Typography variant=\"h5\">Unlock All Features</Typography>\n          <Typography>Unlock All Features</Typography>\n        </Stack>\n        <Button fullWidth variant=\"contained\">\n          Upgrade to premium\n        </Button>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":975},"src/sections/forms/wizard/services-validation-wizard/Review.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport React from 'react';\nimport ImageDisplay from 'components/ImageDisplay';\n\n// ==============================|| VALIDATION WIZARD - REVIEW  ||============================== //\n\nexport default function Review({ data }) {\n  console.log(data.imageLabelSrc);\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Summary\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Page ID\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.id}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Meta keywords\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.metaKeywords}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Label Image of page\n            </Typography>\n            <ImageDisplay file={data.imageLabelSrc} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Title of the page\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.title}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Subheading\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.titleDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First icon title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstIconTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Icon\n            </Typography>\n            <ImageDisplay file={data.firstIconPath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              First icon description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.firstIconDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second icon title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondIconTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Icon\n            </Typography>\n            <ImageDisplay file={data.secondIconPath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Second icon description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.secondIconDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image title\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.imageTitle}\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image\n            </Typography>\n            <ImageDisplay file={data.imageTitlePath} />\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack spacing={1}>\n            <Typography variant=\"h6\" gutterBottom>\n              Main image description\n            </Typography>\n            <Typography variant=\"body\" gutterBottom>\n              {data.imageTitleDescription}\n            </Typography>\n          </Stack>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","size_bytes":5059},"src/sections/apps/invoice/InvoiceField.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport TableCell from '@mui/material/TableCell';\nimport TextField from '@mui/material/TextField';\n\n// ==============================|| INVOICE - TEXT FIELD ||============================== //\n\nexport default function InvoiceField({ onEditItem, cellData }) {\n  return (\n    <TableCell sx={{ '& .MuiFormHelperText-root': { position: 'absolute', bottom: -24, ml: 0 } }}>\n      <TextField\n        type={cellData.type}\n        placeholder={cellData.placeholder}\n        name={cellData.name}\n        id={cellData.id}\n        value={cellData.type === 'number' ? (cellData.value > 0 ? cellData.value : '') : cellData.value}\n        onChange={onEditItem}\n        label={cellData.label}\n        error={Boolean(cellData.errors && cellData.touched)}\n        inputProps={{\n          ...(cellData.type === 'number' && { min: 0 })\n        }}\n      />\n    </TableCell>\n  );\n}\n\nInvoiceField.propTypes = { onEditItem: PropTypes.any, cellData: PropTypes.any };\n","size_bytes":993},"src/sections/widget/data/UserActivity.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Badge from '@mui/material/Badge';\nimport Stack from '@mui/material/Stack';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Clock } from 'iconsax-react';\n\nimport Avatar1 from 'assets/images/users/avatar-5.png';\nimport Avatar2 from 'assets/images/users/avatar-6.png';\nimport Avatar3 from 'assets/images/users/avatar-7.png';\n\n// ===========================|| DATA WIDGET - USER ACTIVITY ||=========================== //\n\nexport default function UserActivity() {\n  return (\n    <MainCard\n      title=\"User Activity\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <CardContent>\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Badge variant=\"dot\" overlap=\"circular\" color=\"error\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n                  <Avatar alt=\"image\" src={Avatar1} />\n                </Badge>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Typography variant=\"subtitle1\">John Deo</Typography>\n                <Typography variant=\"caption\" color=\"secondary\">\n                  Lorem Ipsum is simply dummy text.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    now\n                  </Typography>\n                  <Clock size={14} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Badge variant=\"dot\" overlap=\"circular\" color=\"success\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n                    <Avatar alt=\"image\" src={Avatar2} />\n                  </Badge>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Typography variant=\"subtitle1\">John Deo</Typography>\n                <Typography variant=\"caption\" color=\"secondary\">\n                  Lorem Ipsum is simply dummy text.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    2 min ago\n                  </Typography>\n                  <Clock size={14} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Badge variant=\"dot\" overlap=\"circular\" color=\"primary\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n                    <Avatar alt=\"image\" src={Avatar3} />\n                  </Badge>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Typography variant=\"subtitle1\">John Deo</Typography>\n                <Typography variant=\"caption\" color=\"secondary\">\n                  Lorem Ipsum is simply dummy text.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    1 day ago\n                  </Typography>\n                  <Clock size={14} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Badge variant=\"dot\" overlap=\"circular\" color=\"warning\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\n                    <Avatar alt=\"image\" src={Avatar1} />\n                  </Badge>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Typography variant=\"subtitle1\">John Deo</Typography>\n                <Typography variant=\"caption\" color=\"secondary\">\n                  Lorem Ipsum is simply dummy text.\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    3 week ago\n                  </Typography>\n                  <Clock size={14} />\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":5267},"src/sections/components-overview/notistack/index.jsx":{"content":"import ColorVariants from './ColorVariants';\nimport CustomComponent from './CustomComponent';\nimport Dense from './Dense';\nimport DismissSnackBar from './DismissSnackBar';\nimport HideDuration from './HideDuration';\nimport IconVariants from './IconVariants';\nimport MaxSnackbar from './MaxSnackbar';\nimport PositioningSnackbar from './PositioningSnackbar';\nimport PreventDuplicate from './PreventDuplicate';\nimport SnackBarAction from './SnackBarAction';\nimport TransitionBar from './TransitionBar';\n\n// ==============================|| NOTISTACK - DEFAULT ||============================== //\n\nexport {\n  ColorVariants,\n  MaxSnackbar,\n  TransitionBar,\n  CustomComponent,\n  Dense,\n  DismissSnackBar,\n  HideDuration,\n  PreventDuplicate,\n  PositioningSnackbar,\n  SnackBarAction,\n  IconVariants\n};\n","size_bytes":793},"src/sections/apps/invoice/InvoiceIncomeAreaChart.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst areaChartOptions = {\n  chart: {\n    height: 350,\n    type: 'line',\n    stacked: false,\n    toolbar: {\n      show: false\n    }\n  },\n  plotOptions: {\n    bar: {\n      columnWidth: '50%'\n    }\n  },\n  legend: {\n    show: false\n  },\n  stroke: {\n    width: [0, 2],\n    curve: 'smooth'\n  },\n  dataLabels: {\n    enabled: false\n  }\n};\n\n// ==============================|| INVOICE - INCOME AREA CHART ||============================== //\n\nexport default function InvoiceIncomeAreaChart({ series }) {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.warning.main, theme.palette.warning.main],\n      xaxis: {\n        type: 'datetime',\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        labels: {\n          style: {\n            colors: [\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary,\n              secondary\n            ]\n          }\n        },\n        axisBorder: {\n          show: false,\n          color: line\n        },\n        tickAmount: 11\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      fill: {\n        type: 'gradient',\n        gradient: {\n          inverseColors: false,\n          shade: 'light',\n          type: 'vertical',\n          opacityFrom: [0, 1],\n          opacityTo: [0.5, 1],\n          stops: [0, 100],\n          hover: {\n            inverseColors: false,\n            shade: 'light',\n            type: 'vertical',\n            opacityFrom: 0.15,\n            opacityTo: 0.65,\n            stops: [0, 96, 100]\n          }\n        }\n      },\n      markers: {\n        size: [0, 3],\n        colors: theme.palette.common.white,\n        strokeWidth: [0, 2],\n        strokeColors: theme.palette.warning.main,\n        hover: {\n          size: 5,\n          colors: theme.palette.warning.main,\n          strokeColors: theme.palette.common.white\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  return (\n    <Box sx={{ '.apexcharts-bar-area': { strokeWidth: 0 } }}>\n      <ReactApexChart options={options} series={series} type=\"line\" height={265} />\n    </Box>\n  );\n}\n\nInvoiceIncomeAreaChart.propTypes = { series: PropTypes.any };\n","size_bytes":3151},"src/sections/forms/edit-forms/services/index.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Step from '@mui/material/Step';\nimport Stepper from '@mui/material/Stepper';\nimport StepLabel from '@mui/material/StepLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Review from './Review';\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport TextForm from './TextForm';\nimport ImageForm from './ImageForm';\nimport axiosInstance from 'api/axios-instance';\nimport { CircularProgress } from '@mui/material';\n\n// step options\nconst steps = ['Add Text', 'Add Images', 'Review Page'];\n\nconst getStepContent = (step, handleNext, handleBack, setErrorIndex, data, setData) => {\n  switch (step) {\n    case 0:\n      return <TextForm handleNext={handleNext} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 1:\n      return <ImageForm handleNext={handleNext} handleBack={handleBack} setErrorIndex={setErrorIndex} data={data} setData={setData} />;\n    case 2:\n      return <Review data={data} />;\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n// ==============================|| FORMS WIZARD - VALIDATION ||============================== //\n\nfunction checkPreviousState(prevState) {\n  if (prevState) {\n    return prevState;\n  }\n  return {};\n}\n\nexport default function EditServicePage() {\n  const idPage = useLocation().pathname.split('/').splice(-1).toString();\n  const [activeStep, setActiveStep] = useState(0);\n  const [data, setData] = useState(checkPreviousState);\n  const [errorIndex, setErrorIndex] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n    setErrorIndex(null);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true); // Set loading to true when the request starts\n      console.log('data sent:', data);\n      await axiosInstance.put('admin/edit/services/' + idPage, data);\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else if (error.request) {\n        // The request was made but no response was received\n        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n        // http.ClientRequest in node.js\n        console.log(error.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n\n      setErrorMessage('Something get wrong!');\n    } finally {\n      setIsLoading(false); // Set loading to false after the request completes\n      handleNext();\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const retrieveArticles = await axiosInstance.get('admin/edit/services/' + idPage);\n        if (retrieveArticles.status === 200) {\n          console.log(retrieveArticles);\n          setData(retrieveArticles.data);\n        } else {\n          console.error('Failed to retrieve service page');\n        }\n      } catch (error) {\n        console.error('Error fetching service page:', error);\n      }\n    };\n\n    fetchData();\n  }, [idPage]);\n\n  return (\n    <MainCard title=\"Edit service page\">\n      <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n        {steps.map((label, index) => {\n          const labelProps = {};\n\n          if (index === errorIndex) {\n            labelProps.optional = (\n              <Typography variant=\"caption\" color=\"error\">\n                Error\n              </Typography>\n            );\n\n            labelProps.error = true;\n          }\n\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <>\n        {activeStep === steps.length ? (\n          <>\n            {!errorMessage ? (\n              <>\n                <Typography variant=\"h5\" gutterBottom>\n                  You successfully edited a new page!\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                {errorMessage}\n              </Typography>\n            )}\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  onClick={() => {\n                    setActiveStep(0);\n                  }}\n                  sx={{ my: 3, ml: 1 }}\n                >\n                  Back to wizard\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </>\n        ) : (\n          <>\n            {getStepContent(activeStep, handleNext, handleBack, setErrorIndex, data, setData)}\n            {activeStep === steps.length - 1 && (\n              <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n                <AnimateButton>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                    sx={{ my: 3, ml: 1 }}\n                    disabled={isLoading} // Button remains clickable\n                  >\n                    {isLoading ? (\n                      <>\n                        <CircularProgress size={20} sx={{ color: 'white', mr: 1 }} /> {/* Spinner added here */}\n                        Loading...\n                      </>\n                    ) : activeStep === steps.length - 1 ? (\n                      'Submit'\n                    ) : (\n                      'Next'\n                    )}\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            )}\n          </>\n        )}\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6528},"src/sections/components-overview/notistack/DismissSnackBar.jsx":{"content":"// material-ul\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\n// third-party\nimport { useSnackbar, enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - DISMISS ||============================== //\n\nexport default function DismissSnackBar() {\n  const { closeSnackbar } = useSnackbar();\n\n  const NotiStackDismissSnackBarCodeString = `<Button variant=\"outlined\" \n  onClick={() => enqueueSnackbar('No connection!', { variant: 'error',persist: true, anchorOrigin: { horizontal: 'center', vertical: 'bottom' }})}>\n  Back Online\n</Button>\n<Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => closeSnackbar()}>\n    Back Online\n</Button>`;\n\n  return (\n    <MainCard title=\"Dismiss Programmatically\" codeString={NotiStackDismissSnackBarCodeString}>\n      <Stack flexDirection={'row'} justifyContent={'space-between'}>\n        <Button\n          variant=\"outlined\"\n          fullWidth\n          color=\"error\"\n          sx={{ marginBlockStart: 2, marginInlineEnd: 2 }}\n          onClick={() =>\n            enqueueSnackbar('No connection!', {\n              variant: 'error',\n              persist: true,\n              anchorOrigin: { horizontal: 'center', vertical: 'bottom' }\n            })\n          }\n        >\n          Simulate connection loss\n        </Button>\n        <Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => closeSnackbar()}>\n          Back Online\n        </Button>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":1599},"src/contexts/ConfigContext.jsx":{"content":"import PropTypes from 'prop-types';\nimport { createContext } from 'react';\n\n// project-imports\nimport config from 'config';\nimport useLocalStorage from 'hooks/useLocalStorage';\n\n// initial state\nconst initialState = {\n  ...config,\n  onChangeContainer: () => {},\n  onChangeLocalization: () => {},\n  onChangeMode: () => {},\n  onChangePresetColor: () => {},\n  onChangeDirection: () => {},\n  onChangeMiniDrawer: () => {},\n  onChangeMenuOrientation: () => {},\n  onChangeMenuCaption: () => {},\n  onChangeFontFamily: () => {},\n  onChangeContrast: () => {}\n};\n\n// ==============================|| CONFIG CONTEXT & PROVIDER ||============================== //\n\nconst ConfigContext = createContext(initialState);\n\nfunction ConfigProvider({ children }) {\n  const [config, setConfig] = useLocalStorage('able-pro-material-react-ts-config', initialState);\n\n  const onChangeContainer = () => {\n    setConfig({\n      ...config,\n      container: !config.container\n    });\n  };\n\n  const onChangeLocalization = (lang) => {\n    setConfig({\n      ...config,\n      i18n: lang\n    });\n  };\n\n  const onChangeMode = (mode) => {\n    setConfig({\n      ...config,\n      mode\n    });\n  };\n\n  const onChangePresetColor = (theme) => {\n    setConfig({\n      ...config,\n      presetColor: theme\n    });\n  };\n\n  const onChangeDirection = (direction) => {\n    setConfig({\n      ...config,\n      themeDirection: direction\n    });\n  };\n\n  const onChangeMiniDrawer = (miniDrawer) => {\n    setConfig({\n      ...config,\n      miniDrawer\n    });\n  };\n\n  const onChangeContrast = () => {\n    setConfig({\n      ...config,\n      themeContrast: !config.themeContrast\n    });\n  };\n\n  const onChangeMenuCaption = () => {\n    setConfig({\n      ...config,\n      menuCaption: !config.menuCaption\n    });\n  };\n\n  const onChangeMenuOrientation = (layout) => {\n    setConfig({\n      ...config,\n      menuOrientation: layout\n    });\n  };\n\n  const onChangeFontFamily = (fontFamily) => {\n    setConfig({\n      ...config,\n      fontFamily\n    });\n  };\n\n  return (\n    <ConfigContext.Provider\n      value={{\n        ...config,\n        onChangeContainer,\n        onChangeLocalization,\n        onChangeMode,\n        onChangePresetColor,\n        onChangeDirection,\n        onChangeMiniDrawer,\n        onChangeMenuOrientation,\n        onChangeMenuCaption,\n        onChangeFontFamily,\n        onChangeContrast\n      }}\n    >\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n\nexport { ConfigProvider, ConfigContext };\n\nConfigProvider.propTypes = { children: PropTypes.node };\n","size_bytes":2517},"src/pages/forms/blogs.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport AddBlogPage from 'sections/forms/wizard/blog-validation-wizard';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormBlog() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <AddBlogPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":437},"src/sections/components-overview/buttons/ToggleButtons/ColorToggleButton.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// assets\nimport { TextalignCenter, TextalignJustifycenter, TextalignLeft, TextalignRight } from 'iconsax-react';\n\n// ==============================|| TOGGLE BUTTON - COLOR ||============================== //\n\nexport default function ColorToggleButton() {\n  const [alignment, setAlignment] = useState('left');\n\n  const handleAlignment = (event, newAlignment) => {\n    setAlignment(newAlignment);\n  };\n\n  return (\n    <ToggleButtonGroup color=\"primary\" value={alignment} exclusive onChange={handleAlignment} aria-label=\"text alignment\">\n      <ToggleButton value=\"left\" aria-label=\"left aligned\">\n        <TextalignLeft />\n      </ToggleButton>\n      <ToggleButton value=\"center\" aria-label=\"centered\">\n        <TextalignCenter />\n      </ToggleButton>\n      <ToggleButton value=\"right\" aria-label=\"right aligned\">\n        <TextalignRight />\n      </ToggleButton>\n      <ToggleButton value=\"list\" aria-label=\"list\">\n        <TextalignJustifycenter />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":1175},"src/components/ScrollTop.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\n// ==============================|| NAVIGATION - SCROLL TO TOP ||============================== //\n\nexport default function ScrollTop({ children }) {\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth'\n    });\n  }, []);\n\n  return children || null;\n}\n\nScrollTop.propTypes = { children: PropTypes.oneOfType([PropTypes.node, PropTypes.any]) };\n","size_bytes":457},"src/themes/overrides/index.js":{"content":"// third-party\nimport { merge } from 'lodash';\n\n// project-imports\nimport Accordion from './Accordion';\nimport AccordionDetails from './AccordionDetails';\nimport AccordionSummary from './AccordionSummary';\nimport Alert from './Alert';\nimport AlertTitle from './AlertTitle';\nimport Autocomplete from './Autocomplete';\nimport Badge from './Badge';\nimport Backdrop from './Backdrop';\nimport Body from './Body';\nimport Button from './Button';\nimport ButtonBase from './ButtonBase';\nimport ButtonGroup from './ButtonGroup';\nimport CardContent from './CardContent';\nimport Checkbox from './Checkbox';\nimport Chip from './Chip';\nimport Dialog from './Dialog';\nimport DialogContentText from './DialogContentText';\nimport DialogTitle from './DialogTitle';\nimport Drawer from './Drawer';\nimport Fab from './Fab';\nimport FormHelperText from './FormHelperText';\nimport IconButton from './IconButton';\nimport InputBase from './InputBase';\nimport InputLabel from './InputLabel';\nimport LinearProgress from './LinearProgress';\nimport Link from './Link';\nimport ListItemButton from './ListItemButton';\nimport ListItemIcon from './ListItemIcon';\nimport LoadingButton from './LoadingButton';\nimport OutlinedInput from './OutlinedInput';\nimport Pagination from './Pagination';\nimport PaginationItem from './PaginationItem';\nimport Popover from './Popover';\nimport Radio from './Radio';\nimport Slider from './Slider';\nimport Switch from './Switch';\nimport Tab from './Tab';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHead from './TableHead';\nimport TablePagination from './TablePagination';\nimport TableRow from './TableRow';\nimport Tabs from './Tabs';\nimport ToggleButton from './ToggleButton';\nimport Tooltip from './Tooltip';\nimport TreeItem from './TreeItem';\nimport Typography from './Typography';\n\n// ==============================|| OVERRIDES - MAIN ||============================== //\n\nexport default function ComponentsOverrides(theme) {\n  return merge(\n    Accordion(theme),\n    AccordionDetails(theme),\n    AccordionSummary(theme),\n    Alert(theme),\n    AlertTitle(),\n    Autocomplete(),\n    Badge(theme),\n    Backdrop(),\n    Body(),\n    Button(theme),\n    ButtonBase(),\n    ButtonGroup(),\n    CardContent(),\n    Checkbox(theme),\n    Chip(theme),\n    Dialog(),\n    DialogContentText(theme),\n    DialogTitle(),\n    Drawer(),\n    Fab(theme),\n    FormHelperText(),\n    IconButton(theme),\n    InputBase(),\n    InputLabel(theme),\n    LinearProgress(),\n    Link(),\n    ListItemButton(theme),\n    ListItemIcon(theme),\n    LoadingButton(),\n    OutlinedInput(theme),\n    Pagination(),\n    PaginationItem(theme),\n    Popover(theme),\n    Radio(theme),\n    Slider(theme),\n    Switch(theme),\n    Tab(theme),\n    TableBody(theme),\n    TableCell(theme),\n    TableFooter(theme),\n    TableHead(theme),\n    TablePagination(),\n    TableRow(),\n    Tabs(),\n    ToggleButton(theme),\n    Tooltip(theme),\n    TreeItem(),\n    Typography()\n  );\n}\n","size_bytes":2996},"src/sections/apps/e-commerce/product-details/ProductInfo.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Rating from '@mui/material/Rating';\nimport Tooltip from '@mui/material/Tooltip';\nimport TextField from '@mui/material/TextField';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport Typography from '@mui/material/Typography';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third-party\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport ColorOptions from '../products/ColorOptions';\nimport Avatar from 'components/@extended/Avatar';\n\nimport { ThemeMode } from 'config';\nimport { addToCart, useGetCart } from 'api/cart';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, Minus, ShopAdd, ShoppingCart } from 'iconsax-react';\n\n// product color select\nfunction getColor(color) {\n  return ColorOptions.filter((item) => item.value === color);\n}\n\nconst validationSchema = yup.object({\n  color: yup.string().required('Color selection is required')\n});\n\n// ==============================|| COLORS OPTION ||============================== //\n\nfunction Colors({ checked, colorsData }) {\n  const theme = useTheme();\n  return (\n    <Grid item>\n      <Tooltip title={colorsData.length && colorsData[0] && colorsData[0].label ? colorsData[0].label : ''}>\n        <ButtonBase\n          sx={{ borderRadius: '50%', '&:focus-visible': { outline: `2px solid ${theme.palette.secondary.dark}`, outlineOffset: 2 } }}\n        >\n          <Avatar\n            color=\"inherit\"\n            size=\"sm\"\n            sx={{\n              bgcolor: colorsData[0]?.bg,\n              color: theme.palette.mode === ThemeMode.DARK ? 'secondary.800' : 'secondary.lighter',\n              border: '3px solid',\n              borderColor: checked ? theme.palette.secondary.light : theme.palette.background.paper\n            }}\n          >\n            {' '}\n          </Avatar>\n        </ButtonBase>\n      </Tooltip>\n    </Grid>\n  );\n}\n\n// ==============================|| PRODUCT DETAILS - INFORMATION ||============================== //\n\nexport default function ProductInfo({ product }) {\n  const theme = useTheme();\n  const history = useNavigate();\n\n  const [value, setValue] = useState(1);\n  const { cart } = useGetCart();\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      id: product.id,\n      name: product.name,\n      image: product.image,\n      salePrice: product.salePrice,\n      offerPrice: product.offerPrice,\n      color: '',\n      size: '',\n      quantity: 1\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      values.quantity = value;\n      addToCart(values, cart.products);\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n\n      history('/apps/e-commerce/checkout');\n    }\n  });\n\n  const { errors, values, handleSubmit, handleChange } = formik;\n\n  const addCart = () => {\n    values.color = values.color ? values.color : 'primaryDark';\n    values.quantity = value;\n    addToCart(values, cart.products);\n    openSnackbar({\n      open: true,\n      message: 'Add To Cart Success',\n      variant: 'alert',\n      alert: { color: 'success' }\n    });\n  };\n\n  return (\n    <Stack spacing={1}>\n      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n        <Rating name=\"simple-controlled\" value={product.rating} precision={0.1} readOnly />\n        <Typography color=\"text.secondary\">({product.rating?.toFixed(1)})</Typography>\n      </Stack>\n      <Typography variant=\"h3\">{product.name}</Typography>\n      <Chip\n        size=\"small\"\n        label={product.isStock ? 'In Stock' : 'Out of Stock'}\n        sx={{\n          width: 'fit-content',\n          borderRadius: '4px',\n          color: product.isStock ? 'success.main' : 'error.main',\n          bgcolor: product.isStock ? 'success.lighter' : 'error.lighter'\n        }}\n      />\n      <Typography color=\"text.secondary\">{product.about}</Typography>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <Typography color=\"text.secondary\">Color</Typography>\n                <RadioGroup row value={values.color} onChange={handleChange} aria-label=\"colors\" name=\"color\" id=\"color\">\n                  {product.colors &&\n                    product.colors.map((item, index) => {\n                      const colorsData = getColor(item);\n                      return (\n                        <FormControlLabel\n                          key={index}\n                          value={item}\n                          control={\n                            <Radio\n                              sx={{ p: 0.25 }}\n                              checkedIcon={<Colors checked colorsData={colorsData} />}\n                              icon={<Colors colorsData={colorsData} />}\n                            />\n                          }\n                          label=\"\"\n                          sx={{ ml: -0.25 }}\n                        />\n                      );\n                    })}\n                </RadioGroup>\n              </Stack>\n              {errors.color && (\n                <FormHelperText error id=\"standard-label-color\">\n                  {errors.color}\n                </FormHelperText>\n              )}\n            </Grid>\n            <Grid item xs={12}>\n              <Stack justifyContent=\"flex-end\" spacing={1}>\n                <Typography color=\"text.secondary\">Quantity</Typography>\n                <Stack direction=\"row\">\n                  <TextField\n                    name=\"rty-incre\"\n                    value={value > 0 ? value : ''}\n                    onChange={(e) => setValue(Number(e.target.value))}\n                    sx={{ '& .MuiOutlinedInput-input': { p: 1.75 }, width: '33%', '& .MuiOutlinedInput-root': { borderRadius: 0 } }}\n                  />\n                  <Stack>\n                    <Button\n                      key=\"one\"\n                      color=\"secondary\"\n                      variant=\"outlined\"\n                      onClick={() => setValue(value + 1)}\n                      sx={{\n                        px: 0.25,\n                        py: 0.25,\n                        minWidth: '0px !important',\n                        borderRadius: 0,\n                        borderLeft: 'none',\n                        borderColor: theme.palette.secondary[400],\n                        '&:hover': { borderLeft: 'none', borderColor: theme.palette.secondary[400] },\n                        '&.Mui-disabled': { borderLeft: 'none', borderColor: theme.palette.secondary.light }\n                      }}\n                    >\n                      <Add />\n                    </Button>\n                    <Button\n                      key=\"three\"\n                      color=\"secondary\"\n                      variant=\"outlined\"\n                      disabled={value <= 1}\n                      onClick={() => setValue(value - 1)}\n                      sx={{\n                        px: 0.5,\n                        py: 0.35,\n                        minWidth: '0px !important',\n                        borderRadius: 0,\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderColor: theme.palette.secondary[400],\n                        '&:hover': { borderTop: 'none', borderLeft: 'none', borderColor: theme.palette.secondary[400] },\n                        '&.Mui-disabled': { borderTop: 'none', borderLeft: 'none', borderColor: theme.palette.secondary.light }\n                      }}\n                    >\n                      <Minus />\n                    </Button>\n                  </Stack>\n                </Stack>\n              </Stack>\n              {value === 0 && <FormHelperText sx={{ color: 'error.main' }}>Please select quantity more than 0</FormHelperText>}\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Typography variant=\"h3\">${product.offerPrice}</Typography>\n                {product.salePrice && (\n                  <Typography variant=\"h4\" color=\"text.secondary\" sx={{ textDecoration: 'line-through', opacity: 0.5, fontWeight: 400 }}>\n                    ${product.salePrice}\n                  </Typography>\n                )}\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ mt: 2 }}>\n                <Button\n                  type=\"submit\"\n                  disabled={value < 1 || !product.isStock}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  startIcon={<ShoppingCart />}\n                >\n                  {!product.isStock ? 'Sold Out' : 'Buy Now'}\n                </Button>\n\n                {product.isStock && value > 0 && (\n                  <Button color=\"secondary\" variant=\"outlined\" size=\"large\" onClick={addCart} startIcon={<ShopAdd variant=\"Bold\" />}>\n                    Add to Cart\n                  </Button>\n                )}\n              </Stack>\n            </Grid>\n          </Grid>\n        </Form>\n      </FormikProvider>\n    </Stack>\n  );\n}\n\nColors.propTypes = { checked: PropTypes.bool, colorsData: PropTypes.array };\n\nProductInfo.propTypes = { product: PropTypes.any };\n","size_bytes":9934},"src/themes/overrides/Tooltip.js":{"content":"// ==============================|| OVERRIDES - TOOLTIP ||============================== //\n\nexport default function Tooltip(theme) {\n  return {\n    MuiTooltip: {\n      styleOverrides: {\n        tooltip: {\n          color: theme.palette.background.paper\n        }\n      }\n    }\n  };\n}\n","size_bytes":285},"src/themes/overrides/IconButton.js":{"content":"// ==============================|| OVERRIDES - ICON BUTTON ||============================== //\n\nexport default function IconButton(theme) {\n  return {\n    MuiIconButton: {\n      styleOverrides: {\n        root: {\n          borderRadius: 8\n        },\n        sizeLarge: {\n          width: theme.spacing(5.5),\n          height: theme.spacing(5.5),\n          fontSize: '1.25rem',\n          '& svg': {\n            width: 24,\n            height: 24\n          }\n        },\n        sizeMedium: {\n          width: theme.spacing(4.5),\n          height: theme.spacing(4.5),\n          fontSize: '1rem',\n          '& svg': {\n            width: 20,\n            height: 20\n          }\n        },\n        sizeSmall: {\n          width: theme.spacing(3.75),\n          height: theme.spacing(3.75),\n          fontSize: '0.75rem',\n          '& svg': {\n            width: 16,\n            height: 16\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":921},"src/themes/overrides/AccordionSummary.jsx":{"content":"// assets\nimport { ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| OVERRIDES - ACCORDION SUMMARY ||============================== //\n\nexport default function AccordionSummary(theme) {\n  const { palette, spacing } = theme;\n\n  return {\n    MuiAccordionSummary: {\n      defaultProps: {\n        expandIcon: <ArrowRight2 size={14} />\n      },\n      styleOverrides: {\n        root: {\n          backgroundColor: palette.secondary.lighter,\n          flexDirection: 'row-reverse',\n          minHeight: 46\n        },\n        expandIconWrapper: {\n          '&.Mui-expanded': {\n            transform: 'rotate(90deg)'\n          }\n        },\n        content: {\n          marginTop: spacing(1.25),\n          marginBottom: spacing(1.25),\n          marginLeft: spacing(1)\n        }\n      }\n    }\n  };\n}\n","size_bytes":811},"src/themes/overrides/PaginationItem.js":{"content":"// project-imports\nimport getColors from 'utils/getColors';\n\n// ==============================|| PAGINATION ITEM - COLORS ||============================== //\n\nfunction getColorStyle({ variant, color, theme }) {\n  const colors = getColors(theme, color);\n  const { lighter, light, dark, main, contrastText } = colors;\n\n  const focusStyle = {\n    '&:focus-visible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: 2,\n      ...(variant === 'text' && {\n        backgroundColor: theme.palette.background.paper\n      })\n    }\n  };\n\n  switch (variant) {\n    case 'combined':\n    case 'contained':\n      return {\n        color: color === 'secondary' ? lighter : contrastText,\n        backgroundColor: main,\n        '&:hover': {\n          backgroundColor: light\n        },\n        ...focusStyle\n      };\n    case 'outlined':\n      return {\n        borderColor: main,\n        '&:hover': {\n          backgroundColor: lighter,\n          borderColor: light\n        },\n        ...focusStyle\n      };\n    case 'text':\n    default:\n      return {\n        color: main,\n        '&:hover': {\n          backgroundColor: main,\n          color: lighter\n        },\n        ...focusStyle\n      };\n  }\n}\n\n// ==============================|| OVERRIDES - PAGINATION ITEM ||============================== //\n\nexport default function PaginationItem(theme) {\n  return {\n    MuiPaginationItem: {\n      styleOverrides: {\n        root: {\n          '&:focus-visible': {\n            outline: `2px solid ${theme.palette.secondary.dark}`,\n            outlineOffset: 2\n          }\n        },\n        text: {\n          '&.Mui-selected': {\n            backgroundColor: 'transparent',\n            fontSize: '1rem',\n            fontWeight: 500,\n            '&.MuiPaginationItem-textPrimary': getColorStyle({ variant: 'text', color: 'primary', theme }),\n            '&.MuiPaginationItem-textSecondary': getColorStyle({ variant: 'text', color: 'secondary', theme }),\n            '&.MuiPaginationItem-textError': getColorStyle({ variant: 'text', color: 'error', theme }),\n            '&.MuiPaginationItem-textSuccess': getColorStyle({ variant: 'text', color: 'success', theme }),\n            '&.MuiPaginationItem-textInfo': getColorStyle({ variant: 'text', color: 'info', theme }),\n            '&.MuiPaginationItem-textWarning': getColorStyle({ variant: 'text', color: 'warning', theme })\n          }\n        },\n        contained: {\n          '&.Mui-selected': {\n            '&.MuiPaginationItem-containedPrimary': getColorStyle({ variant: 'contained', color: 'primary', theme }),\n            '&.MuiPaginationItem-containedSecondary': getColorStyle({ variant: 'contained', color: 'secondary', theme }),\n            '&.MuiPaginationItem-containedError': getColorStyle({ variant: 'contained', color: 'error', theme }),\n            '&.MuiPaginationItem-containedSuccess': getColorStyle({ variant: 'contained', color: 'success', theme }),\n            '&.MuiPaginationItem-containedInfo': getColorStyle({ variant: 'contained', color: 'info', theme }),\n            '&.MuiPaginationItem-containedWarning': getColorStyle({ variant: 'contained', color: 'warning', theme })\n          }\n        },\n        combined: {\n          border: '1px solid',\n          borderColor: theme.palette.divider,\n          '&.MuiPaginationItem-ellipsis': {\n            border: 'none'\n          },\n          '&.Mui-selected': {\n            '&.MuiPaginationItem-combinedPrimary': getColorStyle({ variant: 'combined', color: 'primary', theme }),\n            '&.MuiPaginationItem-combinedSecondary': getColorStyle({ variant: 'combined', color: 'secondary', theme }),\n            '&.MuiPaginationItem-combinedError': getColorStyle({ variant: 'combined', color: 'error', theme }),\n            '&.MuiPaginationItem-combinedSuccess': getColorStyle({ variant: 'combined', color: 'success', theme }),\n            '&.MuiPaginationItem-combinedInfo': getColorStyle({ variant: 'combined', color: 'info', theme }),\n            '&.MuiPaginationItem-combinedWarning': getColorStyle({ variant: 'combined', color: 'warning', theme })\n          }\n        },\n        outlined: {\n          borderColor: theme.palette.divider,\n          '&.Mui-selected': {\n            backgroundColor: 'transparent',\n            '&.MuiPaginationItem-outlinedPrimary': getColorStyle({ variant: 'outlined', color: 'primary', theme }),\n            '&.MuiPaginationItem-outlinedSecondary': getColorStyle({ variant: 'outlined', color: 'secondary', theme }),\n            '&.MuiPaginationItem-outlinedError': getColorStyle({ variant: 'outlined', color: 'error', theme }),\n            '&.MuiPaginationItem-outlinedSuccess': getColorStyle({ variant: 'outlined', color: 'success', theme }),\n            '&.MuiPaginationItem-outlinedInfo': getColorStyle({ variant: 'outlined', color: 'info', theme }),\n            '&.MuiPaginationItem-outlinedWarning': getColorStyle({ variant: 'outlined', color: 'warning', theme })\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":4947},"src/pages/forms/plugins/clipboard.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport CardContent from '@mui/material/CardContent';\nimport Grid from '@mui/material/Grid';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\n\n// third-party\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Copy, Scissor } from 'iconsax-react';\n\n// ==============================|| PLUGIN - CLIPBOARD ||============================== //\n\nexport default function ClipboardPage() {\n  const [text1, setText1] = useState('https://ableproadmin.com/');\n  const [text2, setText2] = useState(\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n  );\n  const [text3] = useState(\n    'Lorem ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga.'\n  );\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard title=\"Copy from TextField\">\n          <Stack spacing={1}>\n            <InputLabel>Enter Website</InputLabel>\n            <TextField\n              fullWidth\n              placeholder=\"Website\"\n              type=\"text\"\n              value={text1}\n              onChange={(e) => {\n                setText1(e.target.value);\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <CopyToClipboard\n                      text={text1}\n                      onCopy={() =>\n                        openSnackbar({\n                          open: true,\n                          message: 'Text Copied',\n                          variant: 'alert',\n\n                          alert: {\n                            color: 'success'\n                          },\n\n                          anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                          transition: 'SlideLeft'\n                        })\n                      }\n                    >\n                      <Tooltip title=\"Copy\">\n                        <IconButton aria-label=\"Copy from another element\" color=\"secondary\" edge=\"end\" size=\"large\">\n                          <Copy />\n                        </IconButton>\n                      </Tooltip>\n                    </CopyToClipboard>\n                  </InputAdornment>\n                )\n              }}\n            />\n          </Stack>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard title=\"Copy from TextArea\">\n          <Stack spacing={1}>\n            <InputLabel>Enter Text to Copy</InputLabel>\n            <TextField\n              multiline\n              rows={4}\n              fullWidth\n              placeholder=\"Copy text\"\n              onChange={(e) => setText2(e.target.value)}\n              value={text2}\n              sx={{ mb: 3 }}\n            />\n          </Stack>\n          <CopyToClipboard\n            text={text2}\n            onCopy={() =>\n              openSnackbar({\n                open: true,\n                message: 'Text Copied',\n                variant: 'alert',\n\n                alert: {\n                  color: 'success'\n                },\n\n                anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                transition: 'SlideLeft'\n              })\n            }\n          >\n            <Button disabled={Boolean(!text2)} variant=\"contained\" size=\"small\" sx={{ mr: 1.5, mt: 2 }} startIcon={<Copy />}>\n              Copy\n            </Button>\n          </CopyToClipboard>\n          <CopyToClipboard\n            text={text2}\n            onCopy={() => {\n              setText2('');\n              openSnackbar({\n                open: true,\n                message: 'Text Cut',\n                variant: 'alert',\n\n                alert: {\n                  color: 'success'\n                },\n\n                anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                transition: 'SlideLeft'\n              });\n            }}\n          >\n            <Button\n              disabled={Boolean(!text2)}\n              variant=\"contained\"\n              size=\"small\"\n              sx={{ mr: 1.5, mt: 2 }}\n              color=\"error\"\n              startIcon={<Scissor />}\n            >\n              Cut\n            </Button>\n          </CopyToClipboard>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} md={6}>\n        <MainCard\n          title=\"Copy from Container\"\n          secondary={\n            <CopyToClipboard\n              text={text3}\n              onCopy={() =>\n                openSnackbar({\n                  open: true,\n                  message: 'Text Copied',\n                  variant: 'alert',\n\n                  alert: {\n                    color: 'success'\n                  },\n\n                  anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                  transition: 'SlideLeft'\n                })\n              }\n            >\n              <Tooltip title=\"Copy\">\n                <IconButton size=\"large\">\n                  <Copy />\n                </IconButton>\n              </Tooltip>\n            </CopyToClipboard>\n          }\n        >\n          <CardContent sx={{ p: 0, pb: 2.5 }}>{text3}</CardContent>\n        </MainCard>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":5832},"src/components/third-party/map/ControlPanelStyled.jsx":{"content":"// material-ui\nimport { alpha, styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\n// ==============================|| MAP BOX - CONTROL STYLED ||============================== //\n\nconst ControlPanelStyled = styled(Box)(({ theme }) => ({\n  backdropFilter: `blur(4px)`,\n  WebkitBackdropFilter: `blur(4px)`,\n  backgroundColor: alpha(theme.palette.background.paper, 0.85),\n  zIndex: 9,\n  minWidth: 200,\n  position: 'absolute',\n  top: 8,\n  right: 8,\n  padding: 20,\n  borderRadius: 4\n}));\n\nexport default ControlPanelStyled;\n","size_bytes":544},"src/assets/images/profile/UserProfileBackRight.jsx":{"content":"// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\n\n// ==============================|| USER PROFILE - CARD BACK RIGHT ||============================== //\n\nconst UserProfileBackRight = () => {\n  const theme = useTheme();\n\n  return (\n    <svg width=\"447\" height=\"116\" viewBox=\"0 0 447 116\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        opacity=\"0.4\"\n        d=\"M55.2678 22.3777C-49.5465 -14.1611 7.16534 -48.8529 136.242 -34.0647L214.579 -30.0724L448.26 -8.82579L459.956 104.858C396.401 148.386 406.862 51.7166 297.501 67.1292C188.139 82.5419 225.278 33.322 176.928 20.0906C128.579 6.8592 91.4243 34.9821 55.2678 22.3777Z\"\n        fill={alpha(theme.palette.primary.light, 0.4)}\n      />\n    </svg>\n  );\n};\n\nexport default UserProfileBackRight;\n","size_bytes":785},"src/sections/components-overview/dialogs/ConfirmationDialog.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport ListItemText from '@mui/material/ListItemText';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\nconst options = ['None', 'Atria', 'Callisto', 'Dione', 'Ganymede', 'Hangouts Call', 'Luna', 'Oberon', 'Phobos', 'Pyxis'];\n\n// ==============================|| DIALOG - CONFIRMATION ||============================== //\n\nfunction ConfirmationDialogRaw({ onClose, value: valueProp, open, ...other }) {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\n\n  const [value, setValue] = useState(valueProp);\n  const radioGroupRef = useRef(null);\n\n  useEffect(() => {\n    if (!open) {\n      setValue(valueProp);\n    }\n  }, [valueProp, open]);\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  const handleOk = () => {\n    onClose(value);\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Dialog\n      sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\n      maxWidth={matchDownMD ? 'sm' : 'lg'}\n      TransitionProps={{ onEntering: handleEntering }}\n      open={open}\n      {...other}\n    >\n      <DialogTitle>Phone Ringtone</DialogTitle>\n      <DialogContent dividers>\n        <RadioGroup row={!matchDownMD} ref={radioGroupRef} aria-label=\"ringtone\" name=\"ringtone\" value={value} onChange={handleChange}>\n          {options.map((option) => (\n            <FormControlLabel value={option} key={option} control={<Radio />} label={option} />\n          ))}\n        </RadioGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"error\" onClick={handleCancel}>\n          Cancel\n        </Button>\n        <Button variant=\"contained\" onClick={handleOk} sx={{ mr: 0.5 }}>\n          Done\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default function ConfirmationDialog() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('Hangouts Call');\n\n  const handleClickListItem = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (newValue) => {\n    setOpen(false);\n\n    if (newValue) {\n      setValue(newValue);\n    }\n  };\n\n  return (\n    <Box sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n      <List role=\"group\">\n        <ListItemButton divider disabled>\n          <ListItemText primary=\"Interruptions\" />\n        </ListItemButton>\n        <ListItemButton\n          divider\n          aria-haspopup=\"true\"\n          aria-controls=\"ringtone-menu\"\n          aria-label=\"phone ringtone\"\n          onClick={handleClickListItem}\n        >\n          <ListItemText primary=\"Phone Ringtone\" secondary={value} />\n        </ListItemButton>\n        <ListItemButton divider disabled>\n          <ListItemText primary=\"Default Notification Ringtone\" secondary=\"Tethys\" />\n        </ListItemButton>\n        <ConfirmationDialogRaw id=\"ringtone-menu\" keepMounted open={open} onClose={handleClose} value={value} />\n      </List>\n    </Box>\n  );\n}\n\nConfirmationDialogRaw.propTypes = { onClose: PropTypes.func, value: PropTypes.string, open: PropTypes.bool, other: PropTypes.any };\n","size_bytes":3881},"src/sections/landing/Free.jsx":{"content":"// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport FadeInWhenVisible from './Animation';\n// assets\nimport { ExportSquare } from 'iconsax-react';\n\n// ==============================|| LANDING - FreePage ||============================== //\n\nexport default function FreePage() {\n  const theme = useTheme();\n  return (\n    <Container>\n      <Grid container spacing={3} alignItems=\"center\" justifyContent=\"center\" sx={{ mt: { md: 10, xs: 2.5 }, mb: { md: 10, xs: 2.5 } }}>\n        <Grid item xs={12} md={8}>\n          <FadeInWhenVisible>\n            <Grid container spacing={2} justifyContent=\"center\">\n              <Grid item xs={12}>\n                <Typography variant=\"h2\">\n                  <Box\n                    component=\"span\"\n                    sx={{\n                      color: theme.palette.primary.main\n                    }}\n                  >\n                    TRY{' '}\n                  </Box>\n                  BEFORE BUY\n                </Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography>Download the Free MIT Able Pro Dashboard Template before make your purchase decision.</Typography>\n              </Grid>\n            </Grid>\n          </FadeInWhenVisible>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <FadeInWhenVisible>\n            <Grid container spacing={2} justifyContent=\"end\" alignItems=\"center\">\n              <Grid item>\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  size=\"large\"\n                  component={Link}\n                  href=\"https://ableproadmin.com/dashboard/index.html\"\n                  target=\"_blank\"\n                >\n                  Check out Pro Version\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  startIcon={<ExportSquare />}\n                  component={Link}\n                  href=\"https://github.com/phoenixcoded/able-pro-free-admin-dashboard-template\"\n                  target=\"_blank\"\n                >\n                  Free (Soon)\n                </Button>\n              </Grid>\n            </Grid>\n          </FadeInWhenVisible>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","size_bytes":2654},"src/sections/apps/e-commerce/checkout/AddAddress.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Radio from '@mui/material/Radio';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport Dialog from '@mui/material/Dialog';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { CloseCircle } from 'iconsax-react';\n\nconst validationSchema = yup.object({\n  destination: yup.string().required('Color selection is required'),\n  name: yup.string().required('Name is required'),\n  building: yup.string().required('Building no/name is required'),\n  street: yup.string().required('Street Address is required'),\n  city: yup.string().required('City is required'),\n  state: yup.string().required('State is required'),\n  post: yup.string().required('Area code is required'),\n  phone: yup.string().required('Contact no is required')\n});\n\n// ==============================|| CHECKOUT - ADD ADDRESS ||============================== //\n\nexport default function AddAddress({ address, open, handleClose, editAddress }) {\n  const edit = address && address.id;\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      destination: edit ? address.destination : '',\n      name: edit ? address.name : '',\n      building: edit ? address.building : '',\n      street: edit ? address.street : '',\n      city: edit ? address.city : '',\n      state: edit ? address.state : '',\n      country: edit ? address.country : '',\n      post: edit ? address.post : '',\n      phone: edit ? address.phone : '',\n      isDefault: edit ? address.isDefault : false\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      editAddress({ ...values, id: address.id });\n      handleClose();\n      openSnackbar({\n        open: true,\n        message: 'Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  });\n\n  return (\n    <Dialog\n      open={open}\n      TransitionComponent={PopupTransition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      sx={{ '& .MuiDialog-paper': { p: 0 }, '& .MuiPaper-root': { overflow: 'auto' } }}\n    >\n      <MainCard\n        title=\"Edit Billing Address\"\n        secondary={\n          <IconButton onClick={handleClose} size=\"large\">\n            <CloseCircle style={{ fontSize: 'small' }} />\n          </IconButton>\n        }\n      >\n        <form onSubmit={formik.handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-name\">Name</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                  value={formik.values.name}\n                  onChange={formik.handleChange}\n                  error={formik.touched.name && Boolean(formik.errors.name)}\n                  helperText={formik.touched.name && formik.errors.name}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-destination\">Destination</InputLabel>\n                <FormControl>\n                  <RadioGroup\n                    row\n                    aria-label=\"destination\"\n                    value={formik.values.destination}\n                    onChange={formik.handleChange}\n                    name=\"destination\"\n                    id=\"destination\"\n                  >\n                    <FormControlLabel\n                      value=\"home\"\n                      control={<Radio sx={{ color: 'primary.main', '&.Mui-checked': { color: 'primary.main' } }} />}\n                      label=\"Home\"\n                    />\n                    <FormControlLabel\n                      value=\"office\"\n                      control={<Radio sx={{ color: 'secondary.main', '&.Mui-checked': { color: 'secondary.main' } }} />}\n                      label=\"Office\"\n                    />\n                  </RadioGroup>\n                </FormControl>\n              </Stack>\n              {formik.errors.destination && (\n                <FormHelperText error id=\"standard-weight-helper-text-name-login\">\n                  {formik.errors.destination}\n                </FormHelperText>\n              )}\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-building\">Building No./Name</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"building\"\n                  name=\"building\"\n                  placeholder=\"Building No./Name\"\n                  value={formik.values.building}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.building)}\n                  helperText={formik.touched.building && formik.errors.building}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-street\">Street</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"street\"\n                  name=\"street\"\n                  placeholder=\"Street\"\n                  value={formik.values.street}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.street)}\n                  helperText={formik.touched.street && formik.errors.street}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-city\">City</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"city\"\n                  name=\"city\"\n                  placeholder=\"City\"\n                  value={formik.values.city}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.city)}\n                  helperText={formik.touched.city && formik.errors.city}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-state\">State</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"state\"\n                  name=\"state\"\n                  placeholder=\"State\"\n                  value={formik.values.state}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.state)}\n                  helperText={formik.touched.state && formik.errors.state}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-country\">Country</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"country\"\n                  name=\"country\"\n                  placeholder=\"Country\"\n                  value={formik.values.country}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.country)}\n                  helperText={formik.touched.country && formik.errors.country}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-area-code\">Area Code</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"post\"\n                  name=\"post\"\n                  placeholder=\"Area Code\"\n                  value={formik.values.post}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.post)}\n                  helperText={formik.touched.post && formik.errors.post}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"address-contact\">Contact</InputLabel>\n                <TextField\n                  fullWidth\n                  id=\"phone\"\n                  name=\"phone\"\n                  placeholder=\"Contact\"\n                  value={formik.values.phone}\n                  onChange={formik.handleChange}\n                  error={formik.touched.building && Boolean(formik.errors.phone)}\n                  helperText={formik.touched.phone && formik.errors.phone}\n                />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    id=\"isDefault\"\n                    name=\"isDefault\"\n                    checked={formik.values.isDefault}\n                    onChange={formik.handleChange}\n                    inputProps={{ 'aria-label': 'controlled' }}\n                  />\n                }\n                label=\"Default\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\">\n                <Button color=\"error\" onClick={handleClose}>\n                  Cancel\n                </Button>\n                <AnimateButton>\n                  <Button variant=\"contained\" type=\"submit\">\n                    Submit\n                  </Button>\n                </AnimateButton>\n              </Stack>\n            </Grid>\n          </Grid>\n        </form>\n      </MainCard>\n    </Dialog>\n  );\n}\n\nAddAddress.propTypes = { address: PropTypes.any, open: PropTypes.bool, handleClose: PropTypes.func, editAddress: PropTypes.func };\n","size_bytes":10567},"src/layout/Dashboard/Header/HeaderContent/Search.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport FormControl from '@mui/material/FormControl';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport OutlinedInput from '@mui/material/OutlinedInput';\n\n// assets\nimport { SearchNormal1 } from 'iconsax-react';\n\n// ==============================|| HEADER CONTENT - SEARCH ||============================== //\n\nexport default function Search() {\n  return (\n    <Box sx={{ width: '100%', ml: { xs: 0, md: 2 } }}>\n      <FormControl sx={{ width: { xs: '100%', md: 224 } }}>\n        <OutlinedInput\n          id=\"header-search\"\n          startAdornment={\n            <InputAdornment position=\"start\" sx={{ mr: -0.5 }}>\n              <SearchNormal1 size={16} />\n            </InputAdornment>\n          }\n          aria-describedby=\"header-search-text\"\n          inputProps={{ 'aria-label': 'weight' }}\n          placeholder=\"Ctrl + K\"\n          sx={{ '& .MuiOutlinedInput-input': { p: 1.5 } }}\n        />\n      </FormControl>\n    </Box>\n  );\n}\n","size_bytes":1005},"src/hooks/usePagination.js":{"content":"import { useState } from 'react';\n\n// ==============================|| HOOKS - PAGINATION ||============================== //\n\nexport default function usePagination(data, itemsPerPage) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const maxPage = Math.ceil(data.length / itemsPerPage);\n\n  function currentData() {\n    const begin = (currentPage - 1) * itemsPerPage;\n    const end = begin + itemsPerPage;\n    return data.slice(begin, end);\n  }\n\n  function next() {\n    setCurrentPage((currentPage) => Math.min(currentPage + 1, maxPage));\n  }\n\n  function prev() {\n    setCurrentPage((currentPage) => Math.max(currentPage - 1, 1));\n  }\n\n  function jump(page) {\n    const pageNumber = Math.max(1, page);\n    setCurrentPage(() => Math.min(pageNumber, maxPage));\n  }\n\n  return { next, prev, jump, currentData, currentPage, maxPage };\n}\n","size_bytes":841},"src/sections/components-overview/buttons/ToggleButtons/VariantToggleButtons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// ==============================|| TOGGLE BUTTON - VARIANT ||============================== //\n\nexport default function VariantToggleButtons() {\n  const theme = useTheme();\n  const [alignment, setAlignment] = useState('web');\n\n  const handleAlignment = (event, newAlignment) => {\n    if (newAlignment !== null) {\n      setAlignment(newAlignment);\n    }\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={alignment}\n      color=\"primary\"\n      exclusive\n      onChange={handleAlignment}\n      aria-label=\"text alignment\"\n      sx={{\n        '& .MuiToggleButton-root': {\n          '&:not(.Mui-selected)': {\n            borderTopColor: 'transparent',\n            borderBottomColor: 'transparent'\n          },\n          '&:first-of-type': {\n            borderLeftColor: 'transparent'\n          },\n          '&:last-of-type': {\n            borderRightColor: 'transparent'\n          },\n          '&.Mui-selected': {\n            borderColor: 'inherit',\n            borderLeftColor: `${theme.palette.primary.main} !important`,\n            '&:hover': {\n              bgcolor: theme.palette.primary.lighter\n            }\n          },\n          '&:hover': {\n            bgcolor: 'transparent',\n            borderColor: theme.palette.primary.main,\n            borderLeftColor: `${theme.palette.primary.main} !important`,\n            zIndex: 2\n          }\n        }\n      }}\n    >\n      <ToggleButton value=\"web\" aria-label=\"web\">\n        Web\n      </ToggleButton>\n      <ToggleButton value=\"android\" aria-label=\"android\">\n        Android\n      </ToggleButton>\n      <ToggleButton value=\"ios\" aria-label=\"ios\">\n        iOS\n      </ToggleButton>\n      <ToggleButton value=\"all\" aria-label=\"all\">\n        All\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":1971},"src/api/kanban.js":{"content":"import { useMemo } from 'react';\n\n// third-party\nimport useSWR, { mutate } from 'swr';\n\n// utils\nimport { fetcher } from 'utils/axios';\n\nconst initialState = {\n  selectedItem: false\n};\n\nexport const endpoints = {\n  key: 'api/kanban',\n  master: 'master',\n  list: '/backlogs', // server URL\n  addColumn: '/add-column', // server URL\n  editColumn: '/edit-column', // server URL\n  updateColumnOrder: '/update-column-order', // server URL\n  deleteColumn: '/delete-column', // server URL\n  addItem: '/add-item', // server URL\n  editItem: '/edit-item', // server URL\n  updateColumnItemOrder: '/update-item-order', // server URL\n  addItemComment: '/add-item-comment', // server URL\n  deleteItem: '/delete-item', // server URL\n  addStory: '/add-story', // server URL\n  editStory: '/edit-story', // server URL\n  updateStoryOrder: '/update-story-order', // server URL\n  updateStoryItemOrder: '/update-storyitem-order', // server URL\n  addStoryComment: '/add-story-comment', // server URL\n  deleteStory: '/delete-story' // server URL\n};\n\nexport function useGetBacklogs() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      backlogs: data?.backlogs,\n      backlogsLoading: isLoading,\n      backlogsError: error,\n      backlogsValidating: isValidating\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function addColumn(newColumn) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n      const columns = [...backlogs.columns, newColumn];\n      const columnsOrder = [...backlogs.columnsOrder, newColumn.id];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns,\n          columnsOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { column: newColumn };\n  //   await axios.post(endpoints.key + endpoints.addColumn, data);\n}\n\nexport async function editColumn(newColumn) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const column = backlogs.columns.splice(\n        backlogs.columns.findIndex((c) => c.id === newColumn.id),\n        1,\n        newColumn\n      );\n      const columns = [...backlogs.columns, column];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  // const data = { column: newColumn };\n  // await axios.post(endpoints.key + endpoints.editColumn, data);\n}\n\nexport async function updateColumnOrder(columnsOrder) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columnsOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { columnsOrder };\n  //   await axios.post(endpoints.key + endpoints.updateColumnOrder, data);\n}\n\nexport async function deleteColumn(columnId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const columns = backlogs.columns.filter((column) => column.id !== columnId);\n      const columnsOrder = backlogs.columnsOrder.filter((id) => id !== columnId);\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns,\n          columnsOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { columnId };\n  //   await axios.post(endpoints.key + endpoints.deleteColumn, data);\n}\n\nexport async function addItem(columnId, item, storyId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      let columns = backlogs.columns;\n      if (columnId !== '0') {\n        columns = backlogs.columns.map((column) => {\n          if (column.id === columnId) {\n            return {\n              ...column,\n              itemIds: column.itemIds ? [...column.itemIds, item.id] : [item.id]\n            };\n          }\n          return column;\n        });\n      }\n\n      let userStory = backlogs.userStory;\n      if (storyId !== '0') {\n        userStory = backlogs.userStory.map((story) => {\n          if (story.id === storyId) {\n            return {\n              ...story,\n              itemIds: story.itemIds ? [...story.itemIds, item.id] : [item.id]\n            };\n          }\n          return story;\n        });\n      }\n\n      const items = [...backlogs.items, item];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns,\n          userStory,\n          items\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { columnId, item, storyId };\n  //   await axios.post(endpoints.key + endpoints.addItem, data);\n}\n\nexport async function editItem(columnId, newItem, storyId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const item = backlogs.items.splice(\n        backlogs.items.findIndex((c) => c.id === newItem.id),\n        1,\n        newItem\n      );\n      const items = [...backlogs.items, item];\n\n      let userStory = backlogs.userStory;\n      if (storyId) {\n        const currentStory = backlogs.userStory.filter((story) => story.itemIds.filter((itemId) => itemId === newItem.id)[0])[0];\n        if (currentStory !== undefined && currentStory.id !== storyId) {\n          userStory = backlogs.userStory.map((story) => {\n            if (story.itemIds.filter((itemId) => itemId === newItem.id)[0]) {\n              return {\n                ...story,\n                itemIds: story.itemIds.filter((itemId) => itemId !== newItem.id)\n              };\n            }\n            if (story.id === storyId) {\n              return {\n                ...story,\n                itemIds: story.itemIds ? [...story.itemIds, newItem.id] : [newItem.id]\n              };\n            }\n            return story;\n          });\n        }\n\n        if (currentStory === undefined) {\n          userStory = backlogs.userStory.map((story) => {\n            if (story.id === storyId) {\n              return {\n                ...story,\n                itemIds: story.itemIds ? [...story.itemIds, newItem.id] : [newItem.id]\n              };\n            }\n            return story;\n          });\n        }\n      }\n\n      let columns = backlogs.columns;\n      if (columnId) {\n        const currentColumn = backlogs.columns.filter((column) => column.itemIds.filter((itemId) => itemId === newItem.id)[0])[0];\n        if (currentColumn !== undefined && currentColumn.id !== columnId) {\n          columns = backlogs.columns.map((column) => {\n            if (column.itemIds.filter((itemId) => itemId === newItem.id)[0]) {\n              return {\n                ...column,\n                itemIds: column.itemIds.filter((itemId) => itemId !== newItem.id)\n              };\n            }\n            if (column.id === columnId) {\n              return {\n                ...column,\n                itemIds: column.itemIds ? [...column.itemIds, newItem.id] : [newItem.id]\n              };\n            }\n            return column;\n          });\n        }\n\n        if (currentColumn === undefined) {\n          columns = backlogs.columns.map((column) => {\n            if (column.id === columnId) {\n              return {\n                ...column,\n                itemIds: column.itemIds ? [...column.itemIds, newItem.id] : [newItem.id]\n              };\n            }\n            return column;\n          });\n        }\n      }\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns,\n          userStory,\n          items\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { columnId, item: newItem, storyId };\n  //   await axios.post(endpoints.key + endpoints.editItem, data);\n}\n\nexport async function updateColumnItemOrder(columns) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          columns\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { columns };\n  //   await axios.post(endpoints.key + endpoints.updateColumnItemOrder, data);\n}\n\nexport async function addItemComment(itemId, comment) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const items = backlogs.items.map((item) => {\n        if (item.id === itemId) {\n          return {\n            ...item,\n            commentIds: item.commentIds ? [...item.commentIds, comment.id] : [comment.id]\n          };\n        }\n        return item;\n      });\n\n      const comments = [...backlogs.comments, comment];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          items,\n          comments\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { itemId, comment };\n  //   await axios.post(endpoints.key + endpoints.addItemComment, data);\n}\n\nexport async function deleteItem(itemId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const items = backlogs.items.filter((item) => item.id !== itemId);\n      const columns = backlogs.columns.map((column) => {\n        const itemIds = column.itemIds.filter((id) => id !== itemId);\n        return {\n          ...column,\n          itemIds\n        };\n      });\n\n      const userStory = backlogs.userStory.map((story) => {\n        const itemIds = story.itemIds.filter((id) => id !== itemId);\n        return {\n          ...story,\n          itemIds\n        };\n      });\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          items,\n          columns,\n          userStory\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { itemId };\n  //   await axios.post(endpoints.key + endpoints.deleteItem, data);\n}\n\nexport async function addStory(newStory) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n      const userStory = [...backlogs.userStory, newStory];\n      const userStoryOrder = [...backlogs.userStoryOrder, newStory.id];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStory,\n          userStoryOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { story: newStory };\n  //   await axios.post(endpoints.key + endpoints.addStory, data);\n}\n\nexport async function editStory(newStory) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n      backlogs.userStory.splice(\n        backlogs.userStory.findIndex((c) => c.id === newStory.id),\n        1,\n        newStory\n      );\n      const userStory = [...backlogs.userStory];\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStory\n        }\n      };\n    },\n    false\n  );\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { story: newStory };\n  //   await axios.post(endpoints.key + endpoints.editStory, data);\n}\n\nexport async function updateStoryOrder(userStoryOrder) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStoryOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { userStoryOrder };\n  //   await axios.post(endpoints.key + endpoints.updateStoryOrder, data);\n}\n\nexport async function updateStoryItemOrder(userStory) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStory\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { userStory };\n  //   await axios.post(endpoints.key + endpoints.updateStoryItemOrder, data);\n}\n\nexport async function addStoryComment(storyId, comment) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const userStory = backlogs.userStory.map((story) => {\n        if (story.id === storyId) {\n          return {\n            ...story,\n            commentIds: story.commentIds ? [...story.commentIds, comment.id] : [comment.id]\n          };\n        }\n        return story;\n      });\n\n      const comments = [...backlogs.comments, comment];\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStory,\n          comments\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { storyId, comment };\n  //   await axios.post(endpoints.key + endpoints.addStoryComment, data);\n}\n\nexport async function deleteStory(storyId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key,\n    (currentBacklog) => {\n      const backlogs = currentBacklog.backlogs;\n\n      const userStory = backlogs.userStory.filter((column) => column.id !== storyId);\n      const userStoryOrder = backlogs.userStoryOrder.filter((id) => id !== storyId);\n\n      return {\n        ...currentBacklog,\n        backlogs: {\n          ...backlogs,\n          userStory,\n          userStoryOrder\n        }\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { storyId };\n  //   await axios.post(endpoints.key + endpoints.deleteStory, data);\n}\n\nexport function useGetKanbanMaster() {\n  const { data, isLoading } = useSWR(endpoints.key + endpoints.master, () => initialState, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      kanbanMaster: data,\n      kanbanMasterLoading: isLoading\n    }),\n    [data, isLoading]\n  );\n\n  return memoizedValue;\n}\n\nexport function handlerKanbanDialog(selectedItem) {\n  // to update local state based on key\n\n  mutate(\n    endpoints.key + endpoints.master,\n    (currentKanbanMaster) => {\n      return { ...currentKanbanMaster, selectedItem };\n    },\n    false\n  );\n}\n","size_bytes":16250},"src/sections/widget/data/ApplicationSales.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// table data\nfunction createData(name, designation, product, date, badgeText, badgeType) {\n  return { name, designation, product, date, badgeText, badgeType };\n}\n\nconst rows = [\n  createData('Materially', 'Powerful Admin Theme', '16,300', '$53', '$15,652'),\n  createData('Photoshop', 'Design Software', '26,421', '$35', '$8,785'),\n  createData('Guruable', 'Best Admin Template', '8,265', '$98', '$9,652'),\n  createData('Flatable', 'Admin App', '10,652', '$20', '$7,856')\n];\n// =========================|| DATA WIDGET - APPLICATION SALES ||========================= //\n\nexport default function ApplicationSales() {\n  return (\n    <MainCard\n      title=\"Application Sales\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pl: 3 }}>Application</TableCell>\n              <TableCell align=\"right\">Sales</TableCell>\n              <TableCell align=\"right\">Avg. Price</TableCell>\n              <TableCell align=\"right\" sx={{ pr: 3 }}>\n                Total\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => (\n              <TableRow hover key={index}>\n                <TableCell sx={{ pl: 3 }}>\n                  <Typography variant=\"subtitle1\">{row.name}</Typography>\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    {row.designation}\n                  </Typography>\n                </TableCell>\n                <TableCell align=\"right\">{row.product}</TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\" sx={{ pr: 3 }}>\n                  <span>{row.badgeText}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":2540},"src/sections/forms/validation/AutoCompleteForm.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Add, ArrowDown2 } from 'iconsax-react';\n\nconst roles = ['User', 'Admin', 'Staff', 'Manager'];\n\nconst skills = ['Java', 'HTML', 'Bootstrap', 'JavaScript', 'NodeJS', 'React', 'Angular', 'CI'];\n\nconst filter = createFilterOptions();\nconst filterSkills = createFilterOptions();\n\nconst validationSchema = yup.object({\n  role: yup\n    .string()\n    .trim()\n    .required('Role selection is required')\n    .matches(/^[a-z\\d\\-/#_\\s]+$/i, 'Only alphanumerics are allowed')\n    .max(50, 'Role must be at most 50 characters'),\n  skills: yup\n    .array()\n    .of(\n      yup\n        .string()\n        .trim()\n        .required('Leading spaces found in your tag')\n        .matches(/^[a-z\\d\\-/#.&_\\s]+$/i, 'Only alphanumerics are allowed')\n        .max(50, 'Skill tag field must be at most 50 characters')\n    )\n    .required('Skill selection is required')\n    .min(3, 'Skill tags field must have at least 3 items')\n    .max(15, 'Please select a maximum of 15 skills.')\n});\n\n// ==============================|| FORM VALIDATION - AUTOCOMPLETE  ||============================== //\n\nexport default function AutocompleteForms() {\n  const formik = useFormik({\n    initialValues: {\n      role: '',\n      skills: []\n    },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'Autocomplete - Submit Success',\n        variant: 'alert',\n\n        alert: {\n          color: 'success'\n        }\n      });\n    }\n  });\n\n  let TagsError = false;\n  if (formik.touched.skills && typeof formik.errors.skills) {\n    if (formik.touched.skills && typeof formik.errors.skills === 'string') {\n      TagsError = formik.errors.skills;\n    } else {\n      formik.errors.skills &&\n        typeof formik.errors.skills !== 'string' &&\n        formik.errors.skills.map((item) => {\n          // @ts-ignore\n          if (typeof item === 'object') TagsError = item.label;\n          return item;\n        });\n    }\n  }\n\n  return (\n    <MainCard title=\"Autocomplete\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Autocomplete\n              fullWidth\n              value={formik.values.role}\n              disableClearable\n              onChange={(event, newValue) => {\n                const jobExist = roles.includes(newValue);\n                if (!jobExist) {\n                  const matchData = newValue.match(/\"((?:\\\\.|[^\"\\\\])*)\"/);\n                  formik.setFieldValue('role', matchData && matchData[1]);\n                } else {\n                  formik.setFieldValue('role', newValue);\n                }\n              }}\n              filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n                const { inputValue } = params;\n                const isExisting = options.some((option) => inputValue === option);\n                if (inputValue !== '' && !isExisting) {\n                  filtered.push(`Add \"${inputValue}\"`);\n                }\n                return filtered;\n              }}\n              selectOnFocus\n              clearOnBlur\n              autoHighlight\n              handleHomeEndKeys\n              id=\"free-solo-with-text-demo\"\n              options={roles}\n              getOptionLabel={(option) => {\n                let value = option;\n                const jobExist = roles.includes(option);\n                if (!jobExist) {\n                  const matchData = option.match(/\"((?:\\\\.|[^\"\\\\])*)\"/);\n                  if (matchData && matchData[1]) value = matchData && matchData[1];\n                }\n                return value;\n              }}\n              renderOption={(props, option) => {\n                return (\n                  <Box component=\"li\" {...props}>\n                    {option}\n                  </Box>\n                );\n              }}\n              freeSolo\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  name=\"role\"\n                  error={formik.touched.role && Boolean(formik.errors.role)}\n                  helperText={formik.touched.role && formik.errors.role && formik.errors.role}\n                  placeholder=\"Select Role\"\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <ArrowDown2 />\n                        {/* <ArrowDropDown sx={{ color: 'text.primary' }} /> */}\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Autocomplete\n              id=\"skills\"\n              multiple\n              fullWidth\n              autoHighlight\n              freeSolo\n              disableCloseOnSelect\n              options={skills}\n              value={formik.values.skills}\n              onBlur={formik.handleBlur}\n              getOptionLabel={(option) => option}\n              onChange={(event, newValue) => {\n                const jobExist = skills.includes(newValue[newValue.length - 1]);\n                if (!jobExist) {\n                  formik.setFieldValue('skills', newValue);\n                } else {\n                  formik.setFieldValue('skills', newValue);\n                }\n              }}\n              filterOptions={(options, params) => {\n                const filtered = filterSkills(options, params);\n                const { inputValue } = params;\n                const isExisting = options.some((option) => inputValue === option);\n                if (inputValue !== '' && !isExisting) {\n                  filtered.push(inputValue);\n                }\n\n                return filtered;\n              }}\n              renderOption={(props, option) => {\n                return (\n                  <Box component=\"li\" {...props}>\n                    {!skills.some((v) => option.includes(v)) ? `Add \"${option}\"` : option}\n                  </Box>\n                );\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  name=\"skills\"\n                  placeholder=\"Write your skills\"\n                  error={formik.touched.skills && Boolean(formik.errors.skills)}\n                  helperText={TagsError}\n                />\n              )}\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => {\n                  let error = false;\n                  if (formik.touched.skills && formik.errors.skills && typeof formik.errors.skills !== 'string') {\n                    if (typeof formik.errors.skills[index] === 'object') error = true;\n                  }\n\n                  return (\n                    <Chip\n                      key={index}\n                      {...getTagProps({ index })}\n                      variant=\"combined\"\n                      color={error ? 'error' : 'secondary'}\n                      label={\n                        <Typography variant=\"caption\" color=\"secondary.dark\">\n                          {option}\n                        </Typography>\n                      }\n                      deleteIcon={<Add style={{ fontSize: '0.875rem', transform: 'rotate(45deg)' }} />}\n                      size=\"small\"\n                    />\n                  );\n                })\n              }\n            />\n            <Stack\n              direction=\"row\"\n              spacing={1}\n              alignItems=\"center\"\n              sx={{ mt: 1.5, flexWrap: { xs: 'wrap', sm: 'inherit' }, gap: { xs: 1, sm: 0 } }}\n            >\n              <Typography variant=\"caption\">Suggestion:</Typography>\n              {skills\n                .filter((skill) => formik.values.skills && !formik.values.skills.map((item) => item).includes(skill))\n                .slice(0, 5)\n                .map((option, index) => (\n                  <Chip\n                    key={index}\n                    variant=\"outlined\"\n                    onClick={() => formik.setFieldValue('skills', [...formik.values.skills, option])}\n                    label={<Typography variant=\"caption\">{option}</Typography>}\n                    size=\"small\"\n                  />\n                ))}\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":9377},"src/sections/components-overview/accordion/FixedAccordion.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Accordion from '@mui/material/Accordion';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| ACCORDION - FIXED ||============================== //\n\nexport default function FixedAccordion() {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const fixedAccordionCodeString = `<Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n  <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n    <Typography variant=\"h6\">Accordion 01</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n  <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n    <Typography variant=\"h6\">Accordion 02</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n  <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n    <Typography variant=\"h6\">Accordion 03</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion expanded>\n  <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n    <Typography variant=\"h6\">Accordion 04</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>`;\n\n  return (\n    <MainCard title=\"Fixed\" codeString={fixedAccordionCodeString}>\n      <>\n        <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n          <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n            <Typography variant=\"h6\">Accordion 01</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n          <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n            <Typography variant=\"h6\">Accordion 02</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n          <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n            <Typography variant=\"h6\">Accordion 03</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion expanded>\n          <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n            <Typography variant=\"h6\">Accordion 04</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":5690},"src/sections/components-overview/select/MultipleSelect.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Stack from '@mui/material/Stack';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = { PaperProps: { style: { maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP, width: 250 } } };\n\nconst names = [\n  'Oliver Hansen',\n  'Van Henry',\n  'April Tucker',\n  'Ralph Hubbard',\n  'Omar Alexander',\n  'Carlos Abbott',\n  'Miriam Wagner',\n  'Bradley Wilkerson',\n  'Virginia Andrews',\n  'Kelly Snyder'\n];\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\n\n// ==============================|| SELECT - MULTI SELECT ||============================== //\n\nexport default function MultipleSelect() {\n  const theme = useTheme();\n  const [personName, setPersonName] = useState([]);\n\n  const handleChange = (event) => {\n    const {\n      target: { value }\n    } = event;\n    setPersonName(\n      // On autofill we get a the stringified value.\n      typeof value === 'string' ? value.split(',') : value\n    );\n  };\n\n  const multipleSelectCodeString = `// MultipleSelect.tsx\n<FormControl fullWidth>\n  <InputLabel id=\"demo-multiple-name-label\">Name</InputLabel>\n  <Select\n    labelId=\"demo-multiple-name-label\"\n    id=\"demo-multiple-name\"\n    multiple\n    value={personName}\n    onChange={handleChange}\n    input={<OutlinedInput />}\n    MenuProps={MenuProps}\n  >\n    {names.map((name) => (\n      <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n        {name}\n      </MenuItem>\n    ))}\n  </Select>\n</FormControl>`;\n\n  return (\n    <MainCard title=\"Multiple\" codeString={multipleSelectCodeString}>\n      <Stack spacing={1}>\n        <InputLabel id=\"demo-multiple-name-label\">Name</InputLabel>\n        <FormControl fullWidth>\n          <Select\n            labelId=\"demo-multiple-name-label\"\n            id=\"demo-multiple-name\"\n            multiple\n            value={personName}\n            onChange={handleChange}\n            input={<OutlinedInput />}\n            MenuProps={MenuProps}\n          >\n            {names.map((name) => (\n              <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":2746},"src/sections/apps/e-commerce/products/SortOptions.js":{"content":"const SortOptions = [\n  {\n    value: 'high',\n    label: 'Price: High To Low'\n  },\n  {\n    value: 'low',\n    label: 'Price: Low To High'\n  },\n  {\n    value: 'popularity',\n    label: 'Popularity'\n  },\n  {\n    value: 'discount',\n    label: 'Discount'\n  },\n  {\n    value: 'new',\n    label: 'Fresh Arrivals'\n  }\n];\n\nexport default SortOptions;\n","size_bytes":339},"src/themes/overrides/LoadingButton.js":{"content":"// ==============================|| OVERRIDES - LOADING BUTTON ||============================== //\n\nexport default function LoadingButton() {\n  return {\n    MuiLoadingButton: {\n      styleOverrides: {\n        root: {\n          '& svg': {\n            width: 18,\n            height: 18\n          },\n          paddingLeft: 16,\n          paddingRight: 16,\n          '&.MuiLoadingButton-loading': {\n            opacity: 0.6,\n            textShadow: 'none',\n            '& .MuiLoadingButton-loadingIndicatorStart': {\n              left: 12\n            },\n            '& .MuiLoadingButton-loadingIndicatorEnd': {\n              right: 12\n            }\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":687},"src/vite-env.d.js":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/sections/widget/chart/ProjectOverview.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Add } from 'iconsax-react';\n\n// ==============================|| CHART ||============================== //\n\nfunction TaskStatusChart({ color, data }) {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      id: 'new-stack-chart',\n      type: 'area',\n      stacked: true,\n      sparkline: {\n        enabled: true\n      },\n      offsetX: -20\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 0\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    markers: {\n      hover: {\n        size: 5\n      }\n    },\n\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 1,\n        type: 'vertical',\n        inverseColors: false,\n        opacityFrom: 0.5,\n        opacityTo: 0\n      }\n    },\n    stroke: { curve: 'smooth', width: 2 },\n    tooltip: {\n      x: {\n        show: false\n      }\n    },\n    grid: {\n      show: false\n    }\n  };\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [color],\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [color, mode, primary, secondary, line, theme]);\n\n  const [series] = useState([{ name: 'Orders', data }]);\n\n  return <ReactApexChart options={options} series={series} type=\"area\" height={60} />;\n}\n\n// ==============================|| CHART - PROJECT OVERVIEW ||============================== //\n\nexport default function ProjectOverview() {\n  const theme = useTheme();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n        <Typography variant=\"h5\">Project overview</Typography>\n        <IconButton\n          color=\"secondary\"\n          id=\"wallet-button\"\n          aria-controls={open ? 'wallet-menu' : undefined}\n          aria-haspopup=\"true\"\n          aria-expanded={open ? 'true' : undefined}\n          onClick={handleClick}\n          sx={{ transform: 'rotate(90deg)' }}\n        >\n          <MoreIcon />\n        </IconButton>\n        <Menu\n          id=\"wallet-menu\"\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleClose}\n          MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <ListItemButton onClick={handleClose}>Today</ListItemButton>\n          <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n          <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n        </Menu>\n      </Stack>\n      <Grid container spacing={3} sx={{ mt: 1 }}>\n        <Grid item xs={12} sm={6} md={4}>\n          <Grid container spacing={1} alignItems=\"flex-end\">\n            <Grid item xs={6}>\n              <Stack spacing={0.25}>\n                <Typography color=\"text.secondary\">Total Tasks</Typography>\n                <Typography variant=\"h5\">34,686</Typography>\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <TaskStatusChart color={theme.palette.primary.main} data={[5, 25, 3, 10, 4, 50, 0]} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={6} md={4}>\n          <Grid container spacing={1}>\n            <Grid item xs={6}>\n              <Stack spacing={0.25}>\n                <Typography color=\"text.secondary\">Pending Tasks</Typography>\n                <Typography variant=\"h5\">3,6786</Typography>\n              </Stack>\n            </Grid>\n            <Grid item xs={6}>\n              <TaskStatusChart color={theme.palette.error.main} data={[0, 50, 4, 10, 3, 25, 5]} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Button fullWidth variant=\"contained\" startIcon={<Add />} size=\"large\">\n            Add project\n          </Button>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nTaskStatusChart.propTypes = { color: PropTypes.string, data: PropTypes.array };\n","size_bytes":5142},"src/sections/extra-pages/contact/ContactForm.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// select company-size\nconst sizes = [\n  { value: '1', label: '1 - 5' },\n  { value: '2', label: '5 - 10' },\n  { value: '3', label: '10+' }\n];\n\n// ==============================|| CONTACT US - FORM ||============================== //\n\nexport default function ContactForm() {\n  const theme = useTheme();\n  const [size, setSize] = useState(1);\n  const handleCompanySize = (event) => {\n    setSize(Number(event.target?.value));\n  };\n  return (\n    <Box sx={{ p: { xs: 2.5, sm: 0 } }}>\n      <Grid container spacing={5} justifyContent=\"center\">\n        <Grid item xs={12} sm={10} lg={6}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Stack spacing={1}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  First Name\n                </Typography>\n                <TextField fullWidth type=\"text\" placeholder=\"First name\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Stack spacing={1}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  Last Name\n                </Typography>\n                <TextField fullWidth type=\"text\" placeholder=\"Last name\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  Email Address\n                </Typography>\n                <TextField fullWidth type=\"email\" placeholder=\"Email Address\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <Typography variant=\"subtitle1\" color=\"secondary\">\n                  Phone Number\n                </Typography>\n                <TextField fullWidth type=\"number\" placeholder=\"Phone Number\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField select fullWidth placeholder=\"Company Size\" value={size} onChange={handleCompanySize}>\n                {sizes.map((option, index) => (\n                  <MenuItem key={index} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item xs={12}>\n              <Stack direction=\"row\" alignItems=\"center\" sx={{ ml: -1 }}>\n                <Checkbox sx={{ '& .css-1vjb4cj': { borderRadius: '2px' } }} defaultChecked />\n                <Typography>\n                  I agree to all the{' '}\n                  <Typography sx={{ cursor: 'pointer' }} component=\"span\" color={theme.palette.primary.main}>\n                    Terms & Condition\n                  </Typography>\n                </Typography>\n              </Stack>\n            </Grid>\n            <Grid item xs={12}>\n              <Button variant=\"contained\" fullWidth>\n                Submit\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","size_bytes":3478},"src/sections/forms/edit-forms/team/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\nimport returnImageObject from 'api/fetchData';\nimport { useEffect, useState } from 'react';\n\nconst validationSchema = yup.object({\n  imageSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const [initialValues, setInitialValues] = useState({\n    imageSrc: null\n  });\n\n  useEffect(() => {\n    const fetchInitialValues = async () => {\n      const imageSrc = await returnImageObject(data.imageSrc);\n\n      setInitialValues({\n        imageSrc\n      });\n    };\n\n    fetchInitialValues();\n  }, [data]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values) => {\n      const resolvedValues = {\n        imageSrc: await values.imageSrc\n      };\n      setData({\n        ...data,\n        ...resolvedValues\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Portrait image of member</InputLabel>\n              <DragDropFileUpload formik={formik} name=\"imageSrc\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\">\n              <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                Back\n              </Button>\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":2783},"src/pages/apps/profiles/account.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation, Link, Outlet } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Breadcrumbs from 'components/@extended/Breadcrumbs';\nimport { APP_DEFAULT_PATH } from 'config';\n\n// assets\nimport { DocumentText, Lock, Profile, Profile2User, Setting3, TableDocument } from 'iconsax-react';\n\n// ==============================|| PROFILE - ACCOUNT ||============================== //\n\nexport default function AccountProfile() {\n  const { pathname } = useLocation();\n\n  let selectedTab = 0;\n  let breadcrumbTitle = '';\n  let breadcrumbHeading = '';\n  switch (pathname) {\n    case '/apps/profiles/account/personal':\n      breadcrumbTitle = 'Personal';\n      breadcrumbHeading = 'Personal';\n      selectedTab = 1;\n      break;\n    case '/apps/profiles/account/my-account':\n      breadcrumbTitle = 'My Account';\n      breadcrumbHeading = 'My Account';\n      selectedTab = 2;\n      break;\n    case '/apps/profiles/account/password':\n      breadcrumbTitle = 'Change Password';\n      breadcrumbHeading = 'Change Password';\n      selectedTab = 3;\n      break;\n    case '/apps/profiles/account/role':\n      breadcrumbTitle = 'Role';\n      breadcrumbHeading = 'Accountant';\n      selectedTab = 4;\n      break;\n    case '/apps/profiles/account/settings':\n      breadcrumbTitle = 'Settings';\n      breadcrumbHeading = 'Account Settings';\n      selectedTab = 5;\n      break;\n    case '/apps/profiles/account/basic':\n    default:\n      breadcrumbTitle = 'Basic';\n      breadcrumbHeading = 'Basic Account';\n      selectedTab = 0;\n  }\n\n  const [value, setValue] = useState(selectedTab);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  let breadcrumbLinks = [\n    { title: 'Home', to: APP_DEFAULT_PATH },\n    { title: 'Account Profile', to: '/apps/profiles/account/basic' },\n    { title: breadcrumbTitle }\n  ];\n  if (selectedTab === 0) {\n    breadcrumbLinks = [{ title: 'Home', to: APP_DEFAULT_PATH }, { title: 'Account Profile' }];\n  }\n\n  useEffect(() => {\n    if (pathname === '/apps/profiles/account/basic') {\n      setValue(0);\n    }\n  }, [pathname]);\n\n  return (\n    <>\n      <Breadcrumbs custom heading={breadcrumbHeading} links={breadcrumbLinks} />\n      <MainCard border={false}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', width: '100%' }}>\n          <Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"account profile tab\">\n            <Tab label=\"Profile\" component={Link} to=\"/apps/profiles/account/basic\" icon={<Profile />} iconPosition=\"start\" />\n            <Tab label=\"Personal\" component={Link} to=\"/apps/profiles/account/personal\" icon={<DocumentText />} iconPosition=\"start\" />\n            {/* <Tab label=\"My Account\" component={Link} to=\"/apps/profiles/account/my-account\" icon={<TableDocument />} iconPosition=\"start\" /> */}\n            <Tab label=\"Change Password\" component={Link} to=\"/apps/profiles/account/password\" icon={<Lock />} iconPosition=\"start\" />\n            {/* <Tab label=\"Role\" component={Link} to=\"/apps/profiles/account/role\" icon={<Profile2User />} iconPosition=\"start\" /> */}\n            <Tab label=\"Settings\" component={Link} to=\"/apps/profiles/account/settings\" icon={<Setting3 />} iconPosition=\"start\" />\n          </Tabs>\n        </Box>\n        <Box sx={{ mt: 2.5 }}>\n          <Outlet />\n        </Box>\n      </MainCard>\n    </>\n  );\n}\n","size_bytes":3579},"src/sections/apps/kanban/Board/index.jsx":{"content":"// MATERIAL - UI\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Skeleton from '@mui/material/Skeleton';\n\n// THIRD - PARTY\nimport { DragDropContext, Droppable } from '@hello-pangea/dnd';\n\n// PROJECT IMPORTS\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\nimport Columns from './Columns';\nimport AddColumn from './AddColumn';\nimport ItemDetails from './ItemDetails';\nimport { ThemeMode } from 'config';\n\nimport { updateColumnItemOrder, updateColumnOrder, useGetBacklogs } from 'api/kanban';\n\nconst getDragWrapper = () => ({\n  p: 2.5,\n  px: 0,\n  bgcolor: 'transparent',\n  display: 'flex',\n  overflow: 'auto'\n});\n\nconst heightOptions = [120, 100, 160, 80, 60];\n\n// ==============================|| KANBAN - BOARD ||============================== //\n\nexport default function Board() {\n  const theme = useTheme();\n  const { backlogs: lists, backlogsLoading: loading } = useGetBacklogs();\n\n  // handle drag & drop\n  const onDragEnd = (result) => {\n    let newColumn;\n    const { source, destination, draggableId, type } = result;\n\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n    if (type === 'column') {\n      const newColumnsOrder = Array.from(lists?.columnsOrder);\n\n      newColumnsOrder.splice(source.index, 1); // remove dragged column\n      newColumnsOrder.splice(destination?.index, 0, draggableId); // set column new position\n\n      updateColumnOrder(newColumnsOrder);\n      return;\n    }\n\n    // find dragged item's column\n    const sourceColumn = lists?.columns.filter((item) => item.id === source.droppableId)[0];\n\n    // find dropped item's column\n    const destinationColumn = lists?.columns.filter((item) => item.id === destination.droppableId)[0];\n\n    // if - moving items in the same list\n    // else - moving items from one list to another\n    if (sourceColumn === destinationColumn) {\n      const newItemIds = Array.from(sourceColumn.itemIds);\n\n      // remove the id of dragged item from its original position\n      newItemIds.splice(source.index, 1);\n\n      // insert the id of dragged item to the new position\n      newItemIds.splice(destination.index, 0, draggableId);\n\n      // updated column\n      const newSourceColumn = {\n        ...sourceColumn,\n        itemIds: newItemIds\n      };\n\n      newColumn = lists?.columns.map((column) => {\n        if (column.id === newSourceColumn.id) {\n          return newSourceColumn;\n        }\n        return column;\n      });\n    } else {\n      const newSourceItemIds = Array.from(sourceColumn.itemIds);\n\n      // remove the id of dragged item from its original column\n      newSourceItemIds.splice(source.index, 1);\n\n      // updated dragged items's column\n      const newSourceColumn = {\n        ...sourceColumn,\n        itemIds: newSourceItemIds\n      };\n\n      const newDestinationItemIds = Array.from(destinationColumn.itemIds);\n\n      // insert the id of dragged item to the new position in dropped column\n      newDestinationItemIds.splice(destination.index, 0, draggableId);\n\n      // updated dropped item's column\n      const newDestinationColumn = {\n        ...destinationColumn,\n        itemIds: newDestinationItemIds\n      };\n\n      newColumn = lists?.columns.map((column) => {\n        if (column.id === newSourceColumn.id) {\n          return newSourceColumn;\n        }\n        if (column.id === newDestinationColumn.id) {\n          return newDestinationColumn;\n        }\n        return column;\n      });\n    }\n\n    updateColumnItemOrder(newColumn);\n  };\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <ScrollX>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"columns\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <MainCard\n                border={false}\n                ref={provided.innerRef}\n                sx={{ bgcolor: 'transparent' }}\n                contentSX={getDragWrapper()}\n                {...provided.droppableProps}\n              >\n                {lists?.columnsOrder.map((columnId, index) => {\n                  const column = lists?.columns.filter((item) => item.id === columnId)[0];\n                  return loading ? (\n                    <MainCard\n                      content={false}\n                      sx={{\n                        p: 1.5,\n                        margin: `0 ${16}px 0 0`,\n                        minWidth: 250,\n                        bgcolor: theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.lighter'\n                      }}\n                    >\n                      <Stack spacing={1.25}>\n                        <Skeleton variant=\"rounded\" width=\"100%\" height={38} />\n                        <Skeleton variant=\"rounded\" width=\"100%\" height={heightOptions[Math.floor(Math.random() * heightOptions.length)]} />\n                        <Skeleton variant=\"rounded\" width=\"100%\" height={heightOptions[Math.floor(Math.random() * heightOptions.length)]} />\n                        <Skeleton variant=\"rounded\" width=\"100%\" height={heightOptions[Math.floor(Math.random() * heightOptions.length)]} />\n                      </Stack>\n                    </MainCard>\n                  ) : (\n                    <Columns key={columnId} column={column} index={index} />\n                  );\n                })}\n                {provided.placeholder}\n                <AddColumn />\n              </MainCard>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </ScrollX>\n      <ItemDetails />\n    </Box>\n  );\n}\n","size_bytes":5646},"src/sections/tables/react-table/ExpandingSubTable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { Fragment, useEffect, useMemo, useState } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Skeleton from '@mui/material/Skeleton';\n\n// third-party\nimport { flexRender, useReactTable, getExpandedRowModel, getCoreRowModel } from '@tanstack/react-table';\n\n// project import\nimport ScrollX from 'components/ScrollX';\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport { CSVExport } from 'components/third-party/react-table';\n\nimport makeData from 'data/react-table';\nimport mockData from 'utils/mock-data';\nimport { getImageUrl, ImagePath } from 'utils/getImageUrl';\n\n// assets\nimport { ArrowDown2, ArrowRight2, MinusCirlce } from 'iconsax-react';\n\nconst numRows = mockData(1);\n\n// ==============================|| RENDER - SUB TABLE ||============================== //\n\nfunction RenderSubComponent({ row }) {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  const columns = useMemo(\n    () => [\n      {\n        header: 'Avatar',\n        accessorKey: 'avatar',\n        cell: (cell) => <Avatar alt=\"Avatar 1\" size=\"sm\" src={getImageUrl(`avatar-${cell.getValue()}.png`, ImagePath.USERS)} />,\n        meta: {\n          className: 'cell-center'\n        }\n      },\n      {\n        header: 'Name',\n        accessorKey: 'fullName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Role',\n        accessorKey: 'role'\n      },\n      {\n        header: 'Contact',\n        accessorKey: 'contact',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Country',\n        accessorKey: 'country'\n      }\n    ],\n    []\n  );\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setData(makeData(numRows.number.status(1, 5)));\n      setLoading(false);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  const userData = row.original;\n\n  let headers = [];\n  columns.map(\n    (columns) =>\n      // @ts-ignore\n      columns.accessorKey &&\n      headers.push({\n        label: typeof columns.header === 'string' ? columns.header : '#',\n        // @ts-ignore\n        key: columns.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      title={`${userData.fullName}'s Employee List`}\n      secondary={<CSVExport {...{ data, headers, filename: 'expanding-sub-data.csv' }} />}\n      content={false}\n      sx={{ ml: { xs: 2.5, sm: 5, md: 6, lg: 10, xl: 12 } }}\n    >\n      <ReactTable {...{ columns, data, loading, isList: true }} />\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE ||============================== //\n\nfunction ReactTable({ columns, data, loading, isList }) {\n  const theme = useTheme();\n\n  const table = useReactTable({\n    data,\n    columns,\n    getRowCanExpand: () => true,\n    getCoreRowModel: getCoreRowModel(),\n    getExpandedRowModel: getExpandedRowModel()\n  });\n\n  const backColor = alpha(theme.palette.primary.lighter, 0.1);\n\n  if (loading) {\n    return (\n      <Table>\n        <TableHead>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => (\n                <TableCell key={header.id} {...header.column.columnDef.meta}>\n                  {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {[0, 1, 2].map((item) => (\n            <TableRow key={item}>\n              {[0, 1, 2, 3, 4, 5].map((col) => (\n                <TableCell key={col}>\n                  <Skeleton animation=\"wave\" />\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n\n  let headers = [];\n  table.getAllColumns().map(\n    (columns) =>\n      // @ts-ignore\n      columns.columnDef.accessorKey &&\n      headers.push({\n        label: typeof columns.columnDef.header === 'string' ? columns.columnDef.header : '#',\n        // @ts-ignore\n        key: columns.columnDef.accessorKey\n      })\n  );\n\n  return (\n    <MainCard\n      {...(!isList && { title: 'Expanding Sub Table' })}\n      content={false}\n      secondary={<CSVExport {...{ data, headers, filename: 'expanding-sub.csv' }} />}\n    >\n      <ScrollX>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id} sx={{ '& > th:first-of-type': { width: isList ? 'auto' : 58 } }}>\n                  {headerGroup.headers.map((header) => (\n                    <TableCell key={header.id} {...header.column.columnDef.meta}>\n                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody>\n              {table.getRowModel().rows.map((row) => (\n                <Fragment key={row.id}>\n                  <TableRow>\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id} {...cell.column.columnDef.meta}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                  {row.getIsExpanded() && (\n                    <TableRow sx={{ bgcolor: backColor, '&:hover': { bgcolor: `${backColor} !important` } }}>\n                      <TableCell colSpan={row.getVisibleCells().length}>\n                        <RenderSubComponent {...{ row }} />\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </ScrollX>\n    </MainCard>\n  );\n}\n\n// ==============================|| REACT TABLE - EXPANDING SUB TABLE ||============================== //\n\nexport default function ExpandingSubTable() {\n  const theme = useTheme();\n  const data = makeData(8);\n\n  const columns = useMemo(\n    () => [\n      {\n        id: 'expander',\n        header: () => null,\n        cell: ({ row }) => {\n          return row.getCanExpand() ? (\n            <IconButton color={row.getIsExpanded() ? 'primary' : 'secondary'} onClick={row.getToggleExpandedHandler()} size=\"small\">\n              {row.getIsExpanded() ? <ArrowDown2 size=\"32\" variant=\"Outline\" /> : <ArrowRight2 size=\"32\" variant=\"Outline\" />}\n            </IconButton>\n          ) : (\n            <MinusCirlce style={{ color: theme.palette.text.secondary }} size=\"32\" />\n          );\n        }\n      },\n      {\n        header: 'First Name',\n        accessorKey: 'firstName'\n      },\n      {\n        header: 'Last Name',\n        accessorKey: 'lastName'\n      },\n      {\n        header: 'Email',\n        accessorKey: 'email'\n      },\n      {\n        header: 'Age',\n        accessorKey: 'age',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Visits',\n        accessorKey: 'visits',\n        meta: {\n          className: 'cell-right'\n        }\n      },\n      {\n        header: 'Status',\n        accessorKey: 'status',\n        cell: (cell) => {\n          switch (cell.getValue()) {\n            case 'Complicated':\n              return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n            case 'Relationship':\n              return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n            case 'Single':\n            default:\n              return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n          }\n        }\n      },\n      {\n        header: 'Profile Progress',\n        accessorKey: 'progress',\n        cell: (cell) => <LinearWithLabel value={cell.getValue()} sx={{ minWidth: 75 }} />\n      }\n    ],\n    [theme.palette.text.secondary]\n  );\n\n  return <ReactTable {...{ columns, data }} />;\n}\n\nRenderSubComponent.propTypes = { row: PropTypes.object };\n\nReactTable.propTypes = { columns: PropTypes.array, data: PropTypes.array, loading: PropTypes.bool, isList: PropTypes.bool };\n","size_bytes":8910},"src/themes/overrides/ListItemIcon.jsx":{"content":"// ==============================|| OVERRIDES - LIST ITEM ICON ||============================== //\n\nexport default function ListItemIcon(theme) {\n  return {\n    MuiListItemIcon: {\n      styleOverrides: {\n        root: {\n          minWidth: 28,\n          color: theme.palette.secondary.main\n        }\n      }\n    }\n  };\n}\n","size_bytes":321},"src/pages/edit-form-grids/works.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport EditWorkPage from 'sections/forms/edit-forms/works';\n\n// project-imports\n\n// ==============================|| FORMS WIZARD ||============================== //\n\nexport default function FormEditWorks() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={6} lg={7}>\n        <EditWorkPage />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":431},"src/sections/forms/edit-forms/services/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\nimport { useEffect, useState } from 'react';\nimport returnImageObject from 'api/fetchData';\n\nconst validationSchema = yup.object({\n  imageLabelSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstIconPath: yup\n    .mixed()\n    .required('First icon is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  secondIconPath: yup\n    .mixed()\n    .required('Second icon is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  imageTitlePath: yup\n    .mixed()\n    .required('Title image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const [initialValues, setInitialValues] = useState({\n    titleImagePath: null,\n    carouselImagePath1: null,\n    carouselImagePath2: null,\n    carouselImagePath3: null,\n    carouselImagePath4: null,\n    firstSubheadingImage: null\n  });\n\n  useEffect(() => {\n    const fetchInitialValues = async () => {\n      const imageLabelSrc = await returnImageObject(data.imageLabelSrc);\n      const firstIconPath = await returnImageObject(data.firstIconPath);\n      const secondIconPath = await returnImageObject(data.secondIconPath);\n      const imageTitlePath = await returnImageObject(data.imageTitlePath);\n\n      setInitialValues({\n        imageLabelSrc,\n        firstIconPath,\n        secondIconPath,\n        imageTitlePath\n      });\n    };\n\n    fetchInitialValues();\n  }, [data]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values) => {\n      const resolvedValues = {\n        imageLabelSrc: (await values.imageLabelSrc) || null,\n        firstIconPath: (await values.firstIconPath) || null,\n        secondIconPath: (await values.secondIconPath) || null,\n        imageTitlePath: (await values.imageTitlePath) || null\n      };\n      setData({\n        ...data,\n        ...resolvedValues\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label Image of page</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"imageLabelSrc\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>First Icon</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"firstIconPath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Second Icon</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"secondIconPath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"imageTitlePath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\">\n              <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                Back\n              </Button>\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":5184},"src/layout/Dashboard/Drawer/DrawerContent/NavCard.jsx":{"content":"// material-ui\nimport Button from '@mui/material/Button';\nimport Link from '@mui/material/Link';\nimport CardMedia from '@mui/material/CardMedia';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport avatar from 'assets/images/users/customer-support-1.png';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\n// ==============================|| DRAWER CONTENT - NAV CARD ||============================== //\n\nexport default function NavCard() {\n  return (\n    <MainCard sx={{ bgcolor: 'secondary.lighter', m: 3 }}>\n      <Stack alignItems=\"center\" spacing={2.5}>\n        <CardMedia component=\"img\" image={avatar} />\n        <Stack alignItems=\"center\">\n          <Typography variant=\"h5\">Need Support?</Typography>\n          <Typography variant=\"h6\" color=\"secondary\">\n            1 Day Response Time\n          </Typography>\n        </Stack>\n        <AnimateButton>\n          <Button variant=\"shadow\" size=\"small\" component={Link} href=\"https://phoenixcoded.authordesk.app/\" target=\"_blank\">\n            Get Support\n          </Button>\n        </AnimateButton>\n      </Stack>\n    </MainCard>\n  );\n}\n","size_bytes":1231},"src/components/third-party/Notistack.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport { styled } from '@mui/material/styles';\n\n// third-party\nimport { SnackbarProvider } from 'notistack';\n\n// project-imports\nimport Loader from 'components/Loader';\nimport { useGetSnackbar } from 'api/snackbar';\n\n// assets\nimport { CloseCircle, InfoCircle, TickCircle, Warning2 } from 'iconsax-react';\n\n// custom styles\nconst StyledSnackbarProvider = styled(SnackbarProvider)(({ theme }) => ({\n  '&.notistack-MuiContent-default': { backgroundColor: theme.palette.primary.main },\n  '&.notistack-MuiContent-error': { backgroundColor: theme.palette.error.main },\n  '&.notistack-MuiContent-success': { backgroundColor: theme.palette.success.main },\n  '&.notistack-MuiContent-info': { backgroundColor: theme.palette.info.main },\n  '&.notistack-MuiContent-warning': { backgroundColor: theme.palette.warning.main }\n}));\n\n// ===========================|| SNACKBAR - NOTISTACK ||=========================== //\n\nexport default function Notistack({ children }) {\n  const { snackbar } = useGetSnackbar();\n  const iconSX = { marginRight: 8, fontSize: '1.15rem' };\n\n  if (snackbar === undefined) return <Loader />;\n\n  return (\n    <StyledSnackbarProvider\n      maxSnack={snackbar.maxStack}\n      dense={snackbar.dense}\n      iconVariant={\n        snackbar.iconVariant === 'useemojis'\n          ? {\n              success: <TickCircle style={iconSX} />,\n              error: <CloseCircle style={iconSX} />,\n              warning: <Warning2 style={iconSX} />,\n              info: <InfoCircle style={iconSX} />\n            }\n          : undefined\n      }\n      hideIconVariant={snackbar.iconVariant === 'hide' ? true : false}\n    >\n      {children}\n    </StyledSnackbarProvider>\n  );\n}\n\nNotistack.propTypes = { children: PropTypes.node };\n","size_bytes":1777},"src/sections/widget/data/ActiveTickets.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Table from '@mui/material/Table';\nimport Avatar from '@mui/material/Avatar';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport Typography from '@mui/material/Typography';\nimport TableContainer from '@mui/material/TableContainer';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport Avatar1 from 'assets/images/users/avatar-1.png';\nimport Avatar2 from 'assets/images/users/avatar-2.png';\nimport Avatar3 from 'assets/images/users/avatar-3.png';\nimport Avatar4 from 'assets/images/users/avatar-4.png';\n\n// table data\nfunction createData(time, subTime, avatar, name, title, subtext) {\n  return { time, subTime, avatar, name, title, subtext };\n}\n\nconst rows = [\n  createData(\n    '12',\n    'hours',\n    Avatar1,\n    'John Deo',\n    '[#1183] Workaround for OS X selects printing bug',\n    'Chrome fixed the bug several versions ago, thus rendering this...'\n  ),\n  createData(\n    '16',\n    'hours',\n    Avatar2,\n    'Jems Win',\n    '[#1249] Vertically center carousel controls',\n    'Try any carousel control and reduce the screen width below...'\n  ),\n  createData(\n    '40',\n    'hours',\n    Avatar3,\n    'Jeny Wiliiam',\n    '[#1254] Inaccurate small pagination height',\n    'The height of pagination elements is not consistent with...'\n  ),\n  createData(\n    '12',\n    'hours',\n    Avatar4,\n    'Jems Win',\n    '[#1249] Vertically center carousel controls',\n    'Try any carousel control and reduce the screen width below...'\n  )\n];\n\n// ==========================|| DATA WIDGET - ACTIVE TICKETS ||========================== //\n\nexport default function ActiveTickets() {\n  return (\n    <MainCard\n      title=\"Active Tickets\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <TableContainer>\n        <Table sx={{ minWidth: 560 }}>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Due</TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell sx={{ pr: 3 }}>Position</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => (\n              <TableRow hover key={index}>\n                <TableCell align=\"center\">\n                  <Typography variant=\"subtitle1\">{row.time}</Typography>\n                  <Typography variant=\"subtitle2\" color=\"secondary\">\n                    {row.subTime}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Grid container spacing={2} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\n                    <Grid item>\n                      <Avatar alt=\"User 1\" src={row.avatar} />\n                    </Grid>\n                    <Grid item xs zeroMinWidth>\n                      <Typography variant=\"subtitle1\">{row.name}</Typography>\n                    </Grid>\n                  </Grid>\n                </TableCell>\n                <TableCell sx={{ pr: 3 }}>\n                  <Typography variant=\"subtitle1\">{row.title}</Typography>\n                  <Typography variant=\"caption\" color=\"secondary\">\n                    {row.subtext}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MainCard>\n  );\n}\n","size_bytes":3670},"src/sections/auth/auth-forms/AuthResetPassword.jsx":{"content":"import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport Stack from '@mui/material/Stack';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nimport { strengthColor, strengthIndicator } from 'utils/password-strength';\nimport { openSnackbar } from 'api/snackbar';\n\n// assets\nimport { Eye, EyeSlash } from 'iconsax-react';\n\n// ============================|| FIREBASE - RESET PASSWORD ||============================ //\n\nexport default function AuthResetPassword() {\n  const scriptedRef = useScriptRef();\n  const navigate = useNavigate();\n\n  const { isLoggedIn } = useAuth();\n\n  const [level, setLevel] = useState();\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const changePassword = (value) => {\n    const temp = strengthIndicator(value);\n    setLevel(strengthColor(temp));\n  };\n\n  useEffect(() => {\n    changePassword('');\n  }, []);\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          password: '',\n          confirmPassword: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          password: Yup.string().max(255).required('Password is required'),\n          confirmPassword: Yup.string()\n            .required('Confirm Password is required')\n            .test('confirmPassword', 'Both Password must be match!', (confirmPassword, yup) => yup.parent.password === confirmPassword)\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            // password reset\n            if (scriptedRef.current) {\n              setStatus({ success: true });\n              setSubmitting(false);\n\n              openSnackbar({\n                open: true,\n                message: 'Successfuly reset password.',\n                variant: 'alert',\n\n                alert: {\n                  color: 'success'\n                }\n              });\n\n              setTimeout(() => {\n                navigate(isLoggedIn ? '/auth/login' : '/login', { replace: true });\n              }, 1500);\n            }\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"password-reset\">Password</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.password && errors.password)}\n                    id=\"password-reset\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={(e) => {\n                      handleChange(e);\n                      changePassword(e.target.value);\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={handleClickShowPassword}\n                          onMouseDown={handleMouseDownPassword}\n                          edge=\"end\"\n                          color=\"secondary\"\n                        >\n                          {showPassword ? <Eye /> : <EyeSlash />}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                    placeholder=\"Enter password\"\n                  />\n                </Stack>\n                {touched.password && errors.password && (\n                  <FormHelperText error id=\"helper-text-password-reset\">\n                    {errors.password}\n                  </FormHelperText>\n                )}\n                <FormControl fullWidth sx={{ mt: 2 }}>\n                  <Grid container spacing={2} alignItems=\"center\">\n                    <Grid item>\n                      <Box sx={{ bgcolor: level?.color, width: 85, height: 8, borderRadius: '7px' }} />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"subtitle1\" fontSize=\"0.75rem\">\n                        {level?.label}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <InputLabel htmlFor=\"confirm-password-reset\">Confirm Password</InputLabel>\n                  <OutlinedInput\n                    fullWidth\n                    error={Boolean(touched.confirmPassword && errors.confirmPassword)}\n                    id=\"confirm-password-reset\"\n                    type=\"password\"\n                    value={values.confirmPassword}\n                    name=\"confirmPassword\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    placeholder=\"Enter confirm password\"\n                  />\n                </Stack>\n                {touched.confirmPassword && errors.confirmPassword && (\n                  <FormHelperText error id=\"helper-text-confirm-password-reset\">\n                    {errors.confirmPassword}\n                  </FormHelperText>\n                )}\n              </Grid>\n\n              {errors.submit && (\n                <Grid item xs={12}>\n                  <FormHelperText error>{errors.submit}</FormHelperText>\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <AnimateButton>\n                  <Button disableElevation disabled={isSubmitting} fullWidth size=\"large\" type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Reset Password\n                  </Button>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n","size_bytes":7079},"src/sections/apps/e-commerce/products/ProductEmpty.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowRight2 } from 'iconsax-react';\n\nimport imageEmpty from 'assets/images/e-commerce/empty.png';\nimport imageDarkEmpty from 'assets/images/e-commerce/empty-dark.png';\n\n// ==============================|| PRODUCT - EMPTY ||============================== //\n\nexport default function ProductEmpty({ handelFilter }) {\n  const theme = useTheme();\n  const matchDownMD = useMediaQuery(theme.breakpoints.down('lg'));\n\n  return (\n    <MainCard content={false}>\n      <Grid\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={3}\n        sx={{ my: 3, height: { xs: 'auto', md: 'calc(100vh - 240px)' }, p: { xs: 2.5, md: 'auto' } }}\n      >\n        <Grid item>\n          <CardMedia\n            component=\"img\"\n            image={theme.palette.mode === ThemeMode.DARK ? imageDarkEmpty : imageEmpty}\n            title=\"Cart Empty\"\n            sx={{ width: { xs: 240, md: 320, lg: 440 } }}\n          />\n        </Grid>\n        <Grid item>\n          <Stack spacing={0.5}>\n            <Typography variant={matchDownMD ? 'h3' : 'h1'} color=\"inherit\">\n              There is no Product\n            </Typography>\n            <Typography variant=\"h5\" color=\"text.secondary\">\n              Try checking your spelling or use more general terms\n            </Typography>\n            <Box sx={{ pt: 3 }}>\n              <Button variant=\"contained\" size=\"large\" color=\"error\" endIcon={<ArrowRight2 />} onClick={() => handelFilter()}>\n                Reset Filter\n              </Button>\n            </Box>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n\nProductEmpty.propTypes = { handelFilter: PropTypes.func };\n","size_bytes":2192},"src/sections/apps/chat/AvatarStatus.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// assets\nimport { Clock, MinusCirlce, TickCircle } from 'iconsax-react';\n\n// ==============================|| CHAT - AVATAR STATUS ICONS ||============================== //\n\nexport default function AvatarStatus({ status }) {\n  const theme = useTheme();\n\n  switch (status) {\n    case 'available':\n      return <TickCircle size={14} variant=\"Bold\" style={{ color: theme.palette.success.main }} />;\n\n    case 'do_not_disturb':\n      return <MinusCirlce size={14} variant=\"Bold\" style={{ color: theme.palette.secondary.main }} />;\n\n    case 'offline':\n      return <Clock size={14} variant=\"Bold\" style={{ color: theme.palette.warning.main }} />;\n\n    default:\n      return null;\n  }\n}\n\nAvatarStatus.propTypes = { status: PropTypes.string };\n","size_bytes":840},"src/pages/components-overview/shadows.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ===============================|| SHADOW BOX ||=============================== //\n\nfunction ShadowBox({ shadow }) {\n  return (\n    <MainCard border={false} shadow={shadow}>\n      <Stack spacing={1} justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h6\">boxShadow</Typography>\n        <Typography variant=\"subtitle1\">{shadow}</Typography>\n      </Stack>\n    </MainCard>\n  );\n}\n\n// ===============================|| CUSTOM - SHADOW BOX ||=============================== //\n\nfunction CustomShadowBox({ shadow, label, color, bgcolor }) {\n  return (\n    <MainCard border={false} shadow={shadow} sx={{ bgcolor: bgcolor || 'inherit' }}>\n      <Stack spacing={1} justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"subtitle1\" color={color}>\n          {label}\n        </Typography>\n      </Stack>\n    </MainCard>\n  );\n}\n\n// ============================|| COMPONENTS - SHADOW ||============================ //\n\nexport default function ComponentShadow() {\n  const theme = useTheme();\n\n  const basicShadowCodeString = `<ShadowBox shadow=\"0\" />\n<ShadowBox shadow=\"1\" />\n<ShadowBox shadow=\"2\" />\n<ShadowBox shadow=\"3\" />\n<ShadowBox shadow=\"4\" />\n<ShadowBox shadow=\"5\" />\n<ShadowBox shadow=\"6\" />\n<ShadowBox shadow=\"7\" />\n<ShadowBox shadow=\"8\" />\n<ShadowBox shadow=\"9\" />\n<ShadowBox shadow=\"10\" />\n<ShadowBox shadow=\"11\" />\n<ShadowBox shadow=\"12\" />\n<ShadowBox shadow=\"13\" />\n<ShadowBox shadow=\"14\" />\n<ShadowBox shadow=\"15\" />\n<ShadowBox shadow=\"16\" />\n<ShadowBox shadow=\"17\" />\n<ShadowBox shadow=\"18\" />\n<ShadowBox shadow=\"19\" />\n<ShadowBox shadow=\"20\" />\n<ShadowBox shadow=\"21\" />\n<ShadowBox shadow=\"22\" />\n<ShadowBox shadow=\"23\" />\n<ShadowBox shadow=\"24\" />`;\n\n  const customShadowCodeString = `<CustomShadowBox shadow={theme.customShadows.z1} label=\"z1\" color=\"inherit\" />`;\n\n  const colorShadowCodeString = `<CustomShadowBox\n  color={theme.palette.primary.contrastText}\n  bgcolor=\"primary.main\"\n  shadow={theme.customShadows.primaryButton}\n  label=\"primary\"\n/>\n<CustomShadowBox\n  color={theme.palette.secondary.contrastText}\n  bgcolor=\"secondary.main\"\n  shadow={theme.customShadows.secondaryButton}\n  label=\"secondary\"\n/>\n<CustomShadowBox\n  color={theme.palette.success.contrastText}\n  bgcolor=\"success.main\"\n  shadow={theme.customShadows.successButton}\n  label=\"success\"\n/>\n<CustomShadowBox\n  color={theme.palette.warning.contrastText}\n  bgcolor=\"warning.main\"\n  shadow={theme.customShadows.warningButton}\n  label=\"warning\"\n/>\n<CustomShadowBox\n  color={theme.palette.info.contrastText}\n  bgcolor='info.main'\n  shadow={theme.customShadows.infoButton}\n  label=\"info\"\n/>\n<CustomShadowBox\n  color={theme.palette.error.contrastText}\n  bgcolor='error.main'\n  shadow={theme.customShadows.errorButton}\n  label=\"error\"\n/>\n<CustomShadowBox color={theme.palette.primary.main} shadow={theme.customShadows.primary} label=\"primary\" />\n<CustomShadowBox color={theme.palette.secondary.main} shadow={theme.customShadows.secondary} label=\"secondary\" />\n<CustomShadowBox color={theme.palette.success.main} shadow={theme.customShadows.success} label=\"success\" />\n<CustomShadowBox color={theme.palette.warning.main} shadow={theme.customShadows.warning} label=\"warning\" />\n<CustomShadowBox color={theme.palette.info.main} shadow={theme.customShadows.info} label=\"info\" />\n<CustomShadowBox color={theme.palette.error.main} shadow={theme.customShadows.error} label=\"error\" />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Shadows\"\n        caption=\"Add or remove shadows to elements with box-shadow utilities.\"\n        directory=\"src/pages/components-overview/shadows\"\n        link=\"https://mui.com/system/shadows/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <MainCard title=\"Basic Shadow\" codeHighlight codeString={basicShadowCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"0\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"1\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"2\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"3\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"4\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"5\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"6\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"7\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"8\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"9\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"10\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"11\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"12\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"13\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"14\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"15\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"16\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"17\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"18\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"19\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"20\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"21\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"22\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"23\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <ShadowBox shadow=\"24\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Custom Shadow\" codeString={customShadowCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox shadow={theme.customShadows.z1} label=\"z1\" color=\"inherit\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox shadow={theme.customShadows.z2} label=\"z2\" color=\"inherit\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <MainCard title=\"Color Shadow\" codeString={colorShadowCodeString}>\n              <Grid container spacing={3}>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.primary.contrastText}\n                    bgcolor=\"primary.main\"\n                    shadow={theme.customShadows.primaryButton}\n                    label=\"primary\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.secondary.contrastText}\n                    bgcolor=\"secondary.main\"\n                    shadow={theme.customShadows.secondaryButton}\n                    label=\"secondary\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.success.contrastText}\n                    bgcolor=\"success.main\"\n                    shadow={theme.customShadows.successButton}\n                    label=\"success\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.warning.contrastText}\n                    bgcolor=\"warning.main\"\n                    shadow={theme.customShadows.warningButton}\n                    label=\"warning\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.info.contrastText}\n                    bgcolor=\"info.main\"\n                    shadow={theme.customShadows.infoButton}\n                    label=\"info\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox\n                    color={theme.palette.error.contrastText}\n                    bgcolor=\"error.main\"\n                    shadow={theme.customShadows.errorButton}\n                    label=\"error\"\n                  />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.primary.main} shadow={theme.customShadows.primary} label=\"primary\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.secondary.main} shadow={theme.customShadows.secondary} label=\"secondary\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.success.main} shadow={theme.customShadows.success} label=\"success\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.warning.main} shadow={theme.customShadows.warning} label=\"warning\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.info.main} shadow={theme.customShadows.info} label=\"info\" />\n                </Grid>\n                <Grid item xs={6} sm={4} md={3} lg={2}>\n                  <CustomShadowBox color={theme.palette.error.main} shadow={theme.customShadows.error} label=\"error\" />\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n\nShadowBox.propTypes = { shadow: PropTypes.string };\n\nCustomShadowBox.propTypes = { shadow: PropTypes.string, label: PropTypes.string, color: PropTypes.string, bgcolor: PropTypes.string };\n","size_bytes":11882},"src/sections/components-overview/tree-view/DisabledTreeView.jsx":{"content":"// material-ui\nimport Box from '@mui/material/Box';\nimport { TreeItem, SimpleTreeView } from '@mui/x-tree-view';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, ArrowRight2 } from 'iconsax-react';\n\n// ==============================|| TREE VIEW - DISABLED ||============================== //\n\nexport default function DisabledTreeView() {\n  const disabledTreeviewCodeString = `<SimpleTreeView aria-label=\"disabled items\" slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }} multiSelect>\n  <TreeItem itemId=\"1\" label=\"One\">\n    <TreeItem itemId=\"2\" label=\"Two\" />\n    <TreeItem itemId=\"3\" label=\"Three\" />\n    <TreeItem itemId=\"4\" label=\"Four\" />\n  </TreeItem>\n  <TreeItem itemId=\"5\" label=\"Five\" disabled>\n    <TreeItem itemId=\"6\" label=\"Six\" />\n  </TreeItem>\n  <TreeItem itemId=\"7\" label=\"Seven\">\n    <TreeItem itemId=\"8\" label=\"Eight\" />\n    <TreeItem itemId=\"9\" label=\"Nine\">\n      <TreeItem itemId=\"10\" label=\"Ten\">\n        <TreeItem itemId=\"11\" label=\"Eleven\" />\n        <TreeItem itemId=\"12\" label=\"Twelve\" />\n      </TreeItem>\n    </TreeItem>\n  </TreeItem>\n</SimpleTreeView>`;\n\n  return (\n    <MainCard title=\"Disabled\" codeString={disabledTreeviewCodeString}>\n      <Box sx={{ height: 240, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}>\n        <SimpleTreeView aria-label=\"disabled items\" slots={{ collapseIcon: ArrowDown2, expandIcon: ArrowRight2 }} multiSelect>\n          <TreeItem itemId=\"1\" label=\"One\">\n            <TreeItem itemId=\"2\" label=\"Two\" />\n            <TreeItem itemId=\"3\" label=\"Three\" />\n            <TreeItem itemId=\"4\" label=\"Four\" />\n          </TreeItem>\n          <TreeItem itemId=\"5\" label=\"Five\" disabled>\n            <TreeItem itemId=\"6\" label=\"Six\" />\n          </TreeItem>\n          <TreeItem itemId=\"7\" label=\"Seven\">\n            <TreeItem itemId=\"8\" label=\"Eight\" />\n            <TreeItem itemId=\"9\" label=\"Nine\">\n              <TreeItem itemId=\"10\" label=\"Ten\">\n                <TreeItem itemId=\"11\" label=\"Eleven\" />\n                <TreeItem itemId=\"12\" label=\"Twelve\" />\n              </TreeItem>\n            </TreeItem>\n          </TreeItem>\n        </SimpleTreeView>\n      </Box>\n    </MainCard>\n  );\n}\n","size_bytes":2205},"src/sections/components-overview/modal/BasicModal.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Modal from '@mui/material/Modal';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| MODAL - BASIC ||============================== //\n\nexport default function BasicModal() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <MainCard title=\"Basic\">\n      <Button variant=\"contained\" onClick={handleOpen}>\n        Open Basic Modal\n      </Button>\n      <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n        <MainCard title=\"Basic Modal\" modal darkTitle content={false}>\n          <CardContent>\n            <Typography id=\"modal-modal-description\">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</Typography>\n          </CardContent>\n          <Divider />\n          <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ px: 2.5, py: 2 }}>\n            <Button color=\"error\" size=\"small\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" size=\"small\">\n              Submit\n            </Button>\n          </Stack>\n        </MainCard>\n      </Modal>\n    </MainCard>\n  );\n}\n","size_bytes":1565},"src/layout/Dashboard/Header/HeaderContent/MobileSection.jsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport Toolbar from '@mui/material/Toolbar';\n\n// project-imports\nimport Search from './Search';\nimport Profile from './Profile';\nimport Localization from './Localization';\nimport IconButton from 'components/@extended/IconButton';\nimport Transitions from 'components/@extended/Transitions';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { MoreSquare } from 'iconsax-react';\n\n// ==============================|| HEADER CONTENT - MOBILE ||============================== //\n\nexport default function MobileSection() {\n  const theme = useTheme();\n\n  const [open, setOpen] = useState(false);\n  const anchorRef = useRef(null);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const prevOpen = useRef(open);\n  useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <>\n      <Box sx={{ flexShrink: 0, ml: 0.75 }}>\n        <IconButton\n          aria-label=\"open more menu\"\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n          color=\"secondary\"\n          variant=\"light\"\n          size=\"large\"\n          sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, p: 1 }}\n        >\n          <MoreSquare variant=\"Bulk\" style={{ transform: 'rotate(90deg)' }} />\n        </IconButton>\n      </Box>\n      <Popper\n        placement=\"bottom-end\"\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n        sx={{ width: '100%' }}\n        popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [0, 9] } }] }}\n      >\n        {({ TransitionProps }) => (\n          <Transitions type=\"fade\" in={open} {...TransitionProps}>\n            <Paper sx={{ boxShadow: theme.customShadows.z1 }}>\n              <ClickAwayListener onClickAway={handleClose}>\n                <AppBar color=\"inherit\">\n                  <Toolbar>\n                    <Search />\n                    <Localization />\n                    <Profile />\n                  </Toolbar>\n                </AppBar>\n              </ClickAwayListener>\n            </Paper>\n          </Transitions>\n        )}\n      </Popper>\n    </>\n  );\n}\n","size_bytes":3051},"src/sections/apps/customer/CustomerPreview.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport Tooltip from '@mui/material/Tooltip';\nimport ListItem from '@mui/material/ListItem';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Typography from '@mui/material/Typography';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\n// third-party\nimport { PatternFormat } from 'react-number-format';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\n\n// project-imports\nimport AlertCustomerDelete from './AlertCustomerDelete';\nimport ListCard from './export-pdf/ListCard';\n\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport { PopupTransition } from 'components/@extended/Transitions';\n\nimport { ImagePath, getImageUrl } from 'utils/getImageUrl';\n\n// assets\nimport { DocumentDownload, Edit, Trash } from 'iconsax-react';\n\n// ==============================|| CUSTOMER - PREVIEW ||============================== //\n\nexport default function CustomerPreview({ customer, open, onClose, editCustomer }) {\n  const matchDownMD = useMediaQuery((theme) => theme.breakpoints.down('md'));\n  const [openAlert, setOpenAlert] = useState(false);\n\n  const handleClose = () => {\n    setOpenAlert(!openAlert);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        TransitionComponent={PopupTransition}\n        keepMounted\n        onClose={onClose}\n        aria-describedby=\"alert-dialog-slide-description\"\n        sx={{ '& .MuiDialog-paper': { width: 1024, maxWidth: 1, m: { xs: 1.75, sm: 2.5, md: 4 } } }}\n      >\n        <Box id=\"PopupPrint\" sx={{ px: { xs: 2, sm: 3, md: 5 }, py: 1 }}>\n          <DialogTitle sx={{ px: 0 }}>\n            <List sx={{ width: 1, p: 0 }}>\n              <ListItem\n                disablePadding\n                secondaryAction={\n                  <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={0}>\n                    <PDFDownloadLink document={<ListCard customer={customer} />} fileName={`Customer-${customer.name}.pdf`}>\n                      <Tooltip title=\"Export\">\n                        <IconButton color=\"secondary\">\n                          <DocumentDownload />\n                        </IconButton>\n                      </Tooltip>\n                    </PDFDownloadLink>\n                    <Tooltip title=\"Edit\">\n                      <IconButton color=\"secondary\" onClick={editCustomer}>\n                        <Edit />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete\" onClick={handleClose}>\n                      <IconButton color=\"error\">\n                        <Trash />\n                      </IconButton>\n                    </Tooltip>\n                  </Stack>\n                }\n              >\n                <ListItemAvatar sx={{ mr: 0.75 }}>\n                  <Avatar\n                    alt={customer.name}\n                    size=\"lg\"\n                    src={getImageUrl(`avatar-${!customer.avatar ? 1 : customer.avatar}.png`, ImagePath.USERS)}\n                  />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={<Typography variant=\"h5\">{customer.name}</Typography>}\n                  secondary={<Typography color=\"secondary\">{customer.role}</Typography>}\n                />\n              </ListItem>\n            </List>\n          </DialogTitle>\n          <DialogContent dividers sx={{ px: 0 }}>\n            <SimpleBar sx={{ height: 'calc(100vh - 290px)' }}>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={8} xl={9}>\n                  <Grid container spacing={2.25}>\n                    <Grid item xs={12}>\n                      <MainCard title=\"About me\">\n                        <Typography>\n                          Hello, Myself {customer.name}, I’m {customer.role} in international company, {customer.about}\n                        </Typography>\n                      </MainCard>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <MainCard title=\"Education\">\n                        <List sx={{ py: 0 }}>\n                          <ListItem divider>\n                            <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Master Degree (Year)</Typography>\n                                  <Typography>2014-2017</Typography>\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Institute</Typography>\n                                  <Typography>-</Typography>\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </ListItem>\n                          <ListItem divider>\n                            <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Bachelor (Year)</Typography>\n                                  <Typography>2011-2013</Typography>\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Institute</Typography>\n                                  <Typography>Imperial College London</Typography>\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </ListItem>\n                          <ListItem>\n                            <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">School (Year)</Typography>\n                                  <Typography>2009-2011</Typography>\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Institute</Typography>\n                                  <Typography>School of London, England</Typography>\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </ListItem>\n                        </List>\n                      </MainCard>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <MainCard title=\"Emplyment\">\n                        <List sx={{ py: 0 }}>\n                          <ListItem divider>\n                            <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Senior UI/UX designer (Year)</Typography>\n                                  <Typography>2019-Current</Typography>\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Job Responsibility</Typography>\n                                  <Typography>\n                                    Perform task related to project manager with the 100+ team under my observation. Team management is key\n                                    role in this company.\n                                  </Typography>\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </ListItem>\n                          <ListItem>\n                            <Grid container spacing={matchDownMD ? 0.5 : 3}>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Trainee cum Project Manager (Year)</Typography>\n                                  <Typography>2017-2019</Typography>\n                                </Stack>\n                              </Grid>\n                              <Grid item xs={12} md={6}>\n                                <Stack spacing={0.5}>\n                                  <Typography color=\"secondary\">Job Responsibility</Typography>\n                                  <Typography>Team management is key role in this company.</Typography>\n                                </Stack>\n                              </Grid>\n                            </Grid>\n                          </ListItem>\n                        </List>\n                      </MainCard>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <MainCard title=\"Skills\">\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', listStyle: 'none', p: 0.5, m: 0 }} component=\"ul\">\n                          {customer.skills.map((skill, index) => (\n                            <ListItem disablePadding key={index} sx={{ width: 'auto', pr: 0.75, pb: 0.75 }}>\n                              <Chip color=\"secondary\" variant=\"outlined\" size=\"small\" label={skill} />\n                            </ListItem>\n                          ))}\n                        </Box>\n                      </MainCard>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} sm={4} xl={3}>\n                  <MainCard>\n                    <Stack spacing={2}>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Father Name</Typography>\n                        <Typography>\n                          Mr. {customer.firstName} {customer.lastName}\n                        </Typography>\n                      </Stack>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Email</Typography>\n                        <Typography>{customer.email}</Typography>\n                      </Stack>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Contact</Typography>\n                        <Typography>\n                          <PatternFormat displayType=\"text\" format=\"+1 (###) ###-####\" mask=\"_\" defaultValue={customer.contact} />\n                        </Typography>\n                      </Stack>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Location</Typography>\n                        <Typography> {customer.country} </Typography>\n                      </Stack>\n                      <Stack spacing={0.5}>\n                        <Typography color=\"secondary\">Website</Typography>\n                        <Link href=\"https://google.com\" target=\"_blank\" sx={{ textTransform: 'lowercase' }}>\n                          https://{customer.firstName}.en\n                        </Link>\n                      </Stack>\n                    </Stack>\n                  </MainCard>\n                </Grid>\n              </Grid>\n            </SimpleBar>\n          </DialogContent>\n\n          <DialogActions>\n            <Button color=\"error\" variant=\"contained\" onClick={onClose}>\n              Close\n            </Button>\n          </DialogActions>\n        </Box>\n      </Dialog>\n      <AlertCustomerDelete id={customer.id} title={customer.name} open={openAlert} handleClose={handleClose} />\n    </>\n  );\n}\n\nCustomerPreview.propTypes = { customer: PropTypes.any, open: PropTypes.bool, onClose: PropTypes.func, editCustomer: PropTypes.func };\n","size_bytes":12800},"src/sections/widget/chart/ProductOverview.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Grid from '@mui/material/Grid';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Dot from 'components/@extended/Dot';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// ==============================|| CHART ||============================== //\n\nfunction ApexPieChart() {\n  const theme = useTheme();\n  const downSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n  const backColor = theme.palette.background.paper;\n\n  const pieChartOptions = {\n    chart: {\n      type: 'pie'\n    },\n    tooltip: {\n      enabled: true,\n      fillSeriesColor: true\n    },\n    labels: ['Components', 'Widgets', 'Pages', 'Forms', 'Other', 'Apps'],\n    legend: {\n      show: false\n    }\n  };\n\n  const [series] = useState([40, 20, 10, 15, 5, 10]);\n  const [options, setOptions] = useState(pieChartOptions);\n\n  useEffect(() => {\n    const primaryMain = theme.palette.primary.main;\n    const primaryLight = theme.palette.primary[200];\n    const secondary = theme.palette.secondary.main;\n    const secondaryLight = theme.palette.secondary[400];\n    const secondaryDark = theme.palette.secondary.dark;\n    const secondaryDarker = theme.palette.secondary.darker;\n\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [primaryMain, primaryLight, secondaryLight, secondary, secondaryDark, secondaryDarker],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      tooltip: {\n        enabled: true,\n        fillSeriesColor: false\n      },\n      grid: {\n        borderColor: line\n      },\n      stroke: {\n        colors: [backColor]\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, backColor, theme]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"pie\" height={downSM ? 280 : 350} />\n    </div>\n  );\n}\n\n// ==============================|| CHART WIDGETS - PRODUCT OVERVIEW ||============================== //\n\nexport default function ProductOverview() {\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n            <Typography variant=\"h5\">Project overview</Typography>\n            <IconButton\n              color=\"secondary\"\n              id=\"wallet-button\"\n              aria-controls={open ? 'wallet-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              onClick={handleClick}\n            >\n              <MoreIcon />\n            </IconButton>\n            <Menu\n              id=\"wallet-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n              <ListItemButton onClick={handleClose}>Today</ListItemButton>\n              <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n              <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n            </Menu>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <ApexPieChart />\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Apps</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">10+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Other</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">5+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Widgets</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">150+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Forms</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">50+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Components</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">200+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={6} md={4}>\n          <MainCard content={false}>\n            <Stack alignItems=\"center\" sx={{ py: 1.5 }}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                <Dot size={6} componentDiv sx={{ bgcolor: 'secondary.darker' }} />\n                <Typography>Pages</Typography>\n              </Stack>\n              <Typography variant=\"subtitle1\">150+</Typography>\n            </Stack>\n          </MainCard>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1.25}>\n            <Button variant=\"outlined\" fullWidth color=\"secondary\">\n              View all\n            </Button>\n            <Button variant=\"contained\" fullWidth>\n              Create new page\n            </Button>\n          </Stack>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n}\n","size_bytes":7768},"src/pages/components-overview/progress.jsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport LinearProgress from '@mui/material/LinearProgress';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport CircularWithLabel from 'components/@extended/progress/CircularWithLabel';\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\nimport LinearWithIcon from 'components/@extended/progress/LinearWithIcon';\nimport CircularWithPath from 'components/@extended/progress/CircularWithPath';\n\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// assets\nimport { CloseCircle, TickCircle } from 'iconsax-react';\n\n// ==============================|| COMPONENTS - PROGRESS ||============================== //\n\nexport default function ComponentProgress() {\n  const theme = useTheme();\n  const [progress, setProgress] = useState(0);\n  const [bufferProgress, setBufferProgress] = useState(0);\n  const [buffer, setBuffer] = useState(10);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    }, 800);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  const progressRef = useRef(() => {});\n  useEffect(() => {\n    progressRef.current = () => {\n      if (bufferProgress > 100) {\n        setBufferProgress(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setBufferProgress(bufferProgress + diff);\n        setBuffer(bufferProgress + diff + diff2);\n      }\n    };\n  });\n\n  useEffect(() => {\n    const bufferTimer = setInterval(() => {\n      progressRef.current();\n    }, 500);\n\n    return () => {\n      clearInterval(bufferTimer);\n    };\n  }, []);\n\n  const ciProgressCodeString = `<CircularProgress sx={{ color: 'red' }} />\n<CircularProgress color=\"secondary\" />\n<CircularProgress color=\"success\" />\n<CircularProgress color=\"warning\" />\n<CircularProgress color=\"info\" />\n<CircularProgress color=\"error\" />`;\n\n  const ciProgressWithPathCodeString = `<CircularWithPath />\n<CircularWithPath color=\"secondary\" />\n<CircularWithPath color=\"success\" />\n<CircularWithPath color=\"warning\" />\n<CircularWithPath color=\"info\" />\n<CircularWithPath color=\"error\" />`;\n\n  const cdProgressCodeString = `<CircularProgress variant=\"determinate\" value={25} />\n<CircularProgress variant=\"determinate\" value={50} />\n<CircularProgress variant=\"determinate\" value={75} />\n<CircularProgress variant=\"determinate\" value={100} />\n<CircularProgress variant=\"determinate\" value={progress} />`;\n\n  const cdProgressWithPathCodeString = `<CircularWithPath variant=\"determinate\" value={25} />\n<CircularWithPath variant=\"determinate\" value={50} />\n<CircularWithPath variant=\"determinate\" value={75} />\n<CircularWithPath variant=\"determinate\" value={100} />\n<CircularWithPath variant=\"determinate\" value={progress} />`;\n\n  const clProgressCodeString = `<CircularWithLabel value={progress} />\n<CircularWithLabel value={80} color=\"success\" />\n<CircularWithLabel value={55} color=\"info\" />\n<CircularWithLabel value={35} color=\"warning\" />\n<CircularWithLabel value={10} color=\"error\" />`;\n\n  const clWithPathCodeString = `<CircularWithPath showLabel value={progress} />\n<CircularWithPath showLabel value={80} variant='determinate' color=\"success\" />\n<CircularWithPath showLabel value={55} variant='determinate' color=\"info\" />\n<CircularWithPath showLabel value={35} variant='determinate' color=\"warning\" />\n<CircularWithPath showLabel value={10} variant='determinate' color=\"error\" />`;\n\n  const clProgressSize = `<CircularProgress size={20} />\n<CircularWithPath size={32} color=\"success\" />\n<CircularProgress variant=\"determinate\" value={80} color=\"info\" />\n<CircularWithPath size={52} variant=\"determinate\" value={40} color=\"warning\" />\n<CircularWithLabel size={64} variant=\"determinate\" value={75} color=\"error\" />\n<CircularWithPath size={80} showLabel variant=\"determinate\" value={55} color=\"secondary\" />`;\n\n  const lbProgressCodeString = `<LinearProgress variant=\"buffer\" value={bufferProgress} valueBuffer={buffer} />`;\n\n  const liProgressCodeString = `<LinearProgress />`;\n\n  const ldProgressCodeString = `<LinearProgress variant=\"determinate\" value={progress} />`;\n\n  const llProgressCodeString = `<LinearWithIcon value={100} color=\"success\" icon={<TickCircle variant=\"Bold\" color={theme.palette.success.main} />} />\n<LinearWithLabel variant=\"determinate\" value={progress} />\n<LinearWithIcon value={5} color=\"error\" icon={<CloseCircle variant=\"Bold\" color={theme.palette.error.main} />} />`;\n\n  const lchProgressCodeString = `<LinearWithLabel value={80} />\n<LinearWithLabel value={75} color=\"secondary\" sx={{ height: 6 }} />\n<LinearWithLabel value={99} color=\"success\" sx={{ height: 8 }} />\n<LinearWithLabel value={35} color=\"warning\" sx={{ height: 10 }} />\n<LinearWithLabel value={60} color=\"info\" sx={{ height: 12 }} />\n<LinearWithLabel value={15} color=\"error\" sx={{ height: 2 }} />`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Progress\"\n        caption=\"Progress indicators commonly known as spinners, express an unspecified wait time or display the length of a process.\"\n        directory=\"src/pages/components-overview/progress\"\n        link=\"https://mui.com/material-ui/react-progress/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Circular Indeterminate\" codeHighlight codeString={ciProgressCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularProgress sx={{ color: 'red' }} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress color=\"secondary\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress color=\"success\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress color=\"warning\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress color=\"info\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress color=\"error\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Circular Indeterminate with path\" codeString={ciProgressWithPathCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularWithPath />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"secondary\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"success\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"warning\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"info\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"error\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Circular Determinate\" codeString={cdProgressCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={25} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={50} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={75} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={100} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={progress} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Circular Determinate With Path\" codeString={cdProgressWithPathCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={25} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={50} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={75} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={100} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={progress} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Circular With Label\" codeString={clProgressCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularWithLabel value={progress} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithLabel value={80} color=\"success\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithLabel value={55} color=\"info\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithLabel value={35} color=\"warning\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithLabel value={10} color=\"error\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n              <MainCard title=\"Circular With Label and Path\" codeString={clWithPathCodeString}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={progress} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={80} color=\"success\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={55} color=\"info\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={35} color=\"warning\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={10} color=\"error\" />\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Linear Indeterminate\" codeString={liProgressCodeString}>\n                <LinearProgress />\n              </MainCard>\n              <MainCard title=\"Linear Determinate\" codeString={ldProgressCodeString}>\n                <LinearProgress variant=\"determinate\" value={progress} />\n              </MainCard>\n\n              <MainCard title=\"Linear With Label / Icon\" codeString={llProgressCodeString}>\n                <Stack spacing={1}>\n                  <LinearWithIcon value={100} color=\"success\" icon={<TickCircle variant=\"Bold\" color={theme.palette.success.main} />} />\n                  <LinearWithLabel variant=\"determinate\" value={progress} />\n                  <LinearWithIcon value={5} color=\"error\" icon={<CloseCircle variant=\"Bold\" color={theme.palette.error.main} />} />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Linear Color With Height\" codeString={lchProgressCodeString}>\n                <Stack spacing={1}>\n                  <LinearWithLabel value={80} />\n                  <LinearWithLabel value={75} color=\"secondary\" sx={{ height: 6 }} />\n                  <LinearWithLabel value={99} color=\"success\" sx={{ height: 8 }} />\n                  <LinearWithLabel value={35} color=\"warning\" sx={{ height: 10 }} />\n                  <LinearWithLabel value={60} color=\"info\" sx={{ height: 12 }} />\n                  <LinearWithLabel value={15} color=\"error\" sx={{ height: 2 }} />\n                </Stack>\n              </MainCard>\n              <MainCard title=\"Linear Buffer\" codeString={lbProgressCodeString}>\n                <LinearProgress variant=\"buffer\" value={bufferProgress} valueBuffer={buffer} />\n              </MainCard>\n              <MainCard title=\"Circular Progress Size\" codeString={clProgressSize}>\n                <Grid container spacing={3} alignItems=\"center\">\n                  <Grid item>\n                    <CircularProgress size={20} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath color=\"success\" size={32} />\n                  </Grid>\n                  <Grid item>\n                    <CircularProgress variant=\"determinate\" value={80} color=\"info\" />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath variant=\"determinate\" value={40} color=\"warning\" size={52} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithLabel variant=\"determinate\" value={75} color=\"error\" size={64} />\n                  </Grid>\n                  <Grid item>\n                    <CircularWithPath showLabel variant=\"determinate\" value={55} color=\"secondary\" size={80} />\n                  </Grid>\n                </Grid>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":14087},"src/pages/components-overview/snackbar.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\n\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport {\n  ColorVariants,\n  CustomComponent,\n  Dense,\n  DismissSnackBar,\n  HideDuration,\n  IconVariants,\n  MaxSnackbar,\n  PositioningSnackbar,\n  PreventDuplicate,\n  SnackBarAction,\n  TransitionBar\n} from 'sections/components-overview/notistack';\n\nimport { openSnackbar } from 'api/snackbar';\n\n// ==============================|| COMPONENTS - SNACKBAR ||============================== //\n\nexport default function ComponentSnackbar() {\n  const basicSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is default message',\n      variant: 'alert',\n    } as SnackbarProps);\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is secondary message',\n      variant: 'alert',\n      alert: { color: 'secondary' },\n    } as SnackbarProps);\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is success message',\n      variant: 'alert',\n      alert: {\n        color: 'success'\n      },\n    } as SnackbarProps);\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is warning message',\n      variant: 'alert',\n      alert: {\n        color: 'warning'\n      },\n    } as SnackbarProps);\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is info message',\n      variant: 'alert',\n      alert: {\n        color: 'info'\n      },\n    } as SnackbarProps);\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is error message',\n      variant: 'alert',\n      alert: {\n        color: 'error'\n      },\n    } as SnackbarProps);\n  }\n>\n  Error\n</Button>`;\n\n  const outlinedSnackbarCodeString = `<Button\n  variant=\"outlined\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is default message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined'\n      },\n    } as SnackbarProps);\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"secondary\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is secondary message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined',\n        color: 'secondary'\n      },\n    } as SnackbarProps);\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"success\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is success message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined',\n        color: 'success'\n      },\n    } as SnackbarProps);\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"warning\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is warning message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined',\n        color: 'warning'\n      },\n    } as SnackbarProps);\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"info\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is info message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined',\n        color: 'info'\n      },\n    } as SnackbarProps);\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"outlined\"\n  color=\"error\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is error message',\n      variant: 'alert',\n      alert: {\n        variant: 'outlined',\n        color: 'error'\n      },\n    } as SnackbarProps);\n  }\n>\n  Error\n</Button>`;\n\n  const closeSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is default message',\n      variant: 'alert',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is secondary message',\n      variant: 'alert',\n      alert: { color: 'secondary' },\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is success message',\n      variant: 'alert',\n      alert: {\n        color: 'success'\n      },\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is warning message',\n      variant: 'alert',\n      alert: {\n        color: 'warning'\n      },\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is info message',\n      variant: 'alert',\n      alert: {\n        color: 'info'\n      },\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is error message',\n      variant: 'alert',\n      alert: {\n        color: 'error'\n      },\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Error\n</Button>`;\n\n  const actionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is default message',\n      variant: 'alert',\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Default\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"secondary\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is secondary message',\n      variant: 'alert',\n      alert: { color: 'secondary' },\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Secondary\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"success\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is success message',\n      variant: 'alert',\n      alert: {\n        color: 'success'\n      },\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Success\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"warning\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is warning message',\n      variant: 'alert',\n      alert: {\n        color: 'warning'\n      },\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Warning\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"info\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is info message',\n      variant: 'alert',\n      alert: {\n        color: 'info'\n      },\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Info\n</Button>\n<Button\n  variant=\"contained\"\n  color=\"error\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is error message',\n      variant: 'alert',\n      alert: {\n        color: 'error'\n      },\n      actionButton: true,\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Error\n</Button>`;\n\n  const positionSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'top', horizontal: 'left' },\n      message: 'This is an top-left message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Top-Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'top', horizontal: 'center' },\n      message: 'This is an top-center message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Top-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'top', horizontal: 'right' },\n      message: 'This is an top-right message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Top-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n      message: 'This is an bottom-right message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Bottom-Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n      message: 'This is an bottom-center message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Bottom-Center\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n      message: 'This is an bottom-left message!',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Bottom-Left\n</Button>`;\n\n  const transitionsSnackbarCodeString = `<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an fade message!',\n      transition: 'Fade',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Default/Fade\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an slide-left message!',\n      transition: 'SlideLeft',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Slide Left\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an slide-up message!',\n      transition: 'SlideUp',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Slide Up\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an slide-right message!',\n      transition: 'SlideRight',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Slide Right\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an slide-down message!',\n      transition: 'SlideDown',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Slide Down\n</Button>\n<Button\n  variant=\"contained\"\n  onClick={() =>\n    openSnackbar({\n      open: true,\n      message: 'This is an grow message!',\n      transition: 'Grow',\n      close: true\n    } as SnackbarProps);\n  }\n>\n  Grow\n</Button>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Snackbar\"\n        caption=\"Snackbars provide brief notifications. The component is also known as a toast.\"\n        directory=\"src/pages/components-overview/snackbar\"\n        link=\"https://mui.com/material-ui/react-snackbar/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Basic\" codeString={basicSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is default message',\n                        variant: 'alert'\n                      })\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is secondary message',\n                        variant: 'alert',\n                        alert: { color: 'secondary' }\n                      })\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"success\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is success message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'success'\n                        }\n                      })\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"warning\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is warning message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'warning'\n                        }\n                      })\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"info\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is info message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'info'\n                        }\n                      })\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is error message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'error'\n                        }\n                      })\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Outlined\" codeString={outlinedSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is default message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined'\n                        }\n                      })\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is secondary message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'secondary'\n                        }\n                      })\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"success\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is success message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'success'\n                        }\n                      })\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is warning message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'warning'\n                        }\n                      })\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"info\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is info message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'info'\n                        }\n                      })\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is error message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'error'\n                        }\n                      })\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"With Close\" codeString={closeSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is default message',\n                        variant: 'alert',\n                        close: true\n                      })\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is secondary message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'secondary'\n                        },\n\n                        close: true\n                      })\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"success\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is success message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'success'\n                        },\n\n                        close: true\n                      })\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"warning\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is warning message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'warning'\n                        },\n\n                        close: true\n                      })\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"info\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is info message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'info'\n                        },\n\n                        close: true\n                      })\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is error message',\n                        variant: 'alert',\n\n                        alert: {\n                          color: 'error'\n                        },\n\n                        close: true\n                      })\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"With Close + Action\" codeString={actionSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is default message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Default\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is secondary message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'secondary'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Secondary\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"success\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is success message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'success'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Success\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is warning message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'warning'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Warning\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"info\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is info message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'info'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Info\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is error message',\n                        variant: 'alert',\n\n                        alert: {\n                          variant: 'outlined',\n                          color: 'error'\n                        },\n\n                        actionButton: true,\n                        close: true\n                      })\n                    }\n                  >\n                    Error\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Position\" codeString={positionSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'top', horizontal: 'left' },\n                        message: 'This is an top-left message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Top-Left\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'top', horizontal: 'center' },\n                        message: 'This is an top-center message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Top-Center\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'top', horizontal: 'right' },\n                        message: 'This is an top-right message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Top-Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\n                        message: 'This is an bottom-right message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Bottom-Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\n                        message: 'This is an bottom-center message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Bottom-Center\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n                        message: 'This is an bottom-left message!',\n                        close: true\n                      })\n                    }\n                  >\n                    Bottom-Left\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MainCard title=\"Transitions\" codeString={transitionsSnackbarCodeString}>\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an fade message!',\n                        transition: 'Fade',\n                        close: true\n                      })\n                    }\n                  >\n                    Default/Fade\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an slide-left message!',\n                        transition: 'SlideLeft',\n                        close: true\n                      })\n                    }\n                  >\n                    Slide Left\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an slide-up message!',\n                        transition: 'SlideUp',\n                        close: true\n                      })\n                    }\n                  >\n                    Slide Up\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an slide-right message!',\n                        transition: 'SlideRight',\n                        close: true\n                      })\n                    }\n                  >\n                    Slide Right\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an slide-down message!',\n                        transition: 'SlideDown',\n                        close: true\n                      })\n                    }\n                  >\n                    Slide Down\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() =>\n                      openSnackbar({\n                        open: true,\n                        message: 'This is an grow message!',\n                        transition: 'Grow',\n                        close: true\n                      })\n                    }\n                  >\n                    Grow\n                  </Button>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" sx={{ mt: 2 }}>\n              Extended - Notistack\n            </Typography>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <ColorVariants />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <MaxSnackbar />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <IconVariants />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <HideDuration />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <SnackBarAction />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <DismissSnackBar />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <PreventDuplicate />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <TransitionBar />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Dense />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <CustomComponent />\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <PositioningSnackbar />\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":34757},"src/layout/Dashboard/Drawer/DrawerContent/index.jsx":{"content":"// project-imports\nimport NavUser from './NavUser';\nimport Navigation from './Navigation';\nimport SimpleBar from 'components/third-party/SimpleBar';\n\n// ==============================|| DRAWER CONTENT ||============================== //\n\nexport default function DrawerContent() {\n  return (\n    <>\n      <SimpleBar sx={{ '& .simplebar-content': { display: 'flex', flexDirection: 'column' } }}>\n        <Navigation />\n      </SimpleBar>\n      <NavUser />\n    </>\n  );\n}\n","size_bytes":469},"src/layout/Dashboard/Header/HeaderContent/Message.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport MessageCard from 'components/cards/statistics/MessageCard';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Add, NotificationStatus } from 'iconsax-react';\n\nimport message1 from 'assets/images/widget/message/message1.svg';\nimport message2 from 'assets/images/widget/message/message2.svg';\nimport message3 from 'assets/images/widget/message/message3.svg';\nimport message4 from 'assets/images/widget/message/message4.svg';\n\n// ==============================|| HEADER CONTENT - CUSTOMIZATION ||============================== //\n\nexport default function Customization() {\n  const theme = useTheme();\n\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <>\n      <Box sx={{ flexShrink: 0, ml: 0.75 }}>\n        <IconButton\n          color=\"secondary\"\n          variant=\"light\"\n          onClick={handleToggle}\n          aria-label=\"settings toggler\"\n          size=\"large\"\n          sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, p: 1 }}\n        >\n          <NotificationStatus variant=\"Bulk\" />\n        </IconButton>\n      </Box>\n      <Drawer sx={{ zIndex: 2001 }} anchor=\"right\" onClose={handleToggle} open={open} PaperProps={{ sx: { width: { xs: 350, sm: 474 } } }}>\n        {open && (\n          <MainCard content={false} sx={{ border: 'none', borderRadius: 0, height: '100vh' }}>\n            <SimpleBar\n              sx={{\n                '& .simplebar-content': {\n                  display: 'flex',\n                  flexDirection: 'column'\n                }\n              }}\n            >\n              <Box sx={{ p: 2.5 }}>\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1.5}>\n                  <Typography variant=\"h5\">What’s new announcement?</Typography>\n                  <IconButton color=\"secondary\" sx={{ p: 0 }} onClick={handleToggle}>\n                    <Add size={28} style={{ transform: 'rotate(45deg)' }} />\n                  </IconButton>\n                </Stack>\n                <Grid container spacing={1.5} sx={{ mt: 2 }}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\">Today</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <MessageCard\n                      status={{ label: 'New Feature', color: 'success' }}\n                      time=\"just now\"\n                      title=\"Select Business Unit\"\n                      message=\"You can use the Analytics Dashboard to explore how many new users download reports daily and monthly\"\n                      src={message1}\n                      actions={[\n                        {\n                          label: 'Skip Intro',\n                          button: { variant: 'outlined', color: 'secondary', fullWidth: true }\n                        },\n                        {\n                          label: 'Next',\n                          button: { variant: 'contained', fullWidth: true }\n                        }\n                      ]}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <MessageCard\n                      status={{ label: 'Meeting', color: 'warning' }}\n                      time=\"2 min ago\"\n                      title=\"General Meeting for update\"\n                      message=\"You can use the Dashboard to explore how many new users download reports daily and monthly\"\n                      src={message2}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sx={{ my: 1.25 }}>\n                    <Typography variant=\"h6\">Yesterday</Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <MessageCard\n                      status={{ label: 'Improvement', color: 'primary' }}\n                      time=\"2 hours ago\"\n                      title=\"Widgets update\"\n                      message=\"We've made some updates to the emendable widget which we think you are going to love.\"\n                      src={message3}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <MessageCard\n                      status={{ label: 'Improvement', color: 'primary' }}\n                      time=\"1 day ago\"\n                      title=\"Coming soon dark mode\"\n                      message=\"We've made some updates to the emendable widget which we think you are going to love.\"\n                      src={message4}\n                    />\n                  </Grid>\n                </Grid>\n              </Box>\n            </SimpleBar>\n          </MainCard>\n        )}\n      </Drawer>\n    </>\n  );\n}\n","size_bytes":5418},"src/layout/Dashboard/Drawer/index.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\n\n// project-imports\nimport DrawerHeader from './DrawerHeader';\nimport DrawerContent from './DrawerContent';\nimport MiniDrawerStyled from './MiniDrawerStyled';\n\nimport { DRAWER_WIDTH } from 'config';\nimport { handlerDrawerOpen, useGetMenuMaster } from 'api/menu';\n\n// ==============================|| MAIN LAYOUT - DRAWER ||============================== //\n\nexport default function MainDrawer({ window }) {\n  const theme = useTheme();\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  // responsive drawer container\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  // header content\n  const drawerContent = useMemo(() => <DrawerContent />, []);\n  const drawerHeader = useMemo(() => <DrawerHeader open={drawerOpen} />, [drawerOpen]);\n\n  return (\n    <Box component=\"nav\" sx={{ flexShrink: { md: 0 }, zIndex: 1200 }} aria-label=\"mailbox folders\">\n      {!downLG ? (\n        <MiniDrawerStyled variant=\"permanent\" open={drawerOpen}>\n          {drawerHeader}\n          {drawerContent}\n        </MiniDrawerStyled>\n      ) : (\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={drawerOpen}\n          onClose={() => handlerDrawerOpen(!drawerOpen)}\n          ModalProps={{ keepMounted: true }}\n          sx={{\n            display: { xs: 'block', lg: 'none' },\n            '& .MuiDrawer-paper': {\n              boxSizing: 'border-box',\n              width: DRAWER_WIDTH,\n              borderRight: `1px solid ${theme.palette.divider}`,\n              backgroundImage: 'none',\n              boxShadow: 'inherit'\n            }\n          }}\n        >\n          {drawerHeader}\n          {drawerContent}\n        </Drawer>\n      )}\n    </Box>\n  );\n}\n\nMainDrawer.propTypes = { window: PropTypes.func };\n","size_bytes":2156},"src/sections/components-overview/autocomplete/CheckboxesAutocomplete.jsx":{"content":"// material-ui\nimport Checkbox from '@mui/material/Checkbox';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport data from 'data/movies';\n\n// ==============================|| AUTOCOMPLETE - CHECKBOXES ||============================== //\n\nexport default function CheckboxesAutocomplete() {\n  const checkboxAutocompleteCodeString = `<Autocomplete\n  multiple\n  id=\"checkboxes-tags-demo\"\n  options={data}\n  disableCloseOnSelect\n  getOptionLabel={(option) => option.label}\n  renderOption={(props, option, { selected }) => (\n    <li {...props}>\n      <Checkbox style={{ marginRight: 8 }} checked={selected} />\n      {option.label}\n    </li>\n  )}\n  renderInput={(params) => <TextField {...params} placeholder=\"Checkboxes\" />}\n  sx={{\n    '& .MuiOutlinedInput-root': {\n      p: 1\n    },\n    '& .MuiAutocomplete-tag': {\n      bgcolor: 'primary.lighter',\n      border: '1px solid',\n      borderColor: 'primary.light',\n      '& .MuiSvgIcon-root': {\n        color: 'primary.main',\n        '&:hover': {\n          color: 'primary.dark'\n        }\n      }\n    }\n  }}\n/>`;\n\n  return (\n    <MainCard title=\"Checkboxes\" codeString={checkboxAutocompleteCodeString}>\n      <Autocomplete\n        multiple\n        id=\"checkboxes-tags-demo\"\n        options={data}\n        disableCloseOnSelect\n        getOptionLabel={(option) => option.label}\n        renderOption={(props, option, { selected }) => (\n          <li {...props}>\n            <Checkbox style={{ marginRight: 8 }} checked={selected} />\n            {option.label}\n          </li>\n        )}\n        renderInput={(params) => <TextField {...params} placeholder=\"Checkboxes\" />}\n        sx={{\n          '& .MuiOutlinedInput-root': { p: 1 },\n          '& .MuiAutocomplete-tag': {\n            bgcolor: 'primary.lighter',\n            border: '1px solid',\n            borderColor: 'primary.light',\n            '& .MuiSvgIcon-root': { color: 'primary.main', '&:hover': { color: 'primary.dark' } }\n          }\n        }}\n      />\n    </MainCard>\n  );\n}\n","size_bytes":2104},"src/layout/Auth/index.jsx":{"content":"import { Outlet } from 'react-router-dom';\n\n// project import\nimport GuestGuard from 'utils/route-guard/GuestGuard';\n\n// ==============================|| LAYOUT - AUTH ||============================== //\n\nexport default function AuthLayout() {\n  return (\n    <GuestGuard>\n      <Outlet />\n    </GuestGuard>\n  );\n}\n","size_bytes":314},"src/routes/index.jsx":{"content":"import { createBrowserRouter } from 'react-router-dom';\n\n// project-imports\nimport MainRoutes from './MainRoutes';\nimport LoginRoutes from './LoginRoutes';\nimport ComponentsRoutes from './ComponentsRoutes';\n\n// ==============================|| ROUTES RENDER ||============================== //\n\nconst router = createBrowserRouter([LoginRoutes, ComponentsRoutes, MainRoutes], { basename: import.meta.env.VITE_APP_BASE_NAME });\n\nexport default router;\n","size_bytes":450},"src/pages/components-overview/checkbox.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\n\n// ==============================|| COMPONENTS - CHECKBOX ||============================== //\n\nexport default function ComponentCheckbox() {\n  const [checked, setChecked] = useState([true, false]);\n\n  const handleChange1 = (event) => {\n    setChecked([event.target.checked, event.target.checked]);\n  };\n\n  const handleChange2 = (event) => {\n    setChecked([event.target.checked, checked[1]]);\n  };\n\n  const handleChange3 = (event) => {\n    setChecked([checked[0], event.target.checked]);\n  };\n\n  const children = (\n    <Box sx={{ display: 'flex', flexDirection: 'column', ml: 3 }}>\n      <FormControlLabel label=\"Child 1\" control={<Checkbox checked={checked[0]} onChange={handleChange2} />} />\n      <FormControlLabel label=\"Child 2\" control={<Checkbox checked={checked[1]} onChange={handleChange3} />} />\n    </Box>\n  );\n\n  const basicCheckboxCodeString = `<Checkbox />\n<Checkbox defaultChecked />\n<Checkbox defaultChecked />\n<Checkbox defaultChecked disabled />\n<Checkbox disabled />`;\n\n  const colorCheckboxCodeString = `<Checkbox />\n<Checkbox defaultChecked color=\"secondary\" />\n<Checkbox defaultChecked color=\"success\" />\n<Checkbox defaultChecked color=\"warning\" />\n<Checkbox defaultChecked color=\"info\" />\n<Checkbox defaultChecked color=\"error\" />`;\n\n  const sizeCheckboxCodeString = `<Checkbox defaultChecked />\n<Checkbox defaultChecked className=\"size-medium\" />\n<Checkbox defaultChecked className=\"size-large\" />`;\n\n  const labelCheckboxCodeString = `<FormControl component=\"fieldset\">\n  <FormGroup aria-label=\"position\" row>\n    <FormControlLabel value=\"top\" control={<Checkbox />} label=\"Top\" labelPlacement=\"top\" />\n    <FormControlLabel\n      value=\"start\"\n      control={<Checkbox defaultChecked />}\n      label=\"Start\"\n      labelPlacement=\"start\"\n      sx={{ mr: 1 }}\n    />\n    <FormControlLabel value=\"bottom\" control={<Checkbox />} label=\"Bottom\" labelPlacement=\"bottom\" />\n    <FormControlLabel value=\"end\" control={<Checkbox defaultChecked />} label=\"End\" labelPlacement=\"end\" sx={{ ml: 1 }} />\n  </FormGroup>\n</FormControl>`;\n\n  const indeterminateCheckboxCodeString = `<>\n  <FormControlLabel\n    label=\"Parent\"\n    control={\n      <Checkbox checked={checked[0] && checked[1]} indeterminate={checked[0] !== checked[1]} onChange={handleChange1} />\n    }\n  />\n  <Box sx={{ display: 'flex', flexDirection: 'column', ml: 3 }}>\n    <FormControlLabel label=\"Child 1\" control={<Checkbox checked={checked[0]} onChange={handleChange2} />} />\n    <FormControlLabel label=\"Child 2\" control={<Checkbox checked={checked[1]} onChange={handleChange3} />} />\n  </Box>\n</>`;\n\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Checkbox\"\n        caption=\"Checkboxes allow the user to select one or more items from a set.\"\n        directory=\"src/pages/components-overview/checkbox\"\n        link=\"https://mui.com/material-ui/react-checkbox/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Basic\" codeHighlight codeString={basicCheckboxCodeString}>\n                <>\n                  <Checkbox />\n                  <Checkbox defaultChecked />\n                  <Checkbox defaultChecked />\n                  <Checkbox defaultChecked disabled />\n                  <Checkbox disabled />\n                </>\n              </MainCard>\n              <MainCard title=\"Size\" codeString={sizeCheckboxCodeString}>\n                <>\n                  <Checkbox defaultChecked className=\"size-small\" />\n                  <Checkbox defaultChecked />\n                  <Checkbox defaultChecked className=\"size-large\" />\n                </>\n              </MainCard>\n              <MainCard title=\"Colors\" codeString={colorCheckboxCodeString}>\n                <>\n                  <Checkbox />\n                  <Checkbox defaultChecked color=\"secondary\" />\n                  <Checkbox defaultChecked color=\"success\" />\n                  <Checkbox defaultChecked color=\"warning\" />\n                  <Checkbox defaultChecked color=\"info\" />\n                  <Checkbox defaultChecked color=\"error\" />\n                </>\n              </MainCard>\n            </Stack>\n          </Grid>\n          <Grid item xs={12} lg={6}>\n            <Stack spacing={3}>\n              <MainCard title=\"Label Placement\" codeString={labelCheckboxCodeString}>\n                <FormControl component=\"fieldset\">\n                  <FormGroup aria-label=\"position\" row>\n                    <FormControlLabel value=\"top\" control={<Checkbox />} label=\"Top\" labelPlacement=\"top\" />\n                    <FormControlLabel\n                      value=\"start\"\n                      control={<Checkbox defaultChecked />}\n                      label=\"Start\"\n                      labelPlacement=\"start\"\n                      sx={{ mr: 1 }}\n                    />\n                    <FormControlLabel value=\"bottom\" control={<Checkbox />} label=\"Bottom\" labelPlacement=\"bottom\" />\n                    <FormControlLabel value=\"end\" control={<Checkbox defaultChecked />} label=\"End\" labelPlacement=\"end\" sx={{ ml: 1 }} />\n                  </FormGroup>\n                </FormControl>\n              </MainCard>\n              <MainCard title=\"Indeterminate\" codeString={indeterminateCheckboxCodeString}>\n                <>\n                  <FormControlLabel\n                    label=\"Parent\"\n                    control={\n                      <Checkbox checked={checked[0] && checked[1]} indeterminate={checked[0] !== checked[1]} onChange={handleChange1} />\n                    }\n                  />\n                  {children}\n                </>\n              </MainCard>\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":6458},"src/sections/apps/customer/AddCustomer.jsx":{"content":"import { useEffect, useMemo, useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport FormCustomerAdd from './FormCustomerAdd';\nimport MainCard from 'components/MainCard';\nimport SimpleBar from 'components/third-party/SimpleBar';\nimport CircularWithPath from 'components/@extended/progress/CircularWithPath';\nimport { handlerCustomerDialog, useGetCustomer, useGetCustomerMaster } from 'api/customer';\n\n// ==============================|| CUSTOMER - ADD / EDIT ||============================== //\n\nexport default function AddCustomer() {\n  const { customerMasterLoading, customerMaster } = useGetCustomerMaster();\n  const { customersLoading: loading, customers } = useGetCustomer();\n  const isModal = customerMaster?.modal;\n\n  const [list, setList] = useState(null);\n\n  useEffect(() => {\n    if (customerMaster?.modal && typeof customerMaster.modal === 'number') {\n      const newList = customers.filter((info) => info.id === isModal && info)[0];\n      setList(newList);\n    } else {\n      setList(null);\n    }\n    // eslint-disable-next-line\n  }, [customerMaster]);\n\n  const closeModal = () => handlerCustomerDialog(false);\n\n  // eslint-disable-next-line\n  const customerForm = useMemo(\n    () => !loading && !customerMasterLoading && <FormCustomerAdd customer={list} closeModal={closeModal} />,\n    [list, loading, customerMasterLoading]\n  );\n\n  return (\n    <>\n      {isModal && (\n        <Modal\n          open={true}\n          onClose={closeModal}\n          aria-labelledby=\"modal-customer-add-label\"\n          aria-describedby=\"modal-customer-add-description\"\n          sx={{ '& .MuiPaper-root:focus': { outline: 'none' } }}\n        >\n          <MainCard\n            sx={{ width: `calc(100% - 48px)`, minWidth: 340, maxWidth: 880, height: 'auto', maxHeight: 'calc(100vh - 48px)' }}\n            modal\n            content={false}\n          >\n            <SimpleBar\n              sx={{\n                maxHeight: `calc(100vh - 48px)`,\n                '& .simplebar-content': { display: 'flex', flexDirection: 'column' }\n              }}\n            >\n              {loading && customerMasterLoading ? (\n                <Box sx={{ p: 5 }}>\n                  <Stack direction=\"row\" justifyContent=\"center\">\n                    <CircularWithPath />\n                  </Stack>\n                </Box>\n              ) : (\n                customerForm\n              )}\n            </SimpleBar>\n          </MainCard>\n        </Modal>\n      )}\n    </>\n  );\n}\n","size_bytes":2581},"src/sections/apps/profiles/user/ProfileRadialChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\nimport { ThemeMode } from 'config';\n\n// chart options\nconst redialBarChartOptions = {\n  plotOptions: {\n    radialBar: {\n      hollow: {\n        margin: 0,\n        size: '75%'\n      },\n      track: {\n        margin: 0\n      },\n      dataLabels: {\n        name: {\n          show: false\n        },\n        value: {\n          offsetY: 5\n        }\n      }\n    }\n  },\n  labels: ['Vimeo']\n};\n\n// ==============================|| TOP CARD - RADIAL BAR CHART ||============================== //\n\nexport default function ProfileRadialChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const textPrimary = theme.palette.text.primary;\n  const primary = theme.palette.primary.main;\n  const grey0 = theme.palette.common.white;\n  const grey500 = theme.palette.secondary.main;\n  const grey200 = theme.palette.secondary[200];\n\n  const [series] = useState([30]);\n  const [options, setOptions] = useState(redialBarChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [primary],\n      plotOptions: {\n        radialBar: {\n          track: {\n            background: mode === ThemeMode.DARK ? grey200 : grey0\n          },\n          dataLabels: {\n            value: {\n              fontSize: '1rem',\n              fontWeight: 600,\n              offsetY: 5,\n              color: textPrimary\n            }\n          }\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, grey200, grey0, grey500, textPrimary, primary]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"radialBar\" width={136} height={136} />\n    </div>\n  );\n}\n","size_bytes":1862},"src/sections/components-overview/modal/NestedModal.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Modal from '@mui/material/Modal';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| MODAL - CHILD ||============================== //\n\nfunction ChildModal() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleOpen} variant=\"contained\">\n        Open Child\n      </Button>\n      <Modal open={open} onClose={handleClose} aria-labelledby=\"child-modal-title\" aria-describedby=\"child-modal-description\">\n        <MainCard title=\"Child Modal\" modal darkTitle content={false}>\n          <CardContent>\n            <Typography id=\"modal-modal-description\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Typography>\n            <Typography id=\"modal-modal-description\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Typography>\n            <Typography id=\"modal-modal-description\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Typography>\n            <Typography id=\"modal-modal-description\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Typography>\n            <Typography id=\"modal-modal-description\">Lorem ipsum, dolor sit amet consectetur adipisicing elit.</Typography>\n          </CardContent>\n          <Divider />\n          <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ px: 2.5, py: 2 }}>\n            <Button color=\"error\" size=\"small\" onClick={handleClose}>\n              Close Child Modal\n            </Button>\n            <Button variant=\"contained\" size=\"small\">\n              Submit\n            </Button>\n          </Stack>\n        </MainCard>\n      </Modal>\n    </>\n  );\n}\n\n// ==============================|| MODAL - NESTED ||============================== //\n\nexport default function NestedModal() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <MainCard title=\"Nested\">\n      <Button onClick={handleOpen} variant=\"contained\">\n        Open Nested Modal\n      </Button>\n      <Modal open={open} onClose={handleClose} aria-labelledby=\"parent-modal-title\" aria-describedby=\"parent-modal-description\">\n        <MainCard title=\"Parent Modal\" modal darkTitle content={false}>\n          <CardContent>\n            <Typography id=\"modal-modal-description\">\n              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.Duis mollis, est non commodo luctus, nisi erat porttitor\n              ligula.\n            </Typography>\n          </CardContent>\n          <Divider />\n          <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ px: 2.5, py: 2 }}>\n            <Button color=\"error\" size=\"small\" onClick={handleClose}>\n              Cancel\n            </Button>\n            <ChildModal />\n          </Stack>\n        </MainCard>\n      </Modal>\n    </MainCard>\n  );\n}\n","size_bytes":3278},"src/components/third-party/react-table/HeaderSort.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\n\n// assets\nimport { ArrowDown2, ArrowUp2 } from 'iconsax-react';\n\nvar SortType;\n\n(function (SortType) {\n  SortType['ASC'] = 'asc';\n  SortType['DESC'] = 'desc';\n})(SortType || (SortType = {}));\n\nconst SortToggler = ({ type }) => {\n  const theme = useTheme();\n  return (\n    <Stack sx={{ color: 'secondary.light' }}>\n      <ArrowUp2\n        size=\"15\"\n        variant=\"Bold\"\n        style={{ fontSize: '0.625rem', color: type === SortType.ASC ? theme.palette.text.secondary : 'inherit' }}\n      />\n\n      <ArrowDown2\n        size=\"15\"\n        variant=\"Bold\"\n        style={{ fontSize: '0.625rem', marginTop: -8, color: type === SortType.DESC ? theme.palette.text.secondary : 'inherit' }}\n      />\n    </Stack>\n  );\n};\n\n// ==============================|| SORT HEADER ||============================== //\n\nexport default function HeaderSort({ column, sort }) {\n  return (\n    <Box {...(sort && { onClick: column.getToggleSortingHandler(), className: 'cursor-pointer prevent-select' })}>\n      {{\n        asc: <SortToggler type={SortType.ASC} />,\n        desc: <SortToggler type={SortType.DESC} />\n      }[column.getIsSorted()] ?? <SortToggler />}\n    </Box>\n  );\n}\n\nSortToggler.propTypes = { type: PropTypes.any };\n\nHeaderSort.propTypes = { column: PropTypes.object, sort: PropTypes.bool };\n","size_bytes":1464},"src/themes/theme/theme7.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME7 ||============================== //\n\nexport default function Theme7(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#d1e8d99c', '#8cdba9', '#63cf8e', '#3ec277', '#1db564', '#00a854', '#008245', '#005c34', '#003620', '#000f0a'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1a2721', '#173728', '#15472e', '#115c36', '#0b7841', '#05934c', '#1da65d', '#3cba73', '#61ca8b', '#8ad7a6'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2914},"src/themes/overrides/DialogContentText.js":{"content":"// ==============================|| OVERRIDES - DIALOG CONTENT TEXT ||============================== //\n\nexport default function DialogContentText(theme) {\n  return {\n    MuiDialogContentText: {\n      styleOverrides: {\n        root: {\n          fontSize: '0.875rem',\n          color: theme.palette.text.primary\n        }\n      }\n    }\n  };\n}\n","size_bytes":342},"src/pages/components-overview/autocomplete.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\n\n// project-imports\nimport ComponentHeader from 'components/cards/ComponentHeader';\nimport ComponentWrapper from 'sections/components-overview/ComponentWrapper';\nimport ComponentSkeleton from 'sections/components-overview/ComponentSkeleton';\nimport BasicAutocomplete from 'sections/components-overview/autocomplete/BasicAutocomplete';\nimport CountryAutocomplete from 'sections/components-overview/autocomplete/CountryAutocomplete';\nimport CreatableAutocomplete from 'sections/components-overview/autocomplete/CreatableAutocomplete';\nimport GroupedAutocomplete from 'sections/components-overview/autocomplete/GroupedAutocomplete';\nimport DisabledAutocomplete from 'sections/components-overview/autocomplete/DisabledAutocomplete';\nimport AsynchronousAutocomplete from 'sections/components-overview/autocomplete/AsynchronousAutocomplete';\nimport CustomizedAutocomplete from 'sections/components-overview/autocomplete/CustomizedAutocomplete';\nimport MultipleAutocomplete from 'sections/components-overview/autocomplete/MultipleAutocomplete';\nimport FixedTagsAutocomplete from 'sections/components-overview/autocomplete/FixedTagsAutocomplete';\nimport CheckboxesAutocomplete from 'sections/components-overview/autocomplete/CheckboxesAutocomplete';\nimport LimitAutocomplete from 'sections/components-overview/autocomplete/LimitAutocomplete';\nimport SizesAutocomplete from 'sections/components-overview/autocomplete/SizesAutocomplete';\nimport GitHubAutocomplete from 'sections/components-overview/autocomplete/GitHubAutocomplete';\n\n// ==============================|| COMPONENTS - AUTOCOMPLETE ||============================== //\n\nexport default function ComponentAutocomplete() {\n  return (\n    <ComponentSkeleton>\n      <ComponentHeader\n        title=\"Autocomplete\"\n        caption=\"The autocomplete is a normal text input enhanced by a panel of suggested options.\"\n        directory=\"src/pages/components-overview/autocomplete\"\n        link=\"https://mui.com/material-ui/react-autocomplete/\"\n      />\n      <ComponentWrapper>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <BasicAutocomplete />\n              <CountryAutocomplete />\n              <CreatableAutocomplete />\n              <GroupedAutocomplete />\n              <DisabledAutocomplete />\n              <AsynchronousAutocomplete />\n              <CustomizedAutocomplete />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={3}>\n              <MultipleAutocomplete />\n              <FixedTagsAutocomplete />\n              <CheckboxesAutocomplete />\n              <LimitAutocomplete />\n              <SizesAutocomplete />\n              <GitHubAutocomplete />\n            </Stack>\n          </Grid>\n        </Grid>\n      </ComponentWrapper>\n    </ComponentSkeleton>\n  );\n}\n","size_bytes":2946},"src/sections/components-overview/notistack/HideDuration.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Button from '@mui/material/Button';\nimport Slider from '@mui/material/Slider';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| NOTISTACK - TIMEOUT ||============================== //\n\nexport default function HideDuration() {\n  const [value, setValue] = useState(1);\n\n  const handleChange = (event, newValue) => {\n    if (typeof newValue === 'number') {\n      setValue(newValue);\n    }\n  };\n\n  const marks = [{ value: 1 }, { value: 3 }, { value: 5 }, { value: 7 }, { value: 9 }, { value: 11 }];\n\n  function valueLabelFormat(value) {\n    if (value === 11) return `persist`;\n    return `${value}s`;\n  }\n\n  const NotistackHideDurationCodeString = `<Button\n  variant=\"contained\"\n  fullWidth\n  sx={{ marginBlockStart: 2 }}\n  onClick={() => {\n    if (value !== 11) {\n      enqueueSnackbar('Your notification here', { autoHideDuration: value * 1000 });\n    } else {\n      enqueueSnackbar('Your notification here', { persist: true });\n    }\n  }}\n>\n  Show Snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"Hide Duration\" codeString={NotistackHideDurationCodeString}>\n      <Slider\n        value={value}\n        min={1}\n        step={2}\n        max={11}\n        valueLabelDisplay=\"on\"\n        marks={marks}\n        getAriaValueText={valueLabelFormat}\n        valueLabelFormat={valueLabelFormat}\n        onChange={handleChange}\n      />\n      <Button\n        variant=\"contained\"\n        fullWidth\n        sx={{ marginBlockStart: 2 }}\n        onClick={() => {\n          if (value !== 11) {\n            enqueueSnackbar('Your notification here', { autoHideDuration: value * 1000 });\n          } else {\n            enqueueSnackbar('Your notification here', { persist: true });\n          }\n        }}\n      >\n        Show Snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":1928},"src/sections/apps/profiles/account/TabAccount.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\nimport ListItem from '@mui/material/ListItem';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport Select from '@mui/material/Select';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// styles & constant\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = { PaperProps: { style: { maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP } } };\n\n// ==============================|| ACCOUNT PROFILE - MY ACCOUNT ||============================== //\n\nexport default function TabAccount() {\n  const [signing, setSigning] = useState('facebook');\n\n  const handleChange = (event) => {\n    setSigning(event.target.value);\n  };\n\n  const [checked, setChecked] = useState(['sb', 'ln', 'la']);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <MainCard title=\"General Settings\">\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"my-account-username\">Username</InputLabel>\n                <TextField fullWidth defaultValue=\"Asoka_Tana_16\" id=\"my-account-username\" placeholder=\"Username\" autoFocus />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"my-account-email\">Account Email</InputLabel>\n                <TextField fullWidth defaultValue=\"user@tana.com\" id=\"my-account-email\" placeholder=\"Account Email\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"my-account-lang\">Language</InputLabel>\n                <TextField fullWidth defaultValue=\"New York\" id=\"my-account-lang\" placeholder=\"Language\" />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor=\"my-account-signing\">Signing Using</InputLabel>\n                <Select fullWidth id=\"my-account-signing\" value={signing} onChange={handleChange} MenuProps={MenuProps}>\n                  <MenuItem value=\"form\">Basic Form</MenuItem>\n                  <MenuItem value=\"firebase\">Firebase - Auth</MenuItem>\n                  <MenuItem value=\"facebook\">Facebook</MenuItem>\n                  <MenuItem value=\"twitter\">Twitter</MenuItem>\n                  <MenuItem value=\"gmail\">Gmail</MenuItem>\n                  <MenuItem value=\"jwt\">JWT</MenuItem>\n                  <MenuItem value=\"auth0\">AUTH0</MenuItem>\n                </Select>\n              </Stack>\n            </Grid>\n          </Grid>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <MainCard title=\"Advance Settings\" content={false}>\n          <List sx={{ p: 0 }}>\n            <ListItem divider>\n              <ListItemText\n                id=\"switch-list-label-sb\"\n                primary=\"Secure Browsing\"\n                secondary=\"Browsing Securely ( https ) when it's necessary\"\n              />\n              <Switch\n                edge=\"end\"\n                onChange={handleToggle('sb')}\n                checked={checked.indexOf('sb') !== -1}\n                inputProps={{\n                  'aria-labelledby': 'switch-list-label-sb'\n                }}\n              />\n            </ListItem>\n            <ListItem divider>\n              <ListItemText\n                id=\"switch-list-label-ln\"\n                primary=\"Login Notifications\"\n                secondary=\"Notify when login attempted from other place\"\n              />\n              <Switch\n                edge=\"end\"\n                onChange={handleToggle('ln')}\n                checked={checked.indexOf('ln') !== -1}\n                inputProps={{\n                  'aria-labelledby': 'switch-list-label-ln'\n                }}\n              />\n            </ListItem>\n            <ListItem>\n              <ListItemText\n                id=\"switch-list-label-la\"\n                primary=\"Login Approvals\"\n                secondary=\"Approvals is not required when login from unrecognized devices.\"\n              />\n              <Switch\n                edge=\"end\"\n                onChange={handleToggle('la')}\n                checked={checked.indexOf('la') !== -1}\n                inputProps={{\n                  'aria-labelledby': 'switch-list-label-la'\n                }}\n              />\n            </ListItem>\n          </List>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <MainCard title=\"Recognized Devices\" content={false}>\n          <List sx={{ p: 0 }}>\n            <ListItem divider>\n              <ListItemText primary=\"Cent Desktop\" secondary=\"4351 Deans Lane, Chelmsford\" />\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.75}>\n                <Box sx={{ width: 6, height: 6, bgcolor: 'success.main', borderRadius: '50%' }} />\n                <Typography sx={{ display: { xs: 'none', sm: 'block' } }}>Active</Typography>\n              </Stack>\n            </ListItem>\n            <ListItem divider>\n              <ListItemText primary=\"Imho Tablet\" secondary=\"4185 Michigan Avenue\" />\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.75}>\n                <Box sx={{ width: 6, height: 6, bgcolor: 'secondary.main', borderRadius: '50%' }} />\n                <Typography sx={{ display: { xs: 'none', sm: 'block' } }}>Active 5 days ago</Typography>\n              </Stack>\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Albs Mobile\" secondary=\"3462 Fairfax Drive, Montcalm\" />\n              <Stack direction=\"row\" alignItems=\"center\" spacing={0.75}>\n                <Box sx={{ width: 6, height: 6, bgcolor: 'secondary.main', borderRadius: '50%' }} />\n                <Typography sx={{ display: { xs: 'none', sm: 'block' } }}>Active 1 month ago</Typography>\n              </Stack>\n            </ListItem>\n          </List>\n        </MainCard>\n      </Grid>\n      <Grid item xs={12}>\n        <MainCard title=\"Active Sessions\" content={false}>\n          <List sx={{ p: 0 }}>\n            <ListItem divider>\n              <ListItemText primary={<Typography variant=\"h5\">Cent Desktop</Typography>} secondary=\"4351 Deans Lane, Chelmsford\" />\n              <Button>Logout</Button>\n            </ListItem>\n            <ListItem>\n              <ListItemText primary={<Typography variant=\"h5\">Moon Tablet</Typography>} secondary=\"4185 Michigan Avenue\" />\n              <Button>Logout</Button>\n            </ListItem>\n          </List>\n        </MainCard>\n      </Grid>\n\n      <Grid item xs={12}>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\n          <Button variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button variant=\"contained\">Update Profile</Button>\n        </Stack>\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":7645},"src/layout/Dashboard/Drawer/DrawerHeader/DrawerHeaderStyled.js":{"content":"// material-ui\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\n\nconst DrawerHeaderStyled = styled(Box, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  ...theme.mixins.toolbar,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: open ? 'flex-start' : 'center',\n  paddingLeft: theme.spacing(open ? 3 : 0)\n}));\n\nexport default DrawerHeaderStyled;\n","size_bytes":417},"src/layout/Dashboard/Header/HeaderContent/Notification.jsx":{"content":"import { useRef, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Badge from '@mui/material/Badge';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Link from '@mui/material/Link';\nimport List from '@mui/material/List';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport IconButton from 'components/@extended/IconButton';\nimport Transitions from 'components/@extended/Transitions';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { Gift, MessageText1, Notification, Setting2 } from 'iconsax-react';\nimport Avatar from 'components/@extended/Avatar';\n\nconst actionSX = {\n  mt: '6px',\n  ml: 1,\n  top: 'auto',\n  right: 'auto',\n  alignSelf: 'flex-start',\n  transform: 'none'\n};\n\n// ==============================|| HEADER CONTENT - NOTIFICATION ||============================== //\n\nexport default function NotificationPage() {\n  const theme = useTheme();\n  const matchesXs = useMediaQuery(theme.breakpoints.down('md'));\n\n  const anchorRef = useRef(null);\n  const [read] = useState(2);\n  const [open, setOpen] = useState(false);\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const iconBackColorOpen = theme.palette.mode === ThemeMode.DARK ? 'background.paper' : 'secondary.200';\n  const iconBackColor = theme.palette.mode === ThemeMode.DARK ? 'background.default' : 'secondary.100';\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 0.5 }}>\n      <IconButton\n        color=\"secondary\"\n        variant=\"light\"\n        aria-label=\"open profile\"\n        ref={anchorRef}\n        aria-controls={open ? 'profile-grow' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        size=\"large\"\n        sx={{ color: 'secondary.main', bgcolor: open ? iconBackColorOpen : iconBackColor, p: 1 }}\n      >\n        <Badge badgeContent={read} color=\"success\" sx={{ '& .MuiBadge-badge': { top: 2, right: 4 } }}>\n          <Notification variant=\"Bold\" />\n        </Badge>\n      </IconButton>\n      <Popper\n        placement={matchesXs ? 'bottom' : 'bottom-end'}\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n        popperOptions={{ modifiers: [{ name: 'offset', options: { offset: [matchesXs ? -5 : 0, 9] } }] }}\n      >\n        {({ TransitionProps }) => (\n          <Transitions type=\"grow\" position={matchesXs ? 'top' : 'top-right'} sx={{ overflow: 'hidden' }} in={open} {...TransitionProps}>\n            <Paper\n              sx={{\n                boxShadow: theme.customShadows.z1,\n                borderRadius: 1.5,\n                width: '100%',\n                minWidth: 285,\n                maxWidth: 420,\n                [theme.breakpoints.down('md')]: { maxWidth: 285 }\n              }}\n            >\n              <ClickAwayListener onClickAway={handleClose}>\n                <MainCard elevation={0} border={false}>\n                  <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h5\">Notifications</Typography>\n                    <Link href=\"#\" variant=\"h6\" color=\"primary\">\n                      Mark all read\n                    </Link>\n                  </Stack>\n                  <List\n                    component=\"nav\"\n                    sx={{\n                      '& .MuiListItemButton-root': {\n                        p: 1.5,\n                        my: 1.5,\n                        border: `1px solid ${theme.palette.divider}`,\n                        '&:hover': { bgcolor: 'primary.lighter', borderColor: theme.palette.primary.light },\n                        '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\n                      }\n                    }}\n                  >\n                    <ListItemButton>\n                      <ListItemAvatar>\n                        <Avatar type=\"filled\">\n                          <Gift size={20} variant=\"Bold\" />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"h6\">\n                            It&apos;s{' '}\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                              Cristina danny&apos;s\n                            </Typography>{' '}\n                            birthday today.\n                          </Typography>\n                        }\n                        secondary=\"2 min ago\"\n                      />\n                      <ListItemSecondaryAction>\n                        <Typography variant=\"caption\" noWrap>\n                          3:00 AM\n                        </Typography>\n                      </ListItemSecondaryAction>\n                    </ListItemButton>\n\n                    <ListItemButton>\n                      <ListItemAvatar>\n                        <Avatar type=\"outlined\">\n                          <MessageText1 size={20} variant=\"Bold\" />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"h6\">\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                              Aida Burg\n                            </Typography>{' '}\n                            commented your post.\n                          </Typography>\n                        }\n                        secondary=\"5 August\"\n                      />\n                      <ListItemSecondaryAction>\n                        <Typography variant=\"caption\" noWrap>\n                          6:00 PM\n                        </Typography>\n                      </ListItemSecondaryAction>\n                    </ListItemButton>\n\n                    <ListItemButton>\n                      <ListItemAvatar>\n                        <Avatar>\n                          <Setting2 size={20} variant=\"Bold\" />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"h6\">\n                            Your Profile is Complete &nbsp;\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                              60%\n                            </Typography>{' '}\n                          </Typography>\n                        }\n                        secondary=\"7 hours ago\"\n                      />\n                      <ListItemSecondaryAction>\n                        <Typography variant=\"caption\" noWrap>\n                          2:45 PM\n                        </Typography>\n                      </ListItemSecondaryAction>\n                    </ListItemButton>\n\n                    <ListItemButton>\n                      <ListItemAvatar>\n                        <Avatar type=\"combined\">C</Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"h6\">\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                              Cristina Danny\n                            </Typography>{' '}\n                            invited to join{' '}\n                            <Typography component=\"span\" variant=\"subtitle1\">\n                              Meeting.\n                            </Typography>\n                          </Typography>\n                        }\n                        secondary=\"Daily scrum meeting time\"\n                      />\n                      <ListItemSecondaryAction>\n                        <Typography variant=\"caption\" noWrap>\n                          9:10 PM\n                        </Typography>\n                      </ListItemSecondaryAction>\n                    </ListItemButton>\n                  </List>\n                  <Stack direction=\"row\" justifyContent=\"center\">\n                    <Link href=\"#\" variant=\"h6\" color=\"primary\">\n                      View all\n                    </Link>\n                  </Stack>\n                </MainCard>\n              </ClickAwayListener>\n            </Paper>\n          </Transitions>\n        )}\n      </Popper>\n    </Box>\n  );\n}\n","size_bytes":9018},"src/pages/extra-pages/price/price1.jsx":{"content":"import { useState, Fragment } from 'react';\n\n// material-ui\nimport { alpha, useTheme } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Link from '@mui/material/Link';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Stack from '@mui/material/Stack';\nimport Switch from '@mui/material/Switch';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { InfoCircle } from 'iconsax-react';\n\n// plan list\nconst plans = [\n  {\n    active: false,\n    title: 'Basic',\n    description: '03 Services',\n    price: 69,\n    permission: [0, 1, 2]\n  },\n  {\n    active: true,\n    title: 'Standard',\n    description: '05 Services',\n    price: 129,\n    permission: [0, 1, 2, 3, 4]\n  },\n  {\n    active: false,\n    title: 'Premium',\n    description: '08 Services',\n    price: 599,\n    permission: [0, 1, 2, 3, 4, 5, 6, 7]\n  }\n];\n\nconst planList = [\n  'One End Product', // 0\n  'No attribution required', // 1\n  'TypeScript', // 2\n  'Figma Design Resources', // 3\n  'Create Multiple Products', // 4\n  'Create a SaaS Project', // 5\n  'Resale Product', // 6\n  'Separate sale of our UI Elements?' // 7\n];\n\n// ==============================|| PRICING ||============================== //\n\nexport default function Pricing() {\n  const theme = useTheme();\n  const [timePeriod, setTimePeriod] = useState(true);\n\n  const priceListDisable = {\n    opacity: 0.4,\n    textDecoration: 'line-through'\n  };\n\n  const priceActivePlan = {\n    padding: 3,\n    borderRadius: 1,\n    bgcolor: theme.palette.primary.lighter\n  };\n  const price = {\n    fontSize: '40px',\n    fontWeight: 700,\n    lineHeight: 1\n  };\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Alert\n          color=\"warning\"\n          variant=\"border\"\n          icon={<InfoCircle variant=\"Bold\" />}\n          sx={{ '&.MuiAlert-colorWarning': { backgroundColor: alpha(theme.palette.warning.lighter, 0.15) } }}\n        >\n          <AlertTitle sx={{ fontWeight: 500, color: 'warning.dark' }}>Note</AlertTitle>\n          <Typography variant=\"h6\">\n            The pricing provided is for demonstration purposes only. For actual product pricing, please refer to the official\n            <Link\n              color=\"warning.dark\"\n              sx={{ textDecoration: 'none', ml: 0.5 }}\n              variant=\"subtitle1\"\n              target=\"_blank\"\n              href=\"https://themeforest.net/item/able-pro-react-mui-admin-dashboard-template/50427053?s_rank=4\"\n            >\n              pricing page\n            </Link>\n          </Typography>\n        </Alert>\n      </Grid>\n      <Grid item xs={12}>\n        <Stack spacing={2} direction={{ xs: 'column', md: 'row' }} justifyContent=\"space-between\">\n          <Stack spacing={0}>\n            <Typography variant=\"h5\">Quality is never an accident. It is always the result of interlligent effort</Typography>\n            <Typography color=\"text.secondary\">It makes no difference what the price is, it all makes senses to us.</Typography>\n          </Stack>\n          <Stack direction=\"row\" spacing={1.5} alignItems=\"center\">\n            <Typography variant=\"subtitle1\" color={timePeriod ? 'text.secondary' : 'text.primary'}>\n              Billed Yearly\n            </Typography>\n            <Switch checked={timePeriod} onChange={() => setTimePeriod(!timePeriod)} inputProps={{ 'aria-label': 'container' }} />\n            <Typography variant=\"subtitle1\" color={timePeriod ? 'text.primary' : 'text.secondary'}>\n              Billed Monthly\n            </Typography>\n          </Stack>\n        </Stack>\n      </Grid>\n      <Grid item container spacing={3} xs={12} alignItems=\"center\">\n        {plans.map((plan, index) => (\n          <Grid item xs={12} sm={6} md={4} key={index}>\n            <MainCard>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <Box sx={plan.active ? priceActivePlan : { padding: 3 }}>\n                    <Grid container spacing={3}>\n                      {plan.active && (\n                        <Grid item xs={12} sx={{ textAlign: 'center' }}>\n                          <Chip label=\"Popular\" color=\"success\" />\n                        </Grid>\n                      )}\n                      <Grid item xs={12}>\n                        <Stack spacing={0} textAlign=\"center\">\n                          <Typography variant=\"h4\">{plan.title}</Typography>\n                          <Typography>{plan.description}</Typography>\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Stack spacing={0} alignItems=\"center\">\n                          {timePeriod && (\n                            <Typography variant=\"h2\" sx={price}>\n                              ${plan.price}\n                            </Typography>\n                          )}\n                          {!timePeriod && (\n                            <Typography variant=\"h2\" sx={price}>\n                              ${plan.price * 12 - 99}\n                            </Typography>\n                          )}\n                          <Typography variant=\"h6\" color=\"text.secondary\">\n                            Lifetime\n                          </Typography>\n                        </Stack>\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Button color={plan.active ? 'primary' : 'secondary'} variant={plan.active ? 'contained' : 'outlined'} fullWidth>\n                          Order Now\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </Grid>\n                <Grid item xs={12}>\n                  <List\n                    sx={{\n                      m: 0,\n                      p: 0,\n                      '&> li': {\n                        px: 0,\n                        py: 0.625\n                      }\n                    }}\n                    component=\"ul\"\n                  >\n                    {planList.map((list, i) => (\n                      <Fragment key={i}>\n                        <ListItem sx={!plan.permission.includes(i) ? priceListDisable : {}}>\n                          <ListItemText primary={list} sx={{ textAlign: 'center' }} />\n                        </ListItem>\n                      </Fragment>\n                    ))}\n                  </List>\n                </Grid>\n              </Grid>\n            </MainCard>\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":6853},"src/sections/charts/apexchart/ApexMixedChart.jsx":{"content":"import { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport { ThemeMode } from 'config';\n\n// chart options\nconst mixedChartOptions = {\n  chart: {\n    type: 'line',\n    stacked: false,\n    height: 450\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [1, 1, 4]\n  },\n  xaxis: {\n    categories: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]\n  },\n  legend: {\n    show: true,\n    fontFamily: `Inter var`,\n    position: 'bottom',\n    offsetX: 10,\n    offsetY: 10,\n    labels: {\n      useSeriesColors: false\n    },\n    markers: {\n      width: 16,\n      height: 16,\n      radius: 5\n    },\n    itemMargin: {\n      horizontal: 15,\n      vertical: 8\n    }\n  },\n  yaxis: [\n    {\n      axisTicks: {\n        show: true\n      },\n      axisBorder: {\n        show: true,\n        color: '#008FFB'\n      },\n      labels: {\n        style: {\n          colors: '#008FFB'\n        }\n      },\n      title: {\n        text: 'Income (thousand crores)',\n        style: {\n          color: '#008FFB'\n        }\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    {\n      seriesName: 'Income',\n      opposite: true,\n      axisTicks: {\n        show: true\n      },\n      axisBorder: {\n        show: true,\n        color: '#00E396'\n      },\n      labels: {\n        style: {\n          colors: '#00E396'\n        }\n      },\n      title: {\n        text: 'Operating Cashflow (thousand crores)',\n        style: {\n          color: '#00E396'\n        }\n      }\n    },\n    {\n      seriesName: 'Revenue',\n      opposite: true,\n      axisTicks: {\n        show: true\n      },\n      axisBorder: {\n        show: true,\n        color: '#FEB019'\n      },\n      labels: {\n        style: {\n          colors: '#FEB019'\n        }\n      },\n      title: {\n        text: 'Revenue (thousand crores)',\n        style: {\n          color: '#FEB019'\n        }\n      }\n    }\n  ]\n};\n\n// ==============================|| APEXCHART - MIXED ||============================== //\n\nexport default function ApexMixedChart() {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  const { primary } = theme.palette.text;\n  const line = theme.palette.divider;\n  const grey200 = theme.palette.secondary[200];\n\n  const secondary = theme.palette.primary[700];\n  const primaryMain = theme.palette.primary.main;\n  const successDark = theme.palette.success.main;\n\n  const [series] = useState([\n    {\n      name: 'Income',\n      type: 'column',\n      data: [14, 2, 25, 15, 25, 28, 38, 46]\n    },\n    {\n      name: 'Cashflow',\n      type: 'column',\n      data: [11, 3, 31, 4, 41, 49, 65, 85]\n    },\n    {\n      name: 'Revenue',\n      type: 'line',\n      data: [20, 29, 37, 36, 44, 45, 50, 58]\n    }\n  ]);\n\n  const [options, setOptions] = useState({ ...mixedChartOptions, yaxis: [...mixedChartOptions.yaxis, { logarithmic: true }] });\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [secondary, primaryMain, successDark],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, line, grey200, secondary, primaryMain, successDark]);\n\n  return (\n    <div id=\"chart\">\n      <ReactApexChart options={options} series={series} type=\"line\" height={350} />\n    </div>\n  );\n}\n","size_bytes":3786},"src/sections/landing/Animation.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\n// third party\nimport { useInView } from 'react-intersection-observer';\nimport { motion, useAnimation } from 'framer-motion';\n\n// =============================|| LANDING - FADE IN ANIMATION ||============================= //\n\nexport default function FadeInWhenVisible({ children }) {\n  const controls = useAnimation();\n  const [ref, inView] = useInView();\n\n  useEffect(() => {\n    if (inView) {\n      controls.start('visible');\n    }\n  }, [controls, inView]);\n\n  return (\n    <motion.div\n      ref={ref}\n      animate={controls}\n      initial=\"hidden\"\n      transition={{ duration: 0.4 }}\n      variants={{\n        visible: { opacity: 1, translateY: 0 },\n        hidden: { opacity: 0, translateY: 200 }\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nFadeInWhenVisible.propTypes = { children: PropTypes.node };\n","size_bytes":893},"src/sections/components-overview/accordion/BasicAccordion.jsx":{"content":"// material-ui\nimport Accordion from '@mui/material/Accordion';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// ==============================|| ACCORDION - BASIC ||============================== //\n\nexport default function BasicAccordion() {\n  const basicAccordionCodeString = `<Accordion>\n  <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n    <Typography variant=\"h6\">Accordion 01</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion>\n  <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n    <Typography variant=\"h6\">Accordion 02</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion>\n  <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n    <Typography variant=\"h6\">Accordion 03</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion>\n  <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n    <Typography variant=\"h6\">Accordion 04</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>\n<Accordion>\n  <AccordionSummary aria-controls=\"panel5d-content\" id=\"panel5d-header\">\n    <Typography variant=\"h6\">Accordion 05</Typography>\n  </AccordionSummary>\n  <AccordionDetails>\n    <Typography>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n    </Typography>\n  </AccordionDetails>\n</Accordion>`;\n\n  return (\n    <MainCard title=\"Basic\" codeString={basicAccordionCodeString}>\n      <>\n        <Accordion>\n          <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n            <Typography variant=\"h6\">Accordion 01</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion>\n          <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n            <Typography variant=\"h6\">Accordion 02</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion>\n          <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n            <Typography variant=\"h6\">Accordion 03</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion>\n          <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n            <Typography variant=\"h6\">Accordion 04</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n        <Accordion>\n          <AccordionSummary aria-controls=\"panel5d-content\" id=\"panel5d-header\">\n            <Typography variant=\"h6\">Accordion 05</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex, sit amet blandit leo lobortis eget.\n            </Typography>\n          </AccordionDetails>\n        </Accordion>\n      </>\n    </MainCard>\n  );\n}\n","size_bytes":6189},"src/layout/Component/index.jsx":{"content":"import { lazy, Suspense } from 'react';\n\n// material-ui\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\n\n// project-imports\nimport Loader from 'components/Loader';\nimport ComponentLayoutPage from './ComponentLayout';\nimport { useGetMenuMaster } from 'api/menu';\n\nconst Header = lazy(() => import('./Header'));\n\n// ==============================|| MINIMAL LAYOUT ||============================== //\n\nexport default function ComponentLayout() {\n  const { menuMasterLoading } = useGetMenuMaster();\n  if (menuMasterLoading) return <Loader />;\n\n  return (\n    <>\n      <Suspense fallback={<Loader />}>\n        <Container maxWidth=\"xl\" sx={{ px: { xs: 0, sm: 2 } }}>\n          <Header />\n          <Toolbar sx={{ mt: 2 }} />\n          <ComponentLayoutPage />\n        </Container>\n      </Suspense>\n    </>\n  );\n}\n","size_bytes":853},"src/themes/overrides/Badge.js":{"content":"// project-imports\nimport getColors from 'utils/getColors';\n\n// ==============================|| BADGE - COLORS ||============================== //\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { darker, lighter } = colors;\n\n  return {\n    color: darker,\n    backgroundColor: lighter\n  };\n}\n\n// ==============================|| OVERRIDES - BADGE ||============================== //\n\nexport default function Badge(theme) {\n  const defaultLightBadge = getColorStyle({ color: 'primary', theme });\n\n  return {\n    MuiBadge: {\n      styleOverrides: {\n        standard: {\n          minWidth: theme.spacing(2),\n          height: theme.spacing(2),\n          padding: theme.spacing(0.5)\n        },\n        colorSecondary: {\n          color: theme.palette.secondary.lighter\n        },\n        light: {\n          ...defaultLightBadge,\n          '&.MuiBadge-colorPrimary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiBadge-colorSecondary': getColorStyle({ color: 'secondary', theme }),\n          '&.MuiBadge-colorError': getColorStyle({ color: 'error', theme }),\n          '&.MuiBadge-colorInfo': getColorStyle({ color: 'info', theme }),\n          '&.MuiBadge-colorSuccess': getColorStyle({ color: 'success', theme }),\n          '&.MuiBadge-colorWarning': getColorStyle({ color: 'warning', theme })\n        }\n      }\n    }\n  };\n}\n","size_bytes":1382},"src/sections/components-overview/timeline/CustomizedTimeline.jsx":{"content":"// material-ui\nimport Typography from '@mui/material/Typography';\nimport Timeline from '@mui/lab/Timeline';\nimport TimelineDot from '@mui/lab/TimelineDot';\nimport TimelineContent from '@mui/lab/TimelineContent';\nimport TimelineItem from '@mui/lab/TimelineItem';\nimport TimelineConnector from '@mui/lab/TimelineConnector';\nimport TimelineSeparator from '@mui/lab/TimelineSeparator';\nimport TimelineOppositeContent from '@mui/lab/TimelineOppositeContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { Coffee, Gift, Repeat, Screenmirroring } from 'iconsax-react';\n\n// ==============================|| TIMELINE - CUSTOMIZED ||============================== //\n\nexport default function CustomizedTimeline() {\n  const customTimelineCodeString = `<Timeline\n  position=\"alternate\"\n  sx={{\n    '& .MuiTimelineItem-root': { minHeight: 90 },\n    '& .MuiTimelineOppositeContent-root': { mt: 0.5 },\n    '& .MuiTimelineDot-root': {\n      borderRadius: 1.25,\n      boxShadow: 'none',\n      margin: 0,\n      ml: 1.25,\n      mr: 1.25,\n      p: 1,\n      '& .MuiSvgIcon-root': { fontSize: '1.2rem' }\n    },\n    '& .MuiTimelineContent-root': { borderRadius: 1, bgcolor: 'secondary.lighter', height: '100%' },\n    '& .MuiTimelineConnector-root': { border: '1px dashed', borderColor: 'secondary.light', bgcolor: 'transparent' }\n  }}\n>\n  <TimelineItem>\n    <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n      9:30 am\n    </TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot sx={{ color: 'primary.main', bgcolor: 'primary.lighter' }}>\n        <Coffee style={{ fontSize: '1.3rem' }} />\n      </TimelineDot>\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>\n      <Typography variant=\"h6\" >\n        Eat\n      </Typography>\n      <Typography color=\"text.secondary\">Because you need strength</Typography>\n    </TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineOppositeContent variant=\"body2\" color=\"text.secondary\">\n      10:00 am\n    </TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot sx={{ color: 'success.main', bgcolor: 'success.lighter' }}>\n        <Screenmirroring style={{ fontSize: '1.3rem' }} />\n      </TimelineDot>\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>\n      <Typography variant=\"h6\" >\n        Code\n      </Typography>\n      <Typography color=\"text.secondary\">Because it&apos;s awesome!</Typography>\n    </TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n      11:30 am\n    </TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot sx={{ color: 'warning.main', bgcolor: 'warning.lighter' }}>\n        <Gift style={{ fontSize: '1.3rem' }} />\n      </TimelineDot>\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>\n      <Typography variant=\"h6\" >\n        Gift\n      </Typography>\n      <Typography color=\"text.secondary\">Because you need.</Typography>\n    </TimelineContent>\n  </TimelineItem>\n  <TimelineItem>\n    <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n      12:30 am\n    </TimelineOppositeContent>\n    <TimelineSeparator>\n      <TimelineDot sx={{ color: 'error.main', bgcolor: 'error.lighter' }}>\n        <Repeat style={{ fontSize: '1.3rem' }} />\n      </TimelineDot>\n      <TimelineConnector />\n    </TimelineSeparator>\n    <TimelineContent>\n      <Typography variant=\"h6\" >\n        Repeat\n      </Typography>\n      <Typography color=\"text.secondary\">This is the life you love!</Typography>\n    </TimelineContent>\n  </TimelineItem>\n</Timeline>`;\n\n  return (\n    <MainCard title=\"Customized\" codeString={customTimelineCodeString}>\n      <Timeline\n        position=\"alternate\"\n        sx={{\n          '& .MuiTimelineItem-root': { minHeight: 90 },\n          '& .MuiTimelineOppositeContent-root': { mt: 0.5 },\n          '& .MuiTimelineDot-root': {\n            borderRadius: 1.25,\n            boxShadow: 'none',\n            margin: 0,\n            ml: 1.25,\n            mr: 1.25,\n            p: 1,\n            '& .MuiSvgIcon-root': { fontSize: '1.2rem' }\n          },\n          '& .MuiTimelineContent-root': { borderRadius: 1, bgcolor: 'secondary.lighter', height: '100%' },\n          '& .MuiTimelineConnector-root': { border: '1px dashed', borderColor: 'secondary.light', bgcolor: 'transparent' }\n        }}\n      >\n        <TimelineItem>\n          <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n            9:30 am\n          </TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot sx={{ color: 'primary.darker', bgcolor: 'primary.lighter' }}>\n              <Coffee style={{ fontSize: '1.3rem' }} />\n            </TimelineDot>\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>\n            <Typography variant=\"h6\">Eat</Typography>\n            <Typography color=\"text.secondary\">Because you need strength</Typography>\n          </TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineOppositeContent variant=\"body2\" color=\"text.secondary\">\n            10:00 am\n          </TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot sx={{ color: 'success.darker', bgcolor: 'success.lighter' }}>\n              <Screenmirroring style={{ fontSize: '1.3rem' }} />\n            </TimelineDot>\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>\n            <Typography variant=\"h6\">Code</Typography>\n            <Typography color=\"text.secondary\">Because it&apos;s awesome!</Typography>\n          </TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n            11:30 am\n          </TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot sx={{ color: 'warning.darker', bgcolor: 'warning.lighter' }}>\n              <Gift style={{ fontSize: '1.3rem' }} />\n            </TimelineDot>\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>\n            <Typography variant=\"h6\">Gift</Typography>\n            <Typography color=\"text.secondary\">Because you need.</Typography>\n          </TimelineContent>\n        </TimelineItem>\n        <TimelineItem>\n          <TimelineOppositeContent align=\"right\" variant=\"body2\" color=\"text.secondary\">\n            12:30 am\n          </TimelineOppositeContent>\n          <TimelineSeparator>\n            <TimelineDot sx={{ color: 'error.darker', bgcolor: 'error.lighter' }}>\n              <Repeat style={{ fontSize: '1.3rem' }} />\n            </TimelineDot>\n            <TimelineConnector />\n          </TimelineSeparator>\n          <TimelineContent>\n            <Typography variant=\"h6\">Repeat</Typography>\n            <Typography color=\"text.secondary\">This is the life you love!</Typography>\n          </TimelineContent>\n        </TimelineItem>\n      </Timeline>\n    </MainCard>\n  );\n}\n","size_bytes":7094},"src/sections/apps/e-commerce/products/ProductsHeader.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\n\n// project-imports\nimport SortOptions from 'sections/apps/e-commerce/products/SortOptions';\nimport MainCard from 'components/MainCard';\n\n// assets\nimport { ArrowDown2, FilterSearch, SearchNormal1 } from 'iconsax-react';\n\n// ==============================|| PRODUCT - HEADER ||============================== //\n\nexport default function ProductsHeader({ filter, handleDrawerOpen, setFilter }) {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // sort options\n  const [anchorEl, setAnchorEl] = useState(null);\n  const openSort = Boolean(anchorEl);\n  const handleClickListItem = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // search filter\n  const handleSearch = async (event) => {\n    const newString = event?.target.value;\n    setFilter({ ...filter, search: newString });\n  };\n\n  // sort filter\n  const handleMenuItemClick = (event, index) => {\n    setFilter({ ...filter, sort: index });\n    setAnchorEl(null);\n  };\n\n  const sortLabel = SortOptions.filter((items) => items.value === filter.sort);\n\n  return (\n    <MainCard content={false}>\n      <Stack\n        direction={matchDownSM ? 'column' : 'row'}\n        alignItems={matchDownSM ? 'space-between' : 'center'}\n        justifyContent={matchDownSM ? 'center' : 'space-between'}\n        sx={{ p: 2 }}\n        spacing={2}\n      >\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={0.5}>\n          <Button onClick={handleDrawerOpen} color=\"secondary\" startIcon={<FilterSearch style={{ color: 'secondary.200' }} />} size=\"large\">\n            Filter\n          </Button>\n\n          <TextField\n            sx={{ '& .MuiOutlinedInput-input': { pl: 0 } }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchNormal1 size={18} />\n                </InputAdornment>\n              )\n            }}\n            value={filter.search}\n            placeholder=\"Search Product\"\n            size=\"medium\"\n            onChange={handleSearch}\n          />\n        </Stack>\n        <Button\n          id=\"demo-positioned-button\"\n          aria-controls=\"demo-positioned-menu\"\n          aria-haspopup=\"true\"\n          aria-expanded={openSort ? 'true' : undefined}\n          onClick={handleClickListItem}\n          variant=\"outlined\"\n          size=\"large\"\n          color=\"secondary\"\n          endIcon={<ArrowDown2 style={{ fontSize: 'small' }} />}\n          sx={{ color: 'text.primary' }}\n        >\n          {sortLabel.length > 0 && sortLabel[0].label}\n        </Button>\n        <Menu\n          id=\"demo-positioned-menu\"\n          aria-labelledby=\"demo-positioned-button\"\n          anchorEl={anchorEl}\n          open={openSort}\n          onClose={handleClose}\n          anchorOrigin={{ vertical: 'bottom', horizontal: matchDownSM ? 'center' : 'right' }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: matchDownSM ? 'center' : 'right'\n          }}\n        >\n          {SortOptions.map((option, index) => (\n            <MenuItem\n              sx={{ p: 1.5 }}\n              key={index}\n              selected={option.value === filter.sort}\n              onClick={(event) => handleMenuItemClick(event, option.value)}\n            >\n              {option.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </Stack>\n    </MainCard>\n  );\n}\n\nProductsHeader.propTypes = { filter: PropTypes.any, handleDrawerOpen: PropTypes.func, setFilter: PropTypes.func };\n","size_bytes":4045},"src/layout/Dashboard/Drawer/DrawerContent/Navigation/index.jsx":{"content":"import { Fragment, useLayoutEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport NavItem from './NavItem';\nimport NavGroup from './NavGroup';\nimport menuItem from 'menu-items';\n// import { MenuFromAPI } from 'menu-items/dashboard';\n\nimport useConfig from 'hooks/useConfig';\nimport { MenuOrientation, HORIZONTAL_MAX_ITEM } from 'config';\nimport { useGetMenu, useGetMenuMaster } from 'api/menu';\n\n// function isFound(arr, str) {\n//   return arr.items.some((element) => {\n//     if (element.id === str) {\n//       return true;\n//     }\n//     return false;\n//   });\n// }\n\n// ==============================|| DRAWER CONTENT - NAVIGATION ||============================== //\n\nexport default function Navigation() {\n  const theme = useTheme();\n\n  const downLG = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const { menuOrientation } = useConfig();\n  const { menuLoading } = useGetMenu();\n  const { menuMaster } = useGetMenuMaster();\n  const drawerOpen = menuMaster.isDashboardDrawerOpened;\n\n  const [selectedID, setSelectedID] = useState('');\n  const [selectedItems, setSelectedItems] = useState('');\n  const [selectedLevel, setSelectedLevel] = useState(0);\n  const [menuItems, setMenuItems] = useState({ items: [] });\n\n  // let dashboardMenu = MenuFromAPI();\n  useLayoutEffect(() => {\n    // if (menuLoading && !isFound(menuItem, 'group-dashboard-loading')) {\n    //   menuItem.items.splice(0, 0, dashboardMenu);\n    //   setMenuItems({ items: [...menuItem.items] });\n    // } else if (!menuLoading && dashboardMenu?.id !== undefined && !isFound(menuItem, 'group-dashboard')) {\n    //   menuItem.items.splice(0, 1, dashboardMenu);\n    //   setMenuItems({ items: [...menuItem.items] });\n    // } else {\n    setMenuItems({ items: [...menuItem.items] });\n    // }\n    // eslint-disable-next-line\n  }, [menuLoading]);\n\n  const isHorizontal = menuOrientation === MenuOrientation.HORIZONTAL && !downLG;\n\n  const lastItem = isHorizontal ? HORIZONTAL_MAX_ITEM : null;\n  let lastItemIndex = menuItems.items.length - 1;\n  let remItems = [];\n  let lastItemId;\n\n  if (lastItem && lastItem < menuItems.items.length) {\n    lastItemId = menuItems.items[lastItem - 1].id;\n    lastItemIndex = lastItem - 1;\n    remItems = menuItems.items.slice(lastItem - 1, menuItems.items.length).map((item) => ({\n      title: item.title,\n      elements: item.children,\n      icon: item.icon,\n      ...(item.url && {\n        url: item.url\n      })\n    }));\n  }\n\n  const navGroups = menuItems.items.slice(0, lastItemIndex + 1).map((item) => {\n    switch (item.type) {\n      case 'group':\n        if (item.url && item.id !== lastItemId) {\n          return (\n            <Fragment key={item.id}>\n              {menuOrientation !== MenuOrientation.HORIZONTAL && <Divider sx={{ my: 0.5 }} />}\n              <NavItem item={item} level={1} isParents />\n            </Fragment>\n          );\n        }\n        return (\n          <NavGroup\n            key={item.id}\n            selectedID={selectedID}\n            setSelectedID={setSelectedID}\n            setSelectedItems={setSelectedItems}\n            setSelectedLevel={setSelectedLevel}\n            selectedLevel={selectedLevel}\n            selectedItems={selectedItems}\n            lastItem={lastItem}\n            remItems={remItems}\n            lastItemId={lastItemId}\n            item={item}\n          />\n        );\n      default:\n        return (\n          <Typography key={item.id} variant=\"h6\" color=\"error\" align=\"center\">\n            Fix - Navigation Group\n          </Typography>\n        );\n    }\n  });\n\n  return (\n    <Box\n      sx={{\n        pt: drawerOpen ? (isHorizontal ? 0 : 2) : 0,\n        '& > ul:first-of-type': { mt: 0 },\n        display: isHorizontal ? { xs: 'block', lg: 'flex' } : 'block'\n      }}\n    >\n      {navGroups}\n    </Box>\n  );\n}\n","size_bytes":4032},"src/sections/forms/wizard/services-validation-wizard/ImageForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\n// import Checkbox from '@mui/material/Checkbox';\n// import FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\n// import TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n// import { Input } from '@mui/material';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport DragDropFileUpload from 'components/DragDropFileUpload';\n// import DragDropFileUpload from 'components/DragDropFileUpload';\n\nconst validationSchema = yup.object({\n  imageLabelSrc: yup\n    .mixed()\n    .required('Image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  firstIconPath: yup\n    .mixed()\n    .required('First icon is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  secondIconPath: yup\n    .mixed()\n    .required('Second icon is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    }),\n  imageTitlePath: yup\n    .mixed()\n    .required('Title image is required')\n    .test('fileType', 'Only image files are allowed', (value) => {\n      return value && value.type && value.type.startsWith('image/');\n    })\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function ImageForm({ data, setData, handleNext, handleBack }) {\n  const formik = useFormik({\n    initialValues: {\n      imageLabelSrc: data.imageLabelSrc || null,\n      firstIconPath: data.firstIconPath || null,\n      secondIconPath: data.secondIconPath || null,\n      imageTitlePath: data.imageTitlePath || null\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        imageLabelSrc: values.imageLabelSrc,\n        firstIconPath: values.firstIconPath,\n        secondIconPath: values.secondIconPath,\n        imageTitlePath: values.imageTitlePath\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Images of the page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Label Image of page</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"imageLabelSrc\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>First Icon</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"firstIconPath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Second Icon</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"secondIconPath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={6}>\n            <Stack spacing={1}>\n              <InputLabel>Title Image</InputLabel>\n              <DragDropFileUpload\n                formik={formik} // Pass the formik object\n                name=\"imageTitlePath\" // The name of the field\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"space-between\">\n              <Button onClick={handleBack} sx={{ my: 3, ml: 1 }}>\n                Back\n              </Button>\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\" sx={{ my: 3, ml: 1 }} onClick={() => setErrorIndex(1)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n\n          {/* <Grid item xs={12}>\n            <Grid item xs={6}>\n              <Stack spacing={1}>\n                <InputLabel>Icon SVG</InputLabel>\n                <DragDropFileUpload\n                  onFileUpload={(file) => {\n                    formik.setFieldValue('firstIconPath', file);\n                  }}\n                />\n              </Stack>\n            </Grid>\n          </Grid> */}\n          {/* <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Address 1</InputLabel>\n              <TextField id=\"address1\" name=\"address1\" placeholder=\"Address line 1\" fullWidth autoComplete=\"shipping address-line1\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Address 2</InputLabel>\n              <TextField id=\"address2\" name=\"address2\" placeholder=\"Address line 2\" fullWidth autoComplete=\"shipping address-line2\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Enter City</InputLabel>\n              <TextField id=\"city\" name=\"city\" placeholder=\"City\" fullWidth autoComplete=\"shipping address-level2\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Enter State</InputLabel>\n              <TextField id=\"state\" name=\"state\" placeholder=\"State/Province/Region\" fullWidth />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Zip Code</InputLabel>\n              <TextField id=\"zip\" name=\"zip\" placeholder=\"Zip / Postal code\" fullWidth autoComplete=\"shipping postal-code\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Stack spacing={1}>\n              <InputLabel>Enter Country</InputLabel>\n              <TextField id=\"country\" name=\"country\" placeholder=\"Country\" fullWidth autoComplete=\"shipping country\" />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <FormControlLabel\n              control={<Checkbox color=\"primary\" name=\"saveAddress\" value=\"yes\" />}\n              label=\"Use this address for payment details\"\n            />\n          </Grid> */}\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nImageForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":6929},"src/utils/getImageUrl.js":{"content":"export let ImagePath;\n\n(function (ImagePath) {\n  ImagePath['LANDING'] = 'landing';\n  ImagePath['USERS'] = 'users';\n  ImagePath['ECOMMERCE'] = 'e-commerce';\n  ImagePath['PROFILE'] = 'profile';\n  ImagePath['WIDGET'] = 'widget';\n})(ImagePath || (ImagePath = {}));\n\n// ==============================|| NEW URL - GET IMAGE URL ||============================== //\n\nexport function getImageUrl(name, path) {\n  return new URL(`/src/assets/images/${path}/${name}`, import.meta.url).href;\n}\n","size_bytes":481},"src/layout/Component/ComponentLayout.jsx":{"content":"import { useEffect } from 'react';\nimport { Outlet } from 'react-router-dom';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Box from '@mui/material/Box';\n\n// project-imports\nimport Drawer from './Drawer';\nimport { DRAWER_WIDTH } from 'config';\n\nimport { handlerComponentDrawer, useGetMenuMaster } from 'api/menu';\n\n// components content\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({\n  minHeight: `calc(100vh - 180px)`,\n  width: `calc(100% - ${DRAWER_WIDTH}px)`,\n  flexGrow: 1,\n  transition: theme.transitions.create('margin', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen\n  }),\n  [theme.breakpoints.down('md')]: {\n    paddingLeft: 0\n  },\n  ...(open && {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  })\n}));\n\n// ==============================|| COMPONENTS LAYOUT ||============================== //\n\nexport default function ComponentsLayout() {\n  const theme = useTheme();\n  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));\n  const { menuMaster } = useGetMenuMaster();\n\n  useEffect(() => {\n    handlerComponentDrawer(!matchDownMd);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matchDownMd]);\n\n  return (\n    <Box sx={{ display: 'flex', pt: menuMaster.isComponentDrawerOpened ? { xs: 0, md: 2.5 } : 0 }}>\n      <Drawer />\n      <Main theme={theme} open={menuMaster.isComponentDrawerOpened}>\n        <Outlet />\n      </Main>\n    </Box>\n  );\n}\n","size_bytes":1702},"src/components/@extended/LoadingButton.jsx":{"content":"import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { alpha, styled, useTheme } from '@mui/material/styles';\nimport MuiLoadingButton from '@mui/lab/LoadingButton';\n\n// project-imports\nimport getColors from 'utils/getColors';\nimport getShadow from 'utils/getShadow';\n\nfunction getColorStyle({ variant, theme, color, loadingPosition }) {\n  const colors = getColors(theme, color);\n  const { lighter, main, dark, contrastText } = colors;\n\n  const buttonShadow = `${color}Button`;\n  const shadows = getShadow(theme, buttonShadow);\n\n  const loadingIndicator = {\n    '& .MuiLoadingButton-loadingIndicator': {\n      color: main\n    }\n  };\n\n  const loadingColor = {\n    ...(loadingPosition &&\n      loadingPosition !== 'center' && {\n        color: main\n      })\n  };\n\n  const commonShadow = {\n    '&::after': {\n      boxShadow: `0 0 6px 6px ${alpha(main, 0.9)}`\n    },\n    '&:active::after': {\n      boxShadow: `0 0 0 0 ${alpha(main, 0.9)}`\n    },\n    '&:focus-visible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: 2\n    }\n  };\n\n  switch (variant) {\n    case 'contained':\n      return {\n        backgroundColor: main,\n        ...(loadingPosition &&\n          loadingPosition !== 'center' && {\n            color: contrastText\n          }),\n        '& .MuiLoadingButton-loadingIndicator': {\n          color: contrastText\n        },\n        '&:hover': {\n          backgroundColor: dark,\n          color: contrastText\n        },\n        ...commonShadow\n      };\n    case 'light':\n      return {\n        backgroundColor: main,\n        ...(loadingPosition &&\n          loadingPosition !== 'center' && {\n            color: contrastText\n          }),\n        '& .MuiLoadingButton-loadingIndicator': {\n          color: contrastText\n        },\n        '&:hover': {\n          backgroundColor: dark,\n          color: contrastText\n        },\n        ...commonShadow\n      };\n    case 'shadow':\n      return {\n        boxShadow: shadows,\n        backgroundColor: main,\n        ...(loadingPosition &&\n          loadingPosition !== 'center' && {\n            color: contrastText\n          }),\n        '& .MuiLoadingButton-loadingIndicator': {\n          color: contrastText\n        },\n        '&:hover': {\n          boxShadow: 'none',\n          backgroundColor: dark,\n          color: contrastText\n        },\n        ...commonShadow\n      };\n    case 'outlined':\n      return {\n        backgroundColor: 'transparent',\n        borderColor: main,\n        ...loadingColor,\n        ...loadingIndicator\n      };\n    case 'dashed':\n      return {\n        backgroundColor: lighter,\n        borderColor: main,\n        ...loadingColor,\n        ...loadingIndicator,\n        ...commonShadow\n      };\n    case 'text':\n    default:\n      return {\n        color: main,\n        ...loadingIndicator,\n        ...commonShadow\n      };\n  }\n}\n\nconst LoadingButtonStyle = styled(MuiLoadingButton, { shouldForwardProp: (prop) => prop !== 'shape' && prop !== 'variant' })(\n  ({ theme, variant, shape, color, loading, loadingPosition }) => ({\n    '::after': {\n      content: '\"\"',\n      display: 'block',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: shape === 'rounded' ? '50%' : 8,\n      opacity: 0,\n      transition: 'all 0.5s'\n    },\n\n    ':active::after': {\n      position: 'absolute',\n      borderRadius: shape === 'rounded' ? '50%' : 8,\n      left: 0,\n      top: 0,\n      opacity: 1,\n      transition: '0s'\n    },\n    ...(variant === 'text' && {\n      ...getColorStyle({ variant, theme, color, loadingPosition }),\n      '&.MuiButton-sizeMedium': {\n        height: 36\n      },\n      '&.MuiButton-sizeSmall': {\n        height: 30\n      },\n      '&.MuiButton-sizeLarge': {\n        height: 44\n      }\n    }),\n    ...(shape && {\n      padding: 0,\n      minWidth: 0,\n      '&.MuiButton-sizeMedium': {\n        width: 36,\n        height: 36\n      },\n      '&.MuiButton-sizeSmall': {\n        width: 30,\n        height: 30\n      },\n      '&.MuiButton-sizeLarge': {\n        width: 44,\n        height: 44\n      },\n      ...(shape === 'rounded' && {\n        borderRadius: '50%'\n      })\n    }),\n\n    ...(variant === 'outlined' && {\n      border: '1px solid'\n    }),\n    ...(variant === 'dashed' && {\n      border: '1px dashed'\n    }),\n    ...((variant === 'contained' || variant === 'shadow') &&\n      !loading && {\n        color: '#fff'\n      }),\n    ...(variant !== 'text' && {\n      ...getColorStyle({ variant, theme, color, loadingPosition })\n    }),\n\n    '&.Mui-disabled': {\n      ...(variant !== 'text' && {\n        ...getColorStyle({ variant, theme, color, loadingPosition })\n      })\n    }\n  })\n);\n\n// ==============================|| LOADING BUTTON - EXTENDED ||============================== //\n\nfunction LoadingButton({ variant = 'text', shape, children, color = 'primary', ...others }, ref) {\n  const theme = useTheme();\n\n  return (\n    <LoadingButtonStyle\n      ref={ref}\n      variant={variant}\n      shape={shape}\n      theme={theme}\n      loadingPosition={others.loadingPosition}\n      loading={others.loading}\n      color={color}\n      {...others}\n    >\n      {children}\n    </LoadingButtonStyle>\n  );\n}\n\nLoadingButton.displayName = 'LoadingButton';\n\nexport default forwardRef(LoadingButton);\n\ngetColorStyle.propTypes = { variant: PropTypes.any, theme: PropTypes.any, color: PropTypes.any, loadingPosition: PropTypes.any };\n\nLoadingButton.propTypes = {\n  variant: PropTypes.string,\n  shape: PropTypes.any,\n  children: PropTypes.node,\n  color: PropTypes.string,\n  others: PropTypes.any\n};\n","size_bytes":5580},"src/sections/widget/data/Transactions.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport List from '@mui/material/List';\nimport Tabs from '@mui/material/Tabs';\nimport Menu from '@mui/material/Menu';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport Typography from '@mui/material/Typography';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemButton from '@mui/material/ListItemButton';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\n\n// assets\nimport { ArrowDown, ArrowSwapHorizontal, ArrowUp } from 'iconsax-react';\n\n// ==============================|| TAB PANEL ||============================== //\n\nfunction TabPanel({ children, value, index, ...other }) {\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && <Box>{children}</Box>}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| DATA WIDGET - TYRANSACTIONS ||============================== //\n\nexport default function Transactions() {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ p: 3, pb: 1 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\n          <Typography variant=\"h5\">Transactions</Typography>\n          <IconButton\n            color=\"secondary\"\n            id=\"wallet-button\"\n            aria-controls={open ? 'wallet-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n            onClick={handleClick}\n          >\n            <MoreIcon />\n          </IconButton>\n          <Menu\n            id=\"wallet-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{ 'aria-labelledby': 'wallet-button', sx: { p: 1.25, minWidth: 150 } }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n          >\n            <ListItemButton onClick={handleClose}>Today</ListItemButton>\n            <ListItemButton onClick={handleClose}>Weekly</ListItemButton>\n            <ListItemButton onClick={handleClose}>Monthly</ListItemButton>\n          </Menu>\n        </Stack>\n      </Box>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" sx={{ px: 3 }}>\n            <Tab label=\"All Transaction\" {...a11yProps(0)} />\n            <Tab label=\"Success\" {...a11yProps(1)} />\n            <Tab label=\"Pending\" {...a11yProps(2)} />\n          </Tabs>\n        </Box>\n        <TabPanel value={value} index={0}>\n          <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">$210,000</Typography>\n                  <Typography color=\"error\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowDown style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  AI\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Apple Inc.</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00232\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 30.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  SM\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Spotify Music</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00233\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-26</Typography>\n                  <Typography color=\"warning.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowSwapHorizontal size={14} /> 5%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" sx={{ fontWeight: 600 }}>\n                  MD\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Medium</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    06:30 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  U\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Uber</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    08:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" color=\"warning\" sx={{ fontWeight: 600 }}>\n                  OC\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Ola Cabs</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    07:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n          </List>\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  U\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Uber</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    08:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" color=\"warning\" sx={{ fontWeight: 600 }}>\n                  OC\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Ola Cabs</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    07:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">$210,000</Typography>\n                  <Typography color=\"error\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowDown style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  AI\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Apple Inc.</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00232\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 30.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  SM\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Spotify Music</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00233\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-26</Typography>\n                  <Typography color=\"warning.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowSwapHorizontal size={14} /> 5%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" sx={{ fontWeight: 600 }}>\n                  MD\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Medium</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    06:30 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n          </List>\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n          <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 30.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  SM\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Spotify Music</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00233\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">-26</Typography>\n                  <Typography color=\"warning.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowSwapHorizontal size={14} /> 5%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" sx={{ fontWeight: 600 }}>\n                  MD\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Medium</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    06:30 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  U\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Uber</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    08:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">$210,000</Typography>\n                  <Typography color=\"error\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowDown style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar\n                  variant=\"rounded\"\n                  type=\"outlined\"\n                  color=\"secondary\"\n                  sx={{ color: 'secondary.darker', borderColor: 'secondary.light', fontWeight: 600 }}\n                >\n                  AI\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Apple Inc.</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    #ABLE-PRO-T00232\n                  </Typography>\n                }\n              />\n            </ListItem>\n            <ListItem\n              divider\n              secondaryAction={\n                <Stack spacing={0.25} alignItems=\"flex-end\">\n                  <Typography variant=\"subtitle1\">+2,10,000</Typography>\n                  <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                    <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                  </Typography>\n                </Stack>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar variant=\"rounded\" color=\"warning\" sx={{ fontWeight: 600 }}>\n                  OC\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={<Typography variant=\"subtitle1\">Ola Cabs</Typography>}\n                secondary={\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    07:40 pm\n                  </Typography>\n                }\n              />\n            </ListItem>\n          </List>\n        </TabPanel>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={1.25} sx={{ p: 3 }}>\n          <Button variant=\"outlined\" fullWidth color=\"secondary\">\n            Transaction History\n          </Button>\n          <Button variant=\"contained\" fullWidth>\n            Create new Transaction\n          </Button>\n        </Stack>\n      </Box>\n    </MainCard>\n  );\n}\n\nTabPanel.propTypes = { children: PropTypes.node, value: PropTypes.number, index: PropTypes.number, other: PropTypes.any };\n","size_bytes":21084},"src/sections/components-overview/notistack/Dense.jsx":{"content":"import { useState } from 'react';\n\n// material-ul\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\n\n// third party\nimport { enqueueSnackbar } from 'notistack';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport { handlerDense } from 'api/snackbar';\n\n// ==============================|| NOTISTACK - DENSE ||============================== //\n\nexport default function Dense() {\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n    handlerDense(event.target.checked);\n  };\n\n  const NotistackDenseCodeString = `<Checkbox checked={checked} onChange={handleChange} inputProps={{ 'aria-label': 'controlled' }} />\nDense margins\n<Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => enqueueSnackbar('Your notification here')}>\n  Show snackbar\n</Button>`;\n\n  return (\n    <MainCard title=\"Dense\" codeString={NotistackDenseCodeString}>\n      <Checkbox checked={checked} onChange={handleChange} inputProps={{ 'aria-label': 'controlled' }} />\n      Dense margins\n      <Button variant=\"outlined\" fullWidth sx={{ marginBlockStart: 2 }} onClick={() => enqueueSnackbar('Your notification here')}>\n        Show snackbar\n      </Button>\n    </MainCard>\n  );\n}\n","size_bytes":1304},"src/themes/overrides/CardContent.js":{"content":"// ==============================|| OVERRIDES - CARD CONTENT ||============================== //\n\nexport default function CardContent() {\n  return {\n    MuiCardContent: {\n      styleOverrides: {\n        root: {\n          padding: 24,\n          '&:last-child': {\n            paddingBottom: 24\n          }\n        }\n      }\n    }\n  };\n}\n","size_bytes":335},"src/sections/widget/chart/ProjectAnalytics.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport Tabs from '@mui/material/Tabs';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport Stack from '@mui/material/Stack';\nimport ListItem from '@mui/material/ListItem';\nimport MenuItem from '@mui/material/MenuItem';\nimport Typography from '@mui/material/Typography';\nimport FormControl from '@mui/material/FormControl';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Select from '@mui/material/Select';\n\n// third-party\nimport ReactApexChart from 'react-apexcharts';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport MoreIcon from 'components/@extended/MoreIcon';\nimport { ThemeMode } from 'config';\n\n// assets\nimport { ArrowDown, ArrowSwapHorizontal, ArrowUp, Bookmark, Chart, Edit, HomeTrendUp, Maximize4, ShoppingCart } from 'iconsax-react';\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\n\n// ==============================|| CHART ||============================== //\n\nfunction EcommerceDataChart({ data }) {\n  const theme = useTheme();\n  const mode = theme.palette.mode;\n\n  // chart options\n  const areaChartOptions = {\n    chart: {\n      type: 'bar',\n      toolbar: {\n        show: false\n      }\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '55%',\n        borderRadius: 4,\n        borderRadiusApplication: 'end'\n      }\n    },\n    legend: {\n      show: true,\n      position: 'top',\n      horizontalAlign: 'left'\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      show: true,\n      width: 3,\n      colors: ['transparent']\n    },\n    fill: {\n      opacity: [1, 0.5]\n    },\n    grid: {\n      strokeDashArray: 4\n    },\n    tooltip: {\n      y: {\n        formatter: (val) => '$ ' + val + ' thousands'\n      }\n    }\n  };\n\n  const { primary, secondary } = theme.palette.text;\n  const line = theme.palette.divider;\n\n  const [options, setOptions] = useState(areaChartOptions);\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      colors: [theme.palette.primary.main, theme.palette.primary.main],\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        labels: {\n          style: {\n            colors: [secondary, secondary, secondary, secondary, secondary, secondary, secondary]\n          }\n        },\n        axisBorder: {\n          show: false,\n          color: line\n        },\n        axisTicks: {\n          show: false\n        },\n        tickAmount: 11\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [secondary]\n          }\n        }\n      },\n      grid: {\n        borderColor: line\n      },\n      legend: {\n        labels: {\n          colors: 'secondary.main'\n        }\n      },\n      theme: {\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\n      }\n    }));\n  }, [mode, primary, secondary, line, theme]);\n\n  const [series, setSeries] = useState(data);\n\n  useEffect(() => {\n    setSeries(data);\n  }, [data]);\n\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={250} />;\n}\n\n// ==============================|| CHART WIDGET - PROJECT ANALYTICS ||============================== //\n\nexport default function ProjectAnalytics() {\n  const [value, setValue] = useState(0);\n  const [age, setAge] = useState('30');\n\n  const chartData = [\n    [\n      {\n        name: 'Net Profit',\n        data: [76, 85, 101, 98, 87, 105, 91]\n      },\n      {\n        name: 'Revenue',\n        data: [44, 55, 57, 56, 61, 58, 63]\n      }\n    ],\n    [\n      {\n        name: 'Net Profit',\n        data: [80, 101, 90, 65, 120, 105, 85]\n      },\n      {\n        name: 'Revenue',\n        data: [45, 30, 57, 45, 78, 48, 63]\n      }\n    ],\n    [\n      {\n        name: 'Net Profit',\n        data: [79, 85, 107, 95, 83, 115, 97]\n      },\n      {\n        name: 'Revenue',\n        data: [48, 56, 50, 54, 68, 53, 65]\n      }\n    ],\n    [\n      {\n        name: 'Net Profit',\n        data: [90, 111, 105, 55, 70, 65, 75]\n      },\n      {\n        name: 'Revenue',\n        data: [55, 80, 57, 45, 38, 48, 43]\n      }\n    ]\n  ];\n\n  const [data, setData] = useState(chartData[0]);\n\n  const handleChangeSelect = (event) => {\n    setAge(event.target.value);\n  };\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    setData(chartData[newValue]);\n  };\n\n  return (\n    <MainCard content={false}>\n      <Box sx={{ width: '100%' }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" sx={{ px: 3, pt: 1, '& .MuiTab-root': { mb: 0.5 } }}>\n            <Tab label=\"Overview\" {...a11yProps(0)} />\n            <Tab label=\"Marketing\" {...a11yProps(1)} />\n            <Tab label=\"Project\" {...a11yProps(2)} />\n            <Tab label=\"Order\" {...a11yProps(2)} />\n          </Tabs>\n        </Box>\n        <Box sx={{ p: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={8}>\n              <Stack spacing={2}>\n                <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" spacing={1}>\n                  <Box sx={{ minWidth: 120 }}>\n                    <FormControl fullWidth>\n                      <Select id=\"demo-simple-select\" value={age} onChange={handleChangeSelect}>\n                        <MenuItem value={10}>Today</MenuItem>\n                        <MenuItem value={20}>Weekly</MenuItem>\n                        <MenuItem value={30}>Monthly</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Box>\n                  <IconButton color=\"secondary\" variant=\"outlined\" sx={{ color: 'text.secondary' }}>\n                    <Edit />\n                  </IconButton>\n                  <IconButton color=\"secondary\" variant=\"outlined\" sx={{ color: 'text.secondary' }}>\n                    <Maximize4 />\n                  </IconButton>\n                  <IconButton color=\"secondary\" variant=\"outlined\" sx={{ transform: 'rotate(90deg)', color: 'text.secondary' }}>\n                    <MoreIcon />\n                  </IconButton>\n                </Stack>\n                <EcommerceDataChart data={data} />\n              </Stack>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <List disablePadding sx={{ '& .MuiListItem-root': { px: 3, py: 1.5 } }}>\n                <ListItem\n                  divider\n                  secondaryAction={\n                    <Stack spacing={0.25} alignItems=\"flex-end\">\n                      <Typography variant=\"subtitle1\">-245</Typography>\n                      <Typography color=\"error\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                        <ArrowDown style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                      </Typography>\n                    </Stack>\n                  }\n                >\n                  <ListItemAvatar>\n                    <Avatar variant=\"rounded\" color=\"secondary\" sx={{ color: 'text.secondary' }}>\n                      <Chart />\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={<Typography color=\"text.secondary\">Total Sales</Typography>}\n                    secondary={<Typography variant=\"subtitle1\">1,800</Typography>}\n                  />\n                </ListItem>\n                <ListItem\n                  divider\n                  secondaryAction={\n                    <Stack spacing={0.25} alignItems=\"flex-end\">\n                      <Typography variant=\"subtitle1\">+2,100</Typography>\n                      <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                        <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 30.6%\n                      </Typography>\n                    </Stack>\n                  }\n                >\n                  <ListItemAvatar>\n                    <Avatar variant=\"rounded\" color=\"secondary\" sx={{ color: 'text.secondary' }}>\n                      <HomeTrendUp />\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={<Typography color=\"text.secondary\">Revenue</Typography>}\n                    secondary={<Typography variant=\"subtitle1\">$5,667</Typography>}\n                  />\n                </ListItem>\n                <ListItem\n                  divider\n                  secondaryAction={\n                    <Stack spacing={0.25} alignItems=\"flex-end\">\n                      <Typography variant=\"subtitle1\">-26</Typography>\n                      <Typography color=\"warning.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                        <ArrowSwapHorizontal size={14} /> 5%\n                      </Typography>\n                    </Stack>\n                  }\n                >\n                  <ListItemAvatar>\n                    <Avatar variant=\"rounded\" color=\"secondary\" sx={{ color: 'text.secondary' }}>\n                      <ShoppingCart />\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={<Typography color=\"text.secondary\">Abandon Cart</Typography>}\n                    secondary={<Typography variant=\"subtitle1\">128</Typography>}\n                  />\n                </ListItem>\n                <ListItem\n                  secondaryAction={\n                    <Stack spacing={0.25} alignItems=\"flex-end\">\n                      <Typography variant=\"subtitle1\">+200</Typography>\n                      <Typography color=\"success.main\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                        <ArrowUp style={{ transform: 'rotate(45deg)' }} size={14} /> 10.6%\n                      </Typography>\n                    </Stack>\n                  }\n                >\n                  <ListItemAvatar>\n                    <Avatar variant=\"rounded\" color=\"secondary\" sx={{ color: 'text.secondary' }}>\n                      <Bookmark />\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={<Typography color=\"text.secondary\">Ads Spent</Typography>}\n                    secondary={<Typography variant=\"subtitle1\">$2,500</Typography>}\n                  />\n                </ListItem>\n              </List>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </MainCard>\n  );\n}\n\nEcommerceDataChart.propTypes = { data: PropTypes.array };\n","size_bytes":10953},"src/sections/widget/data/FeedsCard.jsx":{"content":"import { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\n\n// assets\nimport { DocumentText, ShoppingCart, Sms } from 'iconsax-react';\n\n// ==============================|| DATA WIDGET - FEEDS ||============================== //\n\nexport default function FeedsCard() {\n  return (\n    <MainCard\n      title=\"Feeds\"\n      content={false}\n      secondary={\n        <Link component={RouterLink} to=\"#\" color=\"primary\">\n          View all\n        </Link>\n      }\n    >\n      <CardContent>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar color=\"primary\" type=\"filled\" size=\"sm\">\n                    <Sms variant=\"Bold\" />\n                  </Avatar>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"body2\">You have 3 pending tasks.</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      just now\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar color=\"error\" type=\"filled\" size=\"sm\">\n                    <ShoppingCart variant=\"Bold\" />\n                  </Avatar>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"body2\">New order received</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      1 day ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar color=\"success\" type=\"filled\" size=\"sm\">\n                    <DocumentText variant=\"Bold\" />\n                  </Avatar>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"body2\">You have 3 pending tasks.</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      3 week ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar color=\"primary\" type=\"filled\" size=\"sm\">\n                    <Sms variant=\"Bold\" />\n                  </Avatar>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"body2\">New order received</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      around month\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"center\">\n              <Grid item>\n                <Box sx={{ position: 'relative' }}>\n                  <Avatar color=\"warning\" type=\"filled\" size=\"sm\">\n                    <ShoppingCart variant=\"Bold\" />\n                  </Avatar>\n                </Box>\n              </Grid>\n              <Grid item xs zeroMinWidth>\n                <Grid container spacing={1}>\n                  <Grid item xs zeroMinWidth>\n                    <Typography variant=\"body2\">Order cancelled</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"caption\" color=\"secondary\">\n                      2 month ago\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </MainCard>\n  );\n}\n","size_bytes":5415},"src/sections/apps/e-commerce/checkout/CartDiscount.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport FormHelperText from '@mui/material/FormHelperText';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport CouponCode from './CouponCode';\nimport { setCartDiscount, useGetCart } from 'api/cart';\nimport { openSnackbar } from 'api/snackbar';\n\nconst validationSchema = yup.object({\n  code: yup.string().oneOf(['ABLEPRO50', 'FLAT05', 'SUB150', 'UPTO200'], 'Coupon expired').required('Coupon code is required')\n});\n\n// ==============================|| CHECKOUT - CART DISCOUNT ||============================== //\n\nexport default function CartDiscount() {\n  const { cart } = useGetCart();\n\n  const [open, setOpen] = useState(false);\n  const [coupon, setCoupon] = useState('');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      code: coupon\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      setCartDiscount(values.code, cart.total);\n      openSnackbar({\n        open: true,\n        message: 'Coupon Add Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  });\n\n  return (\n    <Stack justifyContent=\"flex-end\" spacing={1}>\n      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ cursor: 'pointer' }} onClick={handleClickOpen}>\n        Have a Promo Code?\n      </Typography>\n      <form onSubmit={formik.handleSubmit}>\n        <Stack justifyContent=\"flex-end\" spacing={1}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" spacing={2}>\n            <TextField\n              id=\"code\"\n              name=\"code\"\n              fullWidth\n              placeholder=\"Enter promo code\"\n              value={formik.values.code}\n              onChange={formik.handleChange}\n              error={Boolean(formik.errors.code)}\n            />\n\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\" aria-label=\"directions\">\n              Apply\n            </Button>\n          </Stack>\n          {formik.errors.code && (\n            <FormHelperText error id=\"standard-code\">\n              {formik.errors.code}\n            </FormHelperText>\n          )}\n        </Stack>\n      </form>\n\n      <CouponCode open={open} handleClose={handleClose} setCoupon={setCoupon} />\n    </Stack>\n  );\n}\n","size_bytes":2595},"src/sections/auth/AuthWrapper2.jsx":{"content":"import PropTypes from 'prop-types';\n\n// material-ui\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport AuthCard from './AuthCard';\n\n// assets\nimport AuthSideImg from 'assets/images/auth/img-auth-sideimg.png';\n\n// ==============================|| AUTHENTICATION - WRAPPER ||============================== //\n\nexport default function AuthWrapper2({ children }) {\n  return (\n    <Box sx={{ minHeight: '100vh' }}>\n      <Grid\n        container\n        direction=\"column\"\n        justifyContent=\"center\"\n        sx={{\n          minHeight: '100vh',\n          bgcolor: 'background.paper'\n        }}\n      >\n        <Grid item xs={12}>\n          <Grid\n            item\n            xs={12}\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            sx={{ minHeight: { xs: 'calc(100vh - 210px)', sm: 'calc(100vh - 134px)', md: 'calc(100vh - 112px)' } }}\n          >\n            <Grid item md={7} sx={{ display: { xs: 'none', md: 'flex' }, alignSelf: 'center', justifyContent: 'flex-start' }}>\n              <img src={AuthSideImg} alt=\"Authimg\" style={{ height: '100vh', minHeight: '100%', width: '100%' }} />\n            </Grid>\n            <Grid item md={5} sx={{ display: 'flex', justifyContent: 'center' }}>\n              <AuthCard border={false}>{children}</AuthCard>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n\nAuthWrapper2.propTypes = { children: PropTypes.node };\n","size_bytes":1499},"src/sections/forms/validation/CheckboxForms.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Stack from '@mui/material/Stack';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport { openSnackbar } from 'api/snackbar';\n\nconst validationSchema = yup.object({\n  color: yup.array().min(1, 'At least one color is required')\n});\n\n// ==============================|| FORM VALIDATION - CHECKBOX  ||============================== //\n\nexport default function CheckboxForms() {\n  const formik = useFormik({\n    initialValues: { color: [] },\n    validationSchema,\n    onSubmit: () => {\n      openSnackbar({\n        open: true,\n        message: 'Checkbox - Submit Success',\n        variant: 'alert',\n        alert: { color: 'success' }\n      });\n    }\n  });\n\n  return (\n    <MainCard title=\"Checkbox\">\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item>\n            <Checkbox value=\"primary\" name=\"color\" color=\"primary\" onChange={formik.handleChange} />\n          </Grid>\n          <Grid item>\n            <Checkbox value=\"secondary\" name=\"color\" color=\"secondary\" onChange={formik.handleChange} />\n          </Grid>\n          <Grid item>\n            <Checkbox value=\"error\" name=\"color\" color=\"error\" onChange={formik.handleChange} />\n          </Grid>\n          <Grid item xs={12} sx={{ pt: '0 !important' }}>\n            {formik.errors.color && (\n              <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                {' '}\n                {formik.errors.color}{' '}\n              </FormHelperText>\n            )}\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" type=\"submit\">\n                  Submit\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </MainCard>\n  );\n}\n","size_bytes":2235},"src/pages/auth/auth2/register2.jsx":{"content":"import { Link } from 'react-router-dom';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\n\n// project-imports\nimport Logo from 'components/logo';\nimport useAuth from 'hooks/useAuth';\nimport AuthSocButton from 'sections/auth/AuthSocButton';\nimport AuthDivider from 'sections/auth/AuthDivider';\nimport AuthWrapper2 from 'sections/auth/AuthWrapper2';\nimport FirebaseRegister from 'sections/auth/auth-forms/AuthRegister';\n\n// assets\nimport imgFacebook from 'assets/images/auth/facebook.svg';\nimport imgTwitter from 'assets/images/auth/twitter.svg';\nimport imgGoogle from 'assets/images/auth/google.svg';\n\n// ================================|| REGISTER ||================================ //\n\nexport default function Register() {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <AuthWrapper2>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sx={{ textAlign: 'center' }}>\n          <Logo />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgFacebook} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Facebook\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgTwitter} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Twitter\n              </AuthSocButton>\n            </Grid>\n            <Grid item xs={12}>\n              <AuthSocButton>\n                <img src={imgGoogle} alt=\"Facebook\" style={{ margin: '0 10px' }} /> Sign In with Google\n              </AuthSocButton>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <AuthDivider>\n            <Typography variant=\"body1\">OR</Typography>\n          </AuthDivider>\n        </Grid>\n        <Grid item xs={12}>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"baseline\" sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant=\"h3\">Sign up</Typography>\n            <Typography\n              component={Link}\n              to={isLoggedIn ? '/auth/login2' : '/login2'}\n              variant=\"body1\"\n              sx={{ textDecoration: 'none' }}\n              color=\"primary\"\n            >\n              Already have an account?\n            </Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <FirebaseRegister />\n        </Grid>\n      </Grid>\n    </AuthWrapper2>\n  );\n}\n","size_bytes":2581},"src/api/invoice.js":{"content":"import useSWR, { mutate } from 'swr';\nimport { useMemo } from 'react';\n\n// project-import\nimport { fetcher } from 'utils/axios';\n\nconst countries = [\n  { code: 'US', label: 'United States Dollar', currency: 'Dollar', prefix: '$' },\n  { code: 'GB', label: 'United Kingdom Pound', currency: 'Pound', prefix: '£' },\n  { code: 'IN', label: 'India Rupee', currency: 'Rupee', prefix: '₹' },\n  { code: 'JP', label: 'Japan Yun', currency: 'Yun', prefix: '¥' }\n];\n\nconst initialState = {\n  isOpen: false,\n  isCustomerOpen: false,\n  open: false,\n  country: countries[2],\n  countries: countries,\n  alertPopup: false\n};\n\nexport const endpoints = {\n  key: 'api/invoice',\n  actions: 'actions',\n  list: '/list', // server URL\n  insert: '/insert', // server URL\n  update: '/update', // server URL\n  delete: '/delete' // server URL\n};\n\nexport function useGetInvoice() {\n  const { data, isLoading, error, isValidating } = useSWR(endpoints.key + endpoints.list, fetcher, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      invoice: data?.invoice,\n      invoiceLoading: isLoading,\n      invoiceError: error,\n      invoiceValidating: isValidating,\n      invoiceEmpty: !isLoading && !data?.invoice?.length\n    }),\n    [data, error, isLoading, isValidating]\n  );\n\n  return memoizedValue;\n}\n\nexport async function insertInvoice(newInvoice) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentInvoice) => {\n      newInvoice.id = currentInvoice.invoice.length + 1;\n      const addedInvoice = [...currentInvoice.invoice, newInvoice];\n\n      return {\n        ...currentInvoice,\n        invoice: addedInvoice\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { newInvoice };\n  //   await axios.post(endpoints.key + endpoints.insert, data);\n}\n\nexport async function updateInvoice(invoiceId, updatedInvoice) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentInvoice) => {\n      const newInvoice = currentInvoice.invoice.map((invoice) => (invoice.id === invoiceId ? { ...invoice, ...updatedInvoice } : invoice));\n\n      return {\n        ...currentInvoice,\n        invoice: newInvoice\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { list: updatedInvoice };\n  //   await axios.post(endpoints.key + endpoints.update, data);\n}\n\nexport async function deleteInvoice(invoiceId) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.list,\n    (currentInvoice) => {\n      const nonDeletedInvoice = currentInvoice.invoice.filter((invoice) => invoice.id !== invoiceId);\n\n      return {\n        ...currentInvoice,\n        invoice: nonDeletedInvoice\n      };\n    },\n    false\n  );\n\n  // to hit server\n  // you may need to refetch latest data after server hit and based on your logic\n  //   const data = { invoiceId };\n  //   await axios.post(endpoints.key + endpoints.delete, data);\n}\n\nexport function useGetInvoiceMaster() {\n  const { data, isLoading } = useSWR(endpoints.key + endpoints.actions, () => initialState, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const memoizedValue = useMemo(\n    () => ({\n      invoiceMaster: data,\n      invoiceMasterLoading: isLoading\n    }),\n    [data, isLoading]\n  );\n\n  return memoizedValue;\n}\n\nexport function handlerCustomerTo(isCustomerOpen) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.actions,\n    (currentInvoicemaster) => {\n      return { ...currentInvoicemaster, isCustomerOpen };\n    },\n    false\n  );\n}\n\nexport function handlerCustomerFrom(open) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.actions,\n    (currentInvoicemaster) => {\n      return { ...currentInvoicemaster, open };\n    },\n    false\n  );\n}\n\nexport function selectCountry(country) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.actions,\n    (currentInvoicemaster) => {\n      return { ...currentInvoicemaster, country };\n    },\n    false\n  );\n}\n\nexport function handlerPreview(isOpen) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.actions,\n    (currentInvoicemaster) => {\n      return { ...currentInvoicemaster, isOpen };\n    },\n    false\n  );\n}\n\nexport function handlerDelete(alertPopup) {\n  // to update local state based on key\n  mutate(\n    endpoints.key + endpoints.actions,\n    (currentInvoicemaster) => {\n      return { ...currentInvoicemaster, alertPopup };\n    },\n    false\n  );\n}\n","size_bytes":4803},"src/sections/components-overview/buttons/ToggleButtons/VerticalToggleButtons.jsx":{"content":"import { useState } from 'react';\n\n// material-ui\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\n// assets\nimport { Apple, Buildings2, TableDocument } from 'iconsax-react';\n\n// ==============================|| TOGGLE BUTTON - VERTICAL ||============================== //\n\nexport default function VerticalToggleButtons() {\n  const [view, setView] = useState('tree');\n\n  const handleChange = (event, nextView) => {\n    setView(nextView);\n  };\n\n  return (\n    <ToggleButtonGroup orientation=\"vertical\" value={view} exclusive onChange={handleChange}>\n      <ToggleButton value=\"tree\" aria-label=\"tree\">\n        <Buildings2 />\n      </ToggleButton>\n      <ToggleButton value=\"grid\" aria-label=\"grid\">\n        <Apple />\n      </ToggleButton>\n      <ToggleButton value=\"table\" aria-label=\"table\">\n        <TableDocument />\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n","size_bytes":944},"src/sections/forms/wizard/jobs-validation-wizard/TextForm.jsx":{"content":"import PropTypes from 'prop-types';\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport InputLabel from '@mui/material/InputLabel';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n\n// third-party\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\n// project-imports\nimport AnimateButton from 'components/@extended/AnimateButton';\n\nconst validationSchema = yup.object({\n  id: yup.string().required('Page ID is required'),\n  jobTitle: yup.string().required('Title of page is required'),\n  location: yup.string().required('Location is required'),\n  type: yup.string().required('Type of of job is required'),\n  metaDescription: yup.string().required('Meta description is required'),\n  metaKeywords: yup.string().required('Meta keywords is required'),\n  firstSectionHeading: yup.string().required('First section heading is required'),\n  firstSectionList: yup.string().required('First section list is required'),\n  secondSectionHeading: yup.string().required('Second section heading is required'),\n  secondSectionList: yup.string().required('Second section list is required'),\n  thirdSectionHeading: yup.string().required('Third section heading is required'),\n  thirdSectionList: yup.string().required('Third section list is required'),\n  fourthSectionHeading: yup.string().required('Fourth section heading is required'),\n  fourthSectionList: yup.string().required('Fourth section list is required'),\n  isInternship: yup.boolean().required('Internship status is required')\n});\n\n// ==============================|| VALIDATION WIZARD - TEXT  ||============================== //\n\nexport default function TextForm({ data, setData, handleNext, setErrorIndex }) {\n  const formik = useFormik({\n    initialValues: {\n      id: data.id ?? '',\n      jobTitle: data.jobTitle ?? '', // Match this with form field name\n      location: data.location ?? '',\n      type: data.type ?? '',\n      metaDescription: data.metaDescription ?? '',\n      metaKeywords: data.metaKeywords ?? '',\n      firstSectionHeading: data.firstSectionHeading ?? '',\n      firstSectionList: data.firstSectionList ? data.firstSectionList.join('\\n') : '',\n      secondSectionHeading: data.secondSectionHeading ?? '',\n      secondSectionList: data.secondSectionList ? data.secondSectionList.join('\\n') : '',\n      thirdSectionHeading: data.thirdSectionHeading ?? '',\n      thirdSectionList: data.thirdSectionList ? data.thirdSectionList.join('\\n') : '',\n      fourthSectionHeading: data.fourthSectionHeading ?? '',\n      fourthSectionList: data.fourthSectionList ? data.fourthSectionList.join('\\n') : '',\n      isInternship: data.isInternship ?? false // Default to false (not an internship)\n    },\n    enableReinitialize: true,\n    validationSchema,\n    onSubmit: (values) => {\n      setData({\n        ...data,\n        id: values.id,\n        jobTitle: values.jobTitle,\n        date: new Date().toISOString().split('T')[0],\n        location: values.location,\n        type: values.type,\n        metaDescription: values.metaDescription,\n        metaKeywords: values.metaKeywords,\n        firstSectionHeading: values.firstSectionHeading,\n        firstSectionList: values.firstSectionList.split('\\n'),\n        secondSectionHeading: values.secondSectionHeading,\n        secondSectionList: values.secondSectionList.split('\\n'),\n        thirdSectionHeading: values.thirdSectionHeading,\n        thirdSectionList: values.thirdSectionList.split('\\n'),\n        fourthSectionHeading: values.fourthSectionHeading,\n        fourthSectionList: values.fourthSectionList.split('\\n'),\n        isInternship: values.isInternship,\n        baseUrl: 'careers'\n      });\n      handleNext();\n    }\n  });\n\n  return (\n    <>\n      <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n        Text Information on page\n      </Typography>\n      <form onSubmit={formik.handleSubmit} id=\"validation-forms\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Page ID</InputLabel>\n              <TextField\n                id=\"id\"\n                name=\"id\"\n                placeholder=\"Page ID *\"\n                multiline\n                value={formik.values.id}\n                onChange={formik.handleChange}\n                error={formik.touched.id && Boolean(formik.errors.id)}\n                helperText={formik.touched.id && formik.errors.id}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Internship Status</InputLabel>\n              <RadioGroup\n                aria-label=\"internship-status\"\n                name=\"isInternship\"\n                value={formik.values.isInternship ? 'true' : 'false'}\n                onChange={(e) => formik.setFieldValue('isInternship', e.target.value === 'true')}\n              >\n                <FormControlLabel value=\"false\" control={<Radio />} label=\"Full-time Job\" />\n                <FormControlLabel value=\"true\" control={<Radio />} label=\"Internship\" />\n              </RadioGroup>\n              {formik.touched.isInternship && formik.errors.isInternship && (\n                <Typography variant=\"body2\" color=\"error\">\n                  {formik.errors.isInternship}\n                </Typography>\n              )}\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta description</InputLabel>\n              <TextField\n                id=\"metaDescription\"\n                name=\"metaDescription\"\n                placeholder=\"Meta description *\"\n                multiline\n                value={formik.values.metaDescription}\n                onChange={formik.handleChange}\n                error={formik.touched.metaDescription && Boolean(formik.errors.metaDescription)}\n                helperText={formik.touched.metaDescription && formik.errors.metaDescription}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Meta keywords</InputLabel>\n              <TextField\n                id=\"metaKeywords\"\n                name=\"metaKeywords\"\n                placeholder=\"Meta keywords *\"\n                multiline\n                value={formik.values.metaKeywords}\n                onChange={formik.handleChange}\n                error={formik.touched.metaKeywords && Boolean(formik.errors.metaKeywords)}\n                helperText={formik.touched.metaKeywords && formik.errors.metaKeywords}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job</InputLabel>\n              <TextField\n                id=\"jobTitle\"\n                name=\"jobTitle\"\n                placeholder=\"Job *\"\n                multiline\n                value={formik.values.jobTitle}\n                onChange={formik.handleChange}\n                error={formik.touched.jobTitle && Boolean(formik.errors.jobTitle)}\n                helperText={formik.touched.jobTitle && formik.errors.jobTitle}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Location</InputLabel>\n              <TextField\n                id=\"location\"\n                name=\"location\"\n                placeholder=\"Location *\"\n                multiline\n                value={formik.values.location}\n                onChange={formik.handleChange}\n                error={formik.touched.location && Boolean(formik.errors.location)}\n                helperText={formik.touched.location && formik.errors.location}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Job type</InputLabel>\n              <TextField\n                id=\"type\"\n                name=\"type\"\n                placeholder=\"Job type *\"\n                multiline\n                value={formik.values.type}\n                onChange={formik.handleChange}\n                error={formik.touched.type && Boolean(formik.errors.type)}\n                helperText={formik.touched.type && formik.errors.type}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First section heading</InputLabel>\n              <TextField\n                id=\"firstSectionHeading\"\n                name=\"firstSectionHeading\"\n                multiline\n                placeholder=\"First section heading *\"\n                value={formik.values.firstSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.firstSectionHeading && Boolean(formik.errors.firstSectionHeading)}\n                helperText={formik.touched.firstSectionHeading && formik.errors.firstSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>First section list</InputLabel>\n              <TextField\n                id=\"firstSectionList\"\n                name=\"firstSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"First section list (Insert by newline)*\"\n                value={formik.values.firstSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.firstSectionList && Boolean(formik.errors.firstSectionList)}\n                helperText={formik.touched.firstSectionList && formik.errors.firstSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second section heading</InputLabel>\n              <TextField\n                id=\"secondSectionHeading\"\n                name=\"secondSectionHeading\"\n                multiline\n                placeholder=\"Second section heading *\"\n                value={formik.values.secondSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.secondSectionHeading && Boolean(formik.errors.secondSectionHeading)}\n                helperText={formik.touched.secondSectionHeading && formik.errors.secondSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Second section list</InputLabel>\n              <TextField\n                id=\"secondSectionList\"\n                name=\"secondSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Second section list (Insert by newline)*\"\n                value={formik.values.secondSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.secondSectionList && Boolean(formik.errors.secondSectionList)}\n                helperText={formik.touched.secondSectionList && formik.errors.secondSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Third section heading</InputLabel>\n              <TextField\n                id=\"thirdSectionHeading\"\n                name=\"thirdSectionHeading\"\n                placeholder=\"Third section heading *\"\n                multiline\n                value={formik.values.thirdSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.thirdSectionHeading && Boolean(formik.errors.thirdSectionHeading)}\n                helperText={formik.touched.thirdSectionHeading && formik.errors.thirdSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Third section list</InputLabel>\n              <TextField\n                id=\"thirdSectionList\"\n                name=\"thirdSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Third section list (Insert by newline)*\"\n                value={formik.values.thirdSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.thirdSectionList && Boolean(formik.errors.thirdSectionList)}\n                helperText={formik.touched.thirdSectionList && formik.errors.thirdSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Fourth section heading</InputLabel>\n              <TextField\n                id=\"fourthSectionHeading\"\n                name=\"fourthSectionHeading\"\n                placeholder=\"Fourth section heading *\"\n                multiline\n                value={formik.values.fourthSectionHeading}\n                onChange={formik.handleChange}\n                error={formik.touched.fourthSectionHeading && Boolean(formik.errors.fourthSectionHeading)}\n                helperText={formik.touched.fourthSectionHeading && formik.errors.fourthSectionHeading}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack spacing={1}>\n              <InputLabel>Fourth section list</InputLabel>\n              <TextField\n                id=\"fourthSectionList\"\n                name=\"fourthSectionList\"\n                multiline\n                minRows={3}\n                placeholder=\"Fourth section list (Insert by newline)*\"\n                value={formik.values.fourthSectionList}\n                onChange={formik.handleChange}\n                error={formik.touched.fourthSectionList && Boolean(formik.errors.fourthSectionList)}\n                helperText={formik.touched.fourthSectionList && formik.errors.fourthSectionList}\n                fullWidth\n                autoComplete=\"off\"\n              />\n            </Stack>\n          </Grid>\n          <Grid item xs={12}>\n            <Stack direction=\"row\" justifyContent=\"flex-end\">\n              <AnimateButton>\n                <Button variant=\"contained\" sx={{ my: 3, ml: 1 }} type=\"submit\" onClick={() => setErrorIndex(0)}>\n                  Next\n                </Button>\n              </AnimateButton>\n            </Stack>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  );\n}\n\nTextForm.propTypes = {\n  data: PropTypes.any,\n  setData: PropTypes.func,\n  handleNext: PropTypes.func,\n  setErrorIndex: PropTypes.func\n};\n","size_bytes":15488},"src/sections/forms/validation/google-map-autocomplete/GoogleMap.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useMemo, useState, useRef, useEffect } from 'react';\n\n// material-ui\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\n// third-party\nimport { getGeocode } from 'use-places-autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\n\n// project-imports\nimport { Location } from 'iconsax-react';\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\n// ==============================|| GOOGLE MAP - AUTOCOMPLETE ||============================== //\n\nexport default function GoogleMaps({ formik, disabled }) {\n  const [value, setValue] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState([]);\n  const loaded = useRef(false);\n\n  if (typeof window !== 'undefined' && !loaded.current) {\n    if (!document.querySelector('#google-maps')) {\n      loadScript(\n        `https://maps.googleapis.com/maps/api/js?key=${import.meta.env.VITE_APP_GOOGLE_MAPS_API_KEY}&libraries=places`,\n        document.querySelector('head'),\n        'google-maps'\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions({ ...request, componentRestrictions: { country: 'uk' } }, callback);\n      }, 200),\n    []\n  );\n\n  useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === '') {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      fullWidth\n      autoHighlight\n      includeInputInList\n      filterSelectedOptions\n      disabled={disabled}\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n        let address1 = '';\n        getGeocode({ address: newValue?.description })\n          .then((results) => {\n            results[0].address_components.filter((locData) => {\n              if (locData.types[0] === 'route') {\n                if (locData.long_name !== undefined) address1 = address1 !== '' ? `${locData.long_name} ${address1}` : locData.long_name;\n              }\n\n              if (locData.types[0] === 'street_number') {\n                if (locData.long_name !== undefined) address1 = address1 !== '' ? `${address1} ${locData.long_name}` : locData.long_name;\n              }\n\n              if (locData.types[0] === 'locality' || locData.types[0] === 'postal_town') {\n                locData.long_name !== undefined && formik.setFieldValue('city', locData.long_name);\n                formik.setFieldTouched('city', false, false);\n              }\n\n              if (locData.types[0] === 'administrative_area_level_1') {\n                locData.long_name !== undefined && formik.setFieldValue('county', locData.long_name);\n                formik.setFieldTouched('county', false, false);\n              }\n\n              if (locData.types[0] === 'country') {\n                formik.setFieldValue('country', locData.long_name);\n                formik.setFieldTouched('country', false, false);\n              }\n              if (locData.types[0] === 'postal_code') {\n                locData.long_name !== undefined && formik.setFieldValue('postCode', locData.long_name);\n                formik.setFieldTouched('postCode', false, false);\n              }\n              return false;\n            });\n          })\n          .then(() => {\n            formik.setFieldValue('address1', address1);\n            formik.setFieldTouched('address1', false, false);\n          });\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => <TextField {...params} placeholder=\"Search your company address\" fullWidth />}\n      renderOption={(props, option) => {\n        const matches = option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box component={Location} sx={{ color: 'text.secondary', mr: 2 }} />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n\nGoogleMaps.propTypes = { formik: PropTypes.any, disabled: PropTypes.any };\n","size_bytes":6204},"src/components/third-party/react-table/RowEditable.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\n// material-ui\nimport Chip from '@mui/material/Chip';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Slider from '@mui/material/Slider';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\n\n// third-party\nimport * as yup from 'yup';\nimport { Formik, Form } from 'formik';\n\n// project-imports\nimport LinearWithLabel from 'components/@extended/progress/LinearWithLabel';\n\n// ==============================|| EDITABLE ROW ||============================== //\n\nexport default function RowEditable({ getValue: initialValue, row, column: { id, columnDef }, table }) {\n  const [value, setValue] = useState(initialValue);\n  const tableMeta = table.options.meta;\n\n  const onChange = (e) => {\n    setValue(e.target?.value);\n  };\n\n  const onBlur = () => {\n    tableMeta.updateData(row.index, id, value);\n  };\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  const ShowStatus = (value) => {\n    switch (value) {\n      case 'Complicated':\n        return <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />;\n      case 'Relationship':\n        return <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />;\n      case 'Single':\n      default:\n        return <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />;\n    }\n  };\n\n  let element;\n  let userInfoSchema;\n  switch (id) {\n    case 'email':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.string().email('Enter valid email ').required('Email is a required field')\n      });\n      break;\n    case 'age':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup\n          .number()\n          .typeError('Age must be number')\n          .required('Age is required')\n          .min(18, 'You must be at least 18 years')\n          .max(65, 'You must be at most 65 years')\n      });\n      break;\n    case 'visits':\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.number().typeError('Visits must be number').required('Required')\n      });\n      break;\n    default:\n      userInfoSchema = yup.object().shape({\n        userInfo: yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Name is Required')\n      });\n      break;\n  }\n\n  const isEditable = tableMeta?.selectedRow[row.id];\n\n  switch (columnDef.dataType) {\n    case 'text':\n      element = (\n        <>\n          {isEditable ? (\n            <>\n              <Formik\n                initialValues={{\n                  userInfo: value\n                }}\n                enableReinitialize\n                validationSchema={userInfoSchema}\n                onSubmit={() => {}}\n              >\n                {({ values, handleChange, handleBlur, errors, touched }) => (\n                  <Form>\n                    <TextField\n                      value={values.userInfo}\n                      id={`${row.index}-${id}`}\n                      name=\"userInfo\"\n                      onChange={(e) => {\n                        handleChange(e);\n                        onChange(e);\n                      }}\n                      onBlur={handleBlur}\n                      error={touched.userInfo && Boolean(errors.userInfo)}\n                      helperText={touched.userInfo && errors.userInfo && errors.userInfo}\n                      sx={{ '& .MuiOutlinedInput-input': { py: 0.75, px: 1 } }}\n                    />\n                  </Form>\n                )}\n              </Formik>\n            </>\n          ) : (\n            value\n          )}\n        </>\n      );\n      break;\n    case 'select':\n      element = (\n        <>\n          {isEditable ? (\n            <Select\n              labelId=\"editable-select-label\"\n              sx={{ '& .MuiOutlinedInput-input': { py: 0.75, px: 1 } }}\n              id=\"editable-select\"\n              value={value}\n              onChange={onChange}\n              onBlur={onBlur}\n            >\n              <MenuItem value=\"Complicated\">\n                <Chip color=\"error\" label=\"Complicated\" size=\"small\" variant=\"light\" />\n              </MenuItem>\n              <MenuItem value=\"Relationship\">\n                <Chip color=\"success\" label=\"Relationship\" size=\"small\" variant=\"light\" />\n              </MenuItem>\n              <MenuItem value=\"Single\">\n                <Chip color=\"info\" label=\"Single\" size=\"small\" variant=\"light\" />\n              </MenuItem>\n            </Select>\n          ) : (\n            ShowStatus(value)\n          )}\n        </>\n      );\n      break;\n    case 'progress':\n      element = (\n        <>\n          {isEditable ? (\n            <>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ pl: 1, minWidth: 120 }}>\n                <Slider\n                  value={value}\n                  min={0}\n                  max={100}\n                  step={1}\n                  onBlur={onBlur}\n                  onChange={(event, newValue) => {\n                    setValue(newValue);\n                  }}\n                  valueLabelDisplay=\"auto\"\n                  aria-labelledby=\"non-linear-slider\"\n                />\n              </Stack>\n            </>\n          ) : (\n            <div>\n              <LinearWithLabel value={value} sx={{ minWidth: 75 }} />\n            </div>\n          )}\n        </>\n      );\n      break;\n    default:\n      element = <span></span>;\n      break;\n  }\n\n  return element;\n}\n\nRowEditable.propTypes = { getValue: PropTypes.func, row: PropTypes.object, column: PropTypes.object, table: PropTypes.object };\n","size_bytes":5613},"src/sections/apps/e-commerce/checkout/CouponCode.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Alert from '@mui/material/Alert';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport CardContent from '@mui/material/CardContent';\n\n// third-party\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport Avatar from 'components/@extended/Avatar';\nimport IconButton from 'components/@extended/IconButton';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport Transitions, { PopupTransition } from 'components/@extended/Transitions';\n\n// assets\nimport { Award, CloseCircle, Gift } from 'iconsax-react';\nimport discount from 'assets/images/e-commerce/discount.png';\n\n// ==============================|| CHECKOUT - COUPON CODE ||============================== //\n\nexport default function CouponCode({ open, handleClose, setCoupon }) {\n  const [animate, setAnimate] = useState(false);\n\n  const setDiscount = (code) => {\n    setAnimate(true);\n    setCoupon(code);\n    setTimeout(() => {\n      setAnimate(false);\n    }, 2500);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      TransitionComponent={PopupTransition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      sx={{ '& .MuiDialog-paper': { p: 0 } }}\n    >\n      <MainCard\n        title=\"Festival gift for your\"\n        secondary={\n          <IconButton onClick={handleClose} size=\"large\">\n            <CloseCircle style={{ fontSize: 'small' }} />\n          </IconButton>\n        }\n      >\n        <Grid container spacing={3}>\n          {animate && (\n            <Grid item xs={12}>\n              <Transitions type=\"zoom\" in={animate} direction=\"down\">\n                <Alert variant=\"outlined\" severity=\"success\" sx={{ borderColor: 'success.dark', color: 'success.dark' }}>\n                  coupon copied\n                </Alert>\n              </Transitions>\n            </Grid>\n          )}\n          <Grid item xs={12} sm={6}>\n            <MainCard\n              content={false}\n              sx={{\n                backgroundImage: `url(${discount})`,\n                backgroundSize: 'contain',\n                backgroundPosition: 'right',\n                borderColor: 'secondary.200'\n              }}\n            >\n              <CardContent>\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                  <Grid item>\n                    <Typography variant=\"h4\">Up to 50% Off</Typography>\n                  </Grid>\n                  <Grid item>\n                    <AnimateButton>\n                      <CopyToClipboard text=\"ABLEPRO50\" onCopy={() => setDiscount('ABLEPRO50')}>\n                        <Button\n                          variant=\"outlined\"\n                          color=\"secondary\"\n                          size=\"small\"\n                          sx={{\n                            bgcolor: 'secondary.light',\n                            color: 'secondary.dark',\n                            border: '2px dashed',\n                            '&:hover': { border: '2px dashed', bgcolor: 'secondary.light' }\n                          }}\n                        >\n                          ABLEPRO50\n                        </Button>\n                      </CopyToClipboard>\n                    </AnimateButton>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <MainCard\n              content={false}\n              sx={{\n                backgroundImage: `url(${discount})`,\n                backgroundSize: 'contain',\n                backgroundPosition: 'right',\n                borderColor: 'error.light'\n              }}\n            >\n              <CardContent>\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={{ xs: 2, sm: 0 }}>\n                  <Grid item>\n                    <Typography variant=\"h4\">Festival Fires</Typography>\n                  </Grid>\n                  <Grid item>\n                    <AnimateButton>\n                      <CopyToClipboard text=\"FLAT05\" onCopy={() => setDiscount('FLAT05')}>\n                        <Button\n                          variant=\"outlined\"\n                          color=\"error\"\n                          size=\"small\"\n                          sx={{\n                            bgcolor: 'orange.light',\n                            color: 'error.main',\n                            border: '2px dashed',\n                            '&:hover': { border: '2px dashed', bgcolor: 'orange.light' }\n                          }}\n                        >\n                          FLAT05\n                        </Button>\n                      </CopyToClipboard>\n                    </AnimateButton>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </MainCard>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={3} alignItems=\"center\">\n              <Grid item xs={6} sm={2}>\n                <Avatar color=\"primary\" size=\"md\" variant=\"rounded\">\n                  <Gift />\n                </Avatar>\n              </Grid>\n              <Grid item xs={6} sm={2} sx={{ display: { xs: 'block', sm: 'none' } }}>\n                <AnimateButton>\n                  <CopyToClipboard text=\"SUB150\" onCopy={() => setDiscount('SUB150')}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      size=\"small\"\n                      sx={{\n                        bgcolor: 'primary.light',\n                        color: 'primary.dark',\n                        border: '2px dashed',\n                        '&:hover': { border: '2px dashed', bgcolor: 'primary.light' }\n                      }}\n                    >\n                      SUB150\n                    </Button>\n                  </CopyToClipboard>\n                </AnimateButton>\n              </Grid>\n              <Grid item xs={12} sm={8}>\n                <Stack spacing={0.25}>\n                  <Typography variant=\"subtitle1\">Get $150 off on your subscription</Typography>\n                  <Typography variant=\"caption\">When you subscribe to the unlimited consultation plan on able pro material.</Typography>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={2} sx={{ display: { xs: 'none', sm: 'block' } }}>\n                <AnimateButton>\n                  <CopyToClipboard text=\"SUB150\" onCopy={() => setDiscount('SUB150')}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      size=\"small\"\n                      sx={{\n                        bgcolor: 'primary.light',\n                        color: 'primary.dark',\n                        border: '2px dashed',\n                        '&:hover': { border: '2px dashed', bgcolor: 'primary.light' }\n                      }}\n                    >\n                      SUB150\n                    </Button>\n                  </CopyToClipboard>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={3} alignItems=\"center\">\n              <Grid item xs={6} sm={2}>\n                <Avatar color=\"warning\" size=\"md\" variant=\"rounded\">\n                  <Award />\n                </Avatar>\n              </Grid>\n              <Grid item xs={6} sm={2} sx={{ display: { xs: 'block', sm: 'none' } }}>\n                <AnimateButton>\n                  <CopyToClipboard text=\"UPTO200\" onCopy={() => setDiscount('UPTO200')}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"warning\"\n                      size=\"small\"\n                      sx={{\n                        bgcolor: 'warning.light',\n                        color: 'warning.dark',\n                        border: '2px dashed',\n                        '&:hover': { border: '2px dashed', bgcolor: 'warning.light' }\n                      }}\n                    >\n                      UPTO200\n                    </Button>\n                  </CopyToClipboard>\n                </AnimateButton>\n              </Grid>\n              <Grid item xs={12} sm={8}>\n                <Stack spacing={0.25}>\n                  <Typography variant=\"subtitle1\">Save up to $200</Typography>\n                  <Typography variant=\"caption\">Make 4 play store recharge code purchases & save up to $200</Typography>\n                </Stack>\n              </Grid>\n              <Grid item xs={12} sm={2} sx={{ display: { xs: 'none', sm: 'block' } }}>\n                <AnimateButton>\n                  <CopyToClipboard text=\"UPTO200\" onCopy={() => setDiscount('UPTO200')}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"warning\"\n                      size=\"small\"\n                      sx={{\n                        bgcolor: 'warning.light',\n                        color: 'warning.dark',\n                        border: '2px dashed',\n                        '&:hover': { border: '2px dashed', bgcolor: 'warning.light' }\n                      }}\n                    >\n                      UPTO200\n                    </Button>\n                  </CopyToClipboard>\n                </AnimateButton>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </MainCard>\n    </Dialog>\n  );\n}\n\nCouponCode.propTypes = { open: PropTypes.bool, handleClose: PropTypes.func, setCoupon: PropTypes.func };\n","size_bytes":10084},"src/sections/apps/e-commerce/products/ColorOptions.js":{"content":"// ==============================|| PRODUCT - COLOR FILTER ||============================== //\n\nconst ColorsOptions = [\n  {\n    label: 'Light Primary',\n    value: 'primary200',\n    bg: 'primary.200'\n  },\n  {\n    label: 'Dark Primary',\n    value: 'primaryDark',\n    bg: 'primary.dark'\n  },\n  {\n    label: 'Light Secondary',\n    value: 'secondary200',\n    bg: 'secondary.200'\n  },\n  {\n    label: 'Secondary',\n    value: 'secondaryMain',\n    bg: 'secondary.main'\n  },\n  {\n    label: 'Light Green',\n    value: 'successLight',\n    bg: 'success.light'\n  },\n  {\n    label: 'Green',\n    value: 'successMain',\n    bg: 'success.main'\n  },\n  {\n    label: 'Dark Green',\n    value: 'successDark',\n    bg: 'success.dark'\n  },\n  {\n    label: 'Light Red',\n    value: 'errorLight',\n    bg: 'error.light'\n  },\n  {\n    label: 'Red',\n    value: 'errorMain',\n    bg: 'error.main'\n  },\n  {\n    label: 'Dark Red',\n    value: 'errorDark',\n    bg: 'error.dark'\n  },\n  {\n    label: 'Yellow',\n    value: 'warningMain',\n    bg: 'warning.main'\n  },\n  {\n    label: 'Dark Yellow',\n    value: 'warningDark',\n    bg: 'warning.dark'\n  }\n];\n\nexport default ColorsOptions;\n","size_bytes":1137},"src/themes/theme/theme4.js":{"content":"// project-imports\nimport { ThemeMode } from 'config';\n\n// ==============================|| PRESET THEME - THEME4 ||============================== //\n\nexport default function Theme4(mode) {\n  const contrastText = '#fff';\n\n  let primaryColors = ['#f0f6ff', '#edf4ff', '#bed3f7', '#8faeeb', '#6488de', '#3c64d0', '#2947ab', '#192f85', '#0d1b5e', '#070e38'];\n  let secondaryColors = ['#F8F9FA', '#F8F9FA', '#F3F5F7', '#DBE0E5', '#BEC8D0', '#8996A4', '#5B6B79', '#3E4853', '#1D2630', '#131920'];\n  let errorColors = ['#FDE8E7', '#F25E52', '#F04134', '#EE3B2F', '#E92A21'];\n  let warningColors = ['#FFF7E0', '#FFC926', '#FFBF00', '#FFB900', '#FFA900'];\n  let infoColors = ['#E0F4F5', '#26B0BA', '#00A2AE', '#009AA7', '#008694'];\n  let successColors = ['#E0F5EA', '#26B56E', '#00A854', '#00A04D', '#008D3A'];\n\n  if (mode === ThemeMode.DARK) {\n    primaryColors = ['#1d212d', '#212841', '#273353', '#2c3e6e', '#324c92', '#385ab5', '#5d7dcb', '#89a7e1', '#b9cef0', '#e9f0fb'];\n    secondaryColors = ['#131920', '#1D2630', '#3E4853', '#5B6B79', '#8996A4', '#BEC8D0', '#DBE0E5', '#F3F5F7', '#F8F9FA', '#F8F9FA'];\n    errorColors = ['#321d1d', '#7d2e28', '#d13c31', '#e66859', '#f8baaf'];\n    warningColors = ['#342c1a', '#836611', '#dda705', '#e9bf28', '#f8e577'];\n    infoColors = ['#1a2628', '#11595f', '#058e98', '#1ea6aa', '#64cfcb'];\n    successColors = ['#1a2721', '#115c36', '#05934c', '#1da65d', '#61ca8b'];\n  }\n\n  return {\n    primary: {\n      lighter: primaryColors[0],\n      100: primaryColors[1],\n      200: primaryColors[2],\n      light: primaryColors[3],\n      400: primaryColors[4],\n      main: primaryColors[5],\n      dark: primaryColors[6],\n      700: primaryColors[7],\n      darker: primaryColors[8],\n      900: primaryColors[9],\n      contrastText\n    },\n    secondary: {\n      lighter: secondaryColors[0],\n      100: secondaryColors[1],\n      200: secondaryColors[2],\n      light: secondaryColors[3],\n      400: secondaryColors[4],\n      500: secondaryColors[5],\n      main: secondaryColors[6],\n      dark: secondaryColors[7],\n      800: secondaryColors[8],\n      darker: secondaryColors[9],\n      contrastText\n    },\n    error: {\n      lighter: errorColors[0],\n      light: errorColors[1],\n      main: errorColors[2],\n      dark: errorColors[3],\n      darker: errorColors[4],\n      contrastText\n    },\n    warning: {\n      lighter: warningColors[0],\n      light: warningColors[1],\n      main: warningColors[2],\n      dark: warningColors[3],\n      darker: warningColors[4],\n      contrastText: secondaryColors[5]\n    },\n    info: {\n      lighter: infoColors[0],\n      light: infoColors[1],\n      main: infoColors[2],\n      dark: infoColors[3],\n      darker: infoColors[4],\n      contrastText\n    },\n    success: {\n      lighter: successColors[0],\n      light: successColors[1],\n      main: successColors[2],\n      dark: successColors[3],\n      darker: successColors[4],\n      contrastText\n    }\n  };\n}\n","size_bytes":2912},"src/themes/overrides/Chip.js":{"content":"// project-imports\nimport getColors from 'utils/getColors';\n\n// ==============================|| CHIP - COLORS ||============================== //\n\nfunction getColor({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { dark } = colors;\n\n  return {\n    '&.Mui-focusVisible': {\n      outline: `2px solid ${dark}`,\n      outlineOffset: 2\n    }\n  };\n}\n\nfunction getColorStyle({ color, theme }) {\n  const colors = getColors(theme, color);\n  const { light, lighter, main, darker } = colors;\n\n  return {\n    color: darker,\n    backgroundColor: lighter + 80,\n    borderColor: light,\n    '& .MuiChip-deleteIcon': {\n      color: main,\n      '&:hover': {\n        color: light\n      }\n    }\n  };\n}\n\n// ==============================|| OVERRIDES - CHIP ||============================== //\n\nexport default function Chip(theme) {\n  const defaultLightChip = getColorStyle({ color: 'secondary', theme });\n  return {\n    MuiChip: {\n      styleOverrides: {\n        root: {\n          '& svg': {\n            width: 18,\n            height: 18\n          },\n          borderRadius: 12,\n          '&:active': {\n            boxShadow: 'none'\n          },\n          '&.MuiChip-colorPrimary': getColor({ color: 'primary', theme }),\n          '&.MuiChip-colorSecondary': getColor({ color: 'secondary', theme }),\n          '&.MuiChip-colorError': getColor({ color: 'error', theme }),\n          '&.MuiChip-colorInfo': getColor({ color: 'info', theme }),\n          '&.MuiChip-colorSuccess': getColor({ color: 'success', theme }),\n          '&.MuiChip-colorWarning': getColor({ color: 'warning', theme })\n        },\n        sizeLarge: {\n          fontSize: '1rem',\n          height: 40\n        },\n        light: {\n          ...defaultLightChip,\n          '&.MuiChip-lightPrimary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiChip-lightSecondary': getColorStyle({ color: 'secondary', theme }),\n          '&.MuiChip-lightError': getColorStyle({ color: 'error', theme }),\n          '&.MuiChip-lightInfo': getColorStyle({ color: 'info', theme }),\n          '&.MuiChip-lightSuccess': getColorStyle({ color: 'success', theme }),\n          '&.MuiChip-lightWarning': getColorStyle({ color: 'warning', theme })\n        },\n        combined: {\n          border: '1px solid',\n          ...defaultLightChip,\n          '&.MuiChip-combinedPrimary': getColorStyle({ color: 'primary', theme }),\n          '&.MuiChip-combinedSecondary': getColorStyle({ color: 'secondary', theme }),\n          '&.MuiChip-combinedError': getColorStyle({ color: 'error', theme }),\n          '&.MuiChip-combinedInfo': getColorStyle({ color: 'info', theme }),\n          '&.MuiChip-combinedSuccess': getColorStyle({ color: 'success', theme }),\n          '&.MuiChip-combinedWarning': getColorStyle({ color: 'warning', theme })\n        }\n      }\n    }\n  };\n}\n","size_bytes":2819},"replit.md":{"content":"# Admin Panel for iShunea\n\n## Overview\nThis is a React-based admin panel built with Vite, Material-UI (MUI), and various modern libraries. It provides a comprehensive admin dashboard with features for managing customers, invoices, forms, tables, and more.\n\n## Tech Stack\n- **Framework**: React 18.2.0\n- **Build Tool**: Vite 5.2.10  \n- **UI Library**: Material-UI (MUI) v5\n- **State Management**: React Context API\n- **Routing**: React Router v6\n- **Data Tables**: @tanstack/react-table\n- **Charts**: ApexCharts\n- **Forms**: Formik with Yup validation\n- **HTTP Client**: Axios\n\n## Project Structure\n- `src/` - Main source code\n  - `components/` - Reusable components\n  - `pages/` - Page components\n  - `sections/` - Section-specific components\n  - `layout/` - Layout components\n  - `themes/` - Theme configuration and overrides\n  - `utils/` - Utility functions\n  - `api/` - API integration\n  - `contexts/` - React contexts\n  - `routes/` - Route definitions\n\n## Recent Changes (Oct 17, 2025)\n\n### Latest Update: Blog URL Auto-Generation ✨\n- **Automatic Blog/* URL Structure**: All new blog articles automatically get URLs with \"Blog/\" prefix\n  - Created `url-helpers.js`: Slug generation with EN/RO/RU character support (ă→a, ș→s, Cyrillic→Latin)\n  - When user types English title → ID auto-generates as \"Blog/title-slug\"\n  - Example: \"How to Book a Table\" → \"Blog/how-to-book-a-table\"\n- **GooglePreview Enhanced**: Shows correct URL `easyreserv.com/Blog/article-slug` in SEO preview\n- **Form Improvements**:\n  - Page URL field is read-only for new articles (auto-generated), editable for existing\n  - Helper text explains auto-generation from English title\n  - Works in both Create and Edit forms\n\n### Previous Updates\n- Set up project in Replit environment\n- Configured Vite to run on port 5000 with host 0.0.0.0\n- Fixed import errors for EmptyReactTable component\n- Updated base URL to \"/\" for Replit compatibility\n- Configured deployment settings for autoscale\n- **Connected frontend to external backend**: https://easyreserv-website-b-2-b-backen.replit.app/\n- **Fixed Vite HMR for Replit**: Configured WebSocket to use wss protocol with REPLIT_DEV_DOMAIN\n- **Improved HMR compatibility**: Added conditional logic for Replit vs local development\n- **Authentication configured**: Backend JWT authentication working with /api/account/login and /api/account/me\n- **Simplified admin panel structure**: \n  - Removed Services, Team, Jobs, Works sections from menu\n  - Menu now shows only: Blog Management (create article + list) and Special Offer Form\n  - Created Special Offer Form with 1-hour countdown timer, validation, backend integration\n  - Form posts to `/api/forms/special-offer` and redirects to blog list on success\n- **Default route updated**: Changed APP_DEFAULT_PATH to `/tables/blogs` (blog list is new landing page)\n- **Multi-language Blog System (EN/RO/RU)** ✨:\n  - **Reusable Components Created**:\n    - `MultiLanguageTabs` - Language switcher (EN/RO/RU)\n    - `GooglePreview` - Real-time Google SERP preview for SEO\n    - `CharacterCounter` - Character counting with limits & progress bar\n  - **33-Field Blog Article Structure**:\n    - Global: id, publishingDate, label, titleImagePath, titleImageAltText (×3 languages)\n    - Per-language (EN/RO/RU): blogTitle, blogIntro, 3× subheading (title+text), conclusion, metaDescription (max 160), metaKeywords\n  - **Import/Export Workflow**:\n    - Download templates: Excel (.xlsx), JSON (.json), Markdown (.md)\n    - Import file → auto-populate all 33 fields instantly\n    - ArticleImporter + TemplateDownloader components\n    - Parsers: `blog-parsers.js`, `excel-template-generator.js`\n  - **Form Consistency**:\n    - Create form = Edit form (identical structure)\n    - Both use `enableReinitialize: true` for auto-populate\n    - Yup validation with max 160 chars for meta description\n  - **SEO Optimization**:\n    - Live Google SERP preview per language\n    - Character counter prevents exceeding limits\n    - Backward compatibility with legacy single-language fields\n\n## Environment Setup\nThe project uses environment variables defined in `.env` file:\n- `VITE_APP_BASE_NAME` - Base URL path (set to \"/\" for Replit)\n- `VITE_APP_API_URL` - Backend API endpoint (currently: https://easyreserv-website-b-2-b-backen.replit.app/)\n- Various API keys for Firebase, AWS, Auth0, Google Maps, etc.\n\n## Replit-Specific Configuration\n### Vite HMR (Hot Module Replacement)\nThe Vite config automatically detects Replit environment via `REPLIT_DEV_DOMAIN`:\n- **In Replit**: Uses secure WebSocket (wss) on port 443\n- **Local development**: Uses standard Vite HMR settings\n- This ensures live reload works correctly in both environments\n\n### External Backend Connection\nFrontend connects to deployed backend at:\n- URL: `https://easyreserv-website-b-2-b-backen.replit.app/`\n- All API calls are routed through this endpoint\n- CORS is enabled for cross-origin requests\n\n### Authentication\nBackend provides JWT-based authentication:\n- **Login Endpoint**: `POST /api/account/login` (email, password)\n- **User Profile**: `GET /api/account/me` (requires Bearer token)\n- **Response Format**: `{ serviceToken: \"JWT\", user: {...} }`\n- **Default Redirect**: After login → `/tables/works` (content management)\n\n**Test Credentials:**\n- Email: `admin@easyreserv.com`\n- Password: `Admin123!`\n\n## Running the Project\n- Development: `npm start` (runs on port 5000)\n- Build: `npm run build`\n- Preview: `npm run preview`\n\n## Deployment\nThe project is configured for autoscale deployment with:\n- Build command: `npm run build`\n- Run command: `npm run preview`\n","size_bytes":5606},"attached_assets/easy_reserv_b_2_b_docs_bundle_1760687253565.md":{"content":"# EasyReserv — Pachet .md (Backend, Admin Panel, Landing B2B, SEO)\n\nMai jos ai **fișierele .md** (într-un singur bundle). Copiază fiecare secțiune într-un fișier separat în repo.\n\n---\n\n## `/docs/backend.md`\n\n### Obiectiv\nBackend expune modele/endpoint‑uri pentru pagini multi‑lingvă, SEO, blocuri de conținut și redirects. Generează automat sitemap și robots.\n\n### Modele (DB)\n- **Page**\n  - `id: string` (slug + locale)\n  - `route: string` (ex. `/pricing`)\n  - `locale: enum(ro|ru|en)`\n  - `slug: string` (fără locale)\n  - `status: enum(draft|published)`\n  - `seo: Seo`\n  - `content: Content`\n  - `createdAt`, `updatedAt`, `publishedAt`, `version`\n- **Seo**\n  - `title: string (≤60)`\n  - `description: string (140–160)`\n  - `robots: enum(index,follow|noindex,nofollow)`\n  - `canonicalOverride?: string (URL absolut)`\n  - `og: { title?, description?, image? }`\n  - `twitter: { card: 'summary_large_image', title?, description?, image? }`\n  - `hreflang: { hrefLang: 'ro'|'ru'|'en'|'x-default', href: string }[]`\n  - `schema: { '@type': string, json: object }[]`\n- **Content**\n  - `blocks: Block[]` (vezi tipurile mai jos)\n- **Block (discriminated union)**\n  - `hero | socialProof | industriesPicker | featuresGrid | integrations | pricingSnippet | faq | ctaBanner`\n- **Redirect**\n  - `from: string`, `to: string`, `code: 301|302`, `date: ISO`\n\n### Endpoint‑uri\n- `GET /api/pages?route=/{locale}/path` → Page\n- `GET /api/pages/:id` → Page\n- `POST /api/pages` → create (validări SEO)\n- `PUT /api/pages/:id` → update (versioning + preview)\n- `GET /api/redirects` / `POST /api/redirects`\n- `GET /sitemap.xml` (runtime din `Page.status==='published'`)\n- `GET /robots.txt` (static din config)\n\n### Validări server\n- Title unic per (route, locale); ≤ 60 caractere\n- Description 140–160; non‑empty\n- CanonicalOverride: URL absolut, același domeniu\n- Hreflang: set complet ro/ru/en + x‑default pentru paginile cheie\n- OG/Twitter image: min 1200×630, < 512 KB\n- Schema JSON: parsabil și valid (minim câmpuri obligatorii pentru tip)\n- Redirect `from≠to`, `to` există/va exista\n\n### Generatoare\n- **Sitemap**: `changefreq=weekly`, `priority=0.8` (override din Page.seo)\n- **Robots**: Allow: `/`; Disallow: `/api/`, `/admin/`, `/draft/`\n\n### Observabilitate\n- audit trail (autor, data, diff)\n- preview tokens, expirați după 24h\n\n---\n\n## `/docs/admin-panel.md`\n\n### Obiectiv\nUI pentru editori: creare pagini per limbă, SEO tab cu validări live, blocuri de conținut cu preview.\n\n### Secțiuni UI\n1) **Lista pagini**\n   - Filtre: status, limbă, tip\n   - Căutare după route/title\n2) **Editor pagină** (tab‑uri)\n   - **Content**: gestionare `blocks` (drag&drop, add/remove)\n   - **SEO**: title/description/robots/canonical/OG/Twitter/hreflang/schema\n   - **Redirects** (pentru pagina curentă sau global)\n   - **Preview** (live, cu param `?preview=token`)\n\n### Tipuri de bloc (form schema)\n- `hero`: eyebrow, title, sub, ctaPrimary{label,href}, ctaSecondary{label,href}, image\n- `socialProof`: logos[], quote?, author?\n- `industriesPicker`: items[]{label, href}\n- `featuresGrid`: items[]{icon, title, text}\n- `integrations`: items[]{name, logo, href}\n- `pricingSnippet`: plans[]{name, price, currency, cta}\n- `faq`: items[]{q, a}\n- `ctaBanner`: title, sub, cta\n\n### Validări UI\n- Contor caractere pentru title/description\n- URL validator pentru canonical/CTA/hreflang\n- Imagine OG: dimensiune + raport 1200×630\n- Schema editor: JSON lint + preseturi `SoftwareApplication`, `Service`, `FAQPage`\n\n### Flux de lucru\n- Draft → Preview → Review (checklist) → Publish\n- Versionare automată; rollback din istorii\n\n### Checklist reviewer\n- Title/Desc ok, unice, fără trunchieri\n- Hreflang 1:1, canonical corect\n- OG/Twitter prezente\n- Min 3 interlink‑uri contextuale\n- CTA vizibil și funcțional\n\n---\n\n## `/docs/landing-b2b.md`\n\n### Scop\nHome/Landing B2B care poziționează EasyReserv ca platformă all‑in‑one și rutează vizitatorul către verticala potrivită.\n\n### Structură blocuri (ordine)\n1. **Hero** (headline + sub + CTA Trial/Demo + imagine)\n2. **Social Proof** (logo-uri clienți, citat scurt)\n3. **Industries Picker** (8 verticale principale)\n4. **Features Grid** (4–8 beneficii)\n5. **Integrations** (1C, plăți, imprimante, smartwatch etc.)\n6. **Pricing Snippet** (Basic €50, Standard €125, Pro €200 → /pricing)\n7. **FAQ** (5–7 întrebări BOFU)\n8. **CTA Banner** (Demo/Trial)\n\n### SEO pentru Landing\n- Title: „EasyReserv — Platformă all‑in‑one pentru rezervări, POS, operațiuni și analitică”\n- Description: „Automatizezi rezervările, POS, fluxurile operaționale și rapoartele. Integrezi plăți, contabilitate 1C, notificări și livrare — fără schimbare de hardware.”\n- Schema: `SoftwareApplication` + `FAQPage`\n- Hreflang: ro/ru/en + x‑default\n\n### Conținut minim (copy)\n- Headline: „Configurezi roluri, meniuri/servicii și pornești fluxurile în câteva ore”\n- Subheadline: „Automatizări care reduc timpii și cresc conversiile. Dashboarduri în timp real. Integrare contabilitate, plăți și notificări — fără schimbare de hardware.”\n- CTA: „Start Free Trial” / „Programează un demo”\n\n---\n\n## `/docs/seo-defaults.md`\n\n### Defaults (aplicate implicit dacă pagina nu are setări)\n- Title: generat din secțiune + brand (≤60)\n- Description fallback per secțiune (140–160)\n- Robots: `index,follow`\n- OG/Twitter: `summary_large_image`, imagine fallback `/og-default.jpg`\n- Canonical: absolut, format `{baseUrl}/{locale}/{slug}`\n- Hreflang: ro/ru/en + x‑default\n- Schema globală: `Organization`, `WebSite`, `BreadcrumbList`\n\n### Fișier TS recomandat\nFolosește `seo-defaults-easyreserv.ts` (helper pentru title, desc, canonical, hreflang, OG/Twitter, JSON‑LD, robots.txt, sitemap.xml).\n\n---\n\n## `/docs/content-model.md`\n\n### Tipuri de pagini\n- `home`, `pricing`, `industries`, `industry`, `feature`, `solutions`, `customers`, `case`, `blog`, `article`, `guides`, `calculators`, `help`, `about`, `contact`\n\n### Schema Page (rezumat)\n```ts\nPage {\n  id: string; route: string; locale: 'ro'|'ru'|'en'; slug: string;\n  status: 'draft'|'published'; seo: Seo; content: { blocks: Block[] }\n}\n```\n\n### Ancorare internă (interlinking)\n- Fiecare `industry` trebuie să lege către: `/pricing`, 2× `feature`, 1× `case`, 2× articole din blog din clusterul verticalei\n- `pricing` leagă către: `industries` + `contact`\n\n---\n\n## `/docs/routing-ia.md`\n\n### IA navigație\n- `/industries` → listă verticale\n- Verticale (slug EN, copy localizat):\n  - `/restaurants-pos-reservations`\n  - `/beauty-salon-barbershop`\n  - `/car-rental`\n  - `/sports-tennis-padel-football`\n  - `/car-wash`\n  - `/fitness-gyms`\n  - `/medical-clinics`\n  - `/retail`\n\n### Breadcrumbs\n`Acasă > Industrii > {Industrie}`\n\n### Redirecturi (exemple)\n- 301: vechiul `/restaurant` → `/restaurants-pos-reservations`\n\n---\n\n## `/docs/qa-checklist.md`\n\n### SEO & UX QA înainte de publish\n- [ ] Title unic (≤60), Description 140–160\n- [ ] Canonical corect; hreflang ro/ru/en + x‑default\n- [ ] OG/Twitter valide + imagine 1200×630 <512KB\n- [ ] Schema validă (`SoftwareApplication/Service/FAQPage` când e cazul)\n- [ ] 3–5 interlink‑uri contextuale/pagină + breadcrumbs\n- [ ] CTA vizibil, formular funcțional\n- [ ] CWV: LCP<2.5s, INP<200ms, CLS<0.1\n\n---\n\n## `/docs/examples/home.ro.md`\n\n### Meta\n- **Title**: EasyReserv — Platformă all‑in‑one pentru rezervări, POS, operațiuni și analitică\n- **Description**: Automatizezi rezervările, POS, fluxurile operaționale și rapoartele. Integrezi plăți, contabilitate 1C, notificări și livrare — fără schimbare de hardware.\n\n### Blocuri (JSON)\n```json\n{\n  \"blocks\": [\n    { \"type\": \"hero\", \"data\": { \"eyebrow\": \"All‑in‑one pentru rezervări, POS, operațiuni & analitică\", \"title\": \"Configurezi roluri, meniuri/servicii și pornești fluxurile în câteva ore\", \"sub\": \"Automatizări care reduc timpii și cresc conversiile. Dashboarduri în timp real. Integrare contabilitate, plăți și notificări — fără schimbare de hardware.\", \"ctaPrimary\": {\"label\":\"Start Free Trial\",\"href\":\"/ro/pricing\"}, \"ctaSecondary\": {\"label\":\"Programează un demo\",\"href\":\"/ro/contact\"}, \"image\": \"/hero-home.png\" } },\n    { \"type\": \"socialProof\", \"data\": { \"logos\": [\"/logos/pegas.svg\",\"/logos/steakhouse.svg\"], \"quote\": \"Am redus timpul de servire cu 22% în prima lună.\", \"author\": \"Manager restaurant\" } },\n    { \"type\": \"industriesPicker\", \"data\": { \"items\": [ {\"label\":\"Restaurante\",\"href\":\"/ro/restaurants-pos-reservations\"}, {\"label\":\"Saloane & Barbershop\",\"href\":\"/ro/beauty-salon-barbershop\"}, {\"label\":\"Chirie auto\",\"href\":\"/ro/car-rental\"}, {\"label\":\"Terenuri sportive\",\"href\":\"/ro/sports-tennis-padel-football\"} ] } },\n    { \"type\": \"featuresGrid\", \"data\": { \"items\": [ {\"icon\":\"kds\",\"title\":\"POS & KDS integrat\",\"text\":\"Comenzi sincronizate cu bucătăria și servirea.\"}, {\"icon\":\"bell\",\"title\":\"Notificări & SLA\",\"text\":\"Alerte pentru timpii de preparare și livrare.\"}, {\"icon\":\"chart\",\"title\":\"Analytics\",\"text\":\"Dashboarduri în timp real pe locație și perioadă.\"}, {\"icon\":\"link\",\"title\":\"Integrări\",\"text\":\"Plăți, 1C, imprimante, smartwatch.\"} ] } },\n    { \"type\": \"pricingSnippet\", \"data\": { \"plans\": [ {\"name\":\"Basic\",\"price\":50,\"currency\":\"EUR\",\"cta\":\"/ro/pricing\"}, {\"name\":\"Standard\",\"price\":125,\"currency\":\"EUR\",\"cta\":\"/ro/pricing\"}, {\"name\":\"Pro\",\"price\":200,\"currency\":\"EUR\",\"cta\":\"/ro/pricing\"} ] } },\n    { \"type\": \"faq\", \"data\": { \"items\": [ {\"q\":\"Cât durează onboarding-ul?\",\"a\":\"De regulă 1–3 zile în funcție de industrie și integrare.\"}, {\"q\":\"E compatibil cu hardware-ul meu?\",\"a\":\"Da, în majoritatea cazurilor nu e nevoie să schimbi echipamentul.\"} ] } },\n    { \"type\": \"ctaBanner\", \"data\": { \"title\":\"Pregătit să începi?\",\"sub\":\"Activează trialul sau programează un demo.\", \"cta\":\"/ro/pricing\" } }\n  ]\n}\n```\n\n---\n\n## `/docs/examples/pricing.ro.md`\n\n### Meta\n- **Title**: Prețuri & Planuri — EasyReserv\n- **Description**: Planuri pentru restaurante de la €50/lună. Trial gratuit inclus. Alege Standard sau Pro pentru funcții avansate și suport prioritar.\n\n### Conținut (secțiuni)\n- Planuri: Basic (€50), Standard (€125), Pro (€200), Enterprise (Contact)\n- Include: 2 utilizatori, Business Setup, Create Place, Reservations (toate planurile)\n- CTA: „Start Free Trial”\n- FAQ pricing (facturare, perioadă, upgrade/downgrade)\n\n---\n\n## `/docs/examples/industry.restaurants.ro.md`\n\n### Meta\n- **Title**: Restaurante: POS & Rezervări — EasyReserv\n- **Description**: Reduce timpii de servire, sincronizează bucătăria, gestionează rezervările și vezi rapoarte în timp real. Integrare 1C, plăți și notificări automate.\n\n### Secțiuni\n- Hero (beneficiu principal + CTA)\n- Probleme frecvente (latențe, erori comandă, no‑show)\n- Soluții EasyReserv (KDS, notificări, smartwatch, rezervări omnichannel)\n- ROI Calculator (micro‑widget) + studiu de caz scurt\n- Integrare 1C, plăți, hardware existent\n- CTA (Demo/Trial)\n\n","size_bytes":11077},"src/components/seo/GooglePreview.jsx":{"content":"import PropTypes from 'prop-types';\n\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Stack from '@mui/material/Stack';\n\nconst GooglePreview = ({ title = '', description = '', url = 'https://easyreserv.com' }) => {\n  const displayTitle = title || 'Your Page Title | EasyReserv';\n  const displayDescription = description || 'Add a meta description to see how it appears in Google search results...';\n  const displayUrl = url.replace(/^https?:\\/\\//, '');\n\n  return (\n    <Stack spacing={1} sx={{ \n      p: 2, \n      bgcolor: 'background.paper',\n      border: '1px solid',\n      borderColor: 'divider',\n      borderRadius: 1\n    }}>\n      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontWeight: 600, mb: 1 }}>\n        Google SERP Preview\n      </Typography>\n      \n      <Box>\n        <Typography \n          variant=\"h6\" \n          sx={{ \n            color: '#1a0dab',\n            fontSize: '20px',\n            lineHeight: 1.3,\n            mb: 0.5,\n            cursor: 'pointer',\n            '&:hover': { textDecoration: 'underline' }\n          }}\n        >\n          {displayTitle}\n        </Typography>\n        \n        <Typography \n          variant=\"caption\" \n          sx={{ \n            color: '#006621',\n            fontSize: '14px',\n            display: 'block',\n            mb: 0.5\n          }}\n        >\n          {displayUrl}\n        </Typography>\n        \n        <Typography \n          variant=\"body2\" \n          sx={{ \n            color: '#545454',\n            fontSize: '14px',\n            lineHeight: 1.57\n          }}\n        >\n          {displayDescription.length > 160 \n            ? `${displayDescription.substring(0, 157)}...` \n            : displayDescription}\n        </Typography>\n      </Box>\n    </Stack>\n  );\n};\n\nGooglePreview.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  url: PropTypes.string\n};\n\nexport default GooglePreview;\n","size_bytes":1944},"src/pages/forms/special-offer.jsx":{"content":"// material-ui\nimport Grid from '@mui/material/Grid';\n\n// project-imports\nimport SpecialOfferForm from 'sections/forms/special-offer/SpecialOfferForm';\n\n// ==============================|| SPECIAL OFFER FORM ||============================== //\n\nexport default function SpecialOfferPage() {\n  return (\n    <Grid container spacing={2.5} justifyContent=\"center\">\n      <Grid item xs={12} md={10} lg={8}>\n        <SpecialOfferForm />\n      </Grid>\n    </Grid>\n  );\n}\n","size_bytes":463},"src/utils/blog-parsers.js":{"content":"import * as XLSX from 'xlsx';\n\nexport const parseExcelBlog = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, { type: 'array' });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\n        \n        if (jsonData.length > 0) {\n          const article = jsonData[0];\n          resolve(article);\n        } else {\n          reject(new Error('Excel file is empty'));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsArrayBuffer(file);\n  });\n};\n\nexport const parseJSONBlog = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const jsonData = JSON.parse(e.target.result);\n        resolve(jsonData);\n      } catch (error) {\n        reject(new Error('Invalid JSON format'));\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsText(file);\n  });\n};\n\nexport const parseMarkdownBlog = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const markdown = e.target.result;\n        const article = {};\n        \n        const lines = markdown.split('\\n');\n        let currentField = null;\n        let currentValue = '';\n        \n        lines.forEach(line => {\n          const fieldMatch = line.match(/^##\\s+(.+)$/);\n          if (fieldMatch) {\n            if (currentField) {\n              article[currentField] = currentValue.trim();\n            }\n            currentField = fieldMatch[1].trim();\n            currentValue = '';\n          } else if (currentField && line.trim()) {\n            currentValue += line + '\\n';\n          }\n        });\n        \n        if (currentField) {\n          article[currentField] = currentValue.trim();\n        }\n        \n        resolve(article);\n      } catch (error) {\n        reject(new Error('Failed to parse Markdown'));\n      }\n    };\n    \n    reader.onerror = () => reject(new Error('Failed to read file'));\n    reader.readAsText(file);\n  });\n};\n","size_bytes":2433},"src/sections/forms/special-offer/SpecialOfferForm.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Alert from '@mui/material/Alert';\n\n// third-party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project-imports\nimport MainCard from 'components/MainCard';\nimport AnimateButton from 'components/@extended/AnimateButton';\nimport axios from 'utils/axios';\n\nexport default function SpecialOfferForm() {\n  const navigate = useNavigate();\n  const [timeLeft, setTimeLeft] = useState(3600);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft((prevTime) => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n  };\n\n  const handleSubmit = async (values, { setSubmitting, setErrors }) => {\n    try {\n      await axios.post('/api/forms/special-offer', values);\n      setSubmitSuccess(true);\n      setTimeout(() => {\n        navigate('/tables/blogs');\n      }, 2000);\n    } catch (error) {\n      setErrors({ submit: error.message || 'Failed to submit form' });\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <MainCard title=\"Special Offer - Limited Time\">\n      <Box sx={{ mb: 3, textAlign: 'center' }}>\n        <Typography variant=\"h2\" color=\"error\" sx={{ mb: 1 }}>\n          {formatTime(timeLeft)}\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Time remaining for this special offer\n        </Typography>\n      </Box>\n\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          phone: '',\n          company: '',\n          message: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          name: Yup.string().max(255).required('Name is required'),\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          phone: Yup.string().max(20).required('Phone is required'),\n          company: Yup.string().max(255),\n          message: Yup.string().max(500)\n        })}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              {submitSuccess && (\n                <Grid item xs={12}>\n                  <Alert severity=\"success\">\n                    Form submitted successfully! Redirecting to content...\n                  </Alert>\n                </Grid>\n              )}\n\n              {errors.submit && (\n                <Grid item xs={12}>\n                  <Alert severity=\"error\">{errors.submit}</Alert>\n                </Grid>\n              )}\n\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <Typography variant=\"subtitle1\">Name *</Typography>\n                  <TextField\n                    fullWidth\n                    id=\"name\"\n                    name=\"name\"\n                    placeholder=\"Enter your name\"\n                    value={values.name}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.name && errors.name)}\n                    helperText={touched.name && errors.name}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <Typography variant=\"subtitle1\">Email *</Typography>\n                  <TextField\n                    fullWidth\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <Typography variant=\"subtitle1\">Phone *</Typography>\n                  <TextField\n                    fullWidth\n                    id=\"phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter your phone number\"\n                    value={values.phone}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={Boolean(touched.phone && errors.phone)}\n                    helperText={touched.phone && errors.phone}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <Stack spacing={1}>\n                  <Typography variant=\"subtitle1\">Company</Typography>\n                  <TextField\n                    fullWidth\n                    id=\"company\"\n                    name=\"company\"\n                    placeholder=\"Enter your company name\"\n                    value={values.company}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack spacing={1}>\n                  <Typography variant=\"subtitle1\">Message</Typography>\n                  <TextField\n                    fullWidth\n                    id=\"message\"\n                    name=\"message\"\n                    multiline\n                    rows={4}\n                    placeholder=\"Enter your message or special requirements\"\n                    value={values.message}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                </Stack>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={2}>\n                  <AnimateButton>\n                    <Button\n                      variant=\"contained\"\n                      type=\"submit\"\n                      disabled={isSubmitting || timeLeft === 0}\n                      size=\"large\"\n                    >\n                      {timeLeft === 0 ? 'Offer Expired' : 'Submit Offer Request'}\n                    </Button>\n                  </AnimateButton>\n                </Stack>\n              </Grid>\n            </Grid>\n          </form>\n        )}\n      </Formik>\n    </MainCard>\n  );\n}\n","size_bytes":7155},"src/utils/excel-template-generator.js":{"content":"import * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\nexport const generateBlogTemplate = (format = 'excel') => {\n  const templateData = {\n    id: '',\n    publishingDate: '',\n    label: '',\n    titleImagePath: '',\n    titleImageAltTextEn: '',\n    titleImageAltTextRo: '',\n    titleImageAltTextRu: '',\n    blogTitleEn: '',\n    blogTitleRo: '',\n    blogTitleRu: '',\n    blogIntroEn: '',\n    blogIntroRo: '',\n    blogIntroRu: '',\n    firstSubheadingTitleEn: '',\n    firstSubheadingTitleRo: '',\n    firstSubheadingTitleRu: '',\n    firstSubheadingTextEn: '',\n    firstSubheadingTextRo: '',\n    firstSubheadingTextRu: '',\n    secondSubheadingTitleEn: '',\n    secondSubheadingTitleRo: '',\n    secondSubheadingTitleRu: '',\n    secondSubheadingTextEn: '',\n    secondSubheadingTextRo: '',\n    secondSubheadingTextRu: '',\n    thirdSubheadingTitleEn: '',\n    thirdSubheadingTitleRo: '',\n    thirdSubheadingTitleRu: '',\n    thirdSubheadingTextEn: '',\n    thirdSubheadingTextRo: '',\n    thirdSubheadingTextRu: '',\n    conclusionEn: '',\n    conclusionRo: '',\n    conclusionRu: '',\n    metaDescriptionEn: '',\n    metaDescriptionRo: '',\n    metaDescriptionRu: '',\n    metaKeywordsEn: '',\n    metaKeywordsRo: '',\n    metaKeywordsRu: ''\n  };\n  \n  if (format === 'excel') {\n    const worksheet = XLSX.utils.json_to_sheet([templateData]);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Blog Template');\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { \n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n    });\n    saveAs(blob, 'blog-article-template.xlsx');\n  } else if (format === 'json') {\n    const jsonStr = JSON.stringify(templateData, null, 2);\n    const blob = new Blob([jsonStr], { type: 'application/json' });\n    saveAs(blob, 'blog-article-template.json');\n  } else if (format === 'markdown') {\n    let markdown = '# Blog Article Template\\n\\n';\n    Object.keys(templateData).forEach(key => {\n      markdown += `## ${key}\\n\\n\\n`;\n    });\n    const blob = new Blob([markdown], { type: 'text/markdown' });\n    saveAs(blob, 'blog-article-template.md');\n  }\n};\n","size_bytes":2225},"src/components/blog/TemplateDownloader.jsx":{"content":"import { useState } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport TableViewIcon from '@mui/icons-material/TableView';\nimport CodeIcon from '@mui/icons-material/Code';\nimport DescriptionIcon from '@mui/icons-material/Description';\n\nimport { generateBlogTemplate } from 'utils/excel-template-generator';\n\nconst TemplateDownloader = () => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleDownload = (format) => {\n    generateBlogTemplate(format);\n    handleClose();\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        startIcon={<DownloadIcon />}\n        onClick={handleClick}\n        sx={{ mb: 2 }}\n      >\n        Download Template\n      </Button>\n      \n      <Menu\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={() => handleDownload('excel')}>\n          <ListItemIcon>\n            <TableViewIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Excel (.xlsx)</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => handleDownload('json')}>\n          <ListItemIcon>\n            <CodeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>JSON (.json)</ListItemText>\n        </MenuItem>\n        \n        <MenuItem onClick={() => handleDownload('markdown')}>\n          <ListItemIcon>\n            <DescriptionIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Markdown (.md)</ListItemText>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default TemplateDownloader;\n","size_bytes":2008},"src/components/seo/CharacterCounter.jsx":{"content":"import PropTypes from 'prop-types';\n\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst CharacterCounter = ({ current = 0, max = 160, label = 'Characters', showProgress = true }) => {\n  const percentage = (current / max) * 100;\n  const isOverLimit = current > max;\n  const isNearLimit = percentage >= 90 && !isOverLimit;\n\n  const getColor = () => {\n    if (isOverLimit) return 'error';\n    if (isNearLimit) return 'warning';\n    return 'primary';\n  };\n\n  return (\n    <Box sx={{ width: '100%', mt: 1 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 0.5 }}>\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {label}\n        </Typography>\n        <Typography \n          variant=\"caption\" \n          sx={{ \n            fontWeight: 600,\n            color: isOverLimit ? 'error.main' : isNearLimit ? 'warning.main' : 'text.secondary'\n          }}\n        >\n          {current} / {max}\n          {isOverLimit && ` (${current - max} over limit)`}\n        </Typography>\n      </Box>\n      \n      {showProgress && (\n        <LinearProgress \n          variant=\"determinate\" \n          value={Math.min(percentage, 100)} \n          color={getColor()}\n          sx={{ height: 4, borderRadius: 2 }}\n        />\n      )}\n    </Box>\n  );\n};\n\nCharacterCounter.propTypes = {\n  current: PropTypes.number,\n  max: PropTypes.number,\n  label: PropTypes.string,\n  showProgress: PropTypes.bool\n};\n\nexport default CharacterCounter;\n","size_bytes":1578},"src/components/forms/MultiLanguageTabs.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport Tabs from '@mui/material/Tabs';\n\nconst MultiLanguageTabs = ({ value, onChange, languages = ['EN', 'RO', 'RU'] }) => {\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n      <Tabs value={value} onChange={onChange} aria-label=\"language tabs\">\n        {languages.map((lang) => (\n          <Tab \n            key={lang} \n            label={lang} \n            value={lang.toLowerCase()}\n            sx={{ \n              fontWeight: 600,\n              minWidth: 80\n            }}\n          />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\nMultiLanguageTabs.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  languages: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default MultiLanguageTabs;\n","size_bytes":908},"src/components/blog/ArticleImporter.jsx":{"content":"import PropTypes from 'prop-types';\nimport { useRef, useState } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Alert from '@mui/material/Alert';\nimport UploadIcon from '@mui/icons-material/Upload';\n\nimport { parseExcelBlog, parseJSONBlog, parseMarkdownBlog } from 'utils/blog-parsers';\n\nconst ArticleImporter = ({ onImport }) => {\n  const fileInputRef = useRef(null);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  const handleFileSelect = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setError(null);\n    setSuccess(false);\n\n    try {\n      let articleData;\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n\n      if (fileExtension === 'xlsx' || fileExtension === 'xls') {\n        articleData = await parseExcelBlog(file);\n      } else if (fileExtension === 'json') {\n        articleData = await parseJSONBlog(file);\n      } else if (fileExtension === 'md') {\n        articleData = await parseMarkdownBlog(file);\n      } else {\n        throw new Error('Unsupported file format. Please use .xlsx, .json, or .md files.');\n      }\n\n      onImport(articleData);\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 3000);\n    } catch (err) {\n      setError(err.message);\n    }\n\n    event.target.value = '';\n  };\n\n  return (\n    <Box sx={{ mb: 3 }}>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".xlsx,.xls,.json,.md\"\n        style={{ display: 'none' }}\n        onChange={handleFileSelect}\n      />\n      \n      <Button\n        variant=\"outlined\"\n        startIcon={<UploadIcon />}\n        onClick={() => fileInputRef.current?.click()}\n        sx={{ mb: 2 }}\n      >\n        Import from File\n      </Button>\n\n      {error && (\n        <Alert severity=\"error\" onClose={() => setError(null)} sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" onClose={() => setSuccess(false)} sx={{ mb: 2 }}>\n          Article data imported successfully! All fields have been populated.\n        </Alert>\n      )}\n\n      <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n        Supported formats: Excel (.xlsx), JSON (.json), Markdown (.md)\n      </Typography>\n    </Box>\n  );\n};\n\nArticleImporter.propTypes = {\n  onImport: PropTypes.func.isRequired\n};\n\nexport default ArticleImporter;\n","size_bytes":2507},"src/utils/url-helpers.js":{"content":"/**\n * Generate a URL-friendly slug from a title\n * @param {string} title - The title to convert to a slug\n * @returns {string} URL-friendly slug\n */\nexport const generateSlug = (title) => {\n  if (!title) return '';\n  \n  return title\n    .toLowerCase()\n    .trim()\n    // Replace Romanian special characters\n    .replace(/ă/g, 'a')\n    .replace(/â/g, 'a')\n    .replace(/î/g, 'i')\n    .replace(/ș/g, 's')\n    .replace(/ț/g, 't')\n    // Replace Russian Cyrillic characters with Latin equivalents\n    .replace(/а/g, 'a')\n    .replace(/б/g, 'b')\n    .replace(/в/g, 'v')\n    .replace(/г/g, 'g')\n    .replace(/д/g, 'd')\n    .replace(/е/g, 'e')\n    .replace(/ё/g, 'yo')\n    .replace(/ж/g, 'zh')\n    .replace(/з/g, 'z')\n    .replace(/и/g, 'i')\n    .replace(/й/g, 'y')\n    .replace(/к/g, 'k')\n    .replace(/л/g, 'l')\n    .replace(/м/g, 'm')\n    .replace(/н/g, 'n')\n    .replace(/о/g, 'o')\n    .replace(/п/g, 'p')\n    .replace(/р/g, 'r')\n    .replace(/с/g, 's')\n    .replace(/т/g, 't')\n    .replace(/у/g, 'u')\n    .replace(/ф/g, 'f')\n    .replace(/х/g, 'h')\n    .replace(/ц/g, 'ts')\n    .replace(/ч/g, 'ch')\n    .replace(/ш/g, 'sh')\n    .replace(/щ/g, 'shch')\n    .replace(/ъ/g, '')\n    .replace(/ы/g, 'y')\n    .replace(/ь/g, '')\n    .replace(/э/g, 'e')\n    .replace(/ю/g, 'yu')\n    .replace(/я/g, 'ya')\n    // Remove all non-alphanumeric characters except spaces and hyphens\n    .replace(/[^a-z0-9\\s-]/g, '')\n    // Replace spaces with hyphens\n    .replace(/\\s+/g, '-')\n    // Replace multiple hyphens with single hyphen\n    .replace(/-+/g, '-')\n    // Remove leading/trailing hyphens\n    .replace(/^-+|-+$/g, '');\n};\n\n/**\n * Generate a blog URL with Blog/ prefix\n * @param {string} title - The title to convert to a blog URL\n * @returns {string} Blog URL with Blog/ prefix\n */\nexport const generateBlogUrl = (title) => {\n  const slug = generateSlug(title);\n  return slug ? `Blog/${slug}` : '';\n};\n\n/**\n * Extract the slug from a blog URL (removes Blog/ prefix)\n * @param {string} url - The blog URL\n * @returns {string} Just the slug without Blog/ prefix\n */\nexport const extractSlugFromBlogUrl = (url) => {\n  if (!url) return '';\n  return url.replace(/^Blog\\//i, '');\n};\n","size_bytes":2202}},"version":2}